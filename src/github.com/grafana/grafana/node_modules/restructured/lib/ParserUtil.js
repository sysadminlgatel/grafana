'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PunctuationOpeners = '"\'(<\\[{༺༼᚛⁅⁽₍〈❨' + '❪❬❮❰❲❴⟅⟦⟨⟪' + '⟬⟮⦃⦅⦇⦉⦋⦍⦏⦑' + '⦓⦕⦗⧘⧚⧼⸢⸤⸦⸨' + '〈《「『【〔〖〘〚〝' + '〝﴾︗︵︷︹︻︽︿﹁' + '﹃﹇﹙﹛﹝（［｛｟｢' + '«‘“‹⸂⸄⸉⸌⸜⸠' + '‚„»’”›⸃⸅⸊⸍' + '⸝⸡‛‟';

var PunctuationClosers = '"\')>\\]}༻༽᚜⁆⁾₎〉❩' + '❫❭❯❱❳❵⟆⟧⟩⟫' + '⟭⟯⦄⦆⦈⦊⦌⦎⦐⦒' + '⦔⦖⦘⧙⧛⧽⸣⸥⸧⸩' + '〉》」』】〕〗〙〛〞' + '〟﴿︘︶︸︺︼︾﹀﹂' + '﹄﹈﹚﹜﹞）］｝｠｣' + '»’”›⸃⸅⸊⸍⸝⸡' + '‛‟«‘“‹⸂⸄⸉⸌' + '⸜⸠‚„';

var PunctuationOpenerToCloser = {};
var PunctuationCloserToOpener = {};

for (var i = 0; i < PunctuationOpeners.length; i++) {
  var opener = PunctuationOpeners[i];
  var closer = PunctuationClosers[i];
  PunctuationOpenerToCloser[opener] = closer;
  PunctuationOpenerToCloser[closer] = opener;
}

var PunctuationDelimiters = '\\-/:֊¡·¿;·՚-՟։' + '־׀׃׆׳״؉؊،' + '؍؛؞؟٪-٭۔܀-܍' + '߷-߹࠰-࠾।॥॰෴๏' + '๚๛༄-༒྅࿐-࿔၊-၏' + '჻፡-፨᐀᙭᙮᛫-᛭᜵' + '᜶។-៖៘-៚᠀-᠊᥄᥅' + '᧞᧟᨞᨟᪠-᪦᪨-᪭᭚-' + '᭠᰻-᰿᱾᱿᳓‐-‗†-' + '‧‰-‸※-‾⁁-⁃⁇-' + '⁑⁓⁕-⁞⳹-⳼⳾⳿⸀' + '⸁⸆-⸈⸋⸎-⸛⸞⸟⸪-' + '⸮⸰⸱、-〃〜〰〽゠' + '・꓾꓿꘍-꘏꙳꙾꛲-꛷' + '꡴-꡷꣎꣏꣸-꣺꤮꤯꥟' + '꧁-꧍꧞꧟꩜-꩟꫞꫟꯫' + '︐-︖︙︰-︲﹅﹆﹉-﹌' + '﹐-﹒﹔-﹘﹟-﹡﹣﹨﹪' + '﹫！-＃％-＇＊，-／：' + '；？＠＼｡､･';

var PunctuationDelimiterSet = {};
for (var _i = 0; _i < PunctuationOpeners.length; _i++) {
  PunctuationDelimiterSet[PunctuationDelimiters[_i]] = true;
}

var PunctuationClosingDelimiters = '\\\\.,;!?';

var PunctuationQuotePairs = {
  '\xbb': '\xbb',
  '‘': '‚',
  '’': '’',
  '‚': '‘’',
  '“': '„',
  '„': '“”',
  '”': '”',
  '›': '›'
};

var PunctuationStartStringPrefix = new RegExp('\\s|[' + PunctuationOpeners + PunctuationDelimiters + ']');

var PunctuationEndStringSuffix = new RegExp('\\s|[' + PunctuationClosingDelimiters + ('' + PunctuationDelimiters + PunctuationClosers + ']'));

var ParserUtil = {
  calcIndentSize: function calcIndentSize(str) {
    var tabStop = 8;
    return _lodash2.default.reduce(str, function (total, c) {
      if (c === '\t') {
        return total + tabStop - (total + tabStop) % tabStop;
      }
      return total + 1;
    }, 0);
  },
  isPunctuationOpener: function isPunctuationOpener(c) {
    return c in PunctuationOpenerToCloser;
  },
  isPunctuationCloser: function isPunctuationCloser(c) {
    return c in PunctuationCloserToOpener;
  },
  isPunctuationDelimiter: function isPunctuationDelimiter(c) {
    return c in PunctuationDelimiterSet;
  },
  isMatchPunctuations: function isMatchPunctuations(c1, c2) {
    return PunctuationOpenerToCloser[c1] === c2 || c1 in PunctuationQuotePairs && PunctuationQuotePairs[c1].indexOf(c2) !== -1;
  },
  isInlineMarkupPrefix: function isInlineMarkupPrefix(c) {
    return PunctuationStartStringPrefix.test(c);
  },
  isInlineMarkupSuffix: function isInlineMarkupSuffix(c) {
    return PunctuationEndStringSuffix.test(c);
  },
  isUpperRomanNumber: function isUpperRomanNumber(s) {
    return (/^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/.test(s)
    );
  },
  isLowerRomanNumber: function isLowerRomanNumber(s) {
    return (/^m{0,3}(cm|cd|d?c{0,3})(xc|xl|l?x{0,3})(ix|iv|v?i{0,3})$/.test(s)
    );
  },
  romanToNumber: function romanToNumber(s) {
    var values = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
    var result = 0;
    var str = s;

    for (var _i2 = 0; _i2 < values.length; _i2++) {
      var _values$_i = _slicedToArray(values[_i2], 2);

      var key = _values$_i[0];
      var value = _values$_i[1];

      var regex = new RegExp('^' + key);
      while (str.match(regex)) {
        result += value;
        str = str.replace(regex, '');
      }
    }
    return result;
  },
  numberToRoman: function numberToRoman(d) {
    var values = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
    var rest = d;
    var result = '';
    for (var _i3 = 0; _i3 < values.length; _i3++) {
      var _values$_i2 = _slicedToArray(values[_i3], 2);

      var key = _values$_i2[0];
      var value = _values$_i2[1];

      while (rest >= value) {
        result += key;
        rest -= value;
      }
    }
    return result;
  }
};

exports.default = ParserUtil;
//# sourceMappingURL=data:application/json;base64,