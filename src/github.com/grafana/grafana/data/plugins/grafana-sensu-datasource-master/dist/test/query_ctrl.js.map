{"version":3,"sources":["../../src/query_ctrl.js"],"names":["SensuDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","scope","sourceTypes","text","value","dimensionTypes","events","results_json","results_table","aggregates","clienthistory","aggregateModes","target","aggregateMode","sourceType","dimensions","dimension","splice","indexOf","panelCtrl","refresh","dimensionsForSourceType","defaultDimensionType","push","name","dimensionType","datasource","dimensionFindValues","then","transformToSegments","metricFindQuery","onChangeInternal","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class SensuDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n    // source types for the popdown\n    this.sourceTypes = [\n      {\n        text: 'Aggregates',\n        value: 'aggregates',\n      },\n      {\n        text: 'Check Subscriptions',\n        value: 'check_subscriptions',\n      },\n      {\n        text: 'Clients',\n        value: 'clients_json',\n      },\n      {\n        text: 'Client History',\n        value: 'clienthistory',\n      },\n      {\n        text: 'Events',\n        value: 'events',\n      },\n      {\n        text: 'Results as JSON',\n        value: 'results_json',\n      },\n      {\n        text: 'Results as Table',\n        value: 'results_table',\n      },\n      {\n        text: 'Sensu Health',\n        value: 'sensu_health_json',\n      },\n      {\n        text: 'Silenced Entries',\n        value: 'silenced_entries_json',\n      },\n      {\n        text: 'Stashes',\n        value: 'stashes_json',\n      }\n    ];\n\n    // Each source type have different dimensions\n    this.dimensionTypes = {\n      events: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      results_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      results_table: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      aggregates: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      clienthistory: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n    };\n\n    this.aggregateModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Clients',\n        value: 'clients'\n      },\n      {\n        text: 'Checks',\n        value: 'checks'\n      },\n    ];\n\n    this.target.aggregateMode = this.target.aggregateMode || 'list';\n    // default source type is events\n    this.target.sourceType = this.target.sourceType || 'events';\n    // no dimensions initially\n    this.target.dimensions = this.target.dimensions || [];\n  }\n\n  /**\n   * [removeDimension description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeDimension(dimension) {\n    if (this.target.dimensions) {\n      this.target.dimensions.splice(this.target.dimensions.indexOf(dimension), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addDimension description]\n   */\n  addDimension() {\n    if (!this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    var dimensionsForSourceType = this.dimensionTypes[this.target.sourceType];\n    var defaultDimensionType = dimensionsForSourceType[0].value;\n    this.target.dimensions.push({\n      name: null,\n      value: null,\n      dimensionType: defaultDimensionType\n    });\n  }\n\n  /**\n   * [getDimensionValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getDimensionValues(dimension) {\n    if (dimension) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.dimensionFindValues(this.target, dimension)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [getOptions description]\n   * @return {[type]} [description]\n   */\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(true));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  /**\n   * [sourceTypeChanged description]\n   * @return {[type]} [description]\n   */\n  sourceTypeChanged() {\n    // reset dimensions\n    if (this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    this.onChangeInternal();\n  }\n\n  /**\n   * [aggregateModeChanged description]\n   * @return {[type]} [description]\n   */\n  aggregateModeChanged() {\n    //console.log(\"Aggregate Mode is now \" + this.target.aggregateMode);\n    this.onChangeInternal();\n  }\n\n  /**\n   * [onChangeInternal description]\n   * @return {[type]} [description]\n   */\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n}\n\nSensuDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}