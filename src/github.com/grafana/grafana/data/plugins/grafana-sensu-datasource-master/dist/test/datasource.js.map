{"version":3,"sources":["../../src/datasource.js"],"names":["SensuDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","basicAuth","withCredentials","q","options","datasourceRequest","data","method","headers","then","mapToClientNameAndVersion","result","map","d","i","text","value","version","dimensions","clients","length","dimensionType","aClientName","push","checks","aCheck","aggregates","anAggregate","target","uris","dimensionURI","clientNames","getClientNames","checkNames","getCheckNames","aggregateNames","getAggregateNames","aCheckName","anAggregateName","sourceType","j","aggregateMode","aTarget","response","convertEventsToDataPoints","convertResultsToJSON","convertResultsToTable","convertAggregatesToDataPoints","convertClientHistoryToDataPoints","console","log","undefined","singleData","anEvent","datapoints","startingTimestamp","timestamp","check","history","last_execution","y","issued","status","rowData","rowInfo","aRow","client","executed","output","thresholds","warning","critical","columns","rows","message","newData","checkType","convertEventDataToAggregateList","convertEventDataToAggregateClient","convertEventDataToAggregateChecks","Math","floor","Date","now","dataSet","clientName","checkData","checkName","clientData","item","results","ok","stale","total","unknown","dimension","mapToTextValue","queries","_this","singleTarget","targets","forEach","hide","fullQuery","join","interval","interval_to_ms","minimumInterval","secondsToHms","deferred","defer","singleDataQuery","resolve","error","Error","reject","promise","allQueries","all","first","multipleDataQueries","uriType","params","httpOptions","anError","parseQueryResult","pendingQueries","dataCalls","uriList","getQueryURIByType","errors","updates","update","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class SensuDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Required for templating\n  // gets the clients from Sensu API\n  // https://sensuapp.org/docs/0.26/api/clients-api.html\n\n  /**\n   * [metricFindQuery description]\n   * @param  {[type]} options [description]\n   * @return {[type]}         [description]\n   */\n  metricFindQuery(options) {\n    //console.log(\"metricFindQuery entered\");\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/clients',\n      data: options,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": this.basicAuth\n      }\n    }).then(this.mapToClientNameAndVersion);\n  }\n\n  /**\n   * [mapToClientNameAndVersion description]\n   * @param  {[type]} result [description]\n   * @return {[type]}        [description]\n   */\n  mapToClientNameAndVersion(result) {\n    return _.map(result.data, (d, i) => {\n      return {\n        text: d.name,\n        value: d.version\n      };\n    });\n  }\n\n  /**\n   * [getClientNames description]\n   * @param  {[type]} dimensions [description]\n   * @return {[type]}            [description]\n   */\n  getClientNames(dimensions) {\n    var clients = [];\n    for (var i = 0; i < dimensions.length; i++) {\n      if (dimensions[i].dimensionType === 'clientName') {\n        var aClientName = dimensions[i].value;\n        clients.push(aClientName);\n      }\n    }\n    return clients;\n  }\n\n  /**\n   * [getCheckNames description]\n   * @param  {[type]} dimensions [description]\n   * @return {[type]}            [description]\n   */\n  getCheckNames(dimensions) {\n    var checks = [];\n    for (var i = 0; i < dimensions.length; i++) {\n      if (dimensions[i].dimensionType === 'checkName') {\n        var aCheck = dimensions[i].value;\n        checks.push(aCheck);\n      }\n    }\n    return checks;\n  }\n\n  /**\n   * [getAggregateNames description]\n   * @param  {[type]} dimensions [description]\n   * @return {[type]}            [description]\n   */\n  getAggregateNames(dimensions) {\n    var aggregates = [];\n    for (var i = 0; i < dimensions.length; i++) {\n      if (dimensions[i].dimensionType === 'aggregateName') {\n        var anAggregate = dimensions[i].value;\n        aggregates.push(anAggregate);\n      }\n    }\n    return aggregates;\n  }\n\n  /**\n   * [getQueryURIByType description]\n   * @param  {[type]} target [description]\n   * @return {[type]}        [Array of URIs]\n   */\n  getQueryURIByType(target) {\n    var uris = [];\n    var dimensionURI = '/events';\n    var clientNames = this.getClientNames(target.dimensions);\n    var checkNames = this.getCheckNames(target.dimensions);\n    var aggregateNames = this.getAggregateNames(target.dimensions);\n\n    var aClientName = null;\n    var aCheckName = null;\n    var anAggregateName = null;\n    switch (target.sourceType) {\n      case 'events':\n        // https://sensuapp.org/docs/0.26/api/events-api.html\n        dimensionURI = '/events';\n        aClientName = null;\n        aCheckName = null;\n        if (clientNames.length) {\n          for (let i = 0; i < clientNames.length; i++) {\n            aClientName = clientNames[i];\n            dimensionURI = '/events/' + aClientName;\n            uris.push(dimensionURI);\n          }\n        }\n        if ((checkNames.length) && (clientNames.length)) {\n          for (let i = 0; i < clientNames.length; i++) {\n            aClientName = clientNames[i];\n            for (let j = 0; j < checkNames.length; j++) {\n              aCheckName = checkNames[i];\n              dimensionURI = '/events/' + aClientName + '/' + aCheckName;\n              uris.push(dimensionURI);\n            }\n          }\n        }\n        if (uris.length === 0) {\n          uris.push(dimensionURI);\n        }\n        break;\n      case 'results_json':\n      case 'results_table':\n        // https://sensuapp.org/docs/0.26/api/results-api.html\n        dimensionURI = '/results';\n        if (clientNames.length) {\n          for (let i = 0; i < clientNames.length; i++) {\n            aClientName = clientNames[i];\n            dimensionURI = '/results/' + aClientName;\n            uris.push(dimensionURI);\n          }\n        }\n        if ((checkNames.length) && (clientNames.length)) {\n          for (let i = 0; i < clientNames.length; i++) {\n            aClientName = clientNames[i];\n            for (let j = 0; j < checkNames.length; j++) {\n              aCheckName = checkNames[i];\n              dimensionURI = '/results/' + aClientName + '/' + aCheckName;\n              uris.push(dimensionURI);\n            }\n          }\n        }\n        if (uris.length === 0) {\n          uris.push(dimensionURI);\n        }\n        break;\n      case 'aggregates':\n        // https://sensuapp.org/docs/0.26/api/aggregates-api.html\n        dimensionURI = '/aggregates';\n        // name, name/clients, name/checks, name/results/severity\n        if (aggregateNames.length) {\n          for (let i = 0; i < aggregateNames.length; i++) {\n            anAggregateName = aggregateNames[i];\n            dimensionURI = '/aggregates/' + anAggregateName;\n            switch(target.aggregateMode) {\n              case 'clients':\n                dimensionURI = '/aggregates/' + anAggregateName + '/clients';\n                break;\n              case 'checks':\n                dimensionURI = '/aggregates/' + anAggregateName + '/checks';\n                break;\n              case 'list':\n                dimensionURI = '/aggregates/' + anAggregateName;\n                break;\n            }\n            uris.push(dimensionURI);\n          }\n        }\n        if (uris.length === 0) {\n          uris.push(dimensionURI);\n        }\n        break;\n      case 'clienthistory':\n        // look for clientName in dimensions\n        dimensionURI = '/clients';\n        if (clientNames.length) {\n          for (let i = 0; i < clientNames.length; i++) {\n            aClientName = clientNames[i];\n            dimensionURI = '/clients/' + aClientName + '/history';\n            uris.push(dimensionURI);\n          }\n        }\n        if (uris.length === 0) {\n          uris.push(dimensionURI);\n        }\n        break;\n    }\n\n    return uris;\n  }\n\n  /**\n   * [parseQueryResult description]\n   * @param  {[type]} aTarget  [description]\n   * @param  {[type]} response [description]\n   * @return {[type]}          [description]\n   */\n  parseQueryResult(aTarget,response) {\n    var result = [];\n    if (!response || !response.data) {\n      return result;\n    }\n    switch (aTarget.sourceType) {\n      case 'events':\n        result = this.convertEventsToDataPoints(response);\n        break;\n      case 'results_json':\n        result = this.convertResultsToJSON(response);\n        break;\n      case 'results_table':\n        result = this.convertResultsToTable(response);\n        break;\n      case 'aggregates':\n        result = this.convertAggregatesToDataPoints(response);\n        break;\n      case 'clienthistory':\n        result = this.convertClientHistoryToDataPoints(response);\n        break;\n      default:\n        console.log(\"Unknown source type\");\n        break;\n    }\n    return result;\n  }\n\n  /**\n   * [convertEventsToDataPoints description]\n   * @param  {[type]} response [description]\n   * @return {[type]}        [description]\n   */\n  convertEventsToDataPoints(response) {\n    // convert history to datapoints\n\n    // the result has no \"datapoints\", need to create it based on the check data\n\n    // when we have a checkname and an clientName, the response is different, the\n    // data is not an array, but contains the same information, recreate and push\n    if (response.data.length === undefined) {\n      var singleData = response.data;\n      response.data = [];\n      response.data.push(singleData);\n    }\n    for (var i = 0; i < response.data.length; i++) {\n      var anEvent = response.data[i];\n      var datapoints = [];\n      var startingTimestamp = 0;\n      // an event with client param has a timestamp at the toplevel\n      if (anEvent.timestamp !== undefined) {\n        startingTimestamp = anEvent.timestamp - (60 * anEvent.check.history.length);\n      }\n      if (anEvent.last_execution !== undefined) {\n        startingTimestamp = anEvent.last_execution - (60 * anEvent.history.length);\n      }\n      // time needs to be in MS, we get EPOCH from Sensu\n      for (var y = 0; y < anEvent.check.history.length; y++) {\n        datapoints[y] = [anEvent.check.history[y], (startingTimestamp + (60 * y)) * 1000];\n      }\n      anEvent.datapoints = datapoints;\n      // set the target to be the check name\n      if (anEvent.check.name !== undefined) {\n        anEvent.target = anEvent.check.name;\n      } else {\n        anEvent.target = anEvent.check;\n      }\n    }\n    return response;\n  }\n\n  /**\n   * [convertResultsToDataPoints description]\n   * @param  {[type]} response [description]\n   * @return {[type]}        [description]\n   */\n  convertResultsToDataPoints(response) {\n    // the result has no \"datapoints\", need to create it based on the check data\n    // when we have a checkname and an clientName, the response is different, the\n    // data is not an array, but contains the same information, recreate and push\n    if (response.data.length === undefined) {\n      var singleData = response.data;\n      response.data = [];\n      response.data.push(singleData);\n    }\n    for (var i = 0; i < response.data.length; i++) {\n      var anEvent = response.data[i];\n      //var str = JSON.stringify(anEvent, null, 2);\n      //console.log(str);\n      var datapoints = [];\n      if (anEvent.check.issued !== undefined) {\n        datapoints[0] = [anEvent.check.status, (anEvent.check.issued * 1000)];\n        // the duration is here...\n        // datapoints[0] = [anEvent.check.duration, (anEvent.check.issued * 1000)];\n      }\n      anEvent.datapoints = datapoints;\n      // set the target to be the check name\n      if (anEvent.check.name !== undefined) {\n        anEvent.target = anEvent.check.name;\n      } else {\n        anEvent.target = anEvent.check;\n      }\n    }\n    return response;\n  }\n\n  convertResultsToTable(response) {\n    // the result has no \"datapoints\", need to create it based on the check data\n    // when we have a checkname and a clientName, the response is different, the\n    // data is not an array, but contains the same information, recreate and push\n    if (response.data.length === undefined) {\n      var singleData = response.data;\n      response.data = [];\n      response.data.push(singleData);\n    }\n    // this will be collapsed into table format, where the columns are predefined\n    // and each row is a response formatted to the columns\n    var rowData = [];\n    for (var i = 0; i < response.data.length; i++) {\n      var rowInfo = response.data[i];\n      var aRow = [\n        rowInfo.check.issued * 1000,\n        rowInfo.client,\n        rowInfo.check.name,\n        rowInfo.check.status,\n        rowInfo.check.issued * 1000,\n        rowInfo.check.executed * 1000,\n        rowInfo.check.output,\n        rowInfo.check.type,\n        rowInfo.check.thresholds.warning,\n        rowInfo.check.thresholds.critical\n      ];\n      // now push into rowData\n      rowData.push(aRow);\n    }\n    // collapse everything into data[0]\n    var anEvent = response.data[0];\n    var datapoints = [];\n    datapoints[0] = [anEvent.check.status, (anEvent.check.issued * 1000)];\n    anEvent.datapoints = datapoints;\n    anEvent.type = \"table\";\n    anEvent.columns = [\n      { text: 'Time', type: 'date'},\n      { text: 'client' },\n      { text: 'check.name' },\n      { text: 'check.status' },\n      { text: 'check.issued', type: 'date' },\n      { text: 'check.executed', type: 'date' },\n      { text: 'check.output' },\n      { text: 'check.type' },\n      { text: 'check.thresholds.warning' },\n      { text: 'check.thresholds.critical' }\n    ];\n    anEvent.rows = rowData;\n    // truncate the rest\n    response.data = [anEvent];\n    //var str = JSON.stringify(response, null, 2);\n    //console.log(str);\n    return response;\n  }\n\n  /*\nResponse come back as:\n{\n  \"client\": \"p3-graphite-t1\",\n  \"check\": {\n    \"thresholds\": {\n      \"warning\": 120,\n      \"critical\": 180\n    },\n    \"name\": \"keepalive\",\n    \"issued\": 1482067284,\n    \"executed\": 1482067284,\n    \"output\": \"Keepalive sent from client 3 seconds ago\",\n    \"status\": 0,\n    \"type\": \"standard\"\n  }\n}\n   */\n  convertResultsToJSON(response) {\n    for (var i = 0; i < response.data.length; i++) {\n      var anEvent = response.data[i];\n      var datapoints = [];\n      if (anEvent.check.issued !== undefined) {\n        var data = {\n          timestamp: (anEvent.check.issued * 1000),\n          message: anEvent.check.name,\n          client: anEvent.client,\n          check: {\n            name: anEvent.check.name,\n            issued: (anEvent.check.issued * 1000),\n            executed: (anEvent.check.executed * 1000),\n            output: anEvent.check.output,\n            status: anEvent.check.status,\n            type: anEvent.check.type\n          }\n        }\n        datapoints.push(data);\n        anEvent.datapoints = datapoints;\n        delete anEvent.check;\n        delete anEvent.client;\n        anEvent.type = 'docs';\n      }\n    }\n    //var str = JSON.stringify(response, null, 2);\n    //console.log(str);\n    return response;\n  }\n\n  /**\n   * [convertAggregatesToDataPoints description]\n   * @param  {[type]} response [description]\n   * @return {[type]}        [description]\n   */\n  convertAggregatesToDataPoints(response) {\n    // convert history to datapoints\n\n    // the result has no \"datapoints\", need to create it based on the check data\n\n    // when we have a checkname and an clientName, the response is different, the\n    // data is not an array, but contains the same information, recreate and push\n    if (response.data.length === undefined) {\n      var singleData = response.data;\n      response.data = [];\n      response.data.push(singleData);\n    }\n    // storage for new data series constructed by aggregate responses\n    var newData = null;\n    for (var i = 0; i < response.data.length; i++) {\n      var anEvent = response.data[i];\n      if (anEvent.checks !== undefined) {\n        // create a new block of datapoints for each aggregate result json entry\n        //\n        var checkType = typeof(anEvent.checks);\n        switch (checkType) {\n          case 'number':\n            // checks is a number, this is an aggregate list response\n            newData = this.convertEventDataToAggregateList(anEvent, newData);\n            break;\n          case 'object':\n            // check is an object, which is an aggregate clients response\n            newData = this.convertEventDataToAggregateClient(anEvent, newData);\n            break;\n        }\n        continue;\n      }\n      if (anEvent.clients !== undefined) {\n        newData = this.convertEventDataToAggregateChecks(anEvent, newData);\n        continue;\n      }\n\n      // this is a simple aggregate response (no mode)\n      var datapoints = [];\n      // timestamp is the query now (just use now)\n      var timestamp = Math.floor( Date.now() );\n      datapoints[0] = [0, timestamp];\n      anEvent.datapoints = datapoints;\n      // set the target to be the name of the aggregate\n      anEvent.target = anEvent.name;\n    }\n    if (newData !== null) {\n      // overwrite the old data field with the new expanded set\n      response.data = newData;\n    }\n    return response;\n  }\n\n  // An aggregate checks result has the format\n  // {\n  //    clients: [\n  //      clientName\n  //    ],\n  //    name: checkName\n  // }\n  convertEventDataToAggregateChecks(anEvent, dataSet) {\n    var timestamp = Math.floor( Date.now() );\n    if (dataSet === null) {\n      // initialize empty array\n      dataSet = [];\n    }\n    // iterate over the checks\n    for (var i = 0; i < anEvent.clients.length; i++) {\n      var clientName = anEvent.clients[i];\n      var checkData = {\n        target: anEvent.name,\n        datapoints: [\n          [clientName, timestamp]\n        ]\n      };\n      dataSet.push(checkData);\n    }\n    return dataSet;\n  }\n\n  // An aggregate clients result has the format\n  // {\n  //    checks: [\n  //      checkName\n  //    ],\n  //    name: clientName\n  // }\n  convertEventDataToAggregateClient(anEvent, dataSet) {\n    var timestamp = Math.floor( Date.now() );\n    if (dataSet === null) {\n      // initialize empty array\n      dataSet = [];\n    }\n    // iterate over the checks\n    for (var i = 0; i < anEvent.checks.length; i++) {\n      var checkName = anEvent.checks[i];\n      var clientData = {\n        target: anEvent.name,\n        datapoints: [\n          [checkName, timestamp]\n        ]\n      };\n      dataSet.push(clientData);\n    }\n    return dataSet;\n  }\n\n  // An aggregate list result has the format\n  // {\n  //   checks: int,\n  //   clients: int,\n  //   results: {\n  //    critical: int,\n  //    ok: int,\n  //    stale: int,\n  //    total: int,\n  //    unknown: int,\n  //    warning: int\n  //   }\n  // }\n  convertEventDataToAggregateList(anEvent, dataSet) {\n    if (dataSet === null) {\n      // initialize empty array\n      dataSet = [];\n    }\n    var timestamp = Math.floor( Date.now() );\n    var item = {\n      target: 'checks',\n      datapoints: [\n        [anEvent.checks, timestamp]\n      ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'clients',\n      datapoints: [ [anEvent.clients, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'critical',\n      datapoints: [ [anEvent.results.critical, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'ok',\n      datapoints: [ [anEvent.results.ok, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'stale',\n      datapoints: [ [anEvent.results.stale, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'total',\n      datapoints: [ [anEvent.results.total, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'unknown',\n      datapoints: [ [anEvent.results.unknown, timestamp] ]\n    };\n    dataSet.push(item);\n    item = {\n      target: 'warning',\n      datapoints: [ [anEvent.results.warning, timestamp] ]\n    };\n    dataSet.push(item);\n\n    return dataSet;\n  }\n  /**\n   * [convertClientHistoryToDataPoints description]\n   * @param  {[type]} response [description]\n   * @return {[type]}        [description]\n   */\n  convertClientHistoryToDataPoints(response) {\n    // the result has no \"datapoints\", need to create it based on the check data\n    // when we have a checkname and an clientName, the response is different, the\n    // data is not an array, but contains the same information, recreate and push\n    //if (response.data.length === undefined) {\n    //  var singleData = response.data;\n    //  response.data = [];\n    //  response.data.push(singleData);\n    //}\n    for (var i = 0; i < response.data.length; i++) {\n      var anEvent = response.data[i];\n      var datapoints = [];\n      var startingTimestamp = 0;\n      if (anEvent.last_execution !== undefined) {\n        startingTimestamp = anEvent.last_execution - (60 * anEvent.history.length);\n      }\n      // time needs to be in MS, we get EPOCH from Sensu\n      if (anEvent.history !== undefined) {\n        for (var y = 0; y < anEvent.history.length; y++) {\n          datapoints[y] = [anEvent.history[y], (startingTimestamp + (60 * y)) * 1000];\n        }\n      }\n      anEvent.datapoints = datapoints;\n      // set the target to be the check name\n      anEvent.target = 'unknown';\n      if (anEvent.name !== undefined) {\n        anEvent.target = anEvent.name;\n      }\n      if (anEvent.check !== undefined) {\n        anEvent.target = anEvent.check;\n      }\n    }\n    return response;\n  }\n\n  /**\n   *\n   */\n  getCheckInterval(client, checkName) {\n      // http://10.227.86.62/results/default-oel-67-x86-64/keepalive\n      /* The check may not have interval defined, which means it is defaulted to 60 seconds\n      {\n        \"client\": \"default-oel-67-x86-64\",\n        \"check\": {\n          \"thresholds\": {\n            \"warning\": 120,\n            \"critical\": 180\n          },\n          \"name\": \"keepalive\",\n          \"issued\": 1476277039,\n          \"executed\": 1476277039,\n          \"output\": \"No keepalive sent from client for 40860 seconds (>=180)\",\n          \"status\": 2,\n          \"type\": \"standard\"\n        }\n      }\n       */\n    }\n\n  /**\n   * [dimensionFindValues description]\n   * @param  {[type]} target    [description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  dimensionFindValues(target, dimension) {\n    var dimensionURI = '/clients';\n\n    switch (dimension.dimensionType) {\n      case 'clientName':\n        dimensionURI = '/clients';\n        break;\n      case 'checkName':\n        dimensionURI = '/checks';\n        break;\n      case 'aggregateName':\n        dimensionURI = '/aggregates';\n        break;\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + dimensionURI,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": this.basicAuth\n      }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return {\n        text: d.name,\n        value: d.name\n      };\n    });\n  }\n\n  queryWorks(options) {\n    //console.log(\"query entered\");\n    var queries = [];\n    var _this = this;\n    var singleTarget = null;\n    options.targets.forEach(function(target) {\n      singleTarget = target;\n      if (target.hide || !target.target) {\n        return;\n      }\n    });\n    var fullQuery = queries.join(',');\n    var interval = options.interval;\n    //console.log(\"options interval = \" + interval);\n    if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n      // console.log(\"Detected interval smaller than allowed: \" + interval);\n      interval = kbn.secondsToHms(this.minimumInterval / 1000);\n      // console.log(\"New Interval: \" + interval);\n    }\n    //console.log(\"interval after min check = \" + interval);\n    var deferred = this.q.defer();\n    var response = this.singleDataQuery(singleTarget);\n    if (response !== null) {\n      deferred.resolve(response);\n    } else {\n      console.error('Unable to load data.');\n      var error = new Error(\"Unable to load data\");\n      deferred.reject(error);\n    }\n    return deferred.promise;\n  }\n\n  query(options) {\n    //console.log(\"query entered\");\n    var queries = [];\n    var _this = this;\n    var singleTarget = null;\n    options.targets.forEach(function(target) {\n      // TODO handle hide and no target specified\n      //if (target.hide || !target.target) {\n      //  continue;\n      //}\n      queries.push(target);\n    });\n    var interval = options.interval;\n    //console.log(\"options interval = \" + interval);\n    if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n      // console.log(\"Detected interval smaller than allowed: \" + interval);\n      interval = kbn.secondsToHms(this.minimumInterval / 1000);\n      // console.log(\"New Interval: \" + interval);\n    }\n    //console.log(\"interval after min check = \" + interval);\n    var deferred = this.q.defer();\n\n    // if there are no queries, return empty data\n    if (queries.length === 0) {\n      // console.log(\"no tags visible or specified, no data to fetch\");\n      deferred.resolve({\n        data: []\n      });\n      return deferred.promise;\n    }\n    var allQueries = this.q.all({\n        first: _this.multipleDataQueries(queries),\n    });\n    allQueries.then(function(results) {\n      // return results from queries\n      deferred.resolve(results.first);\n    });\n    return deferred.promise;\n  }\n\n  singleDataQuery(singleTarget, uriType) {\n    //console.log(\"singleDataQuery entered\");\n    var _this = this;\n    var deferred = this.q.defer();\n    var params = {};\n    var httpOptions = {\n      method: 'GET',\n      url: this.url + uriType,\n      params: params,\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": this.basicAuth\n      }\n    };\n    this.backendSrv.datasourceRequest(httpOptions)\n      .then(function(response) {\n        var anError = null;\n        if (response.status !== 200) {\n          console.log(\"error...\");\n          anError = new Error(\"Bad Status: \" + response.status);\n          deferred.reject(anError);\n        }\n        if (!response.data) {\n          anError = new Error(\"No data\");\n          deferred.reject(anError);\n        }\n        deferred.resolve(_this.parseQueryResult(singleTarget,response));\n      }, function(response) {\n        console.error('Unable to load data. Response: %o', response.data ? response.data.message : response);\n        var error = new Error(\"Unable to load data\");\n        deferred.reject(error);\n      });\n\n    return deferred.promise;\n  }\n\n  multipleDataQueries(pendingQueries) {\n    var deferred = this.q.defer();\n    var dataCalls = [];\n    var _this = this;\n    // for each query, we get a list of sensu uris' to hit\n    // to retrieve the data\n    angular.forEach(pendingQueries, function(aTarget) {\n      var uriList = _this.getQueryURIByType(aTarget);\n      for (var i = 0; i < uriList.length; i++) {\n        dataCalls.push(_this.singleDataQuery(aTarget, uriList[i]));\n      }\n    });\n    this.q.all(dataCalls)\n      .then(\n        function(results) {\n          var response = {\n            data: []\n          };\n          // merge all of the results into one response\n          angular.forEach(results, function(result) {\n            angular.forEach(result.data, function(dataSet) {\n              response.data.push(dataSet);\n            });\n          });\n          deferred.resolve(response);\n        },\n        function(errors) {\n          deferred.reject(errors);\n        },\n        function(updates) {\n          deferred.update(updates);\n        }\n     );\n   return deferred.promise;\n }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  //    'Access-Control-Allow-Origin': \"http://localhost:3000\"\n  //\n\n  /**\n   * [testDatasource description]\n   * @return {[type]} [description]\n   */\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/info',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": this.basicAuth\n      },\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n}\n"]}