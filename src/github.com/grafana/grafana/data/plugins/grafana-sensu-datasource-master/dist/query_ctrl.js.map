{"version":3,"sources":["../src/query_ctrl.js"],"names":["angular","_","QueryCtrl","SensuDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","scope","sourceTypes","text","value","dimensionTypes","events","results_json","results_table","aggregates","clienthistory","aggregateModes","target","aggregateMode","sourceType","dimensions","dimension","splice","indexOf","panelCtrl","refresh","dimensionsForSourceType","defaultDimensionType","push","name","dimensionType","datasource","dimensionFindValues","then","transformToSegments","metricFindQuery","onChangeInternal","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class SensuDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n    // source types for the popdown\n    this.sourceTypes = [\n      {\n        text: 'Aggregates',\n        value: 'aggregates',\n      },\n      {\n        text: 'Check Subscriptions',\n        value: 'check_subscriptions',\n      },\n      {\n        text: 'Clients',\n        value: 'clients_json',\n      },\n      {\n        text: 'Client History',\n        value: 'clienthistory',\n      },\n      {\n        text: 'Events',\n        value: 'events',\n      },\n      {\n        text: 'Results as JSON',\n        value: 'results_json',\n      },\n      {\n        text: 'Results as Table',\n        value: 'results_table',\n      },\n      {\n        text: 'Sensu Health',\n        value: 'sensu_health_json',\n      },\n      {\n        text: 'Silenced Entries',\n        value: 'silenced_entries_json',\n      },\n      {\n        text: 'Stashes',\n        value: 'stashes_json',\n      }\n    ];\n\n    // Each source type have different dimensions\n    this.dimensionTypes = {\n      events: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      results_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      results_table: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      aggregates: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      clienthistory: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n    };\n\n    this.aggregateModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Clients',\n        value: 'clients'\n      },\n      {\n        text: 'Checks',\n        value: 'checks'\n      },\n    ];\n\n    this.target.aggregateMode = this.target.aggregateMode || 'list';\n    // default source type is events\n    this.target.sourceType = this.target.sourceType || 'events';\n    // no dimensions initially\n    this.target.dimensions = this.target.dimensions || [];\n  }\n\n  /**\n   * [removeDimension description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeDimension(dimension) {\n    if (this.target.dimensions) {\n      this.target.dimensions.splice(this.target.dimensions.indexOf(dimension), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addDimension description]\n   */\n  addDimension() {\n    if (!this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    var dimensionsForSourceType = this.dimensionTypes[this.target.sourceType];\n    var defaultDimensionType = dimensionsForSourceType[0].value;\n    this.target.dimensions.push({\n      name: null,\n      value: null,\n      dimensionType: defaultDimensionType\n    });\n  }\n\n  /**\n   * [getDimensionValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getDimensionValues(dimension) {\n    if (dimension) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.dimensionFindValues(this.target, dimension)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [getOptions description]\n   * @return {[type]} [description]\n   */\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(true));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  /**\n   * [sourceTypeChanged description]\n   * @return {[type]} [description]\n   */\n  sourceTypeChanged() {\n    // reset dimensions\n    if (this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    this.onChangeInternal();\n  }\n\n  /**\n   * [aggregateModeChanged description]\n   * @return {[type]} [description]\n   */\n  aggregateModeChanged() {\n    //console.log(\"Aggregate Mode is now \" + this.target.aggregateMode);\n    this.onChangeInternal();\n  }\n\n  /**\n   * [onChangeInternal description]\n   * @return {[type]} [description]\n   */\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n}\n\nSensuDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}