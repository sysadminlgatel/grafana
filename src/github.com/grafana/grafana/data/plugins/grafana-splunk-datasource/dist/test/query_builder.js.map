{"version":3,"sources":["../../src/query_builder.js"],"names":["SplunkQueryBuilder","target","interpolatedSource","interpolateSource","index","sourcetype","interpolatedQuery","resultFormat","interpolateStatsPart","interpolateTimechartPart","tcOptions","binOptions","options","renderOptions","metricAggs","splitByFields","whereClause","timechartPart","aggs","filter","agg","hide","interpolatedAggs","map","interpolateMetricAgg","join","length","interpolatedSplitBy","type","interpolatedWhere","interpolateWhereClause","renderedOptions","interpolatedOptions","interpolateOptions","interpolatedBinOptions","interpolateBinOptions","interpolatedTcOptions","interpolateTcOptions","limit","cont","partial","bins","binoptions","span","useother","otherstr","usenull","nullstr","tcoptions","metricAgg","func","field","alias","operator","condition","value"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport class SplunkQueryBuilder {\n  constructor(target) {\n    this.target = target;\n  }\n\n  static build(target) {\n    let interpolatedSource = interpolateSource(target.index, target.sourcetype);\n    let interpolatedQuery;\n\n    if (target.resultFormat && target.resultFormat === 'table') {\n      interpolatedQuery = interpolateStatsPart(target);\n    } else {\n      interpolatedQuery = interpolateTimechartPart(target);\n    }\n\n    return `${interpolatedSource} | ${interpolatedQuery}`;\n  }\n\n  static buildGetFields(index, sourcetype) {\n    let interpolatedSource = interpolateSource(index, sourcetype);\n    return `${interpolatedSource} | fieldsummary maxvals=1`;\n  }\n\n  static renderOptions(tcOptions, binOptions, options) {\n    return renderOptions(tcOptions, binOptions, options);\n  }\n}\n\nfunction interpolateSource(index, sourcetype) {\n  return `index=\"${index}\" sourcetype=\"${sourcetype}\"`;\n}\n\nfunction interpolateTimechartPart(target) {\n  let {metricAggs, splitByFields, whereClause, options, tcOptions, binOptions} = target;\n  let timechartPart = 'timechart ';\n\n  timechartPart += renderOptions(tcOptions, binOptions, options);\n\n  let aggs = _.filter(metricAggs, agg => {\n    return !agg.hide;\n  });\n  let interpolatedAggs = aggs.map(interpolateMetricAgg).join(', ');\n  timechartPart += interpolatedAggs;\n\n  if (splitByFields && splitByFields.length) {\n    let interpolatedSplitBy = splitByFields[0];\n    timechartPart += ` by ${interpolatedSplitBy}`;\n    if (whereClause && whereClause.type) {\n      let interpolatedWhere = interpolateWhereClause(whereClause);\n      timechartPart += ` ${interpolatedWhere}`;\n    }\n  }\n\n  return timechartPart;\n}\n\nfunction interpolateStatsPart(target) {\n  let {metricAggs, splitByFields} = target;\n  let timechartPart = 'stats ';\n\n  let aggs = _.filter(metricAggs, agg => {\n    return !agg.hide;\n  });\n  let interpolatedAggs = aggs.map(interpolateMetricAgg).join(', ');\n  timechartPart += interpolatedAggs;\n\n  if (splitByFields && splitByFields.length) {\n    let interpolatedSplitBy = splitByFields.join(', ');\n    timechartPart += ` by ${interpolatedSplitBy}`;\n  }\n\n  return timechartPart;\n}\n\nfunction renderOptions(tcOptions, binOptions, options) {\n  let renderedOptions = '';\n  if (options) {\n    let interpolatedOptions = interpolateOptions(options);\n    renderedOptions += interpolatedOptions;\n  }\n\n  if (binOptions) {\n    let interpolatedBinOptions = interpolateBinOptions(binOptions);\n    renderedOptions += interpolatedBinOptions;\n  }\n\n  if (tcOptions) {\n    let interpolatedTcOptions = interpolateTcOptions(tcOptions);\n    renderedOptions += interpolatedTcOptions;\n  }\n\n  return renderedOptions;\n}\n\nfunction interpolateOptions(options) {\n  let {limit, cont, partial} = options;\n  let interpolatedOptions = '';\n\n  if (limit) {\n    interpolatedOptions += `limit=${limit} `;\n  }\n\n  if (cont === false) {\n    interpolatedOptions += `cont=false `;\n  }\n\n  if (partial === false) {\n    interpolatedOptions += `partial=false `;\n  }\n\n  return interpolatedOptions;\n}\n\nfunction interpolateBinOptions(binOptions) {\n  let {bins} = binOptions;\n  let binoptions = '';\n\n  if (bins) {\n    binoptions += `bins=${bins} `;\n  }\n\n  return binoptions;\n}\n\nfunction interpolateTcOptions(tcOptions) {\n  let {span, useother, otherstr, usenull, nullstr} = tcOptions;\n  let tcoptions = '';\n\n  if (span && span !== 'auto') {\n    tcoptions += `span=${span} `;\n  }\n\n  if (usenull) {\n    tcoptions += `usenull=${usenull} `;\n    if (nullstr && nullstr !== 'NULL') {\n      tcoptions += `nullstr=\"${nullstr}\" `;\n    }\n  }\n\n  if (useother) {\n    if (otherstr && otherstr !== 'OTHER') {\n      tcoptions += `useother=true otherstr=\"${otherstr}\" `;\n    }\n  } else {\n    tcoptions += `useother=false `;\n  }\n\n  return tcoptions;\n}\n\nfunction interpolateMetricAgg(metricAgg) {\n  let {func, field, alias} = metricAgg;\n  let agg = `${func}(${field})`;\n  if (alias) {\n    agg += ` as \"${alias}\"`;\n  }\n\n  return agg;\n}\n\nfunction interpolateWhereClause(whereClause) {\n  let {type, agg, operator, condition, value} = whereClause;\n  if (type === 'wherein') {\n    return `where ${agg} ${operator} ${condition}${value}`;\n  } else if (type === 'wherethresh') {\n    return `where ${agg} ${operator} ${value}`;\n  } else {\n    return '';\n  }\n}\n"]}