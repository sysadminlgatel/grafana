{"version":3,"sources":["../src/datasource.js"],"names":["sortDataPoints","data","_","forEach","series","datapoints","sortBy","point","isRelativeTime","timeRange","every","RT_PATTERN","test","timeModifier","toRTRange","rangeRaw","timeFrom","toSplunkRelativeTime","from","timeTo","to","nowPattern","replace","dateMath","Rx","responseHandler","SplunkQueryBuilder","TIME_STAMP_FIELD","INTERNAL_FIELD_PATTERN","SplunkDatasource","instanceSettings","SplunkAPI","templateSrv","type","url","name","streamMode","jsonData","next_sid","runningSearches","fieldSearchType","tsField","internalFieldPattern","RegExp","splunk","options","isRTSearch","Math","ceil","parse","range","cancelRunningJobs","panelId","subject","Subject","streamQuery","enabledTargets","filter","targets","target","hide","queries","map","search","rawQuery","build","query","scopedVars","sid","getNextSid","addRunningSearch","searchOptions","namespace","invokeSplunkSearchWithFullResult","then","resultFormat","handleTableResponse","response","results","handleRawQueryResponse","Promise","all","flatten","result","targetSubjects","queryOptions","targetSubject","searchWithPreview","Observable","empty","higherOrderSubjects","combineAll","subscribe","next","error","complete","push","pull","promises","removeRunningSearch","cancelSearchJob","catch","console","log","getServerStatus","status","message","title","cancelled","resolve","invokeSplunkSearch","length","values","text","val","annotation","alert","alertName","getFiredAlerts","alerts","time","content","trigger_time","savedsearch_name","unix","regex","field","annotation_text","events","match","exec","event","Date","_time","invokeAsyncSearch","invokeAsyncSearchWithFullResult","getMetrics","getApps","index","sourcetype","buildGetFields","fieldSearch","invokeSearchWithPreview","isRealTime","ts","now"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport Rx from 'vendor/npm/rxjs/Rx';\nimport responseHandler from './response_handler';\nimport {SplunkQueryBuilder} from './query_builder';\nimport './splunk_api';\n\nlet TIME_STAMP_FIELD = '_time',\n    INTERNAL_FIELD_PATTERN = /^_.+/,\n    RT_PATTERN = /^now($|-)/;\n\nexport class SplunkDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, SplunkAPI, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.templateSrv = templateSrv;\n\n    // Get data as they become available (use chunked transfer encoding)\n    this.streamMode = instanceSettings.jsonData.streamMode;\n\n    // Search id\n    this.next_sid = 0;\n    this.runningSearches = {};\n\n    let jsonData = instanceSettings.jsonData;\n    this.fieldSearchType = jsonData.fieldSearchType || 'quick';\n    this.tsField = jsonData.tsField || TIME_STAMP_FIELD;\n    this.internalFieldPattern = jsonData.internalFieldPattern ? new RegExp(jsonData.internalFieldPattern) : INTERNAL_FIELD_PATTERN;\n\n    this.splunk = new SplunkAPI(instanceSettings);\n  }\n\n  query(options) {\n    let timeRange;\n\n    let isRTSearch = isRelativeTime(options.rangeRaw);\n    if (isRTSearch) {\n      timeRange = toRTRange(options.rangeRaw);\n    } else {\n      let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n      let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n      timeRange = { timeFrom, timeTo };\n    }\n\n    if (this.streamMode) {\n      // Stream mode\n      this.cancelRunningJobs(options.panelId);\n\n      // Return one RxJs Subject instance per panel\n      let subject = new Rx.Subject();\n      this.streamQuery(options, timeRange, subject);\n      return subject;\n    } else {\n      // Regular mode\n      this.cancelRunningJobs(options.panelId);\n\n      let enabledTargets = _.filter(options.targets, target => {\n        return !target.hide;\n      });\n\n      let queries = enabledTargets.map(target => {\n        let search;\n\n        if (!target.rawQuery) {\n          search = SplunkQueryBuilder.build(target);\n        } else {\n          search = target.query;\n        }\n\n        search = this.templateSrv.replace(search, options.scopedVars);\n\n        let sid = this.getNextSid();\n        this.addRunningSearch(sid, options.panelId);\n\n        if (!search) {\n          return [];\n        }\n\n        let searchOptions = {\n          namespace: target.namespace\n        };\n\n        return this.invokeSplunkSearchWithFullResult(search, timeRange, sid, searchOptions)\n        .then(response => {\n          if (target.resultFormat === 'table') {\n            return responseHandler.handleTableResponse(response.results, this.tsField, this.internalFieldPattern);\n          } else {\n            return responseHandler.handleRawQueryResponse(response, this.tsField, this.internalFieldPattern);\n          }\n        });\n      });\n\n      return Promise.all(queries)\n      .then(result => {\n        return {\n          data: _.flatten(result)\n        };\n      });\n    }\n  }\n\n  streamQuery(options, timeRange, subject) {\n    // let isRTSearch = isRelativeTime(options.rangeRaw);\n    let enabledTargets = _.filter(options.targets, target => {\n      return !target.hide;\n    });\n\n    let targetSubjects = _.map(enabledTargets, target => {\n      let search;\n      if (!target.rawQuery) {\n        search = SplunkQueryBuilder.build(target);\n      } else {\n        search = target.query;\n      }\n\n      if (search) {\n        let query = this.templateSrv.replace(search, options.scopedVars);\n        let queryOptions = {\n          namespace: target.namespace\n        };\n\n        let sid = this.getNextSid();\n        this.addRunningSearch(sid, options.panelId);\n\n        let targetSubject = new Rx.Subject();\n        this.splunk.searchWithPreview(query, timeRange, targetSubject, sid, queryOptions);\n\n        return targetSubject.map(response => {\n          if (target.resultFormat === 'table') {\n            return responseHandler.handleTableResponse(response.results, this.tsField, this.internalFieldPattern);\n          } else {\n            let data = responseHandler.handleRawQueryResponse(response, this.tsField, this.internalFieldPattern);\n            sortDataPoints(data);\n            return data;\n          }\n        });\n      } else {\n        return Rx.Observable.empty();\n      }\n    });\n\n    // Get all targets and combine it into one data stream\n    // combineAll() takes events from all streams and combine it by applying combineLatest(),\n    // so latest combined event contains latest data from each target\n    let higherOrderSubjects = Rx.Observable.from(targetSubjects);\n    return higherOrderSubjects.combineAll()\n    .map(data => {\n      return _.flatten(data);\n    })\n    .subscribe({\n      next: (data) => {\n        subject.next({\n          data: data\n        });\n      },\n      error: (error) => {\n        subject.error(error);\n      },\n      complete: () => {\n        subject.complete();\n      }\n    });\n  }\n\n  addRunningSearch(sid, panelId) {\n    if (this.runningSearches[panelId]) {\n      this.runningSearches[panelId].push(sid);\n    } else {\n      this.runningSearches[panelId] = [sid];\n    }\n  }\n\n  removeRunningSearch(sid, panelId) {\n    if (this.runningSearches[panelId]) {\n      _.pull(this.runningSearches[panelId], sid);\n    }\n  }\n\n  cancelRunningJobs(panelId) {\n    if (this.runningSearches[panelId]) {\n      let promises = this.runningSearches[panelId].map(sid => {\n        this.removeRunningSearch(sid, panelId);\n        return this.splunk.cancelSearchJob(sid)\n        .catch(error => {\n          console.log(error);\n        });\n      });\n      return Promise.all(promises);\n    }\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.splunk.getServerStatus()\n    .then(() => {\n      return {\n        status: \"success\",\n        message: \"Connected to Splunk\",\n        title: \"Success\"\n      };\n    })\n    .catch(error => {\n      console.log(error);\n\n      let message = `Connection error.\n          Check protocol and Splunk API port (default are https and 8089).\n          If you use direct access mode, you'll need to configure the Splunk server\n          to allow Grafana to communicate with it using a CORS connection\n          (crossOriginSharingPolicy option in server.conf).\n        `;\n\n      if (!error.cancelled && error.message) {\n        message = error.message;\n      }\n\n      return { status: \"error\", title: \"Error\", message: message };\n    });\n  }\n\n  // Used for templating\n  metricFindQuery(query) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    query = this.templateSrv.replace(query);\n    return this.invokeSplunkSearch(query).then(results => {\n      if (results && results.length) {\n        let values = _.flatten(_.values(results[0]));\n        return values.map(val => {\n          return {text: val};\n        });\n      } else {\n        return [];\n      }\n    });\n  }\n\n  // Get Splunk alerts as annotations\n  annotationQuery(options) {\n    if (options.annotation.alert || (!options.annotation.alert && !options.annotation.search)) {\n      // Get saved Splunk alerts\n      let alertName = this.templateSrv.replace(options.annotation.alert, options.scopedVars);\n\n      return this.splunk.getFiredAlerts(alertName)\n      .then(alerts => {\n        return alerts.map(alert => {\n          return {\n            annotation: options.annotation,\n            time: alert.content.trigger_time * 1000,\n            title: alert.content.savedsearch_name,\n            // text: alert.content.savedsearch_name\n          };\n        });\n      });\n    } else {\n      // Get annotations from Splunk search\n      let timeFrom = options.range.from.unix();\n      let timeTo = options.range.to.unix();\n      let search = this.templateSrv.replace(options.annotation.search, options.scopedVars);\n\n      return this.invokeSplunkSearch(search, timeFrom, timeTo)\n      .then(events => {\n        let regex;\n        if (options.annotation.regex) {\n          regex = new RegExp(options.annotation.regex);\n        }\n\n        let field = options.annotation.field;\n        let annotation_text = '';\n\n        return events.map(event => {\n          if (field) {\n            if (regex) {\n              let match = regex.exec(event[field]);\n              if (match) {\n                annotation_text = match[1] ? match[1] : match[0];\n              }\n            } else {\n              annotation_text = event[field];\n            }\n          }\n\n          return {\n            annotation: options.annotation,\n            time: Date.parse(event._time),\n            title: options.annotation.name,\n            text: annotation_text\n          };\n        });\n      });\n    }\n  }\n\n  invokeSplunkSearch(query, timeFrom, timeTo, sid, options = {}) {\n    // return this.invokeBlockingSearch(query, timeFrom, timeTo, sid);\n    return this.splunk.invokeAsyncSearch(query, timeFrom, timeTo, sid, options);\n  }\n\n  invokeSplunkSearchWithFullResult(query, timeRange, sid, options = {}) {\n    let { timeFrom, timeTo } = timeRange;\n    return this.splunk.invokeAsyncSearchWithFullResult(query, timeFrom, timeTo, sid, options);\n  }\n\n  // Metric suggestions\n  getIndexes() {\n    return this.splunk.getMetrics('data/indexes');\n  }\n\n  getSourcetypes() {\n    return this.splunk.getMetrics('saved/sourcetypes');\n  }\n\n  getApps() {\n    return this.splunk.getApps();\n  }\n\n  getFields(index, sourcetype, timeFrom, timeTo) {\n    let query = SplunkQueryBuilder.buildGetFields(index, sourcetype);\n    let fieldSearch;\n\n    if (this.fieldSearchType === 'quick') {\n      fieldSearch = this.splunk.invokeSearchWithPreview(query, timeFrom, timeTo);\n    } else {\n      fieldSearch = this.invokeSplunkSearch(query, timeFrom, timeTo);\n    }\n    return fieldSearch.then(results => {\n      return _.map(results, 'field');\n    });\n  }\n\n  getNextSid(isRealTime) {\n    let ts = Math.ceil(Date.now() / 1000);\n    let sid = `grafana_${ts}.${this.next_sid}`;\n    if (isRealTime) {\n      sid = 'rt_' + sid;\n    }\n\n    this.next_sid++;\n    return sid;\n  }\n}\n\nfunction sortDataPoints(data) {\n  _.forEach(data, series => {\n    series.datapoints = _.sortBy(series.datapoints, (point) => {\n      return point[1];\n    });\n  });\n}\n\nfunction isRelativeTime(timeRange) {\n  return _.every(timeRange, timeModifier => RT_PATTERN.test(timeModifier));\n}\n\nfunction toRTRange(rangeRaw) {\n  let timeFrom = toSplunkRelativeTime(rangeRaw.from);\n  let timeTo = toSplunkRelativeTime(rangeRaw.to);\n  return {timeFrom, timeTo};\n}\n\nfunction toSplunkRelativeTime(timeModifier) {\n  const nowPattern = /^now$/;\n  if (nowPattern.test(timeModifier)) {\n    return 'now';\n  } else if (RT_PATTERN.test(timeModifier)) {\n    return timeModifier.replace('now', '');\n  } else {\n    throw 'Not a valid Splunk time modifier';\n  }\n}\n"]}