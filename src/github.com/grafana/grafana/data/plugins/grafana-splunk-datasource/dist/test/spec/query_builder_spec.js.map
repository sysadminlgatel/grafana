{"version":3,"sources":["../../../spec/query_builder_spec.js"],"names":["describe","defaultTarget","rawQuery","query","index","sourcetype","metricAggs","func","field","alias","splitByFields","whereClause","type","agg","condition","operator","value","tcOptions","span","useother","otherstr","usenull","nullstr","binOptions","bins","options","limit","cont","partial","defaultSrc","ctx","beforeEach","target","cloneDeep","it","done","expected","build","expect","to","equal","resultFormat"],"mappings":"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","file":"query_builder_spec.js","sourcesContent":["import _ from 'lodash';\nimport {SplunkQueryBuilder} from '../query_builder';\n\ndescribe('SplunkQueryBuilder', function() {\n  var defaultTarget = {\n    rawQuery: true,\n    query: '',\n    index: 'os',\n    sourcetype: 'iostat',\n    metricAggs: [\n      {func: 'avg', field: 'total_ops', alias: ''}\n    ],\n    splitByFields: [],\n    whereClause: {\n      type: null,\n      agg: 'avg',\n      condition: '',\n      operator: '',\n      value: ''\n    },\n    tcOptions: {\n      span: 'auto',\n      useother: true,\n      otherstr: '',\n      usenull: false,\n      nullstr: ''\n    },\n    binOptions: {\n      bins: null,\n    },\n    options: {\n      limit: null,\n      cont: true,\n      partial: true\n    }\n  };\n\n  var defaultSrc = 'index=\"os\" sourcetype=\"iostat\"';\n\n  var ctx = {};\n\n  beforeEach(function() {\n    ctx.target = _.cloneDeep(defaultTarget);\n  });\n\n  describe('When building timechart search', function() {\n\n    beforeEach(function() {\n      ctx.target = _.cloneDeep(defaultTarget);\n    });\n\n    it('should build proper timechart search', function(done) {\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops)';\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add alias', function(done) {\n      ctx.target.metricAggs = [\n        {func: 'avg', field: 'total_ops', alias: 'total'}\n      ];\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops) as \"total\"';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should build proper search for multiple metrics', function(done) {\n      ctx.target.metricAggs = [\n        {func: 'avg', field: 'read_ops', alias: ''},\n        {func: 'avg', field: 'write_ops', alias: ''},\n      ];\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart avg(read_ops), avg(write_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add proper split by clause', function(done) {\n      ctx.target.splitByFields = ['Device'];\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops) by Device';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add only one split by field', function(done) {\n      ctx.target.splitByFields = ['device', 'host'];\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops) by device';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add proper where-in clause (as a part of split by)', function(done) {\n      ctx.target.splitByFields = ['Device'];\n      ctx.target.whereClause = {\n        type: 'wherein',\n        agg: 'avg',\n        condition: 'top',\n        operator: 'in',\n        value: '5'\n      };\n\n      var expected =\n        'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops) by Device where avg in top5';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add proper where-thresh clause (as a part of split by)', function(done) {\n      ctx.target.splitByFields = ['Device'];\n      ctx.target.whereClause = {\n        type: 'wherethresh',\n        agg: 'avg',\n        condition: '',\n        operator: '>',\n        value: '100'\n      };\n\n      var expected =\n        'index=\"os\" sourcetype=\"iostat\" | timechart avg(total_ops) by Device where avg > 100';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n  });\n\n  describe('When building stats search', function() {\n\n    beforeEach(function() {\n      ctx.target = _.cloneDeep(defaultTarget);\n      ctx.target.resultFormat = 'table';\n    });\n\n    it('should build proper stats search', function(done) {\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | stats avg(total_ops)';\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add proper split by clause', function(done) {\n      ctx.target.splitByFields = ['device', 'host'];\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | stats avg(total_ops) by device, host';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n  });\n\n  describe('When rendering options', function() {\n\n    beforeEach(function() {\n      ctx.target = _.cloneDeep(defaultTarget);\n    });\n\n    it('should add \"span\" option', function(done) {\n      ctx.target.tcOptions.span = '1m';\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart span=1m avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"useother\" option', function(done) {\n      ctx.target.tcOptions.useother = false;\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart useother=false avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"otherstr\" option', function(done) {\n      ctx.target.tcOptions.otherstr = 'another';\n\n      var expected =\n        'index=\"os\" sourcetype=\"iostat\" | timechart useother=true otherstr=\"another\" avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"bins\" option', function(done) {\n      ctx.target.binOptions.bins = 50;\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart bins=50 avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"limit\" option', function(done) {\n      ctx.target.options.limit = 5;\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart limit=5 avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"cont\" option', function(done) {\n      ctx.target.options.cont = false;\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart cont=false avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n\n    it('should add \"partial\" option', function(done) {\n      ctx.target.options.partial = false;\n\n      var expected = 'index=\"os\" sourcetype=\"iostat\" | timechart partial=false avg(total_ops)';\n\n      var query = SplunkQueryBuilder.build(ctx.target);\n      expect(query).to.equal(expected);\n      done();\n    });\n  });\n\n});\n"]}