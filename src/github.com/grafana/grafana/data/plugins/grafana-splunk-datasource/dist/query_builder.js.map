{"version":3,"sources":["../src/query_builder.js"],"names":["interpolateSource","index","sourcetype","interpolateTimechartPart","target","metricAggs","splitByFields","whereClause","options","tcOptions","binOptions","timechartPart","renderOptions","aggs","_","filter","agg","hide","interpolatedAggs","map","interpolateMetricAgg","join","length","interpolatedSplitBy","type","interpolatedWhere","interpolateWhereClause","interpolateStatsPart","renderedOptions","interpolatedOptions","interpolateOptions","interpolatedBinOptions","interpolateBinOptions","interpolatedTcOptions","interpolateTcOptions","limit","cont","partial","bins","binoptions","span","useother","otherstr","usenull","nullstr","tcoptions","metricAgg","func","field","alias","operator","condition","value","SplunkQueryBuilder","interpolatedSource","interpolatedQuery","resultFormat"],"mappings":"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","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\n\nexport class SplunkQueryBuilder {\n  constructor(target) {\n    this.target = target;\n  }\n\n  static build(target) {\n    let interpolatedSource = interpolateSource(target.index, target.sourcetype);\n    let interpolatedQuery;\n\n    if (target.resultFormat && target.resultFormat === 'table') {\n      interpolatedQuery = interpolateStatsPart(target);\n    } else {\n      interpolatedQuery = interpolateTimechartPart(target);\n    }\n\n    return `${interpolatedSource} | ${interpolatedQuery}`;\n  }\n\n  static buildGetFields(index, sourcetype) {\n    let interpolatedSource = interpolateSource(index, sourcetype);\n    return `${interpolatedSource} | fieldsummary maxvals=1`;\n  }\n\n  static renderOptions(tcOptions, binOptions, options) {\n    return renderOptions(tcOptions, binOptions, options);\n  }\n}\n\nfunction interpolateSource(index, sourcetype) {\n  return `index=\"${index}\" sourcetype=\"${sourcetype}\"`;\n}\n\nfunction interpolateTimechartPart(target) {\n  let {metricAggs, splitByFields, whereClause, options, tcOptions, binOptions} = target;\n  let timechartPart = 'timechart ';\n\n  timechartPart += renderOptions(tcOptions, binOptions, options);\n\n  let aggs = _.filter(metricAggs, agg => {\n    return !agg.hide;\n  });\n  let interpolatedAggs = aggs.map(interpolateMetricAgg).join(', ');\n  timechartPart += interpolatedAggs;\n\n  if (splitByFields && splitByFields.length) {\n    let interpolatedSplitBy = splitByFields[0];\n    timechartPart += ` by ${interpolatedSplitBy}`;\n    if (whereClause && whereClause.type) {\n      let interpolatedWhere = interpolateWhereClause(whereClause);\n      timechartPart += ` ${interpolatedWhere}`;\n    }\n  }\n\n  return timechartPart;\n}\n\nfunction interpolateStatsPart(target) {\n  let {metricAggs, splitByFields} = target;\n  let timechartPart = 'stats ';\n\n  let aggs = _.filter(metricAggs, agg => {\n    return !agg.hide;\n  });\n  let interpolatedAggs = aggs.map(interpolateMetricAgg).join(', ');\n  timechartPart += interpolatedAggs;\n\n  if (splitByFields && splitByFields.length) {\n    let interpolatedSplitBy = splitByFields.join(', ');\n    timechartPart += ` by ${interpolatedSplitBy}`;\n  }\n\n  return timechartPart;\n}\n\nfunction renderOptions(tcOptions, binOptions, options) {\n  let renderedOptions = '';\n  if (options) {\n    let interpolatedOptions = interpolateOptions(options);\n    renderedOptions += interpolatedOptions;\n  }\n\n  if (binOptions) {\n    let interpolatedBinOptions = interpolateBinOptions(binOptions);\n    renderedOptions += interpolatedBinOptions;\n  }\n\n  if (tcOptions) {\n    let interpolatedTcOptions = interpolateTcOptions(tcOptions);\n    renderedOptions += interpolatedTcOptions;\n  }\n\n  return renderedOptions;\n}\n\nfunction interpolateOptions(options) {\n  let {limit, cont, partial} = options;\n  let interpolatedOptions = '';\n\n  if (limit) {\n    interpolatedOptions += `limit=${limit} `;\n  }\n\n  if (cont === false) {\n    interpolatedOptions += `cont=false `;\n  }\n\n  if (partial === false) {\n    interpolatedOptions += `partial=false `;\n  }\n\n  return interpolatedOptions;\n}\n\nfunction interpolateBinOptions(binOptions) {\n  let {bins} = binOptions;\n  let binoptions = '';\n\n  if (bins) {\n    binoptions += `bins=${bins} `;\n  }\n\n  return binoptions;\n}\n\nfunction interpolateTcOptions(tcOptions) {\n  let {span, useother, otherstr, usenull, nullstr} = tcOptions;\n  let tcoptions = '';\n\n  if (span && span !== 'auto') {\n    tcoptions += `span=${span} `;\n  }\n\n  if (usenull) {\n    tcoptions += `usenull=${usenull} `;\n    if (nullstr && nullstr !== 'NULL') {\n      tcoptions += `nullstr=\"${nullstr}\" `;\n    }\n  }\n\n  if (useother) {\n    if (otherstr && otherstr !== 'OTHER') {\n      tcoptions += `useother=true otherstr=\"${otherstr}\" `;\n    }\n  } else {\n    tcoptions += `useother=false `;\n  }\n\n  return tcoptions;\n}\n\nfunction interpolateMetricAgg(metricAgg) {\n  let {func, field, alias} = metricAgg;\n  let agg = `${func}(${field})`;\n  if (alias) {\n    agg += ` as \"${alias}\"`;\n  }\n\n  return agg;\n}\n\nfunction interpolateWhereClause(whereClause) {\n  let {type, agg, operator, condition, value} = whereClause;\n  if (type === 'wherein') {\n    return `where ${agg} ${operator} ${condition}${value}`;\n  } else if (type === 'wherethresh') {\n    return `where ${agg} ${operator} ${value}`;\n  } else {\n    return '';\n  }\n}\n"]}