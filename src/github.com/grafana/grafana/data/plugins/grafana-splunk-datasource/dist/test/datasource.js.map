{"version":3,"sources":["../../src/datasource.js"],"names":["dateMath","TIME_STAMP_FIELD","INTERNAL_FIELD_PATTERN","RT_PATTERN","SplunkDatasource","instanceSettings","SplunkAPI","templateSrv","type","url","name","streamMode","jsonData","next_sid","runningSearches","fieldSearchType","tsField","internalFieldPattern","RegExp","splunk","options","timeRange","isRTSearch","isRelativeTime","rangeRaw","toRTRange","timeFrom","Math","ceil","parse","range","from","timeTo","to","cancelRunningJobs","panelId","subject","Subject","streamQuery","enabledTargets","filter","targets","target","hide","queries","map","search","rawQuery","build","query","replace","scopedVars","sid","getNextSid","addRunningSearch","searchOptions","namespace","invokeSplunkSearchWithFullResult","then","resultFormat","handleTableResponse","response","results","handleRawQueryResponse","Promise","all","data","flatten","result","targetSubjects","queryOptions","targetSubject","searchWithPreview","sortDataPoints","Observable","empty","higherOrderSubjects","combineAll","subscribe","next","error","complete","push","pull","promises","removeRunningSearch","cancelSearchJob","catch","console","log","getServerStatus","status","message","title","cancelled","resolve","invokeSplunkSearch","length","values","text","val","annotation","alert","alertName","getFiredAlerts","alerts","time","content","trigger_time","savedsearch_name","unix","regex","field","annotation_text","events","match","exec","event","Date","_time","invokeAsyncSearch","invokeAsyncSearchWithFullResult","getMetrics","getApps","index","sourcetype","buildGetFields","fieldSearch","invokeSearchWithPreview","isRealTime","ts","now","forEach","series","datapoints","sortBy","point","every","test","timeModifier","toSplunkRelativeTime","nowPattern"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport Rx from 'vendor/npm/rxjs/Rx';\nimport responseHandler from './response_handler';\nimport {SplunkQueryBuilder} from './query_builder';\nimport './splunk_api';\n\nlet TIME_STAMP_FIELD = '_time',\n    INTERNAL_FIELD_PATTERN = /^_.+/,\n    RT_PATTERN = /^now($|-)/;\n\nexport class SplunkDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, SplunkAPI, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.templateSrv = templateSrv;\n\n    // Get data as they become available (use chunked transfer encoding)\n    this.streamMode = instanceSettings.jsonData.streamMode;\n\n    // Search id\n    this.next_sid = 0;\n    this.runningSearches = {};\n\n    let jsonData = instanceSettings.jsonData;\n    this.fieldSearchType = jsonData.fieldSearchType || 'quick';\n    this.tsField = jsonData.tsField || TIME_STAMP_FIELD;\n    this.internalFieldPattern = jsonData.internalFieldPattern ? new RegExp(jsonData.internalFieldPattern) : INTERNAL_FIELD_PATTERN;\n\n    this.splunk = new SplunkAPI(instanceSettings);\n  }\n\n  query(options) {\n    let timeRange;\n\n    let isRTSearch = isRelativeTime(options.rangeRaw);\n    if (isRTSearch) {\n      timeRange = toRTRange(options.rangeRaw);\n    } else {\n      let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n      let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n      timeRange = { timeFrom, timeTo };\n    }\n\n    if (this.streamMode) {\n      // Stream mode\n      this.cancelRunningJobs(options.panelId);\n\n      // Return one RxJs Subject instance per panel\n      let subject = new Rx.Subject();\n      this.streamQuery(options, timeRange, subject);\n      return subject;\n    } else {\n      // Regular mode\n      this.cancelRunningJobs(options.panelId);\n\n      let enabledTargets = _.filter(options.targets, target => {\n        return !target.hide;\n      });\n\n      let queries = enabledTargets.map(target => {\n        let search;\n\n        if (!target.rawQuery) {\n          search = SplunkQueryBuilder.build(target);\n        } else {\n          search = target.query;\n        }\n\n        search = this.templateSrv.replace(search, options.scopedVars);\n\n        let sid = this.getNextSid();\n        this.addRunningSearch(sid, options.panelId);\n\n        if (!search) {\n          return [];\n        }\n\n        let searchOptions = {\n          namespace: target.namespace\n        };\n\n        return this.invokeSplunkSearchWithFullResult(search, timeRange, sid, searchOptions)\n        .then(response => {\n          if (target.resultFormat === 'table') {\n            return responseHandler.handleTableResponse(response.results, this.tsField, this.internalFieldPattern);\n          } else {\n            return responseHandler.handleRawQueryResponse(response, this.tsField, this.internalFieldPattern);\n          }\n        });\n      });\n\n      return Promise.all(queries)\n      .then(result => {\n        return {\n          data: _.flatten(result)\n        };\n      });\n    }\n  }\n\n  streamQuery(options, timeRange, subject) {\n    // let isRTSearch = isRelativeTime(options.rangeRaw);\n    let enabledTargets = _.filter(options.targets, target => {\n      return !target.hide;\n    });\n\n    let targetSubjects = _.map(enabledTargets, target => {\n      let search;\n      if (!target.rawQuery) {\n        search = SplunkQueryBuilder.build(target);\n      } else {\n        search = target.query;\n      }\n\n      if (search) {\n        let query = this.templateSrv.replace(search, options.scopedVars);\n        let queryOptions = {\n          namespace: target.namespace\n        };\n\n        let sid = this.getNextSid();\n        this.addRunningSearch(sid, options.panelId);\n\n        let targetSubject = new Rx.Subject();\n        this.splunk.searchWithPreview(query, timeRange, targetSubject, sid, queryOptions);\n\n        return targetSubject.map(response => {\n          if (target.resultFormat === 'table') {\n            return responseHandler.handleTableResponse(response.results, this.tsField, this.internalFieldPattern);\n          } else {\n            let data = responseHandler.handleRawQueryResponse(response, this.tsField, this.internalFieldPattern);\n            sortDataPoints(data);\n            return data;\n          }\n        });\n      } else {\n        return Rx.Observable.empty();\n      }\n    });\n\n    // Get all targets and combine it into one data stream\n    // combineAll() takes events from all streams and combine it by applying combineLatest(),\n    // so latest combined event contains latest data from each target\n    let higherOrderSubjects = Rx.Observable.from(targetSubjects);\n    return higherOrderSubjects.combineAll()\n    .map(data => {\n      return _.flatten(data);\n    })\n    .subscribe({\n      next: (data) => {\n        subject.next({\n          data: data\n        });\n      },\n      error: (error) => {\n        subject.error(error);\n      },\n      complete: () => {\n        subject.complete();\n      }\n    });\n  }\n\n  addRunningSearch(sid, panelId) {\n    if (this.runningSearches[panelId]) {\n      this.runningSearches[panelId].push(sid);\n    } else {\n      this.runningSearches[panelId] = [sid];\n    }\n  }\n\n  removeRunningSearch(sid, panelId) {\n    if (this.runningSearches[panelId]) {\n      _.pull(this.runningSearches[panelId], sid);\n    }\n  }\n\n  cancelRunningJobs(panelId) {\n    if (this.runningSearches[panelId]) {\n      let promises = this.runningSearches[panelId].map(sid => {\n        this.removeRunningSearch(sid, panelId);\n        return this.splunk.cancelSearchJob(sid)\n        .catch(error => {\n          console.log(error);\n        });\n      });\n      return Promise.all(promises);\n    }\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.splunk.getServerStatus()\n    .then(() => {\n      return {\n        status: \"success\",\n        message: \"Connected to Splunk\",\n        title: \"Success\"\n      };\n    })\n    .catch(error => {\n      console.log(error);\n\n      let message = `Connection error.\n          Check protocol and Splunk API port (default are https and 8089).\n          If you use direct access mode, you'll need to configure the Splunk server\n          to allow Grafana to communicate with it using a CORS connection\n          (crossOriginSharingPolicy option in server.conf).\n        `;\n\n      if (!error.cancelled && error.message) {\n        message = error.message;\n      }\n\n      return { status: \"error\", title: \"Error\", message: message };\n    });\n  }\n\n  // Used for templating\n  metricFindQuery(query) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    query = this.templateSrv.replace(query);\n    return this.invokeSplunkSearch(query).then(results => {\n      if (results && results.length) {\n        let values = _.flatten(_.values(results[0]));\n        return values.map(val => {\n          return {text: val};\n        });\n      } else {\n        return [];\n      }\n    });\n  }\n\n  // Get Splunk alerts as annotations\n  annotationQuery(options) {\n    if (options.annotation.alert || (!options.annotation.alert && !options.annotation.search)) {\n      // Get saved Splunk alerts\n      let alertName = this.templateSrv.replace(options.annotation.alert, options.scopedVars);\n\n      return this.splunk.getFiredAlerts(alertName)\n      .then(alerts => {\n        return alerts.map(alert => {\n          return {\n            annotation: options.annotation,\n            time: alert.content.trigger_time * 1000,\n            title: alert.content.savedsearch_name,\n            // text: alert.content.savedsearch_name\n          };\n        });\n      });\n    } else {\n      // Get annotations from Splunk search\n      let timeFrom = options.range.from.unix();\n      let timeTo = options.range.to.unix();\n      let search = this.templateSrv.replace(options.annotation.search, options.scopedVars);\n\n      return this.invokeSplunkSearch(search, timeFrom, timeTo)\n      .then(events => {\n        let regex;\n        if (options.annotation.regex) {\n          regex = new RegExp(options.annotation.regex);\n        }\n\n        let field = options.annotation.field;\n        let annotation_text = '';\n\n        return events.map(event => {\n          if (field) {\n            if (regex) {\n              let match = regex.exec(event[field]);\n              if (match) {\n                annotation_text = match[1] ? match[1] : match[0];\n              }\n            } else {\n              annotation_text = event[field];\n            }\n          }\n\n          return {\n            annotation: options.annotation,\n            time: Date.parse(event._time),\n            title: options.annotation.name,\n            text: annotation_text\n          };\n        });\n      });\n    }\n  }\n\n  invokeSplunkSearch(query, timeFrom, timeTo, sid, options = {}) {\n    // return this.invokeBlockingSearch(query, timeFrom, timeTo, sid);\n    return this.splunk.invokeAsyncSearch(query, timeFrom, timeTo, sid, options);\n  }\n\n  invokeSplunkSearchWithFullResult(query, timeRange, sid, options = {}) {\n    let { timeFrom, timeTo } = timeRange;\n    return this.splunk.invokeAsyncSearchWithFullResult(query, timeFrom, timeTo, sid, options);\n  }\n\n  // Metric suggestions\n  getIndexes() {\n    return this.splunk.getMetrics('data/indexes');\n  }\n\n  getSourcetypes() {\n    return this.splunk.getMetrics('saved/sourcetypes');\n  }\n\n  getApps() {\n    return this.splunk.getApps();\n  }\n\n  getFields(index, sourcetype, timeFrom, timeTo) {\n    let query = SplunkQueryBuilder.buildGetFields(index, sourcetype);\n    let fieldSearch;\n\n    if (this.fieldSearchType === 'quick') {\n      fieldSearch = this.splunk.invokeSearchWithPreview(query, timeFrom, timeTo);\n    } else {\n      fieldSearch = this.invokeSplunkSearch(query, timeFrom, timeTo);\n    }\n    return fieldSearch.then(results => {\n      return _.map(results, 'field');\n    });\n  }\n\n  getNextSid(isRealTime) {\n    let ts = Math.ceil(Date.now() / 1000);\n    let sid = `grafana_${ts}.${this.next_sid}`;\n    if (isRealTime) {\n      sid = 'rt_' + sid;\n    }\n\n    this.next_sid++;\n    return sid;\n  }\n}\n\nfunction sortDataPoints(data) {\n  _.forEach(data, series => {\n    series.datapoints = _.sortBy(series.datapoints, (point) => {\n      return point[1];\n    });\n  });\n}\n\nfunction isRelativeTime(timeRange) {\n  return _.every(timeRange, timeModifier => RT_PATTERN.test(timeModifier));\n}\n\nfunction toRTRange(rangeRaw) {\n  let timeFrom = toSplunkRelativeTime(rangeRaw.from);\n  let timeTo = toSplunkRelativeTime(rangeRaw.to);\n  return {timeFrom, timeTo};\n}\n\nfunction toSplunkRelativeTime(timeModifier) {\n  const nowPattern = /^now$/;\n  if (nowPattern.test(timeModifier)) {\n    return 'now';\n  } else if (RT_PATTERN.test(timeModifier)) {\n    return timeModifier.replace('now', '');\n  } else {\n    throw 'Not a valid Splunk time modifier';\n  }\n}\n"]}