{"version":3,"sources":["../../../spec/splunk_api_spec.js"],"names":["describe","ctx","defined","match","beforeEach","$q","backendSrv","datasourceRequest","when","status","templateSrv","instanceSettings","url","jsonData","streamMode","paramSerializer","data","SplunkApi","ds","search","earliest_time","latest_time","it","done","spy","_post","expect","to","have","been","calledWith","expected_params","method","headers","params","count","output_mode","_get"],"mappings":"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","file":"splunk_api_spec.js","sourcesContent":["import {splunkAPIFactory} from \"../splunk_api\";\nimport Q from \"q\";\nimport sinon from 'sinon';\n\ndescribe('SplunkAPI', () => {\n  let ctx = {};\n  let defined = sinon.match.defined;\n\n  beforeEach(function() {\n    ctx.$q = Q;\n    ctx.backendSrv = {\n      datasourceRequest: () => {\n        return ctx.$q.when({\n          status: 200\n        });\n      }\n    };\n    ctx.templateSrv = {};\n    let instanceSettings = {\n      url: 'https://localhost:8089',\n      jsonData: {\n        streamMode: true\n      }\n    };\n\n    let paramSerializer = (data) => data;\n\n    let SplunkApi = splunkAPIFactory(paramSerializer, ctx.backendSrv);\n    ctx.ds = new SplunkApi(instanceSettings);\n  });\n\n  describe('When doing Splunk API POST request', () => {\n    beforeEach(function() {\n      ctx.url = '/services/search/jobs';\n      ctx.data = {\n        search: 'search *',\n        earliest_time: 1470000000,\n        latest_time: 1470000001\n      };\n    });\n\n    it('should serialize params', (done) => {\n      let paramSerializer = sinon.spy(ctx.ds, 'paramSerializer');\n\n      ctx.ds._post(ctx.url, ctx.data);\n      expect(paramSerializer).to.have.been.calledWith(ctx.data);\n      done();\n    });\n\n    it('should send request with proper params and headers', (done) => {\n      let expected_params = {\n        method: 'POST',\n        url: 'https://localhost:8089/services/search/jobs',\n        data: ctx.data,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n      let datasourceRequest = sinon.spy(ctx.ds.backendSrv, 'datasourceRequest');\n\n      ctx.ds._post(ctx.url, ctx.data);\n      expect(datasourceRequest).to.have.been.calledWith(expected_params);\n      done();\n    });\n  });\n\n  describe('When doing Splunk API GET request', () => {\n    beforeEach(function() {\n      ctx.ds.backendSrv.datasourceRequest = () => Q.when({status: 200});\n\n      ctx.url = '/services/search/jobs/123';\n      ctx.params = {\n        count: 0\n      };\n    });\n\n    it('should send request with proper params', (done) => {\n      let expected_params = {\n        method: 'GET',\n        url: 'https://localhost:8089/services/search/jobs/123',\n        params: {\n          output_mode: 'json',\n          count: 0\n        }\n      };\n      let datasourceRequest = sinon.spy(ctx.ds.backendSrv, 'datasourceRequest');\n\n      ctx.ds._get(ctx.url, ctx.params);\n      expect(datasourceRequest).to.have.been.calledWith(expected_params);\n      done();\n    });\n\n    it('should send proper request if no params passed', (done) => {\n      let expected_params = {\n        method: 'GET',\n        url: 'https://localhost:8089/services/search/jobs/123',\n        params: {\n          output_mode: 'json'\n        }\n      };\n      let datasourceRequest = sinon.spy(ctx.ds.backendSrv, 'datasourceRequest');\n\n      ctx.ds._get(ctx.url);\n      expect(datasourceRequest).to.have.been.calledWith(expected_params);\n      done();\n    });\n  });\n});\n"]}