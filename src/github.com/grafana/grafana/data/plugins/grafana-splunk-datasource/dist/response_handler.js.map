{"version":3,"sources":["../src/response_handler.js"],"names":["handleRawQueryResponse","response","tsField","TIME_STAMP_FIELD","internalFieldPattern","INTERNAL_FIELD_PATTERN","results","data","dataFields","filterNonInternalFields","_","map","fields","forEach","entry","field","point","convertToDataPoint","push","value","key","target","datapoints","handleTableResponse","table","TableModel","head","v","k","columns","text","type","row","tryToNumber","rows","timeStamp","ts","moment","utc","valueOf","val","Number","isNaN","includeTimeStamp","filter","isInternalField","test"],"mappings":"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","file":"response_handler.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport TableModel from 'app/core/table_model';\n\nlet TIME_STAMP_FIELD = '_time',\n    INTERNAL_FIELD_PATTERN = /^_.+/;\n\nfunction handleRawQueryResponse(response, tsField=TIME_STAMP_FIELD, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  let results = response.results;\n  let data = {};\n  let dataFields = filterNonInternalFields(_.map(response.fields, 'name'), false, internalFieldPattern);\n\n  _.forEach(results, (entry) => {\n    // Handle response with 'BY' clause - group points by each non-time field\n    _.forEach(dataFields, (field) => {\n      if (!data[field]) {\n        data[field] = [];\n      }\n\n      let point = convertToDataPoint(entry[field], entry[tsField]);\n      data[field].push(point);\n    });\n  });\n\n  return _.map(data, (value, key) => {\n    return {\n      target: key,\n      datapoints: value\n    };\n  });\n}\n\nfunction handleTableResponse(results, tsField=TIME_STAMP_FIELD, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  // let fields = _.map(response.fields, 'name');\n  // let results = response.results;\n  let table = new TableModel();\n\n  let fields = _.map(_.head(results), (v, k) => {\n    return k;\n  });\n\n  // Remove internal fields\n  fields = filterNonInternalFields(fields, true, internalFieldPattern);\n\n  _.forEach(fields, field => {\n    if (field === tsField) {\n      // Add TIME_STAMP_FIELD as standard time column\n      table.columns.push({text: 'Time', type: 'time'});\n    } else {\n      table.columns.push({text: field});\n    }\n  });\n\n  _.forEach(results, (entry) => {\n    let row = _.map(fields, field => {\n      return tryToNumber(entry[field]);\n    });\n    table.rows.push(row);\n  });\n\n  return table;\n}\n\nfunction convertToDataPoint(value, timeStamp) {\n  let ts = moment.utc(timeStamp).valueOf();\n  let val = value ? Number(value) : null;\n  return [val, ts];\n}\n\nfunction tryToNumber(value) {\n  if (value && !isNaN(Number(value))) {\n    return Number(value);\n  } else {\n    return value;\n  }\n}\n\nfunction filterNonInternalFields(fields, includeTimeStamp=true, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  return _.filter(fields, field => {\n    return !isInternalField(field, internalFieldPattern) ||\n      (field === TIME_STAMP_FIELD && includeTimeStamp);\n  });\n}\n\nfunction isInternalField(field, internalFieldPattern = INTERNAL_FIELD_PATTERN) {\n  return internalFieldPattern.test(field);\n}\n\nexport default {\n  handleRawQueryResponse: handleRawQueryResponse,\n  handleTableResponse: handleTableResponse\n};\n"]}