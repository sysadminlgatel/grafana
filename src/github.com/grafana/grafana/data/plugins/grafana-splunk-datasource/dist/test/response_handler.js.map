{"version":3,"sources":["../../src/response_handler.js"],"names":["TIME_STAMP_FIELD","INTERNAL_FIELD_PATTERN","handleRawQueryResponse","response","tsField","internalFieldPattern","results","data","dataFields","filterNonInternalFields","map","fields","forEach","entry","field","point","convertToDataPoint","push","value","key","target","datapoints","handleTableResponse","table","head","v","k","columns","text","type","row","tryToNumber","rows","timeStamp","ts","utc","valueOf","val","Number","isNaN","includeTimeStamp","filter","isInternalField","test"],"mappings":"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","file":"response_handler.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport TableModel from 'app/core/table_model';\n\nlet TIME_STAMP_FIELD = '_time',\n    INTERNAL_FIELD_PATTERN = /^_.+/;\n\nfunction handleRawQueryResponse(response, tsField=TIME_STAMP_FIELD, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  let results = response.results;\n  let data = {};\n  let dataFields = filterNonInternalFields(_.map(response.fields, 'name'), false, internalFieldPattern);\n\n  _.forEach(results, (entry) => {\n    // Handle response with 'BY' clause - group points by each non-time field\n    _.forEach(dataFields, (field) => {\n      if (!data[field]) {\n        data[field] = [];\n      }\n\n      let point = convertToDataPoint(entry[field], entry[tsField]);\n      data[field].push(point);\n    });\n  });\n\n  return _.map(data, (value, key) => {\n    return {\n      target: key,\n      datapoints: value\n    };\n  });\n}\n\nfunction handleTableResponse(results, tsField=TIME_STAMP_FIELD, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  // let fields = _.map(response.fields, 'name');\n  // let results = response.results;\n  let table = new TableModel();\n\n  let fields = _.map(_.head(results), (v, k) => {\n    return k;\n  });\n\n  // Remove internal fields\n  fields = filterNonInternalFields(fields, true, internalFieldPattern);\n\n  _.forEach(fields, field => {\n    if (field === tsField) {\n      // Add TIME_STAMP_FIELD as standard time column\n      table.columns.push({text: 'Time', type: 'time'});\n    } else {\n      table.columns.push({text: field});\n    }\n  });\n\n  _.forEach(results, (entry) => {\n    let row = _.map(fields, field => {\n      return tryToNumber(entry[field]);\n    });\n    table.rows.push(row);\n  });\n\n  return table;\n}\n\nfunction convertToDataPoint(value, timeStamp) {\n  let ts = moment.utc(timeStamp).valueOf();\n  let val = value ? Number(value) : null;\n  return [val, ts];\n}\n\nfunction tryToNumber(value) {\n  if (value && !isNaN(Number(value))) {\n    return Number(value);\n  } else {\n    return value;\n  }\n}\n\nfunction filterNonInternalFields(fields, includeTimeStamp=true, internalFieldPattern=INTERNAL_FIELD_PATTERN) {\n  return _.filter(fields, field => {\n    return !isInternalField(field, internalFieldPattern) ||\n      (field === TIME_STAMP_FIELD && includeTimeStamp);\n  });\n}\n\nfunction isInternalField(field, internalFieldPattern = INTERNAL_FIELD_PATTERN) {\n  return internalFieldPattern.test(field);\n}\n\nexport default {\n  handleRawQueryResponse: handleRawQueryResponse,\n  handleTableResponse: handleTableResponse\n};\n"]}