{"version":3,"sources":["../../src/splunk_api.js"],"names":["splunkAPIFactory","formatSearch","$httpParamSerializerJQLike","backendSrv","SplunkAPI","instanceSettings","options","jsonData","url","basicAuth","withCredentials","paramSerializer","AUTO_CANCEL","isNumber","autoCancel","STATUS_BUCKETS","statusBuckets","DEFAULT_EARLIEST_TIME","defaultEarliestTime","MIN_POLL_INTERVAL","minPollInterval","MAX_POLL_INTERVAL","maxPollInterval","query","timeFrom","timeTo","sid","createSearchJob","then","result","waitForJobFinish","status","getSearchJobResult","response","results","waitForJobResultPreview","exec_mode","getSearchJobStatus","isDone","interval","getRandomInterval","Promise","resolve","setTimeout","getSearchJobResultPreview","length","timeRange","subject","previewResults","catch","console","log","error","next","complete","job","dispatchState","waitForPreview","search","namespace","endpoint","data","earliest_time","latest_time","auto_cancel","status_buckets","id","_post","action","_get","entry","content","params","count","name","encodeURI","getMetrics","resource","output_mode","method","headers","datasourceRequest","handleSplunkApiRequestError","messages","type","reject","text","err","cancelled","message","config","statusText","min","max","Math","floor","random","GENERATING_COMMAND_PATTERN","isGeneratingCommand","test","module","factory"],"mappings":";;;;;;;;QAGgBA,gB,GAAAA,gB;QAibAC,Y,GAAAA,Y;;AApbhB;;;;AACA;;;;;;;;AAEO,SAASD,gBAAT,CAA0BE,0BAA1B,EAAsDC,UAAtD,EAAkE;AAAA,MAEjEC,SAFiE;AAIrE,uBAAYC,gBAAZ,EAA8B;AAAA;;AAC5B,UAAIC,UAAUD,iBAAiBE,QAA/B;AACA,WAAKC,GAAL,GAAWH,iBAAiBG,GAA5B;;AAEA,WAAKC,SAAL,GAAiBJ,iBAAiBI,SAAlC;AACA,WAAKC,eAAL,GAAuBL,iBAAiBK,eAAxC;;AAEA,WAAKC,eAAL,GAAuBT,0BAAvB;AACA,WAAKC,UAAL,GAAkBA,UAAlB;;AAEA,WAAKS,WAAL,GAAmB,iBAAEC,QAAF,CAAWP,QAAQQ,UAAnB,IAAiCR,QAAQQ,UAAzC,GAAsD,EAAzE;AACA,WAAKC,cAAL,GAAsB,iBAAEF,QAAF,CAAWP,QAAQU,aAAnB,IAAoCV,QAAQU,aAA5C,GAA4D,GAAlF;AACA,WAAKC,qBAAL,GAA6BX,QAAQY,mBAAR,IAA+B,MAA5D;;AAEA;AACA;AACA,WAAKC,iBAAL,GAAyBb,QAAQc,eAAR,IAA2B,GAApD;AACA,WAAKC,iBAAL,GAAyBf,QAAQgB,eAAR,IAA2B,IAApD;AACD;;AAtBoE;AAAA;AAAA,wCAwBnDC,KAxBmD,EAwB5CC,QAxB4C,EAwBlCC,MAxBkC,EAwB1BC,GAxB0B,EAwBP;AAAA;;AAAA,YAAdpB,OAAc,uEAAJ,EAAI;;AAC5D,eAAO,KAAKqB,eAAL,CAAqBJ,KAArB,EAA4BjB,OAA5B,EAAqCkB,QAArC,EAA+CC,MAA/C,EAAuDC,GAAvD,EACNE,IADM,CACD,kBAAU;AACd,cAAIF,MAAMG,OAAOH,GAAjB;AACA,iBAAO,MAAKI,gBAAL,CAAsBJ,GAAtB,CAAP;AACD,SAJM,EAKNE,IALM,CAKD,kBAAU;AACd,cAAIC,OAAOE,MAAP,KAAkB,MAAtB,EAA8B;AAC5B,mBAAO,MAAKC,kBAAL,CAAwBH,OAAOH,GAA/B,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,EAAP;AACD;AACF,SAXM,EAYNE,IAZM,CAYD,oBAAY;AAChB,cAAIK,YAAYA,SAASC,OAAzB,EAAkC;AAChC,mBAAOD,SAASC,OAAhB;AACD,WAFD,MAEO;AACL;AACA,mBAAO,EAAP;AACD;AACF,SAnBM,CAAP;AAoBD;AA7CoE;AAAA;AAAA,sDA+CrCX,KA/CqC,EA+C9BC,QA/C8B,EA+CpBC,MA/CoB,EA+CZC,GA/CY,EA+CO;AAAA;;AAAA,YAAdpB,OAAc,uEAAJ,EAAI;;AAC1E,eAAO,KAAKqB,eAAL,CAAqBJ,KAArB,EAA4BjB,OAA5B,EAAqCkB,QAArC,EAA+CC,MAA/C,EAAuDC,GAAvD,EACNE,IADM,CACD,kBAAU;AACd,cAAIF,MAAMG,OAAOH,GAAjB;AACA,iBAAO,OAAKI,gBAAL,CAAsBJ,GAAtB,CAAP;AACD,SAJM,EAKNE,IALM,CAKD,kBAAU;AACd,cAAIC,OAAOE,MAAP,KAAkB,MAAtB,EAA8B;AAC5B,mBAAO,OAAKC,kBAAL,CAAwBH,OAAOH,GAA/B,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,EAAP;AACD;AACF,SAXM,CAAP;AAYD;AA5DoE;AAAA;AAAA,8CA8D7CH,KA9D6C,EA8DtCC,QA9DsC,EA8D5BC,MA9D4B,EA8DpBC,GA9DoB,EA8DD;AAAA;;AAAA,YAAdpB,OAAc,uEAAJ,EAAI;;AAClE,eAAO,KAAKqB,eAAL,CAAqBJ,KAArB,EAA4BjB,OAA5B,EAAqCkB,QAArC,EAA+CC,MAA/C,EAAuDC,GAAvD,EACNE,IADM,CACD,kBAAU;AACd,cAAIF,MAAMG,OAAOH,GAAjB;AACA,iBAAO,OAAKS,uBAAL,CAA6BT,GAA7B,CAAP;AACD,SAJM,EAKNE,IALM,CAKD,oBAAY;AAChB,cAAIK,YAAYA,SAASC,OAAzB,EAAkC;AAChC,mBAAOD,SAASC,OAAhB;AACD,WAFD,MAEO;AACL;AACA,mBAAO,EAAP;AACD;AACF,SAZM,CAAP;AAcD;AA7EoE;AAAA;AAAA,2CA+EhDX,KA/EgD,EA+EzCC,QA/EyC,EA+E/BC,MA/E+B,EA+EvBC,GA/EuB,EA+EJ;AAAA,YAAdpB,OAAc,uEAAJ,EAAI;;AAC/DA,gBAAQ8B,SAAR,GAAoB,SAApB;;AAEA,eAAO,KAAKT,eAAL,CAAqBJ,KAArB,EAA4BjB,OAA5B,EAAqCkB,QAArC,EAA+CC,MAA/C,EAAuDC,GAAvD,EACNE,IADM,CACD,oBAAY;AAChB,cAAIK,YAAYA,SAASC,OAAzB,EAAkC;AAChC,mBAAOD,SAASC,OAAhB;AACD,WAFD,MAEO;AACL;AACA,mBAAO,EAAP;AACD;AACF,SARM,CAAP;AASD;AA3FoE;AAAA;AAAA,uCA6FpDR,GA7FoD,EA6F/C;AAAA;;AACpB,eAAO,KAAKW,kBAAL,CAAwBX,GAAxB,EACNE,IADM,CACD,kBAAU;AACd,cAAIG,OAAOO,MAAX,EAAmB;AACjB,mBAAO,EAACZ,KAAKA,GAAN,EAAWK,QAAQ,MAAnB,EAAP;AACD,WAFD,MAEO,IAAIA,WAAW,UAAf,EAA2B;AAChC,mBAAO,EAACL,KAAKA,GAAN,EAAWK,QAAQ,UAAnB,EAAP;AACD,WAFM,MAEA;AACL,gBAAIQ,WAAWC,kBAAkB,OAAKrB,iBAAvB,EAA0C,OAAKE,iBAA/C,CAAf;AACA,mBAAO,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,yBAAWD,OAAX,EAAoBH,QAApB;AACD,aAFM,EAGNX,IAHM,CAGD,YAAM;AACV,qBAAO,OAAKE,gBAAL,CAAsBJ,GAAtB,CAAP;AACD,aALM,CAAP;AAMD;AACF,SAfM,CAAP;AAgBD;AA9GoE;AAAA;AAAA,8CAgH7CA,GAhH6C,EAgHxC;AAAA;;AAC3B,eAAO,KAAKkB,yBAAL,CAA+BlB,GAA/B,EACNE,IADM,CACD,kBAAU;AACd,cAAIC,UAAUA,OAAOK,OAAjB,IAA4BL,OAAOK,OAAP,CAAeW,MAA/C,EAAuD;AACrD,mBAAOhB,MAAP;AACD,WAFD,MAEO;AACL,gBAAIU,WAAWC,kBAAkB,OAAKrB,iBAAvB,EAA0C,OAAKE,iBAA/C,CAAf;AACA,mBAAO,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,yBAAWD,OAAX,EAAoBH,QAApB;AACD,aAFM,EAGNX,IAHM,CAGD,YAAM;AACV,qBAAO,OAAKO,uBAAL,CAA6BT,GAA7B,CAAP;AACD,aALM,CAAP;AAMD;AACF,SAbM,CAAP;AAcD;;AAED;AACA;AACA;;AAnIqE;AAAA;AAAA,wCAqInDH,KArImD,EAqI5CuB,SArI4C,EAqIjCC,OArIiC,EAqIxBrB,GArIwB,EAqIL;AAAA;;AAAA,YAAdpB,OAAc,uEAAJ,EAAI;AAAA,YACzDkB,QADyD,GACrCsB,SADqC,CACzDtB,QADyD;AAAA,YAC/CC,MAD+C,GACrCqB,SADqC,CAC/CrB,MAD+C;;;AAG9D,aAAKE,eAAL,CAAqBJ,KAArB,EAA4BjB,OAA5B,EAAqCkB,QAArC,EAA+CC,MAA/C,EAAuDC,GAAvD,EACCE,IADD,CACM,kBAAU;AACd,iBAAO,OAAKoB,cAAL,CAAoBnB,OAAOH,GAA3B,EAAgCqB,OAAhC,CAAP;AACD,SAHD,EAICE,KAJD,CAIO,iBAAS;AACdC,kBAAQC,GAAR,CAAYC,KAAZ;AACAL,kBAAQM,IAAR,CAAa,EAAb;AACAN,kBAAQO,QAAR;AACA;AACA;AACD,SAVD;AAWD;;AAED;;;;;;;AArJqE;AAAA;AAAA,qCA2JtD5B,GA3JsD,EA2JjDqB,OA3JiD,EA2JxC;AAAA;;AAC3B,eAAO,KAAKV,kBAAL,CAAwBX,GAAxB,EACNE,IADM,CACD,eAAO;AACX,cAAI2B,IAAIjB,MAAJ,IAAciB,IAAIC,aAAJ,KAAsB,SAAxC,EAAmD;AACjD,mBAAO,OAAKZ,yBAAL,CAA+BlB,GAA/B,EACNE,IADM,CACD,kBAAU;AACd,kBAAIC,UAAUA,OAAOK,OAArB,EAA8B;AAC5Ba,wBAAQM,IAAR,CAAaxB,MAAb;AACD;;AAED,kBAAI0B,IAAIjB,MAAR,EAAgB;AACdS,wBAAQO,QAAR;AACA;AACD;;AAED,qBAAO,OAAKG,cAAL,CAAoB/B,GAApB,EAAyBqB,OAAzB,CAAP;AACD,aAZM,CAAP;AAaD,WAdD,MAcO;AACL,mBAAO,OAAKU,cAAL,CAAoB/B,GAApB,EAAyBqB,OAAzB,CAAP;AACD;AACF,SAnBM,CAAP;AAoBD;AAhLoE;AAAA;AAAA,qCAkLtDrB,GAlLsD,EAkLjDqB,OAlLiD,EAkLxC;AAAA;;AAC3B,YAAIR,WAAWC,kBAAkB,KAAKrB,iBAAvB,EAA0C,KAAKE,iBAA/C,CAAf;AACA,eAAO,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,qBAAWD,OAAX,EAAoBH,QAApB;AACD,SAFM,EAEJX,IAFI,CAEC,YAAM;AACZ,iBAAO,OAAKoB,cAAL,CAAoBtB,GAApB,EAAyBqB,OAAzB,CAAP;AACD,SAJM,CAAP;AAKD;;AAED;AACA;AACA;;AA7LqE;AAAA;AAAA,sCA+LrDW,MA/LqD,EA+L7CpD,OA/L6C,EA+LpCkB,QA/LoC,EA+L1BC,MA/L0B,EA+LlBC,GA/LkB,EA+Lb;AACtDF,mBAAWA,YAAY,KAAKP,qBAA5B;AADsD,YAEjDmB,SAFiD,GAEzB9B,OAFyB,CAEjD8B,SAFiD;AAAA,YAEtCuB,SAFsC,GAEzBrD,OAFyB,CAEtCqD,SAFsC;;AAGtD,YAAIC,WAAW,uBAAf;;AAEA,YAAIC,OAAO;AACTH,kBAAQzD,aAAayD,MAAb,CADC;AAETI,yBAAetC,QAFN;AAGTuC,uBAAatC,MAHJ;AAITuC,uBAAa,KAAKpD,WAJT;AAKTqD,0BAAgB,KAAKlD;AALZ,SAAX;;AAQA,YAAIqB,SAAJ,EAAe;AACbyB,eAAKzB,SAAL,GAAiBA,SAAjB;AACD;;AAED,YAAIV,GAAJ,EAAS;AACPmC,eAAKK,EAAL,GAAUxC,GAAV;AACD;;AAED,YAAIiC,SAAJ,EAAe;AACbE,eAAKF,SAAL,GAAiBA,SAAjB;AACAC,wCAA4BD,SAA5B;AACD;;AAED,eAAO,KAAKQ,KAAL,CAAWP,QAAX,EAAqBC,IAArB,CAAP;AACD;AA1NoE;AAAA;AAAA,sCA4NrDnC,GA5NqD,EA4NhD;AACnB,YAAImC,OAAO;AACTO,kBAAQ;AADC,SAAX;;AAIA,eAAO,KAAKD,KAAL,4BAAoCzC,GAApC,eAAmDmC,IAAnD,CAAP;AACD;AAlOoE;AAAA;AAAA,yCAoOlDnC,GApOkD,EAoO7C;AACtB,eAAO,KAAK2C,IAAL,CAAU,2BAA2B3C,GAArC,EACNE,IADM,CACD,kBAAU;AACd,iBAAOC,OAAOyC,KAAP,CAAa,CAAb,EAAgBC,OAAvB;AACD,SAHM,EAINtB,KAJM,CAIA,YAAM;AACX,iBAAO,UAAP;AACD,SANM,CAAP;AAOD;AA5OoE;AAAA;AAAA,yCA8OlDvB,GA9OkD,EA8O7C;AACtB,YAAI8C,SAAS;AACXC,iBAAO;AADI,SAAb;;AAIA,eAAO,KAAKJ,IAAL,CAAU,2BAA2B3C,GAA3B,GAAiC,UAA3C,EAAuD8C,MAAvD,EACN5C,IADM,CACD,kBAAU;AACd,iBAAOC,MAAP;AACD,SAHM,CAAP;AAID;AAvPoE;AAAA;AAAA,gDAyP3CH,GAzP2C,EAyP7B;AAAA,YAAT+C,KAAS,uEAAH,CAAG;;AACtC,YAAID,SAAS;AACXC,iBAAOA;AADI,SAAb;;AAIA,eAAO,KAAKJ,IAAL,CAAU,2BAA2B3C,GAA3B,GAAiC,kBAA3C,EAA+D8C,MAA/D,EACN5C,IADM,CACD,kBAAU;AACd,iBAAOC,MAAP;AACD,SAHM,CAAP;AAID;AAlQoE;AAAA;AAAA,sCAoQrD;AACd,eAAO,KAAKwC,IAAL,CAAU,uBAAV,EACNzC,IADM,CACD,kBAAU;AACd,iBAAOC,MAAP;AACD,SAHM,CAAP;AAID;;AAED;AACA;AACA;;AA7QqE;AAAA;AAAA,wCA+QnD;AAChB,eAAO,KAAKwC,IAAL,CAAU,yBAAV,EACNzC,IADM,CACD,kBAAU;AACd,iBAAOC,MAAP;AACD,SAHM,CAAP;AAID;AApRoE;AAAA;AAAA,qCAsRtD6C,IAtRsD,EAsRhD;AACnB;AACAA,eAAOA,OAAOC,UAAUD,IAAV,CAAP,GAAyB,GAAhC;;AAEA,eAAO,KAAKL,IAAL,CAAU,mCAAmCK,IAA7C,EACN9C,IADM,CACD,kBAAU;AACd,cAAIC,UAAUA,OAAOyC,KAArB,EAA4B;AAC1B,mBAAOzC,OAAOyC,KAAd;AACD,WAFD,MAEO;AACL,mBAAO,EAAP;AACD;AACF,SAPM,EAQNrB,KARM,CAQA,YAAM;AACX;AACA,iBAAO,EAAP;AACD,SAXM,CAAP;AAYD;;AAED;;AAxSqE;AAAA;AAAA,mCAySxD;AACX,eAAO,KAAK2B,UAAL,CAAgB,cAAhB,CAAP;AACD;AA3SoE;AAAA;AAAA,uCA6SpD;AACf,eAAO,KAAKA,UAAL,CAAgB,mBAAhB,CAAP;AACD;AA/SoE;AAAA;AAAA,gCAiT3D;AACR,eAAO,KAAKA,UAAL,CAAgB,YAAhB,CAAP;AACD;AAnToE;AAAA;AAAA,iCAqT1DC,QArT0D,EAqThD;AACnB,YAAIL,SAAS;AACXC,iBAAO;AADI,SAAb;;AAIA,eAAO,KAAKJ,IAAL,CAAU,eAAeQ,QAAzB,EAAmCL,MAAnC,EACN5C,IADM,CACD,kBAAU;AACd,cAAIC,UAAUA,OAAOyC,KAArB,EAA4B;AAC1B,mBAAOzC,OAAOyC,KAAd;AACD,WAFD,MAEO;AACL,mBAAO,EAAP;AACD;AACF,SAPM,CAAP;AAQD;;AAED;AACA;AACA;;AAtUqE;AAAA;AAAA,2BAwUhE9D,GAxUgE,EAwU3DgE,MAxU2D,EAwUnD;AAChBA,iBAASA,SAASA,MAAT,GAAkB,EAA3B;AACAA,eAAOM,WAAP,GAAqB,MAArB;;AAEA,YAAIxE,UAAU;AACZyE,kBAAQ,KADI;AAEZvE,eAAK,KAAKA,GAAL,GAAWA,GAFJ;AAGZgE,kBAAQA;AAHI,SAAd;;AAMA,YAAI,KAAK/D,SAAL,IAAkB,KAAKC,eAA3B,EAA4C;AAC1CJ,kBAAQI,eAAR,GAA0B,IAA1B;AACD;AACD,YAAI,KAAKD,SAAT,EAAoB;AAClBH,kBAAQ0E,OAAR,GAAkB;AAChB,6BAAiB,KAAKvE;AADN,WAAlB;AAGD;;AAED,eAAO,KAAKN,UAAL,CAAgB8E,iBAAhB,CAAkC3E,OAAlC,EACNsB,IADM,CACD,oBAAY;AAChB,iBAAOK,SAAS4B,IAAhB;AACD,SAHM,EAINZ,KAJM,CAIAiC,2BAJA,CAAP;AAKD;AAhWoE;AAAA;AAAA,4BAkW/D1E,GAlW+D,EAkW1DqD,IAlW0D,EAkWpD;AACfA,aAAKiB,WAAL,GAAmB,MAAnB;;AAEA,YAAIxE,UAAU;AACZyE,kBAAQ,MADI;AAEZvE,eAAK,KAAKA,GAAL,GAAWA,GAFJ;AAGZ;AACAqD,gBAAM,KAAKlD,eAAL,CAAqBkD,IAArB,CAJM;AAKZmB,mBAAS;AACP,4BAAgB;AADT;AALG,SAAd;;AAUA,YAAI,KAAKvE,SAAL,IAAkB,KAAKC,eAA3B,EAA4C;AAC1CJ,kBAAQI,eAAR,GAA0B,IAA1B;AACD;AACD,YAAI,KAAKD,SAAT,EAAoB;AAClBH,kBAAQ0E,OAAR,CAAgB,eAAhB,IAAmC,KAAKvE,SAAxC;AACD;;AAED,eAAO,KAAKN,UAAL,CAAgB8E,iBAAhB,CAAkC3E,OAAlC,EACNsB,IADM,CACD,oBAAY;AAChB,cAAIiC,OAAO5B,SAAS4B,IAApB;AACA,cAAIA,QAAQA,KAAKsB,QAAb,IAAyBtB,KAAKsB,QAAL,CAActC,MAA3C,EAAmD;AACjD,gBAAIO,QAAQS,KAAKsB,QAAL,CAAc,CAAd,CAAZ;AACA,gBAAI/B,MAAMgC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,qBAAO3C,QAAQ4C,MAAR,CAAejC,KAAf,CAAP;AACD,aAFD,MAEO;AACLF,sBAAQC,GAAR,CAAeC,MAAMgC,IAArB,UAA8BhC,MAAMkC,IAApC;AACD;AACF;;AAED,iBAAOzB,IAAP;AACD,SAbM,EAcNZ,KAdM,CAcAiC,2BAdA,CAAP;AAeD;AArYoE;;AAAA;AAAA;;AAwYvE,SAAO9E,SAAP;AACD;;AAED,SAAS8E,2BAAT,CAAqCK,GAArC,EAA0C;AACxC,MAAIA,IAAIC,SAAR,EAAmB;AACjBD,UAAMA,IAAIA,GAAV;AACAA,QAAIC,SAAJ,GAAgB,IAAhB;AACD;;AAED,MAAID,IAAIxD,MAAJ,KAAe,CAAf,IAAoBwD,IAAIxD,MAAJ,IAAc,GAAtC,EAA2C;AACzC,QAAIwD,IAAI1B,IAAJ,IAAY0B,IAAI1B,IAAJ,CAASsB,QAArB,IAAiCI,IAAI1B,IAAJ,CAASsB,QAAT,CAAkBtC,MAAvD,EAA+D;AAC7D,UAAI4C,UAAUF,IAAI1B,IAAJ,CAASsB,QAAT,CAAkB,CAAlB,CAAd;AACA,aAAO1C,QAAQ4C,MAAR,CAAe;AACpBI,oCAA0BA,QAAQL,IAAlC,SAA0CK,QAAQH,IAD9B;AAEpBzB,cAAM0B,IAAI1B,IAFU;AAGpB6B,gBAAQH,IAAIG;AAHQ,OAAf,CAAP;AAKD,KAPD,MAOO;AACL,aAAOjD,QAAQ4C,MAAR,CAAe;AACpBI,iBAAS,oBAAoBF,IAAII,UAAxB,GAAqC,GAArC,GAA2CJ,IAAIxD,MAA/C,GAAwD,GAD7C;AAEpB8B,cAAM0B,IAAI1B,IAFU;AAGpB6B,gBAAQH,IAAIG,MAHQ;AAIpBF,mBAAWD,IAAIC;AAJK,OAAf,CAAP;AAMD;AACF,GAhBD,MAgBO;AACLtC,YAAQC,GAAR,CAAYoC,GAAZ;AACA,WAAO,EAAP;AACD;AACF;;AAED,SAAS/C,iBAAT,CAA2BoD,GAA3B,EAAgCC,GAAhC,EAAqC;AACnC,SAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBH,MAAMD,GAAvB,CAAX,IAA0CA,GAAjD;AACD;;AAED,IAAMK,6BAA6B,QAAnC;;AAEA,SAASC,mBAAT,CAA6B3E,KAA7B,EAAoC;AAClC,SAAO0E,2BAA2BE,IAA3B,CAAgC5E,KAAhC,CAAP;AACD;;AAEM,SAAStB,YAAT,CAAsBsB,KAAtB,EAA6B;AAClC,MAAI2E,oBAAoB3E,KAApB,CAAJ,EAAgC;AAC9B,WAAOA,KAAP;AACD,GAFD,MAEO;AACL,WAAO,YAAYA,KAAnB;AACD;AACF;;AAED,kBACG6E,MADH,CACU,kBADV,EAEGC,OAFH,CAEW,WAFX,EAEwBrG,gBAFxB","file":"splunk_api.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\n\nexport function splunkAPIFactory($httpParamSerializerJQLike, backendSrv) {\n\n  class SplunkAPI {\n\n    constructor(instanceSettings) {\n      let options = instanceSettings.jsonData;\n      this.url = instanceSettings.url;\n\n      this.basicAuth = instanceSettings.basicAuth;\n      this.withCredentials = instanceSettings.withCredentials;\n\n      this.paramSerializer = $httpParamSerializerJQLike;\n      this.backendSrv = backendSrv;\n\n      this.AUTO_CANCEL = _.isNumber(options.autoCancel) ? options.autoCancel : 30;\n      this.STATUS_BUCKETS = _.isNumber(options.statusBuckets) ? options.statusBuckets : 300;\n      this.DEFAULT_EARLIEST_TIME = options.defaultEarliestTime || '-1hr';\n\n      // Search result polling intervals. Interval for next poll choosing randomly\n      // from [MIN_POLL_INTERVAL, MAX_POLL_INTERVAL]\n      this.MIN_POLL_INTERVAL = options.minPollInterval || 500;\n      this.MAX_POLL_INTERVAL = options.maxPollInterval || 3000;\n    }\n\n    invokeAsyncSearch(query, timeFrom, timeTo, sid, options = {}) {\n      return this.createSearchJob(query, options, timeFrom, timeTo, sid)\n      .then(result => {\n        let sid = result.sid;\n        return this.waitForJobFinish(sid);\n      })\n      .then(result => {\n        if (result.status === 'done') {\n          return this.getSearchJobResult(result.sid);\n        } else {\n          return [];\n        }\n      })\n      .then(response => {\n        if (response && response.results) {\n          return response.results;\n        } else {\n          // Return empty result if job was canceled\n          return [];\n        }\n      });\n    }\n\n    invokeAsyncSearchWithFullResult(query, timeFrom, timeTo, sid, options = {}) {\n      return this.createSearchJob(query, options, timeFrom, timeTo, sid)\n      .then(result => {\n        let sid = result.sid;\n        return this.waitForJobFinish(sid);\n      })\n      .then(result => {\n        if (result.status === 'done') {\n          return this.getSearchJobResult(result.sid);\n        } else {\n          return [];\n        }\n      });\n    }\n\n    invokeSearchWithPreview(query, timeFrom, timeTo, sid, options = {}) {\n      return this.createSearchJob(query, options, timeFrom, timeTo, sid)\n      .then(result => {\n        let sid = result.sid;\n        return this.waitForJobResultPreview(sid);\n      })\n      .then(response => {\n        if (response && response.results) {\n          return response.results;\n        } else {\n          // Return empty result if job was canceled\n          return [];\n        }\n      });\n\n    }\n\n    invokeBlockingSearch(query, timeFrom, timeTo, sid, options = {}) {\n      options.exec_mode = 'oneshot';\n\n      return this.createSearchJob(query, options, timeFrom, timeTo, sid)\n      .then(response => {\n        if (response && response.results) {\n          return response.results;\n        } else {\n          // Return empty result if job was canceled\n          return [];\n        }\n      });\n    }\n\n    waitForJobFinish(sid) {\n      return this.getSearchJobStatus(sid)\n      .then(status => {\n        if (status.isDone) {\n          return {sid: sid, status: 'done'};\n        } else if (status === 'canceled') {\n          return {sid: sid, status: 'canceled'};\n        } else {\n          let interval = getRandomInterval(this.MIN_POLL_INTERVAL, this.MAX_POLL_INTERVAL);\n          return new Promise((resolve) => {\n            setTimeout(resolve, interval);\n          })\n          .then(() => {\n            return this.waitForJobFinish(sid);\n          });\n        }\n      });\n    }\n\n    waitForJobResultPreview(sid) {\n      return this.getSearchJobResultPreview(sid)\n      .then(result => {\n        if (result && result.results && result.results.length) {\n          return result;\n        } else {\n          let interval = getRandomInterval(this.MIN_POLL_INTERVAL, this.MAX_POLL_INTERVAL);\n          return new Promise((resolve) => {\n            setTimeout(resolve, interval);\n          })\n          .then(() => {\n            return this.waitForJobResultPreview(sid);\n          });\n        }\n      });\n    }\n\n    ////////////////////////\n    // Stream mode (RxJs) //\n    ////////////////////////\n\n    searchWithPreview(query, timeRange, subject, sid, options = {}) {\n      let {timeFrom, timeTo} = timeRange;\n\n      this.createSearchJob(query, options, timeFrom, timeTo, sid)\n      .then(result => {\n        return this.previewResults(result.sid, subject);\n      })\n      .catch(error => {\n        console.log(error);\n        subject.next([]);\n        subject.complete();\n        // TODO: improve error handling in Grafana\n        // subject.error(error);\n      });\n    }\n\n    /**\n     * Check for job status and get results preview using random inteval util\n     * job is finished.\n     * @param {*} sid\n     * @param {*} subject\n     */\n    previewResults(sid, subject) {\n      return this.getSearchJobStatus(sid)\n      .then(job => {\n        if (job.isDone || job.dispatchState === 'RUNNING') {\n          return this.getSearchJobResultPreview(sid)\n          .then(result => {\n            if (result && result.results) {\n              subject.next(result);\n            }\n\n            if (job.isDone) {\n              subject.complete();\n              return;\n            }\n\n            return this.waitForPreview(sid, subject);\n          });\n        } else {\n          return this.waitForPreview(sid, subject);\n        }\n      });\n    }\n\n    waitForPreview(sid, subject) {\n      let interval = getRandomInterval(this.MIN_POLL_INTERVAL, this.MAX_POLL_INTERVAL);\n      return new Promise((resolve) => {\n        setTimeout(resolve, interval);\n      }).then(() => {\n        return this.previewResults(sid, subject);\n      });\n    }\n\n    /////////////////\n    // Search Jobs //\n    /////////////////\n\n    createSearchJob(search, options, timeFrom, timeTo, sid) {\n      timeFrom = timeFrom || this.DEFAULT_EARLIEST_TIME;\n      let {exec_mode, namespace} = options;\n      let endpoint = '/services/search/jobs';\n\n      let data = {\n        search: formatSearch(search),\n        earliest_time: timeFrom,\n        latest_time: timeTo,\n        auto_cancel: this.AUTO_CANCEL,\n        status_buckets: this.STATUS_BUCKETS\n      };\n\n      if (exec_mode) {\n        data.exec_mode = exec_mode;\n      }\n\n      if (sid) {\n        data.id = sid;\n      }\n\n      if (namespace) {\n        data.namespace = namespace;\n        endpoint = `/servicesNS/-/${namespace}/search/jobs`;\n      }\n\n      return this._post(endpoint, data);\n    }\n\n    cancelSearchJob(sid) {\n      let data = {\n        action: 'cancel'\n      };\n\n      return this._post(`/services/search/jobs/${sid}/control`, data);\n    }\n\n    getSearchJobStatus(sid) {\n      return this._get('/services/search/jobs/' + sid)\n      .then(result => {\n        return result.entry[0].content;\n      })\n      .catch(() => {\n        return 'canceled';\n      });\n    }\n\n    getSearchJobResult(sid) {\n      let params = {\n        count: 0\n      };\n\n      return this._get('/services/search/jobs/' + sid + '/results', params)\n      .then(result => {\n        return result;\n      });\n    }\n\n    getSearchJobResultPreview(sid, count=0) {\n      let params = {\n        count: count\n      };\n\n      return this._get('/services/search/jobs/' + sid + '/results_preview', params)\n      .then(result => {\n        return result;\n      });\n    }\n\n    getSearchJobs() {\n      return this._get('/services/search/jobs')\n      .then(result => {\n        return result;\n      });\n    }\n\n    //////////////////////////\n    // API Methods Wrappers //\n    //////////////////////////\n\n    getServerStatus() {\n      return this._get('/services/server/status')\n      .then(result => {\n        return result;\n      });\n    }\n\n    getFiredAlerts(name) {\n      // Use '-' for name to return all fired alerts.\n      name = name ? encodeURI(name) : '-';\n\n      return this._get('/services/alerts/fired_alerts/' + name)\n      .then(result => {\n        if (result && result.entry) {\n          return result.entry;\n        } else {\n          return [];\n        }\n      })\n      .catch(() => {\n        // Alert with given name isn't existed\n        return [];\n      });\n    }\n\n    // Metric suggestions\n    getIndexes() {\n      return this.getMetrics('data/indexes');\n    }\n\n    getSourcetypes() {\n      return this.getMetrics('saved/sourcetypes');\n    }\n\n    getApps() {\n      return this.getMetrics('apps/local');\n    }\n\n    getMetrics(resource) {\n      let params = {\n        count: 0\n      };\n\n      return this._get('/services/' + resource, params)\n      .then(result => {\n        if (result && result.entry) {\n          return result.entry;\n        } else {\n          return [];\n        }\n      });\n    }\n\n    ///////////////////////////\n    // Core request wrappers //\n    ///////////////////////////\n\n    _get(url, params) {\n      params = params ? params : {};\n      params.output_mode = 'json';\n\n      let options = {\n        method: 'GET',\n        url: this.url + url,\n        params: params,\n      };\n\n      if (this.basicAuth || this.withCredentials) {\n        options.withCredentials = true;\n      }\n      if (this.basicAuth) {\n        options.headers = {\n          \"Authorization\": this.basicAuth\n        };\n      }\n\n      return this.backendSrv.datasourceRequest(options)\n      .then(response => {\n        return response.data;\n      })\n      .catch(handleSplunkApiRequestError);\n    }\n\n    _post(url, data) {\n      data.output_mode = 'json';\n\n      let options = {\n        method: 'POST',\n        url: this.url + url,\n        // Data should sent as Form Data and proper serialized\n        data: this.paramSerializer(data),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      if (this.basicAuth || this.withCredentials) {\n        options.withCredentials = true;\n      }\n      if (this.basicAuth) {\n        options.headers[\"Authorization\"] = this.basicAuth;\n      }\n\n      return this.backendSrv.datasourceRequest(options)\n      .then(response => {\n        let data = response.data;\n        if (data && data.messages && data.messages.length) {\n          let error = data.messages[0];\n          if (error.type === 'FATAL') {\n            return Promise.reject(error);\n          } else {\n            console.log(`${error.type}: ${error.text}`);\n          }\n        }\n\n        return data;\n      })\n      .catch(handleSplunkApiRequestError);\n    }\n  }\n\n  return SplunkAPI;\n}\n\nfunction handleSplunkApiRequestError(err) {\n  if (err.cancelled) {\n    err = err.err;\n    err.cancelled = true;\n  }\n\n  if (err.status !== 0 || err.status >= 300) {\n    if (err.data && err.data.messages && err.data.messages.length) {\n      let message = err.data.messages[0];\n      return Promise.reject({\n        message: `Splunk Error: ${message.type} ${message.text}`,\n        data: err.data,\n        config: err.config\n      });\n    } else {\n      return Promise.reject({\n        message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n        data: err.data,\n        config: err.config,\n        cancelled: err.cancelled\n      });\n    }\n  } else {\n    console.log(err);\n    return [];\n  }\n}\n\nfunction getRandomInterval(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst GENERATING_COMMAND_PATTERN = /^\\s*\\|/;\n\nfunction isGeneratingCommand(query) {\n  return GENERATING_COMMAND_PATTERN.test(query);\n}\n\nexport function formatSearch(query) {\n  if (isGeneratingCommand(query)) {\n    return query;\n  } else {\n    return 'search ' + query;\n  }\n}\n\nangular\n  .module('grafana.services')\n  .factory('SplunkAPI', splunkAPIFactory);\n"]}