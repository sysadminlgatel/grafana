(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./public/app/core/components/ScrollBar/ScrollBar.tsx":
/*!************************************************************!*\
  !*** ./public/app/core/components/ScrollBar/ScrollBar.tsx ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! baron */ "./node_modules/baron/src/core.js");
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(baron__WEBPACK_IMPORTED_MODULE_2__);



var ScrollBar = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ScrollBar, _super);
    function ScrollBar(props) {
        var _this = _super.call(this, props) || this;
        _this.handleRef = function (ref) {
            _this.container = ref;
        };
        return _this;
    }
    ScrollBar.prototype.componentDidMount = function () {
        this.scrollbar = baron__WEBPACK_IMPORTED_MODULE_2___default()({
            root: this.container.parentElement,
            scroller: this.container,
            bar: '.baron__bar',
            barOnCls: '_scrollbar',
            scrollingCls: '_scrolling',
            track: '.baron__track',
        });
    };
    ScrollBar.prototype.componentDidUpdate = function () {
        this.scrollbar.update();
    };
    ScrollBar.prototype.componentWillUnmount = function () {
        this.scrollbar.dispose();
    };
    // methods can be invoked by outside
    ScrollBar.prototype.setScrollTop = function (top) {
        if (this.container) {
            this.container.scrollTop = top;
            this.scrollbar.update();
            return true;
        }
        return false;
    };
    ScrollBar.prototype.setScrollLeft = function (left) {
        if (this.container) {
            this.container.scrollLeft = left;
            this.scrollbar.update();
            return true;
        }
        return false;
    };
    ScrollBar.prototype.update = function () {
        this.scrollbar.update();
    };
    ScrollBar.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "baron baron__root baron__clipper" },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: this.props.className + ' baron__scroller', ref: this.handleRef }, this.props.children),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "baron__track" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "baron__bar" }))));
    };
    return ScrollBar;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));
/* harmony default export */ __webpack_exports__["default"] = (ScrollBar);


/***/ }),

/***/ "./public/app/core/components/sql_part/sql_part.ts":
/*!*********************************************************!*\
  !*** ./public/app/core/components/sql_part/sql_part.ts ***!
  \*********************************************************/
/*! exports provided: SqlPartDef, SqlPart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqlPartDef", function() { return SqlPartDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SqlPart", function() { return SqlPart; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var SqlPartDef = /** @class */ (function () {
    function SqlPartDef(options) {
        this.type = options.type;
        if (options.label) {
            this.label = options.label;
        }
        else {
            this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';
        }
        this.style = options.style;
        if (this.style === 'function') {
            this.wrapOpen = '(';
            this.wrapClose = ')';
            this.separator = ', ';
        }
        else {
            this.wrapOpen = ' ';
            this.wrapClose = ' ';
            this.separator = ' ';
        }
        this.params = options.params;
        this.defaultParams = options.defaultParams;
    }
    return SqlPartDef;
}());

var SqlPart = /** @class */ (function () {
    function SqlPart(part, def) {
        this.part = part;
        this.def = def;
        if (!this.def) {
            throw { message: 'Could not find sql part ' + part.type };
        }
        this.datatype = part.datatype;
        if (part.name) {
            this.name = part.name;
            this.label = def.label + ' ' + part.name;
        }
        else {
            this.name = '';
            this.label = def.label;
        }
        part.params = part.params || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(this.def.defaultParams);
        this.params = part.params;
    }
    SqlPart.prototype.updateParam = function (strValue, index) {
        // handle optional parameters
        if (strValue === '' && this.def.params[index].optional) {
            this.params.splice(index, 1);
        }
        else {
            this.params[index] = strValue;
        }
        this.part.params = this.params;
    };
    return SqlPart;
}());



/***/ }),

/***/ "./public/app/core/logs_model.ts":
/*!***************************************!*\
  !*** ./public/app/core/logs_model.ts ***!
  \***************************************/
/*! exports provided: LogLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });
var LogLevel;
(function (LogLevel) {
    LogLevel["crit"] = "crit";
    LogLevel["warn"] = "warn";
    LogLevel["err"] = "error";
    LogLevel["error"] = "error";
    LogLevel["info"] = "info";
    LogLevel["debug"] = "debug";
    LogLevel["trace"] = "trace";
})(LogLevel || (LogLevel = {}));


/***/ }),

/***/ "./public/app/core/utils/dag.ts":
/*!**************************************!*\
  !*** ./public/app/core/utils/dag.ts ***!
  \**************************************/
/*! exports provided: Edge, Node, Graph, printGraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Edge", function() { return Edge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Node", function() { return Node; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Graph", function() { return Graph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printGraph", function() { return printGraph; });
var Edge = /** @class */ (function () {
    function Edge() {
    }
    Edge.prototype._linkTo = function (node, direction) {
        if (direction <= 0) {
            node.inputEdges.push(this);
        }
        if (direction >= 0) {
            node.outputEdges.push(this);
        }
        node.edges.push(this);
    };
    Edge.prototype.link = function (inputNode, outputNode) {
        this.unlink();
        this.inputNode = inputNode;
        this.outputNode = outputNode;
        this._linkTo(inputNode, 1);
        this._linkTo(outputNode, -1);
        return this;
    };
    Edge.prototype.unlink = function () {
        var pos;
        var inode = this.inputNode;
        var onode = this.outputNode;
        if (!(inode && onode)) {
            return;
        }
        pos = inode.edges.indexOf(this);
        if (pos > -1) {
            inode.edges.splice(pos, 1);
        }
        pos = onode.edges.indexOf(this);
        if (pos > -1) {
            onode.edges.splice(pos, 1);
        }
        pos = inode.outputEdges.indexOf(this);
        if (pos > -1) {
            inode.outputEdges.splice(pos, 1);
        }
        pos = onode.inputEdges.indexOf(this);
        if (pos > -1) {
            onode.inputEdges.splice(pos, 1);
        }
        this.inputNode = null;
        this.outputNode = null;
    };
    return Edge;
}());

var Node = /** @class */ (function () {
    function Node(name) {
        this.name = name;
        this.edges = [];
        this.inputEdges = [];
        this.outputEdges = [];
    }
    Node.prototype.getEdgeFrom = function (from) {
        if (!from) {
            return null;
        }
        if (typeof from === 'object') {
            return this.inputEdges.find(function (e) { return e.inputNode.name === from.name; });
        }
        return this.inputEdges.find(function (e) { return e.inputNode.name === from; });
    };
    Node.prototype.getEdgeTo = function (to) {
        if (!to) {
            return null;
        }
        if (typeof to === 'object') {
            return this.outputEdges.find(function (e) { return e.outputNode.name === to.name; });
        }
        return this.outputEdges.find(function (e) { return e.outputNode.name === to; });
    };
    Node.prototype.getOptimizedInputEdges = function () {
        var _this = this;
        var toBeRemoved = [];
        this.inputEdges.forEach(function (e) {
            var inputEdgesNodes = e.inputNode.inputEdges.map(function (e) { return e.inputNode; });
            inputEdgesNodes.forEach(function (n) {
                var edgeToRemove = n.getEdgeTo(_this.name);
                if (edgeToRemove) {
                    toBeRemoved.push(edgeToRemove);
                }
            });
        });
        return this.inputEdges.filter(function (e) { return toBeRemoved.indexOf(e) === -1; });
    };
    return Node;
}());

var Graph = /** @class */ (function () {
    function Graph() {
        this.nodes = {};
    }
    Graph.prototype.createNode = function (name) {
        var n = new Node(name);
        this.nodes[name] = n;
        return n;
    };
    Graph.prototype.createNodes = function (names) {
        var _this = this;
        var nodes = [];
        names.forEach(function (name) {
            nodes.push(_this.createNode(name));
        });
        return nodes;
    };
    Graph.prototype.link = function (input, output) {
        var _this = this;
        var inputArr = [];
        var outputArr = [];
        var inputNodes = [];
        var outputNodes = [];
        if (input instanceof Array) {
            inputArr = input;
        }
        else {
            inputArr = [input];
        }
        if (output instanceof Array) {
            outputArr = output;
        }
        else {
            outputArr = [output];
        }
        for (var n = 0; n < inputArr.length; n++) {
            var i = inputArr[n];
            if (typeof i === 'string') {
                inputNodes.push(this.getNode(i));
            }
            else {
                inputNodes.push(i);
            }
        }
        for (var n = 0; n < outputArr.length; n++) {
            var i = outputArr[n];
            if (typeof i === 'string') {
                outputNodes.push(this.getNode(i));
            }
            else {
                outputNodes.push(i);
            }
        }
        var edges = [];
        inputNodes.forEach(function (input) {
            outputNodes.forEach(function (output) {
                edges.push(_this.createEdge().link(input, output));
            });
        });
        return edges;
    };
    Graph.prototype.createEdge = function () {
        return new Edge();
    };
    Graph.prototype.getNode = function (name) {
        return this.nodes[name];
    };
    return Graph;
}());

var printGraph = function (g) {
    Object.keys(g.nodes).forEach(function (name) {
        var n = g.nodes[name];
        var outputEdges = n.outputEdges.map(function (e) { return e.outputNode.name; }).join(', ');
        if (!outputEdges) {
            outputEdges = '<none>';
        }
        var inputEdges = n.inputEdges.map(function (e) { return e.inputNode.name; }).join(', ');
        if (!inputEdges) {
            inputEdges = '<none>';
        }
        console.log(n.name + ":\n - links to:   " + outputEdges + "\n - links from: " + inputEdges);
    });
};


/***/ }),

/***/ "./public/app/core/utils/file_export.ts":
/*!**********************************************!*\
  !*** ./public/app/core/utils/file_export.ts ***!
  \**********************************************/
/*! exports provided: convertSeriesListToCsv, exportSeriesListToCsv, convertSeriesListToCsvColumns, exportSeriesListToCsvColumns, convertTableDataToCsv, exportTableDataToCsv, saveSaveBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertSeriesListToCsv", function() { return convertSeriesListToCsv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exportSeriesListToCsv", function() { return exportSeriesListToCsv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertSeriesListToCsvColumns", function() { return convertSeriesListToCsvColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exportSeriesListToCsvColumns", function() { return exportSeriesListToCsvColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertTableDataToCsv", function() { return convertTableDataToCsv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exportTableDataToCsv", function() { return exportTableDataToCsv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveSaveBlob", function() { return saveSaveBlob; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/FileSaver.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);




var DEFAULT_DATETIME_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';
var POINT_TIME_INDEX = 1;
var POINT_VALUE_INDEX = 0;
var END_COLUMN = ';';
var END_ROW = '\r\n';
var QUOTE = '"';
var EXPORT_FILENAME = 'grafana_data_export.csv';
function csvEscaped(text) {
    if (!text) {
        return text;
    }
    return text.split(QUOTE).join(QUOTE + QUOTE);
}
var domParser = new DOMParser();
function htmlDecoded(text) {
    if (!text) {
        return text;
    }
    var regexp = /&[^;]+;/g;
    function htmlDecoded(value) {
        var parsedDom = domParser.parseFromString(value, 'text/html');
        return parsedDom.body.textContent;
    }
    return text.replace(regexp, htmlDecoded).replace(regexp, htmlDecoded);
}
function formatSpecialHeader(useExcelHeader) {
    return useExcelHeader ? "sep=" + END_COLUMN + END_ROW : '';
}
function formatRow(row, addEndRowDelimiter) {
    if (addEndRowDelimiter === void 0) { addEndRowDelimiter = true; }
    var text = '';
    for (var i = 0; i < row.length; i += 1) {
        if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isBoolean"])(row[i]) || Object(util__WEBPACK_IMPORTED_MODULE_3__["isNullOrUndefined"])(row[i])) {
            text += row[i];
        }
        else if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isNumber"])(row[i])) {
            text += row[i].toLocaleString();
        }
        else {
            text += "" + QUOTE + csvEscaped(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["unescape"])(htmlDecoded(row[i]))) + QUOTE;
        }
        if (i < row.length - 1) {
            text += END_COLUMN;
        }
    }
    return addEndRowDelimiter ? text + END_ROW : text;
}
function convertSeriesListToCsv(seriesList, dateTimeFormat, excel) {
    if (dateTimeFormat === void 0) { dateTimeFormat = DEFAULT_DATETIME_FORMAT; }
    if (excel === void 0) { excel = false; }
    var text = formatSpecialHeader(excel) + formatRow(['Series', 'Time', 'Value']);
    for (var seriesIndex = 0; seriesIndex < seriesList.length; seriesIndex += 1) {
        for (var i = 0; i < seriesList[seriesIndex].datapoints.length; i += 1) {
            text += formatRow([
                seriesList[seriesIndex].alias,
                moment__WEBPACK_IMPORTED_MODULE_1___default()(seriesList[seriesIndex].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat),
                seriesList[seriesIndex].datapoints[i][POINT_VALUE_INDEX],
            ], i < seriesList[seriesIndex].datapoints.length - 1 || seriesIndex < seriesList.length - 1);
        }
    }
    return text;
}
function exportSeriesListToCsv(seriesList, dateTimeFormat, excel) {
    if (dateTimeFormat === void 0) { dateTimeFormat = DEFAULT_DATETIME_FORMAT; }
    if (excel === void 0) { excel = false; }
    var text = convertSeriesListToCsv(seriesList, dateTimeFormat, excel);
    saveSaveBlob(text, EXPORT_FILENAME);
}
function convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel) {
    if (dateTimeFormat === void 0) { dateTimeFormat = DEFAULT_DATETIME_FORMAT; }
    if (excel === void 0) { excel = false; }
    // add header
    var text = formatSpecialHeader(excel) +
        formatRow(['Time'].concat(seriesList.map(function (val) {
            return val.alias;
        })));
    // process data
    seriesList = mergeSeriesByTime(seriesList);
    var _loop_1 = function (i) {
        var timestamp = moment__WEBPACK_IMPORTED_MODULE_1___default()(seriesList[0].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat);
        text += formatRow([timestamp].concat(seriesList.map(function (series) {
            return series.datapoints[i][POINT_VALUE_INDEX];
        })), i < seriesList[0].datapoints.length - 1);
    };
    // make text
    for (var i = 0; i < seriesList[0].datapoints.length; i += 1) {
        _loop_1(i);
    }
    return text;
}
/**
 * Collect all unique timestamps from series list and use it to fill
 * missing points by null.
 */
function mergeSeriesByTime(seriesList) {
    var timestamps = [];
    for (var i = 0; i < seriesList.length; i++) {
        var seriesPoints = seriesList[i].datapoints;
        for (var j = 0; j < seriesPoints.length; j++) {
            timestamps.push(seriesPoints[j][POINT_TIME_INDEX]);
        }
    }
    timestamps = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["sortedUniq"])(timestamps.sort());
    for (var i = 0; i < seriesList.length; i++) {
        var seriesPoints = seriesList[i].datapoints;
        var seriesTimestamps = seriesPoints.map(function (p) { return p[POINT_TIME_INDEX]; });
        var extendedSeries = [];
        var pointIndex = void 0;
        for (var j = 0; j < timestamps.length; j++) {
            pointIndex = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["sortedIndexOf"])(seriesTimestamps, timestamps[j]);
            if (pointIndex !== -1) {
                extendedSeries.push(seriesPoints[pointIndex]);
            }
            else {
                extendedSeries.push([null, timestamps[j]]);
            }
        }
        seriesList[i].datapoints = extendedSeries;
    }
    return seriesList;
}
function exportSeriesListToCsvColumns(seriesList, dateTimeFormat, excel) {
    if (dateTimeFormat === void 0) { dateTimeFormat = DEFAULT_DATETIME_FORMAT; }
    if (excel === void 0) { excel = false; }
    var text = convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel);
    saveSaveBlob(text, EXPORT_FILENAME);
}
function convertTableDataToCsv(table, excel) {
    if (excel === void 0) { excel = false; }
    var text = formatSpecialHeader(excel);
    // add headline
    text += formatRow(table.columns.map(function (val) { return val.title || val.text; }));
    // process data
    for (var i = 0; i < table.rows.length; i += 1) {
        text += formatRow(table.rows[i], i < table.rows.length - 1);
    }
    return text;
}
function exportTableDataToCsv(table, excel) {
    if (excel === void 0) { excel = false; }
    var text = convertTableDataToCsv(table, excel);
    saveSaveBlob(text, EXPORT_FILENAME);
}
function saveSaveBlob(payload, fname) {
    var blob = new Blob([payload], { type: 'text/csv;charset=utf-8;header=present;' });
    Object(file_saver__WEBPACK_IMPORTED_MODULE_2__["saveAs"])(blob, fname);
}


/***/ }),

/***/ "./public/app/core/utils/flatten.ts":
/*!******************************************!*\
  !*** ./public/app/core/utils/flatten.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return flatten; });
// Copyright (c) 2014, Hugh Kennedy
// Based on code from https://github.com/hughsk/flat/blob/master/index.js
//
function flatten(target, opts) {
    opts = opts || {};
    var delimiter = opts.delimiter || '.';
    var maxDepth = opts.maxDepth || 3;
    var currentDepth = 1;
    var output = {};
    function step(object, prev) {
        Object.keys(object).forEach(function (key) {
            var value = object[key];
            var isarray = opts.safe && Array.isArray(value);
            var type = Object.prototype.toString.call(value);
            var isobject = type === '[object Object]';
            var newKey = prev ? prev + delimiter + key : key;
            if (!opts.maxDepth) {
                maxDepth = currentDepth + 1;
            }
            if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {
                ++currentDepth;
                return step(value, newKey);
            }
            output[newKey] = value;
        });
    }
    step(target, null);
    return output;
}


/***/ }),

/***/ "./public/app/core/utils/version.ts":
/*!******************************************!*\
  !*** ./public/app/core/utils/version.ts ***!
  \******************************************/
/*! exports provided: SemVersion, isVersionGtOrEq */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SemVersion", function() { return SemVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isVersionGtOrEq", function() { return isVersionGtOrEq; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var versionPattern = /^(\d+)(?:\.(\d+))?(?:\.(\d+))?(?:-([0-9A-Za-z\.]+))?/;
var SemVersion = /** @class */ (function () {
    function SemVersion(version) {
        var match = versionPattern.exec(version);
        if (match) {
            this.major = Number(match[1]);
            this.minor = Number(match[2] || 0);
            this.patch = Number(match[3] || 0);
            this.meta = match[4];
        }
    }
    SemVersion.prototype.isGtOrEq = function (version) {
        var compared = new SemVersion(version);
        return !(this.major < compared.major || this.minor < compared.minor || this.patch < compared.patch);
    };
    SemVersion.prototype.isValid = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(this.major);
    };
    return SemVersion;
}());

function isVersionGtOrEq(a, b) {
    var aSemver = new SemVersion(a);
    return aSemver.isGtOrEq(b);
}


/***/ }),

/***/ "./public/app/features/admin/AdminEditOrgCtrl.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/admin/AdminEditOrgCtrl.ts ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AdminEditOrgCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminEditOrgCtrl($scope, $routeParams, backendSrv, $location, navModelSrv) {
        $scope.init = function () {
            $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);
            if ($routeParams.id) {
                $scope.getOrg($routeParams.id);
                $scope.getOrgUsers($routeParams.id);
            }
        };
        $scope.getOrg = function (id) {
            backendSrv.get('/api/orgs/' + id).then(function (org) {
                $scope.org = org;
            });
        };
        $scope.getOrgUsers = function (id) {
            backendSrv.get('/api/orgs/' + id + '/users').then(function (orgUsers) {
                $scope.orgUsers = orgUsers;
            });
        };
        $scope.update = function () {
            if (!$scope.orgDetailsForm.$valid) {
                return;
            }
            backendSrv.put('/api/orgs/' + $scope.org.id, $scope.org).then(function () {
                $location.path('/admin/orgs');
            });
        };
        $scope.updateOrgUser = function (orgUser) {
            backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId, orgUser);
        };
        $scope.removeOrgUser = function (orgUser) {
            backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId).then(function () {
                $scope.getOrgUsers($scope.org.id);
            });
        };
        $scope.init();
    }
    return AdminEditOrgCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (AdminEditOrgCtrl);


/***/ }),

/***/ "./public/app/features/admin/AdminEditUserCtrl.ts":
/*!********************************************************!*\
  !*** ./public/app/features/admin/AdminEditUserCtrl.ts ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var AdminEditUserCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminEditUserCtrl($scope, $routeParams, backendSrv, $location, navModelSrv) {
        $scope.user = {};
        $scope.newOrg = { name: '', role: 'Editor' };
        $scope.permissions = {};
        $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);
        $scope.init = function () {
            if ($routeParams.id) {
                $scope.getUser($routeParams.id);
                $scope.getUserOrgs($routeParams.id);
            }
        };
        $scope.getUser = function (id) {
            backendSrv.get('/api/users/' + id).then(function (user) {
                $scope.user = user;
                $scope.user_id = id;
                $scope.permissions.isGrafanaAdmin = user.isGrafanaAdmin;
            });
        };
        $scope.setPassword = function () {
            if (!$scope.passwordForm.$valid) {
                return;
            }
            var payload = { password: $scope.password };
            backendSrv.put('/api/admin/users/' + $scope.user_id + '/password', payload).then(function () {
                $location.path('/admin/users');
            });
        };
        $scope.updatePermissions = function () {
            var payload = $scope.permissions;
            backendSrv.put('/api/admin/users/' + $scope.user_id + '/permissions', payload).then(function () {
                $location.path('/admin/users');
            });
        };
        $scope.create = function () {
            if (!$scope.userForm.$valid) {
                return;
            }
            backendSrv.post('/api/admin/users', $scope.user).then(function () {
                $location.path('/admin/users');
            });
        };
        $scope.getUserOrgs = function (id) {
            backendSrv.get('/api/users/' + id + '/orgs').then(function (orgs) {
                $scope.orgs = orgs;
            });
        };
        $scope.update = function () {
            if (!$scope.userForm.$valid) {
                return;
            }
            backendSrv.put('/api/users/' + $scope.user_id, $scope.user).then(function () {
                $location.path('/admin/users');
            });
        };
        $scope.updateOrgUser = function (orgUser) {
            backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id, orgUser).then(function () { });
        };
        $scope.removeOrgUser = function (orgUser) {
            backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id).then(function () {
                $scope.getUser($scope.user_id);
                $scope.getUserOrgs($scope.user_id);
            });
        };
        $scope.orgsSearchCache = [];
        $scope.searchOrgs = function (queryStr, callback) {
            if ($scope.orgsSearchCache.length > 0) {
                callback(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map($scope.orgsSearchCache, 'name'));
                return;
            }
            backendSrv.get('/api/orgs', { query: '' }).then(function (result) {
                $scope.orgsSearchCache = result;
                callback(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result, 'name'));
            });
        };
        $scope.addOrgUser = function () {
            if (!$scope.addOrgForm.$valid) {
                return;
            }
            var orgInfo = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find($scope.orgsSearchCache, {
                name: $scope.newOrg.name,
            });
            if (!orgInfo) {
                return;
            }
            $scope.newOrg.loginOrEmail = $scope.user.login;
            backendSrv.post('/api/orgs/' + orgInfo.id + '/users/', $scope.newOrg).then(function () {
                $scope.getUser($scope.user_id);
                $scope.getUserOrgs($scope.user_id);
            });
        };
        $scope.init();
    }
    return AdminEditUserCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (AdminEditUserCtrl);


/***/ }),

/***/ "./public/app/features/admin/AdminListOrgsCtrl.ts":
/*!********************************************************!*\
  !*** ./public/app/features/admin/AdminListOrgsCtrl.ts ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AdminListOrgsCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminListOrgsCtrl($scope, backendSrv, navModelSrv) {
        $scope.init = function () {
            $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);
            $scope.getOrgs();
        };
        $scope.getOrgs = function () {
            backendSrv.get('/api/orgs').then(function (orgs) {
                $scope.orgs = orgs;
            });
        };
        $scope.deleteOrg = function (org) {
            $scope.appEvent('confirm-modal', {
                title: 'Delete',
                text: 'Do you want to delete organization ' + org.name + '?',
                text2: 'All dashboards for this organization will be removed!',
                icon: 'fa-trash',
                yesText: 'Delete',
                onConfirm: function () {
                    backendSrv.delete('/api/orgs/' + org.id).then(function () {
                        $scope.getOrgs();
                    });
                },
            });
        };
        $scope.init();
    }
    return AdminListOrgsCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (AdminListOrgsCtrl);


/***/ }),

/***/ "./public/app/features/admin/AdminListUsersCtrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/admin/AdminListUsersCtrl.ts ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AdminListUsersCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminListUsersCtrl($scope, backendSrv, navModelSrv) {
        this.$scope = $scope;
        this.backendSrv = backendSrv;
        this.pages = [];
        this.perPage = 50;
        this.page = 1;
        this.showPaging = false;
        this.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);
        this.query = '';
        this.getUsers();
    }
    AdminListUsersCtrl.prototype.getUsers = function () {
        var _this = this;
        this.backendSrv
            .get("/api/users/search?perpage=" + this.perPage + "&page=" + this.page + "&query=" + this.query)
            .then(function (result) {
            _this.users = result.users;
            _this.page = result.page;
            _this.perPage = result.perPage;
            _this.totalPages = Math.ceil(result.totalCount / result.perPage);
            _this.showPaging = _this.totalPages > 1;
            _this.pages = [];
            for (var i = 1; i < _this.totalPages + 1; i++) {
                _this.pages.push({ page: i, current: i === _this.page });
            }
        });
    };
    AdminListUsersCtrl.prototype.navigateToPage = function (page) {
        this.page = page.page;
        this.getUsers();
    };
    AdminListUsersCtrl.prototype.deleteUser = function (user) {
        var _this = this;
        this.$scope.appEvent('confirm-modal', {
            title: 'Delete',
            text: 'Do you want to delete ' + user.login + '?',
            icon: 'fa-trash',
            yesText: 'Delete',
            onConfirm: function () {
                _this.backendSrv.delete('/api/admin/users/' + user.id).then(function () {
                    _this.getUsers();
                });
            },
        });
    };
    return AdminListUsersCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (AdminListUsersCtrl);


/***/ }),

/***/ "./public/app/features/admin/StyleGuideCtrl.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/admin/StyleGuideCtrl.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");

var StyleGuideCtrl = /** @class */ (function () {
    /** @ngInject */
    function StyleGuideCtrl($routeParams, backendSrv, navModelSrv) {
        this.$routeParams = $routeParams;
        this.backendSrv = backendSrv;
        this.buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];
        this.buttonSizes = ['btn-small', '', 'btn-large'];
        this.buttonVariants = ['-'];
        this.navModel = navModelSrv.getNav('cfg', 'admin', 'styleguide', 1);
        this.theme = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].bootData.user.lightTheme ? 'light' : 'dark';
    }
    StyleGuideCtrl.prototype.switchTheme = function () {
        this.$routeParams.theme = this.theme === 'dark' ? 'light' : 'dark';
        var cmd = {
            theme: this.$routeParams.theme,
        };
        this.backendSrv.put('/api/user/preferences', cmd).then(function () {
            window.location.href = window.location.href;
        });
    };
    return StyleGuideCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (StyleGuideCtrl);


/***/ }),

/***/ "./public/app/features/admin/index.ts":
/*!********************************************!*\
  !*** ./public/app/features/admin/index.ts ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _AdminListUsersCtrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdminListUsersCtrl */ "./public/app/features/admin/AdminListUsersCtrl.ts");
/* harmony import */ var _AdminEditUserCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdminEditUserCtrl */ "./public/app/features/admin/AdminEditUserCtrl.ts");
/* harmony import */ var _AdminListOrgsCtrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AdminListOrgsCtrl */ "./public/app/features/admin/AdminListOrgsCtrl.ts");
/* harmony import */ var _AdminEditOrgCtrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AdminEditOrgCtrl */ "./public/app/features/admin/AdminEditOrgCtrl.ts");
/* harmony import */ var _StyleGuideCtrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StyleGuideCtrl */ "./public/app/features/admin/StyleGuideCtrl.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");






var AdminSettingsCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminSettingsCtrl($scope, backendSrv, navModelSrv) {
        this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-settings', 1);
        backendSrv.get('/api/admin/settings').then(function (settings) {
            $scope.settings = settings;
        });
    }
    return AdminSettingsCtrl;
}());
var AdminHomeCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdminHomeCtrl(navModelSrv) {
        this.navModel = navModelSrv.getNav('cfg', 'admin', 1);
    }
    return AdminHomeCtrl;
}());
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminListUsersCtrl', _AdminListUsersCtrl__WEBPACK_IMPORTED_MODULE_0__["default"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminEditUserCtrl', _AdminEditUserCtrl__WEBPACK_IMPORTED_MODULE_1__["default"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminListOrgsCtrl', _AdminListOrgsCtrl__WEBPACK_IMPORTED_MODULE_2__["default"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminEditOrgCtrl', _AdminEditOrgCtrl__WEBPACK_IMPORTED_MODULE_3__["default"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminSettingsCtrl', AdminSettingsCtrl);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('AdminHomeCtrl', AdminHomeCtrl);
app_core_core_module__WEBPACK_IMPORTED_MODULE_5__["default"].controller('StyleGuideCtrl', _StyleGuideCtrl__WEBPACK_IMPORTED_MODULE_4__["default"]);


/***/ }),

/***/ "./public/app/features/alerting/AlertTabCtrl.ts":
/*!******************************************************!*\
  !*** ./public/app/features/alerting/AlertTabCtrl.ts ***!
  \******************************************************/
/*! exports provided: AlertTabCtrl, alertTab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertTabCtrl", function() { return AlertTabCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alertTab", function() { return alertTab; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _state_ThresholdMapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state/ThresholdMapper */ "./public/app/features/alerting/state/ThresholdMapper.ts");
/* harmony import */ var app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/components/query_part/query_part */ "./public/app/core/components/query_part/query_part.ts");
/* harmony import */ var _state_alertDef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state/alertDef */ "./public/app/features/alerting/state/alertDef.ts");
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");






var AlertTabCtrl = /** @class */ (function () {
    /** @ngInject */
    function AlertTabCtrl($scope, backendSrv, dashboardSrv, uiSegmentSrv, $q, datasourceSrv) {
        this.$scope = $scope;
        this.backendSrv = backendSrv;
        this.dashboardSrv = dashboardSrv;
        this.uiSegmentSrv = uiSegmentSrv;
        this.$q = $q;
        this.datasourceSrv = datasourceSrv;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.$scope.ctrl = this;
        this.subTabIndex = 0;
        this.evalFunctions = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].evalFunctions;
        this.evalOperators = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].evalOperators;
        this.conditionTypes = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].conditionTypes;
        this.noDataModes = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].noDataModes;
        this.executionErrorModes = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].executionErrorModes;
        this.appSubUrl = app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].appSubUrl;
    }
    AlertTabCtrl.prototype.$onInit = function () {
        var _this = this;
        this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();
        // subscribe to graph threshold handle changes
        var thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);
        this.panelCtrl.events.on('threshold-changed', thresholdChangedEventHandler);
        // set panel alert edit mode
        this.$scope.$on('$destroy', function () {
            _this.panelCtrl.events.off('threshold-changed', thresholdChangedEventHandler);
            _this.panelCtrl.editingThresholds = false;
            _this.panelCtrl.render();
        });
        // build notification model
        this.notifications = [];
        this.alertNotifications = [];
        this.alertHistory = [];
        return this.backendSrv.get('/api/alert-notifications').then(function (res) {
            _this.notifications = res;
            _this.initModel();
            _this.validateModel();
        });
    };
    AlertTabCtrl.prototype.getAlertHistory = function () {
        var _this = this;
        this.backendSrv
            .get("/api/annotations?dashboardId=" + this.panelCtrl.dashboard.id + "&panelId=" + this.panel.id + "&limit=50&type=alert")
            .then(function (res) {
            _this.alertHistory = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(res, function (ah) {
                ah.time = _this.dashboardSrv.getCurrent().formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');
                ah.stateModel = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getStateDisplayModel(ah.newState);
                ah.info = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getAlertAnnotationInfo(ah);
                return ah;
            });
        });
    };
    AlertTabCtrl.prototype.getNotificationIcon = function (type) {
        switch (type) {
            case 'email':
                return 'fa fa-envelope';
            case 'slack':
                return 'fa fa-slack';
            case 'victorops':
                return 'fa fa-pagelines';
            case 'webhook':
                return 'fa fa-cubes';
            case 'pagerduty':
                return 'fa fa-bullhorn';
            case 'opsgenie':
                return 'fa fa-bell';
            case 'hipchat':
                return 'fa fa-mail-forward';
            case 'pushover':
                return 'fa fa-mobile';
            case 'kafka':
                return 'fa fa-random';
            case 'teams':
                return 'fa fa-windows';
        }
        return 'fa fa-bell';
    };
    AlertTabCtrl.prototype.getNotifications = function () {
        var _this = this;
        return Promise.resolve(this.notifications.map(function (item) {
            return _this.uiSegmentSrv.newSegment(item.name);
        }));
    };
    AlertTabCtrl.prototype.changeTabIndex = function (newTabIndex) {
        this.subTabIndex = newTabIndex;
        if (this.subTabIndex === 2) {
            this.getAlertHistory();
        }
    };
    AlertTabCtrl.prototype.notificationAdded = function () {
        var model = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.notifications, {
            name: this.addNotificationSegment.value,
        });
        if (!model) {
            return;
        }
        this.alertNotifications.push({
            name: model.name,
            iconClass: this.getNotificationIcon(model.type),
            isDefault: false,
        });
        this.alert.notifications.push({ id: model.id });
        // reset plus button
        this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;
        this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;
    };
    AlertTabCtrl.prototype.removeNotification = function (index) {
        this.alert.notifications.splice(index, 1);
        this.alertNotifications.splice(index, 1);
    };
    AlertTabCtrl.prototype.initModel = function () {
        var _this = this;
        var alert = (this.alert = this.panel.alert);
        if (!alert) {
            return;
        }
        alert.conditions = alert.conditions || [];
        if (alert.conditions.length === 0) {
            alert.conditions.push(this.buildDefaultCondition());
        }
        alert.noDataState = alert.noDataState || app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].alertingNoDataOrNullValues;
        alert.executionErrorState = alert.executionErrorState || app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].alertingErrorOrTimeout;
        alert.frequency = alert.frequency || '60s';
        alert.handler = alert.handler || 1;
        alert.notifications = alert.notifications || [];
        var defaultName = this.panel.title + ' alert';
        alert.name = alert.name || defaultName;
        this.conditionModels = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reduce(alert.conditions, function (memo, value) {
            memo.push(_this.buildConditionModel(value));
            return memo;
        }, []);
        _state_ThresholdMapper__WEBPACK_IMPORTED_MODULE_1__["ThresholdMapper"].alertToGraphThresholds(this.panel);
        for (var _i = 0, _a = alert.notifications; _i < _a.length; _i++) {
            var addedNotification = _a[_i];
            var model = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.notifications, { id: addedNotification.id });
            if (model && model.isDefault === false) {
                model.iconClass = this.getNotificationIcon(model.type);
                this.alertNotifications.push(model);
            }
        }
        for (var _b = 0, _c = this.notifications; _b < _c.length; _b++) {
            var notification = _c[_b];
            if (notification.isDefault) {
                notification.iconClass = this.getNotificationIcon(notification.type);
                notification.bgColor = '#00678b';
                this.alertNotifications.push(notification);
            }
        }
        this.panelCtrl.editingThresholds = true;
        this.panelCtrl.render();
    };
    AlertTabCtrl.prototype.graphThresholdChanged = function (evt) {
        for (var _i = 0, _a = this.alert.conditions; _i < _a.length; _i++) {
            var condition = _a[_i];
            if (condition.type === 'query') {
                condition.evaluator.params[evt.handleIndex] = evt.threshold.value;
                this.evaluatorParamsChanged();
                break;
            }
        }
    };
    AlertTabCtrl.prototype.buildDefaultCondition = function () {
        return {
            type: 'query',
            query: { params: ['A', '5m', 'now'] },
            reducer: { type: 'avg', params: [] },
            evaluator: { type: 'gt', params: [null] },
            operator: { type: 'and' },
        };
    };
    AlertTabCtrl.prototype.validateModel = function () {
        var _this = this;
        if (!this.alert) {
            return;
        }
        var firstTarget;
        var foundTarget = null;
        for (var _i = 0, _a = this.alert.conditions; _i < _a.length; _i++) {
            var condition = _a[_i];
            if (condition.type !== 'query') {
                continue;
            }
            for (var _b = 0, _c = this.panel.targets; _b < _c.length; _b++) {
                var target = _c[_b];
                if (!firstTarget) {
                    firstTarget = target;
                }
                if (condition.query.params[0] === target.refId) {
                    foundTarget = target;
                    break;
                }
            }
            if (!foundTarget) {
                if (firstTarget) {
                    condition.query.params[0] = firstTarget.refId;
                    foundTarget = firstTarget;
                }
                else {
                    this.error = 'Could not find any metric queries';
                }
            }
            var datasourceName = foundTarget.datasource || this.panel.datasource;
            this.datasourceSrv.get(datasourceName).then(function (ds) {
                if (!ds.meta.alerting) {
                    _this.error = 'The datasource does not support alerting queries';
                }
                else if (ds.targetContainsTemplate(foundTarget)) {
                    _this.error = 'Template variables are not supported in alert queries';
                }
                else {
                    _this.error = '';
                }
            });
        }
    };
    AlertTabCtrl.prototype.buildConditionModel = function (source) {
        var cm = { source: source, type: source.type };
        cm.queryPart = new app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_2__["QueryPart"](source.query, _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].alertQueryDef);
        cm.reducerPart = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].createReducerPart(source.reducer);
        cm.evaluator = source.evaluator;
        cm.operator = source.operator;
        return cm;
    };
    AlertTabCtrl.prototype.handleQueryPartEvent = function (conditionModel, evt) {
        var _this = this;
        switch (evt.name) {
            case 'action-remove-part': {
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([]);
            }
            case 'part-param-changed': {
                this.validateModel();
            }
            case 'get-param-options': {
                var result = this.panel.targets.map(function (target) {
                    return _this.uiSegmentSrv.newSegment({ value: target.refId });
                });
                return this.$q.when(result);
            }
        }
    };
    AlertTabCtrl.prototype.handleReducerPartEvent = function (conditionModel, evt) {
        switch (evt.name) {
            case 'action': {
                conditionModel.source.reducer.type = evt.action.value;
                conditionModel.reducerPart = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].createReducerPart(conditionModel.source.reducer);
                break;
            }
            case 'get-part-actions': {
                var result = [];
                for (var _i = 0, _a = _state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].reducerTypes; _i < _a.length; _i++) {
                    var type = _a[_i];
                    if (type.value !== conditionModel.source.reducer.type) {
                        result.push(type);
                    }
                }
                return this.$q.when(result);
            }
        }
    };
    AlertTabCtrl.prototype.addCondition = function (type) {
        var condition = this.buildDefaultCondition();
        // add to persited model
        this.alert.conditions.push(condition);
        // add to view model
        this.conditionModels.push(this.buildConditionModel(condition));
    };
    AlertTabCtrl.prototype.removeCondition = function (index) {
        this.alert.conditions.splice(index, 1);
        this.conditionModels.splice(index, 1);
    };
    AlertTabCtrl.prototype.delete = function () {
        var _this = this;
        app_core_app_events__WEBPACK_IMPORTED_MODULE_5__["default"].emit('confirm-modal', {
            title: 'Delete Alert',
            text: 'Are you sure you want to delete this alert rule?',
            text2: 'You need to save dashboard for the delete to take effect',
            icon: 'fa-trash',
            yesText: 'Delete',
            onConfirm: function () {
                delete _this.panel.alert;
                _this.alert = null;
                _this.panel.thresholds = [];
                _this.conditionModels = [];
                _this.panelCtrl.alertState = null;
                _this.panelCtrl.render();
            },
        });
    };
    AlertTabCtrl.prototype.enable = function () {
        this.panel.alert = {};
        this.initModel();
    };
    AlertTabCtrl.prototype.evaluatorParamsChanged = function () {
        _state_ThresholdMapper__WEBPACK_IMPORTED_MODULE_1__["ThresholdMapper"].alertToGraphThresholds(this.panel);
        this.panelCtrl.render();
    };
    AlertTabCtrl.prototype.evaluatorTypeChanged = function (evaluator) {
        // ensure params array is correct length
        switch (evaluator.type) {
            case 'lt':
            case 'gt': {
                evaluator.params = [evaluator.params[0]];
                break;
            }
            case 'within_range':
            case 'outside_range': {
                evaluator.params = [evaluator.params[0], evaluator.params[1]];
                break;
            }
            case 'no_value': {
                evaluator.params = [];
            }
        }
        this.evaluatorParamsChanged();
    };
    AlertTabCtrl.prototype.clearHistory = function () {
        var _this = this;
        app_core_app_events__WEBPACK_IMPORTED_MODULE_5__["default"].emit('confirm-modal', {
            title: 'Delete Alert History',
            text: 'Are you sure you want to remove all history & annotations for this alert?',
            icon: 'fa-trash',
            yesText: 'Yes',
            onConfirm: function () {
                _this.backendSrv
                    .post('/api/annotations/mass-delete', {
                    dashboardId: _this.panelCtrl.dashboard.id,
                    panelId: _this.panel.id,
                })
                    .then(function (res) {
                    _this.alertHistory = [];
                    _this.panelCtrl.refresh();
                });
            },
        });
    };
    AlertTabCtrl.prototype.test = function () {
        var _this = this;
        this.testing = true;
        this.testResult = false;
        var payload = {
            dashboard: this.dashboardSrv.getCurrent().getSaveModelClone(),
            panelId: this.panelCtrl.panel.id,
        };
        return this.backendSrv.post('/api/alerts/test', payload).then(function (res) {
            _this.testResult = res;
            _this.testing = false;
        });
    };
    return AlertTabCtrl;
}());

/** @ngInject */
function alertTab() {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/features/alerting/partials/alert_tab.html',
        controller: AlertTabCtrl,
    };
}


/***/ }),

/***/ "./public/app/features/alerting/NotificationsEditCtrl.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/alerting/NotificationsEditCtrl.ts ***!
  \***************************************************************/
/*! exports provided: AlertNotificationEditCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertNotificationEditCtrl", function() { return AlertNotificationEditCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");


var AlertNotificationEditCtrl = /** @class */ (function () {
    /** @ngInject */
    function AlertNotificationEditCtrl($routeParams, backendSrv, $location, $templateCache, navModelSrv) {
        var _this = this;
        this.$routeParams = $routeParams;
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.$templateCache = $templateCache;
        this.testSeverity = 'critical';
        this.defaults = {
            type: 'email',
            sendReminder: false,
            frequency: '15m',
            settings: {
                httpMethod: 'POST',
                autoResolve: true,
                uploadImage: true,
            },
            isDefault: false,
        };
        this.navModel = navModelSrv.getNav('alerting', 'channels', 0);
        this.isNew = !this.$routeParams.id;
        this.getFrequencySuggestion = function () {
            return ['1m', '5m', '10m', '15m', '30m', '1h'];
        };
        this.backendSrv
            .get("/api/alert-notifiers")
            .then(function (notifiers) {
            _this.notifiers = notifiers;
            // add option templates
            for (var _i = 0, _a = _this.notifiers; _i < _a.length; _i++) {
                var notifier = _a[_i];
                _this.$templateCache.put(_this.getNotifierTemplateId(notifier.type), notifier.optionsTemplate);
            }
            if (!_this.$routeParams.id) {
                _this.navModel.breadcrumbs.push({ text: 'New channel' });
                _this.navModel.node = { text: 'New channel' };
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaults(_this.model, _this.defaults);
            }
            return _this.backendSrv.get("/api/alert-notifications/" + _this.$routeParams.id).then(function (result) {
                _this.navModel.breadcrumbs.push({ text: result.name });
                _this.navModel.node = { text: result.name };
                result.settings = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaults(result.settings, _this.defaults.settings);
                return result;
            });
        })
            .then(function (model) {
            _this.model = model;
            _this.notifierTemplateId = _this.getNotifierTemplateId(_this.model.type);
        });
    }
    AlertNotificationEditCtrl.prototype.save = function () {
        var _this = this;
        if (!this.theForm.$valid) {
            return;
        }
        if (this.model.id) {
            this.backendSrv
                .put("/api/alert-notifications/" + this.model.id, this.model)
                .then(function (res) {
                _this.model = res;
                app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('alert-success', ['Notification updated', '']);
            })
                .catch(function (err) {
                if (err.data && err.data.error) {
                    app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('alert-error', [err.data.error]);
                }
            });
        }
        else {
            this.backendSrv
                .post("/api/alert-notifications", this.model)
                .then(function (res) {
                app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('alert-success', ['Notification created', '']);
                _this.$location.path('alerting/notifications');
            })
                .catch(function (err) {
                if (err.data && err.data.error) {
                    app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('alert-error', [err.data.error]);
                }
            });
        }
    };
    AlertNotificationEditCtrl.prototype.getNotifierTemplateId = function (type) {
        return "notifier-options-" + type;
    };
    AlertNotificationEditCtrl.prototype.typeChanged = function () {
        this.model.settings = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaults({}, this.defaults.settings);
        this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);
    };
    AlertNotificationEditCtrl.prototype.testNotification = function () {
        if (!this.theForm.$valid) {
            return;
        }
        var payload = {
            name: this.model.name,
            type: this.model.type,
            frequency: this.model.frequency,
            settings: this.model.settings,
        };
        this.backendSrv.post("/api/alert-notifications/test", payload).then(function (res) {
            app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('alert-success', ['Test notification sent', '']);
        });
    };
    return AlertNotificationEditCtrl;
}());

app_core_core__WEBPACK_IMPORTED_MODULE_1__["coreModule"].controller('AlertNotificationEditCtrl', AlertNotificationEditCtrl);


/***/ }),

/***/ "./public/app/features/alerting/NotificationsListCtrl.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/alerting/NotificationsListCtrl.ts ***!
  \***************************************************************/
/*! exports provided: AlertNotificationsListCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertNotificationsListCtrl", function() { return AlertNotificationsListCtrl; });
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");

var AlertNotificationsListCtrl = /** @class */ (function () {
    /** @ngInject */
    function AlertNotificationsListCtrl(backendSrv, navModelSrv) {
        this.backendSrv = backendSrv;
        this.loadNotifications();
        this.navModel = navModelSrv.getNav('alerting', 'channels', 0);
    }
    AlertNotificationsListCtrl.prototype.loadNotifications = function () {
        var _this = this;
        this.backendSrv.get("/api/alert-notifications").then(function (result) {
            _this.notifications = result;
        });
    };
    AlertNotificationsListCtrl.prototype.deleteNotification = function (id) {
        var _this = this;
        this.backendSrv.delete("/api/alert-notifications/" + id).then(function () {
            _this.notifications = _this.notifications.filter(function (notification) {
                return notification.id !== id;
            });
        });
    };
    return AlertNotificationsListCtrl;
}());

app_core_core__WEBPACK_IMPORTED_MODULE_0__["coreModule"].controller('AlertNotificationsListCtrl', AlertNotificationsListCtrl);


/***/ }),

/***/ "./public/app/features/alerting/state/ThresholdMapper.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/alerting/state/ThresholdMapper.ts ***!
  \***************************************************************/
/*! exports provided: ThresholdMapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThresholdMapper", function() { return ThresholdMapper; });
var ThresholdMapper = /** @class */ (function () {
    function ThresholdMapper() {
    }
    ThresholdMapper.alertToGraphThresholds = function (panel) {
        for (var i = 0; i < panel.alert.conditions.length; i++) {
            var condition = panel.alert.conditions[i];
            if (condition.type !== 'query') {
                continue;
            }
            var evaluator = condition.evaluator;
            var thresholds = (panel.thresholds = []);
            switch (evaluator.type) {
                case 'gt': {
                    var value = evaluator.params[0];
                    thresholds.push({ value: value, op: 'gt' });
                    break;
                }
                case 'lt': {
                    var value = evaluator.params[0];
                    thresholds.push({ value: value, op: 'lt' });
                    break;
                }
                case 'outside_range': {
                    var value1 = evaluator.params[0];
                    var value2 = evaluator.params[1];
                    if (value1 > value2) {
                        thresholds.push({ value: value1, op: 'gt' });
                        thresholds.push({ value: value2, op: 'lt' });
                    }
                    else {
                        thresholds.push({ value: value1, op: 'lt' });
                        thresholds.push({ value: value2, op: 'gt' });
                    }
                    break;
                }
                case 'within_range': {
                    var value1 = evaluator.params[0];
                    var value2 = evaluator.params[1];
                    if (value1 > value2) {
                        thresholds.push({ value: value1, op: 'lt' });
                        thresholds.push({ value: value2, op: 'gt' });
                    }
                    else {
                        thresholds.push({ value: value1, op: 'gt' });
                        thresholds.push({ value: value2, op: 'lt' });
                    }
                    break;
                }
            }
            break;
        }
        for (var _i = 0, _a = panel.thresholds; _i < _a.length; _i++) {
            var t = _a[_i];
            t.fill = true;
            t.line = true;
            t.colorMode = 'critical';
        }
        var updated = true;
        return updated;
    };
    return ThresholdMapper;
}());



/***/ }),

/***/ "./public/app/features/all.ts":
/*!************************************!*\
  !*** ./public/app/features/all.ts ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _annotations_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotations/all */ "./public/app/features/annotations/all.ts");
/* harmony import */ var _templating_all__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./templating/all */ "./public/app/features/templating/all.ts");
/* harmony import */ var _plugins_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugins/all */ "./public/app/features/plugins/all.ts");
/* harmony import */ var _dashboard_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dashboard/all */ "./public/app/features/dashboard/all.ts");
/* harmony import */ var _playlist_all__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./playlist/all */ "./public/app/features/playlist/all.ts");
/* harmony import */ var _panel_all__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./panel/all */ "./public/app/features/panel/all.ts");
/* harmony import */ var _org_all__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./org/all */ "./public/app/features/org/all.ts");
/* harmony import */ var _admin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./admin */ "./public/app/features/admin/index.ts");
/* harmony import */ var _alerting_NotificationsEditCtrl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./alerting/NotificationsEditCtrl */ "./public/app/features/alerting/NotificationsEditCtrl.ts");
/* harmony import */ var _alerting_NotificationsListCtrl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./alerting/NotificationsListCtrl */ "./public/app/features/alerting/NotificationsListCtrl.ts");
/* harmony import */ var _manage_dashboards__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./manage-dashboards */ "./public/app/features/manage-dashboards/index.ts");













/***/ }),

/***/ "./public/app/features/annotations/all.ts":
/*!************************************************!*\
  !*** ./public/app/features/annotations/all.ts ***!
  \************************************************/
/*! exports provided: AnnotationsSrv, eventEditor, EventManager, AnnotationEvent, annotationTooltipDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _annotations_srv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotations_srv */ "./public/app/features/annotations/annotations_srv.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnnotationsSrv", function() { return _annotations_srv__WEBPACK_IMPORTED_MODULE_0__["AnnotationsSrv"]; });

/* harmony import */ var _event_editor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event_editor */ "./public/app/features/annotations/event_editor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventEditor", function() { return _event_editor__WEBPACK_IMPORTED_MODULE_1__["eventEditor"]; });

/* harmony import */ var _event_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event_manager */ "./public/app/features/annotations/event_manager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return _event_manager__WEBPACK_IMPORTED_MODULE_2__["EventManager"]; });

/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event */ "./public/app/features/annotations/event.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnnotationEvent", function() { return _event__WEBPACK_IMPORTED_MODULE_3__["AnnotationEvent"]; });

/* harmony import */ var _annotation_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./annotation_tooltip */ "./public/app/features/annotations/annotation_tooltip.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "annotationTooltipDirective", function() { return _annotation_tooltip__WEBPACK_IMPORTED_MODULE_4__["annotationTooltipDirective"]; });









/***/ }),

/***/ "./public/app/features/annotations/annotation_tooltip.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/annotations/annotation_tooltip.ts ***!
  \***************************************************************/
/*! exports provided: annotationTooltipDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "annotationTooltipDirective", function() { return annotationTooltipDirective; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../alerting/state/alertDef */ "./public/app/features/alerting/state/alertDef.ts");




/** @ngInject */
function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {
    function sanitizeString(str) {
        try {
            return $sanitize(str);
        }
        catch (err) {
            console.log('Could not sanitize annotation string, html escaping instead');
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.escape(str);
        }
    }
    return {
        restrict: 'E',
        scope: {
            event: '=',
            onEdit: '&',
        },
        link: function (scope, element) {
            var event = scope.event;
            var title = event.title;
            var text = event.text;
            var dashboard = dashboardSrv.getCurrent();
            var tooltip = '<div class="graph-annotation">';
            var titleStateClass = '';
            if (event.alertId) {
                var stateModel = _alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getStateDisplayModel(event.newState);
                titleStateClass = stateModel.stateClass;
                title = "<i class=\"icon-gf " + stateModel.iconClass + "\"></i> " + stateModel.text;
                text = _alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getAlertAnnotationInfo(event);
                if (event.text) {
                    text = text + '<br />' + event.text;
                }
            }
            else if (title) {
                text = title + '<br />' + (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(text) ? text : '');
                title = '';
            }
            var header = "<div class=\"graph-annotation__header\">";
            if (event.login) {
                header += "<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by " + event.login + "'\"><img src=\"" + event.avatarUrl + "\" /></div>";
            }
            header += "\n          <span class=\"graph-annotation__title " + titleStateClass + "\">" + sanitizeString(title) + "</span>\n          <span class=\"graph-annotation__time\">" + dashboard.formatDate(event.min) + "</span>\n      ";
            // Show edit icon only for users with at least Editor role
            if (event.id && dashboard.meta.canEdit) {
                header += "\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        ";
            }
            header += "</div>";
            tooltip += header;
            tooltip += '<div class="graph-annotation__body">';
            if (text) {
                tooltip += '<div>' + sanitizeString(text.replace(/\n/g, '<br>')) + '</div>';
            }
            var tags = event.tags;
            if (tags && tags.length) {
                scope.tags = tags;
                tooltip +=
                    '<span class="label label-tag small" ng-repeat="tag in tags" tag-color-from-name="tag">{{tag}}</span><br/>';
            }
            tooltip += '</div>';
            tooltip += '</div>';
            var $tooltip = jquery__WEBPACK_IMPORTED_MODULE_1___default()(tooltip);
            $tooltip.appendTo(element);
            $compile(element.contents())(scope);
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].directive('annotationTooltip', annotationTooltipDirective);


/***/ }),

/***/ "./public/app/features/annotations/annotations_srv.ts":
/*!************************************************************!*\
  !*** ./public/app/features/annotations/annotations_srv.ts ***!
  \************************************************************/
/*! exports provided: AnnotationsSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsSrv", function() { return AnnotationsSrv; });
/* harmony import */ var _editor_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor_ctrl */ "./public/app/features/annotations/editor_ctrl.ts");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _events_processing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./events_processing */ "./public/app/features/annotations/events_processing.ts");





var AnnotationsSrv = /** @class */ (function () {
    /** @ngInject */
    function AnnotationsSrv($rootScope, $q, datasourceSrv, backendSrv, timeSrv) {
        this.$rootScope = $rootScope;
        this.$q = $q;
        this.datasourceSrv = datasourceSrv;
        this.backendSrv = backendSrv;
        this.timeSrv = timeSrv;
        $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);
        $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);
    }
    AnnotationsSrv.prototype.clearCache = function () {
        this.globalAnnotationsPromise = null;
        this.alertStatesPromise = null;
    };
    AnnotationsSrv.prototype.getAnnotations = function (options) {
        var _this = this;
        return this.$q
            .all([this.getGlobalAnnotations(options), this.getAlertStates(options)])
            .then(function (results) {
            // combine the annotations and flatten results
            var annotations = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.flattenDeep(results[0]);
            // filter out annotations that do not belong to requesting panel
            annotations = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.filter(annotations, function (item) {
                // if event has panel id and query is of type dashboard then panel and requesting panel id must match
                if (item.panelId && item.source.type === 'dashboard') {
                    return item.panelId === options.panel.id;
                }
                return true;
            });
            annotations = Object(_events_processing__WEBPACK_IMPORTED_MODULE_4__["dedupAnnotations"])(annotations);
            annotations = Object(_events_processing__WEBPACK_IMPORTED_MODULE_4__["makeRegions"])(annotations, options);
            // look for alert state for this panel
            var alertState = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(results[1], { panelId: options.panel.id });
            return {
                annotations: annotations,
                alertState: alertState,
            };
        })
            .catch(function (err) {
            if (!err.message && err.data && err.data.message) {
                err.message = err.data.message;
            }
            console.log('AnnotationSrv.query error', err);
            _this.$rootScope.appEvent('alert-error', ['Annotation Query Failed', err.message || err]);
            return [];
        });
    };
    AnnotationsSrv.prototype.getAlertStates = function (options) {
        if (!options.dashboard.id) {
            return this.$q.when([]);
        }
        // ignore if no alerts
        if (options.panel && !options.panel.alert) {
            return this.$q.when([]);
        }
        if (options.range.raw.to !== 'now') {
            return this.$q.when([]);
        }
        if (this.alertStatesPromise) {
            return this.alertStatesPromise;
        }
        this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {
            dashboardId: options.dashboard.id,
        });
        return this.alertStatesPromise;
    };
    AnnotationsSrv.prototype.getGlobalAnnotations = function (options) {
        var _this = this;
        var dashboard = options.dashboard;
        if (this.globalAnnotationsPromise) {
            return this.globalAnnotationsPromise;
        }
        var range = this.timeSrv.timeRange();
        var promises = [];
        var _loop_1 = function (annotation) {
            if (!annotation.enable) {
                return "continue";
            }
            if (annotation.snapshotData) {
                return { value: this_1.translateQueryResult(annotation, annotation.snapshotData) };
            }
            promises.push(this_1.datasourceSrv
                .get(annotation.datasource)
                .then(function (datasource) {
                // issue query against data source
                return datasource.annotationQuery({
                    range: range,
                    rangeRaw: range.raw,
                    annotation: annotation,
                    dashboard: dashboard,
                });
            })
                .then(function (results) {
                // store response in annotation object if this is a snapshot call
                if (dashboard.snapshot) {
                    annotation.snapshotData = angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(results);
                }
                // translate result
                return _this.translateQueryResult(annotation, results);
            }));
        };
        var this_1 = this;
        for (var _i = 0, _a = dashboard.annotations.list; _i < _a.length; _i++) {
            var annotation = _a[_i];
            var state_1 = _loop_1(annotation);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        this.globalAnnotationsPromise = this.$q.all(promises);
        return this.globalAnnotationsPromise;
    };
    AnnotationsSrv.prototype.saveAnnotationEvent = function (annotation) {
        this.globalAnnotationsPromise = null;
        return this.backendSrv.post('/api/annotations', annotation);
    };
    AnnotationsSrv.prototype.updateAnnotationEvent = function (annotation) {
        this.globalAnnotationsPromise = null;
        return this.backendSrv.put("/api/annotations/" + annotation.id, annotation);
    };
    AnnotationsSrv.prototype.deleteAnnotationEvent = function (annotation) {
        this.globalAnnotationsPromise = null;
        var deleteUrl = "/api/annotations/" + annotation.id;
        if (annotation.isRegion) {
            deleteUrl = "/api/annotations/region/" + annotation.regionId;
        }
        return this.backendSrv.delete(deleteUrl);
    };
    AnnotationsSrv.prototype.translateQueryResult = function (annotation, results) {
        // if annotation has snapshotData
        // make clone and remove it
        if (annotation.snapshotData) {
            annotation = angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(annotation);
            delete annotation.snapshotData;
        }
        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
            var item = results_1[_i];
            item.source = annotation;
        }
        return results;
    };
    return AnnotationsSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_3__["default"].service('annotationsSrv', AnnotationsSrv);


/***/ }),

/***/ "./public/app/features/annotations/editor_ctrl.ts":
/*!********************************************************!*\
  !*** ./public/app/features/annotations/editor_ctrl.ts ***!
  \********************************************************/
/*! exports provided: AnnotationsEditorCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsEditorCtrl", function() { return AnnotationsEditorCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");




var AnnotationsEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function AnnotationsEditorCtrl($scope, datasourceSrv) {
        this.datasourceSrv = datasourceSrv;
        this.annotationDefaults = {
            name: '',
            datasource: null,
            iconColor: 'rgba(255, 96, 96, 1)',
            enable: true,
            showIn: 0,
            hide: false,
        };
        this.showOptions = [{ text: 'All Panels', value: 0 }, { text: 'Specific Panels', value: 1 }];
        $scope.ctrl = this;
        this.mode = 'list';
        this.datasources = datasourceSrv.getAnnotationSources();
        this.annotations = $scope.dashboard.annotations.list;
        this.reset();
        this.onColorChange = this.onColorChange.bind(this);
    }
    AnnotationsEditorCtrl.prototype.datasourceChanged = function () {
        var _this = this;
        return this.datasourceSrv.get(this.currentAnnotation.datasource).then(function (ds) {
            _this.currentDatasource = ds;
        });
    };
    AnnotationsEditorCtrl.prototype.edit = function (annotation) {
        this.currentAnnotation = annotation;
        this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;
        this.currentIsNew = false;
        this.datasourceChanged();
        this.mode = 'edit';
        jquery__WEBPACK_IMPORTED_MODULE_2___default()('.tooltip.in').remove();
    };
    AnnotationsEditorCtrl.prototype.reset = function () {
        this.currentAnnotation = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(this.annotationDefaults);
        this.currentAnnotation.datasource = this.datasources[0].name;
        this.currentIsNew = true;
        this.datasourceChanged();
    };
    AnnotationsEditorCtrl.prototype.update = function () {
        this.reset();
        this.mode = 'list';
    };
    AnnotationsEditorCtrl.prototype.setupNew = function () {
        this.mode = 'new';
        this.reset();
    };
    AnnotationsEditorCtrl.prototype.backToList = function () {
        this.mode = 'list';
    };
    AnnotationsEditorCtrl.prototype.move = function (index, dir) {
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.move(this.annotations, index, index + dir);
    };
    AnnotationsEditorCtrl.prototype.add = function () {
        this.annotations.push(this.currentAnnotation);
        this.reset();
        this.mode = 'list';
    };
    AnnotationsEditorCtrl.prototype.removeAnnotation = function (annotation) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(this.annotations, annotation);
        this.annotations.splice(index, 1);
    };
    AnnotationsEditorCtrl.prototype.onColorChange = function (newColor) {
        this.currentAnnotation.iconColor = newColor;
    };
    return AnnotationsEditorCtrl;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_3__["default"].controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);


/***/ }),

/***/ "./public/app/features/annotations/event.ts":
/*!**************************************************!*\
  !*** ./public/app/features/annotations/event.ts ***!
  \**************************************************/
/*! exports provided: AnnotationEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationEvent", function() { return AnnotationEvent; });
var AnnotationEvent = /** @class */ (function () {
    function AnnotationEvent() {
    }
    return AnnotationEvent;
}());



/***/ }),

/***/ "./public/app/features/annotations/event_editor.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/annotations/event_editor.ts ***!
  \*********************************************************/
/*! exports provided: EventEditorCtrl, eventEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEditorCtrl", function() { return EventEditorCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventEditor", function() { return eventEditor; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");



var EventEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function EventEditorCtrl(annotationsSrv) {
        this.annotationsSrv = annotationsSrv;
        this.event.panelId = this.panelCtrl.panel.id;
        this.event.dashboardId = this.panelCtrl.dashboard.id;
        // Annotations query returns time as Unix timestamp in milliseconds
        this.event.time = tryEpochToMoment(this.event.time);
        if (this.event.isRegion) {
            this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);
        }
        this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time);
    }
    EventEditorCtrl.prototype.save = function () {
        var _this = this;
        if (!this.form.$valid) {
            return;
        }
        var saveModel = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(this.event);
        saveModel.time = saveModel.time.valueOf();
        saveModel.timeEnd = 0;
        if (saveModel.isRegion) {
            saveModel.timeEnd = this.event.timeEnd.valueOf();
            if (saveModel.timeEnd < saveModel.time) {
                console.log('invalid time');
                return;
            }
        }
        if (saveModel.id) {
            this.annotationsSrv
                .updateAnnotationEvent(saveModel)
                .then(function () {
                _this.panelCtrl.refresh();
                _this.close();
            })
                .catch(function () {
                _this.panelCtrl.refresh();
                _this.close();
            });
        }
        else {
            this.annotationsSrv
                .saveAnnotationEvent(saveModel)
                .then(function () {
                _this.panelCtrl.refresh();
                _this.close();
            })
                .catch(function () {
                _this.panelCtrl.refresh();
                _this.close();
            });
        }
    };
    EventEditorCtrl.prototype.delete = function () {
        var _this = this;
        return this.annotationsSrv
            .deleteAnnotationEvent(this.event)
            .then(function () {
            _this.panelCtrl.refresh();
            _this.close();
        })
            .catch(function () {
            _this.panelCtrl.refresh();
            _this.close();
        });
    };
    return EventEditorCtrl;
}());

function tryEpochToMoment(timestamp) {
    if (timestamp && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(timestamp)) {
        var epoch = Number(timestamp);
        return moment__WEBPACK_IMPORTED_MODULE_1___default()(epoch);
    }
    else {
        return timestamp;
    }
}
function eventEditor() {
    return {
        restrict: 'E',
        controller: EventEditorCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        templateUrl: 'public/app/features/annotations/partials/event_editor.html',
        scope: {
            panelCtrl: '=',
            event: '=',
            close: '&',
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_2__["coreModule"].directive('eventEditor', eventEditor);


/***/ }),

/***/ "./public/app/features/annotations/event_manager.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/annotations/event_manager.ts ***!
  \**********************************************************/
/*! exports provided: EventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tinycolor2 */ "./node_modules/tinycolor2/tinycolor.js");
/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tinycolor2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event */ "./public/app/features/annotations/event.ts");
/* harmony import */ var app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/colors */ "./public/app/core/utils/colors.ts");





var EventManager = /** @class */ (function () {
    function EventManager(panelCtrl) {
        this.panelCtrl = panelCtrl;
    }
    EventManager.prototype.editorClosed = function () {
        this.event = null;
        this.editorOpen = false;
        this.panelCtrl.render();
    };
    EventManager.prototype.editorOpened = function () {
        this.editorOpen = true;
    };
    EventManager.prototype.updateTime = function (range) {
        if (!this.event) {
            this.event = new _event__WEBPACK_IMPORTED_MODULE_3__["AnnotationEvent"]();
            this.event.dashboardId = this.panelCtrl.dashboard.id;
            this.event.panelId = this.panelCtrl.panel.id;
        }
        // update time
        this.event.time = moment__WEBPACK_IMPORTED_MODULE_1___default()(range.from);
        this.event.isRegion = false;
        if (range.to) {
            this.event.timeEnd = moment__WEBPACK_IMPORTED_MODULE_1___default()(range.to);
            this.event.isRegion = true;
        }
        this.panelCtrl.render();
    };
    EventManager.prototype.editEvent = function (event, elem) {
        this.event = event;
        this.panelCtrl.render();
    };
    EventManager.prototype.addFlotEvents = function (annotations, flotOptions) {
        if (!this.event && annotations.length === 0) {
            return;
        }
        var types = {
            $__alerting: {
                color: app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["ALERTING_COLOR"],
                position: 'BOTTOM',
                markerSize: 5,
            },
            $__ok: {
                color: app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["OK_COLOR"],
                position: 'BOTTOM',
                markerSize: 5,
            },
            $__no_data: {
                color: app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["NO_DATA_COLOR"],
                position: 'BOTTOM',
                markerSize: 5,
            },
            $__editing: {
                color: app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["DEFAULT_ANNOTATION_COLOR"],
                position: 'BOTTOM',
                markerSize: 5,
            },
        };
        if (this.event) {
            if (this.event.isRegion) {
                annotations = [
                    {
                        isRegion: true,
                        min: this.event.time.valueOf(),
                        timeEnd: this.event.timeEnd.valueOf(),
                        text: this.event.text,
                        eventType: '$__editing',
                        editModel: this.event,
                    },
                ];
            }
            else {
                annotations = [
                    {
                        min: this.event.time.valueOf(),
                        text: this.event.text,
                        editModel: this.event,
                        eventType: '$__editing',
                    },
                ];
            }
        }
        else {
            // annotations from query
            for (var i = 0; i < annotations.length; i++) {
                var item = annotations[i];
                // add properties used by jquery flot events
                item.min = item.time;
                item.max = item.time;
                item.eventType = item.source.name;
                if (item.newState) {
                    item.eventType = '$__' + item.newState;
                    continue;
                }
                if (!types[item.source.name]) {
                    types[item.source.name] = {
                        color: item.source.iconColor,
                        position: 'BOTTOM',
                        markerSize: 5,
                    };
                }
            }
        }
        var regions = getRegions(annotations);
        addRegionMarking(regions, flotOptions);
        var eventSectionHeight = 20;
        var eventSectionMargin = 7;
        flotOptions.grid.eventSectionHeight = eventSectionMargin;
        flotOptions.xaxis.eventSectionHeight = eventSectionHeight;
        flotOptions.events = {
            levels: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keys(types).length + 1,
            data: annotations,
            types: types,
            manager: this,
        };
    };
    return EventManager;
}());

function getRegions(events) {
    return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(events, 'isRegion');
}
function addRegionMarking(regions, flotOptions) {
    var markings = flotOptions.grid.markings;
    var defaultColor = app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["DEFAULT_ANNOTATION_COLOR"];
    var fillColor;
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(regions, function (region) {
        if (region.source) {
            fillColor = region.source.iconColor || defaultColor;
        }
        else {
            fillColor = defaultColor;
        }
        fillColor = addAlphaToRGB(fillColor, app_core_utils_colors__WEBPACK_IMPORTED_MODULE_4__["REGION_FILL_ALPHA"]);
        markings.push({
            xaxis: { from: region.min, to: region.timeEnd },
            color: fillColor,
        });
    });
}
function addAlphaToRGB(colorString, alpha) {
    var color = tinycolor2__WEBPACK_IMPORTED_MODULE_2___default()(colorString);
    if (color.isValid()) {
        color.setAlpha(alpha);
        return color.toRgbString();
    }
    else {
        return colorString;
    }
}


/***/ }),

/***/ "./public/app/features/annotations/events_processing.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/annotations/events_processing.ts ***!
  \**************************************************************/
/*! exports provided: makeRegions, dedupAnnotations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeRegions", function() { return makeRegions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dedupAnnotations", function() { return dedupAnnotations; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * This function converts annotation events into set
 * of single events and regions (event consist of two)
 * @param annotations
 * @param options
 */
function makeRegions(annotations, options) {
    var _a = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.partition(annotations, 'regionId'), regionEvents = _a[0], singleEvents = _a[1];
    var regions = getRegions(regionEvents, options.range);
    annotations = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.concat(regions, singleEvents);
    return annotations;
}
function getRegions(events, range) {
    var regionEvents = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(events, function (event) {
        return event.regionId;
    });
    var regions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.groupBy(regionEvents, 'regionId');
    regions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.compact(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(regions, function (regionEvents) {
        var regionObj = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.head(regionEvents);
        if (regionEvents && regionEvents.length > 1) {
            regionObj.timeEnd = regionEvents[1].time;
            regionObj.isRegion = true;
            return regionObj;
        }
        else {
            if (regionEvents && regionEvents.length) {
                // Don't change proper region object
                if (!regionObj.time || !regionObj.timeEnd) {
                    // This is cut region
                    if (isStartOfRegion(regionObj)) {
                        regionObj.timeEnd = range.to.valueOf() - 1;
                    }
                    else {
                        // Start time = null
                        regionObj.timeEnd = regionObj.time;
                        regionObj.time = range.from.valueOf() + 1;
                    }
                    regionObj.isRegion = true;
                }
                return regionObj;
            }
        }
    }));
    return regions;
}
function isStartOfRegion(event) {
    return event.id && event.id === event.regionId;
}
function dedupAnnotations(annotations) {
    var dedup = [];
    // Split events by annotationId property existence
    var events = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.partition(annotations, 'id');
    var eventsById = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.groupBy(events[0], 'id');
    dedup = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(eventsById, function (eventGroup) {
        if (eventGroup.length > 1 && !lodash__WEBPACK_IMPORTED_MODULE_0___default.a.every(eventGroup, isPanelAlert)) {
            // Get first non-panel alert
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(eventGroup, function (event) {
                return event.eventType !== 'panel-alert';
            });
        }
        else {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.head(eventGroup);
        }
    });
    dedup = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.concat(dedup, events[1]);
    return dedup;
}
function isPanelAlert(event) {
    return event.eventType === 'panel-alert';
}


/***/ }),

/***/ "./public/app/features/dashboard/ad_hoc_filters.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/ad_hoc_filters.ts ***!
  \*********************************************************/
/*! exports provided: AdHocFiltersCtrl, adHocFiltersComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdHocFiltersCtrl", function() { return AdHocFiltersCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adHocFiltersComponent", function() { return adHocFiltersComponent; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");



var AdHocFiltersCtrl = /** @class */ (function () {
    /** @ngInject */
    function AdHocFiltersCtrl(uiSegmentSrv, datasourceSrv, $q, variableSrv, $scope, $rootScope) {
        this.uiSegmentSrv = uiSegmentSrv;
        this.datasourceSrv = datasourceSrv;
        this.$q = $q;
        this.variableSrv = variableSrv;
        this.$rootScope = $rootScope;
        this.removeTagFilterSegment = uiSegmentSrv.newSegment({
            fake: true,
            value: '-- remove filter --',
        });
        this.buildSegmentModel();
        this.$rootScope.onAppEvent('template-variable-value-updated', this.buildSegmentModel.bind(this), $scope);
    }
    AdHocFiltersCtrl.prototype.buildSegmentModel = function () {
        this.segments = [];
        if (this.variable.value && !lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(this.variable.value)) {
        }
        for (var _i = 0, _a = this.variable.filters; _i < _a.length; _i++) {
            var tag = _a[_i];
            if (this.segments.length > 0) {
                this.segments.push(this.uiSegmentSrv.newCondition('AND'));
            }
            if (tag.key !== undefined && tag.value !== undefined) {
                this.segments.push(this.uiSegmentSrv.newKey(tag.key));
                this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));
                this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));
            }
        }
        this.segments.push(this.uiSegmentSrv.newPlusButton());
    };
    AdHocFiltersCtrl.prototype.getOptions = function (segment, index) {
        var _this = this;
        if (segment.type === 'operator') {
            return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));
        }
        if (segment.type === 'condition') {
            return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);
        }
        return this.datasourceSrv.get(this.variable.datasource).then(function (ds) {
            var options = {};
            var promise = null;
            if (segment.type !== 'value') {
                promise = ds.getTagKeys ? ds.getTagKeys() : Promise.resolve([]);
            }
            else {
                options.key = _this.segments[index - 2].value;
                promise = ds.getTagValues ? ds.getTagValues(options) : Promise.resolve([]);
            }
            return promise.then(function (results) {
                results = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results, function (segment) {
                    return _this.uiSegmentSrv.newSegment({ value: segment.text });
                });
                // add remove option for keys
                if (segment.type === 'key') {
                    results.splice(0, 0, angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(_this.removeTagFilterSegment));
                }
                return results;
            });
        });
    };
    AdHocFiltersCtrl.prototype.segmentChanged = function (segment, index) {
        this.segments[index] = segment;
        // handle remove tag condition
        if (segment.value === this.removeTagFilterSegment.value) {
            this.segments.splice(index, 3);
            if (this.segments.length === 0) {
                this.segments.push(this.uiSegmentSrv.newPlusButton());
            }
            else if (this.segments.length > 2) {
                this.segments.splice(Math.max(index - 1, 0), 1);
                if (this.segments[this.segments.length - 1].type !== 'plus-button') {
                    this.segments.push(this.uiSegmentSrv.newPlusButton());
                }
            }
        }
        else {
            if (segment.type === 'plus-button') {
                if (index > 2) {
                    this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));
                }
                this.segments.push(this.uiSegmentSrv.newOperator('='));
                this.segments.push(this.uiSegmentSrv.newFake('select value', 'value', 'query-segment-value'));
                segment.type = 'key';
                segment.cssClass = 'query-segment-key';
            }
            if (index + 1 === this.segments.length) {
                this.segments.push(this.uiSegmentSrv.newPlusButton());
            }
        }
        this.updateVariableModel();
    };
    AdHocFiltersCtrl.prototype.updateVariableModel = function () {
        var filters = [];
        var filterIndex = -1;
        var hasFakes = false;
        this.segments.forEach(function (segment) {
            if (segment.type === 'value' && segment.fake) {
                hasFakes = true;
                return;
            }
            switch (segment.type) {
                case 'key': {
                    filters.push({ key: segment.value });
                    filterIndex += 1;
                    break;
                }
                case 'value': {
                    filters[filterIndex].value = segment.value;
                    break;
                }
                case 'operator': {
                    filters[filterIndex].operator = segment.value;
                    break;
                }
                case 'condition': {
                    filters[filterIndex].condition = segment.value;
                    break;
                }
            }
        });
        if (hasFakes) {
            return;
        }
        this.variable.setFilters(filters);
        this.variableSrv.variableUpdated(this.variable, true);
    };
    return AdHocFiltersCtrl;
}());

var template = "\n<div class=\"gf-form-inline\">\n  <div class=\"gf-form\" ng-repeat=\"segment in ctrl.segments\">\n    <metric-segment segment=\"segment\" get-options=\"ctrl.getOptions(segment, $index)\"\n                    on-change=\"ctrl.segmentChanged(segment, $index)\"></metric-segment>\n  </div>\n</div>\n";
function adHocFiltersComponent() {
    return {
        restrict: 'E',
        template: template,
        controller: AdHocFiltersCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            variable: '=',
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].directive('adHocFilters', adHocFiltersComponent);


/***/ }),

/***/ "./public/app/features/dashboard/alerting_srv.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/dashboard/alerting_srv.ts ***!
  \*******************************************************/
/*! exports provided: AlertingSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertingSrv", function() { return AlertingSrv; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var AlertingSrv = /** @class */ (function () {
    function AlertingSrv() {
    }
    AlertingSrv.prototype.init = function (dashboard, alerts) {
        this.dashboard = dashboard;
        this.alerts = alerts || [];
    };
    return AlertingSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].service('alertingSrv', AlertingSrv);


/***/ }),

/***/ "./public/app/features/dashboard/all.ts":
/*!**********************************************!*\
  !*** ./public/app/features/dashboard/all.ts ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dashboard_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dashboard_ctrl */ "./public/app/features/dashboard/dashboard_ctrl.ts");
/* harmony import */ var _alerting_srv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alerting_srv */ "./public/app/features/dashboard/alerting_srv.ts");
/* harmony import */ var _history_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./history/history */ "./public/app/features/dashboard/history/history.ts");
/* harmony import */ var _dashboard_loader_srv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dashboard_loader_srv */ "./public/app/features/dashboard/dashboard_loader_srv.ts");
/* harmony import */ var _dashnav_dashnav__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dashnav/dashnav */ "./public/app/features/dashboard/dashnav/dashnav.ts");
/* harmony import */ var _submenu_submenu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./submenu/submenu */ "./public/app/features/dashboard/submenu/submenu.ts");
/* harmony import */ var _save_as_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./save_as_modal */ "./public/app/features/dashboard/save_as_modal.ts");
/* harmony import */ var _save_modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./save_modal */ "./public/app/features/dashboard/save_modal.ts");
/* harmony import */ var _save_provisioned_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./save_provisioned_modal */ "./public/app/features/dashboard/save_provisioned_modal.ts");
/* harmony import */ var _shareModalCtrl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shareModalCtrl */ "./public/app/features/dashboard/shareModalCtrl.ts");
/* harmony import */ var _share_snapshot_ctrl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./share_snapshot_ctrl */ "./public/app/features/dashboard/share_snapshot_ctrl.ts");
/* harmony import */ var _dashboard_srv__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dashboard_srv */ "./public/app/features/dashboard/dashboard_srv.ts");
/* harmony import */ var _view_state_srv__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./view_state_srv */ "./public/app/features/dashboard/view_state_srv.ts");
/* harmony import */ var _validation_srv__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./validation_srv */ "./public/app/features/dashboard/validation_srv.ts");
/* harmony import */ var _time_srv__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./time_srv */ "./public/app/features/dashboard/time_srv.ts");
/* harmony import */ var _unsaved_changes_srv__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./unsaved_changes_srv */ "./public/app/features/dashboard/unsaved_changes_srv.ts");
/* harmony import */ var _unsaved_changes_modal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./unsaved_changes_modal */ "./public/app/features/dashboard/unsaved_changes_modal.ts");
/* harmony import */ var _timepicker_timepicker__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./timepicker/timepicker */ "./public/app/features/dashboard/timepicker/timepicker.ts");
/* harmony import */ var _upload__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./upload */ "./public/app/features/dashboard/upload.ts");
/* harmony import */ var _export_export_modal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./export/export_modal */ "./public/app/features/dashboard/export/export_modal.ts");
/* harmony import */ var _export_data_export_data_modal__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./export_data/export_data_modal */ "./public/app/features/dashboard/export_data/export_data_modal.ts");
/* harmony import */ var _ad_hoc_filters__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ad_hoc_filters */ "./public/app/features/dashboard/ad_hoc_filters.ts");
/* harmony import */ var _repeat_option_repeat_option__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./repeat_option/repeat_option */ "./public/app/features/dashboard/repeat_option/repeat_option.ts");
/* harmony import */ var _dashgrid_DashboardGridDirective__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./dashgrid/DashboardGridDirective */ "./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts");
/* harmony import */ var _dashgrid_PanelLoader__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./dashgrid/PanelLoader */ "./public/app/features/dashboard/dashgrid/PanelLoader.ts");
/* harmony import */ var _dashgrid_RowOptions__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./dashgrid/RowOptions */ "./public/app/features/dashboard/dashgrid/RowOptions.ts");
/* harmony import */ var _folder_picker_folder_picker__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./folder_picker/folder_picker */ "./public/app/features/dashboard/folder_picker/folder_picker.ts");
/* harmony import */ var _move_to_folder_modal_move_to_folder__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./move_to_folder_modal/move_to_folder */ "./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts");
/* harmony import */ var _settings_settings__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./settings/settings */ "./public/app/features/dashboard/settings/settings.ts");
/* harmony import */ var _panellinks_module__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./panellinks/module */ "./public/app/features/dashboard/panellinks/module.ts");
/* harmony import */ var _dashlinks_module__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./dashlinks/module */ "./public/app/features/dashboard/dashlinks/module.ts");
/* harmony import */ var app_core_utils_react2angular__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! app/core/utils/react2angular */ "./public/app/core/utils/react2angular.ts");
/* harmony import */ var _permissions_DashboardPermissions__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./permissions/DashboardPermissions */ "./public/app/features/dashboard/permissions/DashboardPermissions.tsx");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _folder_dashboards_ctrl__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./folder_dashboards_ctrl */ "./public/app/features/dashboard/folder_dashboards_ctrl.ts");
/* harmony import */ var _dashboard_import_ctrl__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./dashboard_import_ctrl */ "./public/app/features/dashboard/dashboard_import_ctrl.ts");
/* harmony import */ var _create_folder_ctrl__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./create_folder_ctrl */ "./public/app/features/dashboard/create_folder_ctrl.ts");































// angular wrappers


Object(app_core_utils_react2angular__WEBPACK_IMPORTED_MODULE_31__["react2AngularDirective"])('dashboardPermissions', _permissions_DashboardPermissions__WEBPACK_IMPORTED_MODULE_32__["default"], ['dashboardId', 'folder']);




app_core_core_module__WEBPACK_IMPORTED_MODULE_33__["default"].controller('FolderDashboardsCtrl', _folder_dashboards_ctrl__WEBPACK_IMPORTED_MODULE_34__["FolderDashboardsCtrl"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_33__["default"].controller('DashboardImportCtrl', _dashboard_import_ctrl__WEBPACK_IMPORTED_MODULE_35__["DashboardImportCtrl"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_33__["default"].controller('CreateFolderCtrl', _create_folder_ctrl__WEBPACK_IMPORTED_MODULE_36__["CreateFolderCtrl"]);


/***/ }),

/***/ "./public/app/features/dashboard/change_tracker.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/change_tracker.ts ***!
  \*********************************************************/
/*! exports provided: ChangeTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeTracker", function() { return ChangeTracker; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dashboard_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dashboard_model */ "./public/app/features/dashboard/dashboard_model.ts");



var ChangeTracker = /** @class */ (function () {
    /** @ngInject */
    function ChangeTracker(dashboard, scope, originalCopyDelay, $location, $window, $timeout, contextSrv, $rootScope) {
        var _this = this;
        this.$location = $location;
        this.$timeout = $timeout;
        this.contextSrv = contextSrv;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$window = $window;
        this.current = dashboard;
        this.originalPath = $location.path();
        this.scope = scope;
        // register events
        scope.onAppEvent('dashboard-saved', function () {
            _this.original = _this.current.getSaveModelClone();
            _this.originalPath = $location.path();
        });
        $window.onbeforeunload = function () {
            if (_this.ignoreChanges()) {
                return undefined;
            }
            if (_this.hasChanges()) {
                return 'There are unsaved changes to this dashboard';
            }
            return undefined;
        };
        scope.$on('$locationChangeStart', function (event, next) {
            // check if we should look for changes
            if (_this.originalPath === $location.path()) {
                return true;
            }
            if (_this.ignoreChanges()) {
                return true;
            }
            if (_this.hasChanges()) {
                event.preventDefault();
                _this.next = next;
                _this.$timeout(function () {
                    _this.open_modal();
                });
            }
            return false;
        });
        if (originalCopyDelay) {
            this.$timeout(function () {
                // wait for different services to patch the dashboard (missing properties)
                _this.original = dashboard.getSaveModelClone();
            }, originalCopyDelay);
        }
        else {
            this.original = dashboard.getSaveModelClone();
        }
    }
    // for some dashboards and users
    // changes should be ignored
    ChangeTracker.prototype.ignoreChanges = function () {
        if (!this.original) {
            return true;
        }
        if (!this.contextSrv.isEditor) {
            return true;
        }
        if (!this.current || !this.current.meta) {
            return true;
        }
        var meta = this.current.meta;
        return !meta.canSave || meta.fromScript || meta.fromFile;
    };
    // remove stuff that should not count in diff
    ChangeTracker.prototype.cleanDashboardFromIgnoredChanges = function (dashData) {
        // need to new up the domain model class to get access to expand / collapse row logic
        var model = new _dashboard_model__WEBPACK_IMPORTED_MODULE_2__["DashboardModel"](dashData);
        // Expand all rows before making comparison. This is required because row expand / collapse
        // change order of panel array and panel positions.
        model.expandRows();
        var dash = model.getSaveModelClone();
        // ignore time and refresh
        dash.time = 0;
        dash.refresh = 0;
        dash.schemaVersion = 0;
        // ignore iteration property
        delete dash.iteration;
        dash.panels = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(dash.panels, function (panel) {
            if (panel.repeatPanelId) {
                return false;
            }
            // remove scopedVars
            panel.scopedVars = null;
            // ignore panel legend sort
            if (panel.legend) {
                delete panel.legend.sort;
                delete panel.legend.sortDesc;
            }
            return true;
        });
        // ignore template variable values
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(dash.templating.list, function (value) {
            value.current = null;
            value.options = null;
            value.filters = null;
        });
        return dash;
    };
    ChangeTracker.prototype.hasChanges = function () {
        var current = this.cleanDashboardFromIgnoredChanges(this.current.getSaveModelClone());
        var original = this.cleanDashboardFromIgnoredChanges(this.original);
        var currentTimepicker = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(current.nav, { type: 'timepicker' });
        var originalTimepicker = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(original.nav, { type: 'timepicker' });
        if (currentTimepicker && originalTimepicker) {
            currentTimepicker.now = originalTimepicker.now;
        }
        var currentJson = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(current, true);
        var originalJson = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(original, true);
        return currentJson !== originalJson;
    };
    ChangeTracker.prototype.discardChanges = function () {
        this.original = null;
        this.gotoNext();
    };
    ChangeTracker.prototype.open_modal = function () {
        this.$rootScope.appEvent('show-modal', {
            templateHtml: '<unsaved-changes-modal dismiss="dismiss()"></unsaved-changes-modal>',
            modalClass: 'modal--narrow confirm-modal',
        });
    };
    ChangeTracker.prototype.saveChanges = function () {
        var _this = this;
        var self = this;
        var cancel = this.$rootScope.$on('dashboard-saved', function () {
            cancel();
            _this.$timeout(function () {
                self.gotoNext();
            });
        });
        this.$rootScope.appEvent('save-dashboard');
    };
    ChangeTracker.prototype.gotoNext = function () {
        var baseLen = this.$location.absUrl().length - this.$location.url().length;
        var nextUrl = this.next.substring(baseLen);
        this.$location.url(nextUrl);
    };
    return ChangeTracker;
}());



/***/ }),

/***/ "./public/app/features/dashboard/create_folder_ctrl.ts":
/*!*************************************************************!*\
  !*** ./public/app/features/dashboard/create_folder_ctrl.ts ***!
  \*************************************************************/
/*! exports provided: CreateFolderCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateFolderCtrl", function() { return CreateFolderCtrl; });
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");


var CreateFolderCtrl = /** @class */ (function () {
    /** @ngInject */
    function CreateFolderCtrl(backendSrv, $location, validationSrv, navModelSrv) {
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.validationSrv = validationSrv;
        this.title = '';
        this.titleTouched = false;
        this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);
    }
    CreateFolderCtrl.prototype.create = function () {
        var _this = this;
        if (this.hasValidationError) {
            return;
        }
        return this.backendSrv.createFolder({ title: this.title }).then(function (result) {
            app_core_app_events__WEBPACK_IMPORTED_MODULE_0__["default"].emit('alert-success', ['Folder Created', 'OK']);
            _this.$location.url(app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__["default"].stripBaseFromUrl(result.url));
        });
    };
    CreateFolderCtrl.prototype.titleChanged = function () {
        var _this = this;
        this.titleTouched = true;
        this.validationSrv
            .validateNewFolderName(this.title)
            .then(function () {
            _this.hasValidationError = false;
        })
            .catch(function (err) {
            _this.hasValidationError = true;
            _this.validationError = err.message;
        });
    };
    return CreateFolderCtrl;
}());



/***/ }),

/***/ "./public/app/features/dashboard/dashboard_ctrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/dashboard_ctrl.ts ***!
  \*********************************************************/
/*! exports provided: DashboardCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardCtrl", function() { return DashboardCtrl; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");


var DashboardCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashboardCtrl($scope, $rootScope, keybindingSrv, timeSrv, variableSrv, alertingSrv, dashboardSrv, unsavedChangesSrv, dashboardViewStateSrv, playlistSrv, panelLoader) {
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.keybindingSrv = keybindingSrv;
        this.timeSrv = timeSrv;
        this.variableSrv = variableSrv;
        this.alertingSrv = alertingSrv;
        this.dashboardSrv = dashboardSrv;
        this.unsavedChangesSrv = unsavedChangesSrv;
        this.dashboardViewStateSrv = dashboardViewStateSrv;
        this.playlistSrv = playlistSrv;
        this.panelLoader = panelLoader;
        // temp hack due to way dashboards are loaded
        // can't use controllerAs on route yet
        $scope.ctrl = this;
        // TODO: break out settings view to separate view & controller
        this.editTab = 0;
        // funcs called from React component bindings and needs this binding
        this.getPanelContainer = this.getPanelContainer.bind(this);
    }
    DashboardCtrl.prototype.setupDashboard = function (data) {
        try {
            this.setupDashboardInternal(data);
        }
        catch (err) {
            this.onInitFailed(err, 'Dashboard init failed', true);
        }
    };
    DashboardCtrl.prototype.setupDashboardInternal = function (data) {
        var _this = this;
        var dashboard = this.dashboardSrv.create(data.dashboard, data.meta);
        this.dashboardSrv.setCurrent(dashboard);
        // init services
        this.timeSrv.init(dashboard);
        this.alertingSrv.init(dashboard, data.alerts);
        // template values service needs to initialize completely before
        // the rest of the dashboard can load
        this.variableSrv
            .init(dashboard)
            // template values failes are non fatal
            .catch(this.onInitFailed.bind(this, 'Templating init failed', false))
            // continue
            .finally(function () {
            _this.dashboard = dashboard;
            _this.dashboard.processRepeats();
            _this.dashboard.updateSubmenuVisibility();
            _this.dashboard.autoFitPanels(window.innerHeight);
            _this.unsavedChangesSrv.init(dashboard, _this.$scope);
            // TODO refactor ViewStateSrv
            _this.$scope.dashboard = dashboard;
            _this.dashboardViewState = _this.dashboardViewStateSrv.create(_this.$scope);
            _this.keybindingSrv.setupDashboardBindings(_this.$scope, dashboard);
            _this.setWindowTitleAndTheme();
            _this.$scope.appEvent('dashboard-initialized', dashboard);
        })
            .catch(this.onInitFailed.bind(this, 'Dashboard init failed', true));
    };
    DashboardCtrl.prototype.onInitFailed = function (msg, fatal, err) {
        console.log(msg, err);
        if (err.data && err.data.message) {
            err.message = err.data.message;
        }
        else if (!err.message) {
            err = { message: err.toString() };
        }
        this.$scope.appEvent('alert-error', [msg, err.message]);
        // protect against  recursive fallbacks
        if (fatal && !this.loadedFallbackDashboard) {
            this.loadedFallbackDashboard = true;
            this.setupDashboard({ dashboard: { title: 'Dashboard Init failed' } });
        }
    };
    DashboardCtrl.prototype.templateVariableUpdated = function () {
        this.dashboard.processRepeats();
    };
    DashboardCtrl.prototype.setWindowTitleAndTheme = function () {
        window.document.title = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].windowTitlePrefix + this.dashboard.title;
    };
    DashboardCtrl.prototype.showJsonEditor = function (evt, options) {
        var editScope = this.$rootScope.$new();
        editScope.object = options.object;
        editScope.updateHandler = options.updateHandler;
        this.$scope.appEvent('show-dash-editor', {
            src: 'public/app/partials/edit_json.html',
            scope: editScope,
        });
    };
    DashboardCtrl.prototype.getDashboard = function () {
        return this.dashboard;
    };
    DashboardCtrl.prototype.getPanelLoader = function () {
        return this.panelLoader;
    };
    DashboardCtrl.prototype.timezoneChanged = function () {
        this.$rootScope.$broadcast('refresh');
    };
    DashboardCtrl.prototype.getPanelContainer = function () {
        return this;
    };
    DashboardCtrl.prototype.onRemovingPanel = function (evt, options) {
        options = options || {};
        if (!options.panelId) {
            return;
        }
        var panelInfo = this.dashboard.getPanelInfoById(options.panelId);
        this.removePanel(panelInfo.panel, true);
    };
    DashboardCtrl.prototype.removePanel = function (panel, ask) {
        var _this = this;
        // confirm deletion
        if (ask !== false) {
            var text2 = void 0, confirmText = void 0;
            if (panel.alert) {
                text2 = 'Panel includes an alert rule, removing panel will also remove alert rule';
                confirmText = 'YES';
            }
            this.$scope.appEvent('confirm-modal', {
                title: 'Remove Panel',
                text: 'Are you sure you want to remove this panel?',
                text2: text2,
                icon: 'fa-trash',
                confirmText: confirmText,
                yesText: 'Remove',
                onConfirm: function () {
                    _this.removePanel(panel, false);
                },
            });
            return;
        }
        this.dashboard.removePanel(panel);
    };
    DashboardCtrl.prototype.init = function (dashboard) {
        this.$scope.onAppEvent('show-json-editor', this.showJsonEditor.bind(this));
        this.$scope.onAppEvent('template-variable-value-updated', this.templateVariableUpdated.bind(this));
        this.$scope.onAppEvent('panel-remove', this.onRemovingPanel.bind(this));
        this.setupDashboard(dashboard);
    };
    return DashboardCtrl;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].controller('DashboardCtrl', DashboardCtrl);


/***/ }),

/***/ "./public/app/features/dashboard/dashboard_import_ctrl.ts":
/*!****************************************************************!*\
  !*** ./public/app/features/dashboard/dashboard_import_ctrl.ts ***!
  \****************************************************************/
/*! exports provided: DashboardImportCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardImportCtrl", function() { return DashboardImportCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");



var DashboardImportCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashboardImportCtrl(backendSrv, validationSrv, navModelSrv, $location, $routeParams) {
        this.backendSrv = backendSrv;
        this.validationSrv = validationSrv;
        this.$location = $location;
        this.navModel = navModelSrv.getNav('create', 'import');
        this.step = 1;
        this.nameExists = false;
        this.uidExists = false;
        this.autoGenerateUid = true;
        this.autoGenerateUidValue = 'auto-generated';
        this.folderId = $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;
        this.initialFolderTitle = 'Select a folder';
        // check gnetId in url
        if ($routeParams.gnetId) {
            this.gnetUrl = $routeParams.gnetId;
            this.checkGnetDashboard();
        }
    }
    DashboardImportCtrl.prototype.onUpload = function (dash) {
        this.dash = dash;
        this.dash.id = null;
        this.step = 2;
        this.inputs = [];
        if (this.dash.__inputs) {
            for (var _i = 0, _a = this.dash.__inputs; _i < _a.length; _i++) {
                var input = _a[_i];
                var inputModel = {
                    name: input.name,
                    label: input.label,
                    info: input.description,
                    value: input.value,
                    type: input.type,
                    pluginId: input.pluginId,
                    options: [],
                };
                if (input.type === 'datasource') {
                    this.setDatasourceOptions(input, inputModel);
                }
                else if (!inputModel.info) {
                    inputModel.info = 'Specify a string constant';
                }
                this.inputs.push(inputModel);
            }
        }
        this.inputsValid = this.inputs.length === 0;
        this.titleChanged();
        this.uidChanged(true);
    };
    DashboardImportCtrl.prototype.setDatasourceOptions = function (input, inputModel) {
        var sources = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].datasources, function (val) {
            return val.type === input.pluginId;
        });
        if (sources.length === 0) {
            inputModel.info = 'No data sources of type ' + input.pluginName + ' found';
        }
        else if (!inputModel.info) {
            inputModel.info = 'Select a ' + input.pluginName + ' data source';
        }
        inputModel.options = sources.map(function (val) {
            return { text: val.name, value: val.name };
        });
    };
    DashboardImportCtrl.prototype.inputValueChanged = function () {
        this.inputsValid = true;
        for (var _i = 0, _a = this.inputs; _i < _a.length; _i++) {
            var input = _a[_i];
            if (!input.value) {
                this.inputsValid = false;
            }
        }
    };
    DashboardImportCtrl.prototype.titleChanged = function () {
        var _this = this;
        this.titleTouched = true;
        this.nameExists = false;
        this.validationSrv
            .validateNewDashboardName(this.folderId, this.dash.title)
            .then(function () {
            _this.nameExists = false;
            _this.hasNameValidationError = false;
        })
            .catch(function (err) {
            if (err.type === 'EXISTING') {
                _this.nameExists = true;
            }
            _this.hasNameValidationError = true;
            _this.nameValidationError = err.message;
        });
    };
    DashboardImportCtrl.prototype.uidChanged = function (initial) {
        var _this = this;
        this.uidExists = false;
        this.hasUidValidationError = false;
        if (initial === true && this.dash.uid) {
            this.autoGenerateUidValue = 'value set';
        }
        this.backendSrv
            .getDashboardByUid(this.dash.uid)
            .then(function (res) {
            _this.uidExists = true;
            _this.hasUidValidationError = true;
            _this.uidValidationError = "Dashboard named '" + res.dashboard.title + "' in folder '" + res.meta.folderTitle + "' has the same uid";
        })
            .catch(function (err) {
            err.isHandled = true;
        });
    };
    DashboardImportCtrl.prototype.onFolderChange = function (folder) {
        this.folderId = folder.id;
        this.titleChanged();
    };
    DashboardImportCtrl.prototype.onEnterFolderCreation = function () {
        this.inputsValid = false;
    };
    DashboardImportCtrl.prototype.onExitFolderCreation = function () {
        this.inputValueChanged();
    };
    DashboardImportCtrl.prototype.isValid = function () {
        return this.inputsValid && this.folderId !== null;
    };
    DashboardImportCtrl.prototype.saveDashboard = function () {
        var _this = this;
        var inputs = this.inputs.map(function (input) {
            return {
                name: input.name,
                type: input.type,
                pluginId: input.pluginId,
                value: input.value,
            };
        });
        return this.backendSrv
            .post('api/dashboards/import', {
            dashboard: this.dash,
            overwrite: true,
            inputs: inputs,
            folderId: this.folderId,
        })
            .then(function (res) {
            var dashUrl = app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_2__["default"].stripBaseFromUrl(res.importedUrl);
            _this.$location.url(dashUrl);
        });
    };
    DashboardImportCtrl.prototype.loadJsonText = function () {
        try {
            this.parseError = '';
            var dash = JSON.parse(this.jsonText);
            this.onUpload(dash);
        }
        catch (err) {
            console.log(err);
            this.parseError = err.message;
            return;
        }
    };
    DashboardImportCtrl.prototype.checkGnetDashboard = function () {
        var _this = this;
        this.gnetError = '';
        var match = /(^\d+$)|dashboards\/(\d+)/.exec(this.gnetUrl);
        var dashboardId;
        if (match && match[1]) {
            dashboardId = match[1];
        }
        else if (match && match[2]) {
            dashboardId = match[2];
        }
        else {
            this.gnetError = 'Could not find dashboard';
        }
        return this.backendSrv
            .get('api/gnet/dashboards/' + dashboardId)
            .then(function (res) {
            _this.gnetInfo = res;
            // store reference to grafana.com
            res.json.gnetId = res.id;
            _this.onUpload(res.json);
        })
            .catch(function (err) {
            err.isHandled = true;
            _this.gnetError = err.data.message || err;
        });
    };
    DashboardImportCtrl.prototype.back = function () {
        this.gnetUrl = '';
        this.step = 1;
        this.gnetError = '';
        this.gnetInfo = '';
    };
    return DashboardImportCtrl;
}());



/***/ }),

/***/ "./public/app/features/dashboard/dashboard_loader_srv.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/dashboard/dashboard_loader_srv.ts ***!
  \***************************************************************/
/*! exports provided: DashboardLoaderSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardLoaderSrv", function() { return DashboardLoaderSrv; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/services/impression_srv */ "./public/app/core/services/impression_srv.ts");







var DashboardLoaderSrv = /** @class */ (function () {
    /** @ngInject */
    function DashboardLoaderSrv(backendSrv, dashboardSrv, datasourceSrv, $http, $q, $timeout, contextSrv, $routeParams, $rootScope) {
        this.backendSrv = backendSrv;
        this.dashboardSrv = dashboardSrv;
        this.datasourceSrv = datasourceSrv;
        this.$http = $http;
        this.$q = $q;
        this.$timeout = $timeout;
        this.$routeParams = $routeParams;
        this.$rootScope = $rootScope;
    }
    DashboardLoaderSrv.prototype._dashboardLoadFailed = function (title, snapshot) {
        snapshot = snapshot || false;
        return {
            meta: {
                canStar: false,
                isSnapshot: snapshot,
                canDelete: false,
                canSave: false,
                canEdit: false,
                dashboardNotFound: true,
            },
            dashboard: { title: title },
        };
    };
    DashboardLoaderSrv.prototype.loadDashboard = function (type, slug, uid) {
        var _this = this;
        var promise;
        if (type === 'script') {
            promise = this._loadScriptedDashboard(slug);
        }
        else if (type === 'snapshot') {
            promise = this.backendSrv.get('/api/snapshots/' + slug).catch(function () {
                return _this._dashboardLoadFailed('Snapshot not found', true);
            });
        }
        else {
            promise = this.backendSrv
                .getDashboardByUid(uid)
                .then(function (result) {
                if (result.meta.isFolder) {
                    _this.$rootScope.appEvent('alert-error', ['Dashboard not found']);
                    throw new Error('Dashboard not found');
                }
                return result;
            })
                .catch(function () {
                return _this._dashboardLoadFailed('Not found', true);
            });
        }
        promise.then(function (result) {
            if (result.meta.dashboardNotFound !== true) {
                app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_6__["default"].addDashboardImpression(result.dashboard.id);
            }
            return result;
        });
        return promise;
    };
    DashboardLoaderSrv.prototype._loadScriptedDashboard = function (file) {
        var _this = this;
        var url = 'public/dashboards/' + file.replace(/\.(?!js)/, '/') + '?' + new Date().getTime();
        return this.$http({ url: url, method: 'GET' })
            .then(this._executeScript.bind(this))
            .then(function (result) {
            return {
                meta: {
                    fromScript: true,
                    canDelete: false,
                    canSave: false,
                    canStar: false,
                },
                dashboard: result.data,
            };
        }, function (err) {
            console.log('Script dashboard error ' + err);
            _this.$rootScope.appEvent('alert-error', [
                'Script Error',
                'Please make sure it exists and returns a valid dashboard',
            ]);
            return _this._dashboardLoadFailed('Scripted dashboard');
        });
    };
    DashboardLoaderSrv.prototype._executeScript = function (result) {
        var _this = this;
        var services = {
            dashboardSrv: this.dashboardSrv,
            datasourceSrv: this.datasourceSrv,
            $q: this.$q,
        };
        /*jshint -W054 */
        var scriptFunc = new Function('ARGS', 'kbn', 'dateMath', '_', 'moment', 'window', 'document', '$', 'jQuery', 'services', result.data);
        var scriptResult = scriptFunc(this.$routeParams, app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__["default"], app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_5__, lodash__WEBPACK_IMPORTED_MODULE_2___default.a, moment__WEBPACK_IMPORTED_MODULE_1___default.a, window, document, jquery__WEBPACK_IMPORTED_MODULE_3___default.a, jquery__WEBPACK_IMPORTED_MODULE_3___default.a, services);
        // Handle async dashboard scripts
        if (lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isFunction(scriptResult)) {
            var deferred_1 = this.$q.defer();
            scriptResult(function (dashboard) {
                _this.$timeout(function () {
                    deferred_1.resolve({ data: dashboard });
                });
            });
            return deferred_1.promise;
        }
        return { data: scriptResult };
    };
    return DashboardLoaderSrv;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);


/***/ }),

/***/ "./public/app/features/dashboard/dashboard_srv.ts":
/*!********************************************************!*\
  !*** ./public/app/features/dashboard/dashboard_srv.ts ***!
  \********************************************************/
/*! exports provided: DashboardSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardSrv", function() { return DashboardSrv; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _dashboard_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dashboard_model */ "./public/app/features/dashboard/dashboard_model.ts");
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");



var DashboardSrv = /** @class */ (function () {
    /** @ngInject */
    function DashboardSrv(backendSrv, $rootScope, $location) {
        this.backendSrv = backendSrv;
        this.$rootScope = $rootScope;
        this.$location = $location;
    }
    DashboardSrv.prototype.create = function (dashboard, meta) {
        return new _dashboard_model__WEBPACK_IMPORTED_MODULE_1__["DashboardModel"](dashboard, meta);
    };
    DashboardSrv.prototype.setCurrent = function (dashboard) {
        this.dash = dashboard;
    };
    DashboardSrv.prototype.getCurrent = function () {
        return this.dash;
    };
    DashboardSrv.prototype.handleSaveDashboardError = function (clone, options, err) {
        var _this = this;
        options = options || {};
        options.overwrite = true;
        if (err.data && err.data.status === 'version-mismatch') {
            err.isHandled = true;
            this.$rootScope.appEvent('confirm-modal', {
                title: 'Conflict',
                text: 'Someone else has updated this dashboard.',
                text2: 'Would you still like to save this dashboard?',
                yesText: 'Save & Overwrite',
                icon: 'fa-warning',
                onConfirm: function () {
                    _this.save(clone, options);
                },
            });
        }
        if (err.data && err.data.status === 'name-exists') {
            err.isHandled = true;
            this.$rootScope.appEvent('confirm-modal', {
                title: 'Conflict',
                text: 'A dashboard with the same name in selected folder already exists.',
                text2: 'Would you still like to save this dashboard?',
                yesText: 'Save & Overwrite',
                icon: 'fa-warning',
                onConfirm: function () {
                    _this.save(clone, options);
                },
            });
        }
        if (err.data && err.data.status === 'plugin-dashboard') {
            err.isHandled = true;
            this.$rootScope.appEvent('confirm-modal', {
                title: 'Plugin Dashboard',
                text: err.data.message,
                text2: 'Your changes will be lost when you update the plugin. Use Save As to create custom version.',
                yesText: 'Overwrite',
                icon: 'fa-warning',
                altActionText: 'Save As',
                onAltAction: function () {
                    _this.showSaveAsModal();
                },
                onConfirm: function () {
                    _this.save(clone, { overwrite: true });
                },
            });
        }
    };
    DashboardSrv.prototype.postSave = function (clone, data) {
        this.dash.version = data.version;
        var newUrl = app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_2__["default"].stripBaseFromUrl(data.url);
        var currentPath = this.$location.path();
        if (newUrl !== currentPath) {
            this.$location.url(newUrl).replace();
        }
        this.$rootScope.appEvent('dashboard-saved', this.dash);
        this.$rootScope.appEvent('alert-success', ['Dashboard saved']);
        return this.dash;
    };
    DashboardSrv.prototype.save = function (clone, options) {
        options = options || {};
        options.folderId = options.folderId >= 0 ? options.folderId : this.dash.meta.folderId || clone.folderId;
        return this.backendSrv
            .saveDashboard(clone, options)
            .then(this.postSave.bind(this, clone))
            .catch(this.handleSaveDashboardError.bind(this, clone, options));
    };
    DashboardSrv.prototype.saveDashboard = function (options, clone) {
        if (clone) {
            this.setCurrent(this.create(clone, this.dash.meta));
        }
        if (this.dash.meta.provisioned) {
            return this.showDashboardProvisionedModal();
        }
        if (!this.dash.meta.canSave && options.makeEditable !== true) {
            return Promise.resolve();
        }
        if (this.dash.title === 'New dashboard') {
            return this.showSaveAsModal();
        }
        if (this.dash.version > 0) {
            return this.showSaveModal();
        }
        return this.save(this.dash.getSaveModelClone(), options);
    };
    DashboardSrv.prototype.saveJSONDashboard = function (json) {
        return this.save(JSON.parse(json), {});
    };
    DashboardSrv.prototype.showDashboardProvisionedModal = function () {
        this.$rootScope.appEvent('show-modal', {
            templateHtml: '<save-provisioned-dashboard-modal dismiss="dismiss()"></save-provisioned-dashboard-modal>',
        });
    };
    DashboardSrv.prototype.showSaveAsModal = function () {
        this.$rootScope.appEvent('show-modal', {
            templateHtml: '<save-dashboard-as-modal dismiss="dismiss()"></save-dashboard-as-modal>',
            modalClass: 'modal--narrow',
        });
    };
    DashboardSrv.prototype.showSaveModal = function () {
        this.$rootScope.appEvent('show-modal', {
            templateHtml: '<save-dashboard-modal dismiss="dismiss()"></save-dashboard-modal>',
            modalClass: 'modal--narrow',
        });
    };
    DashboardSrv.prototype.starDashboard = function (dashboardId, isStarred) {
        var _this = this;
        var promise;
        if (isStarred) {
            promise = this.backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(function () {
                return false;
            });
        }
        else {
            promise = this.backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(function () {
                return true;
            });
        }
        return promise.then(function (res) {
            if (_this.dash && _this.dash.id === dashboardId) {
                _this.dash.meta.isStarred = res;
            }
            return res;
        });
    };
    return DashboardSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].service('dashboardSrv', DashboardSrv);


/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx":
/*!******************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx ***!
  \******************************************************************/
/*! exports provided: AddPanelPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddPanelPanel", function() { return AddPanelPanel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_components_ScrollBar_ScrollBar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/components/ScrollBar/ScrollBar */ "./public/app/core/components/ScrollBar/ScrollBar.tsx");
/* harmony import */ var app_core_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/store */ "./public/app/core/store.ts");
/* harmony import */ var app_core_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/constants */ "./public/app/core/constants.ts");
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-highlight-words */ "./node_modules/react-highlight-words/dist/main.js");
/* harmony import */ var react_highlight_words__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_highlight_words__WEBPACK_IMPORTED_MODULE_8__);









var AddPanelPanel = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AddPanelPanel, _super);
    function AddPanelPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.onAddPanel = function (panelPluginInfo) {
            var panelContainer = _this.props.getPanelContainer();
            var dashboard = panelContainer.getDashboard();
            var gridPos = _this.props.panel.gridPos;
            var newPanel = {
                type: panelPluginInfo.id,
                title: 'Panel Title',
                gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },
            };
            if (panelPluginInfo.id === 'row') {
                newPanel.title = 'Row title';
                newPanel.gridPos = { x: 0, y: 0 };
            }
            // apply panel template / defaults
            if (panelPluginInfo.defaults) {
                lodash__WEBPACK_IMPORTED_MODULE_2___default.a.defaults(newPanel, panelPluginInfo.defaults);
                newPanel.gridPos.w = panelPluginInfo.defaults.gridPos.w;
                newPanel.gridPos.h = panelPluginInfo.defaults.gridPos.h;
                newPanel.title = panelPluginInfo.defaults.title;
                app_core_store__WEBPACK_IMPORTED_MODULE_6__["default"].delete(app_core_constants__WEBPACK_IMPORTED_MODULE_7__["LS_PANEL_COPY_KEY"]);
            }
            dashboard.addPanel(newPanel);
            dashboard.removePanel(_this.props.panel);
        };
        _this.handleCloseAddPanel = _this.handleCloseAddPanel.bind(_this);
        _this.renderPanelItem = _this.renderPanelItem.bind(_this);
        _this.panelSizeChanged = _this.panelSizeChanged.bind(_this);
        _this.state = {
            panelPlugins: _this.getPanelPlugins(''),
            copiedPanelPlugins: _this.getCopiedPanelPlugins(''),
            filter: '',
            tab: 'Add',
        };
        return _this;
    }
    AddPanelPanel.prototype.componentDidMount = function () {
        this.props.panel.events.on('panel-size-changed', this.panelSizeChanged);
    };
    AddPanelPanel.prototype.componentWillUnmount = function () {
        this.props.panel.events.off('panel-size-changed', this.panelSizeChanged);
    };
    AddPanelPanel.prototype.panelSizeChanged = function () {
        var _this = this;
        setTimeout(function () {
            _this.scrollbar.update();
        });
    };
    AddPanelPanel.prototype.getPanelPlugins = function (filter) {
        var panels = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.chain(app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].panels)
            .filter({ hideFromList: false })
            .map(function (item) { return item; })
            .value();
        // add special row type
        panels.push({ id: 'row', name: 'Row', sort: 8, info: { logos: { small: 'public/img/icn-row.svg' } } });
        panels = this.filterPanels(panels, filter);
        // add sort by sort property
        return lodash__WEBPACK_IMPORTED_MODULE_2___default.a.sortBy(panels, 'sort');
    };
    AddPanelPanel.prototype.getCopiedPanelPlugins = function (filter) {
        var panels = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.chain(app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].panels)
            .filter({ hideFromList: false })
            .map(function (item) { return item; })
            .value();
        var copiedPanels = [];
        var copiedPanelJson = app_core_store__WEBPACK_IMPORTED_MODULE_6__["default"].get(app_core_constants__WEBPACK_IMPORTED_MODULE_7__["LS_PANEL_COPY_KEY"]);
        if (copiedPanelJson) {
            var copiedPanel = JSON.parse(copiedPanelJson);
            var pluginInfo = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(panels, { id: copiedPanel.type });
            if (pluginInfo) {
                var pluginCopy = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.cloneDeep(pluginInfo);
                pluginCopy.name = copiedPanel.title;
                pluginCopy.sort = -1;
                pluginCopy.defaults = copiedPanel;
                copiedPanels.push(pluginCopy);
            }
        }
        copiedPanels = this.filterPanels(copiedPanels, filter);
        return lodash__WEBPACK_IMPORTED_MODULE_2___default.a.sortBy(copiedPanels, 'sort');
    };
    AddPanelPanel.prototype.handleCloseAddPanel = function (evt) {
        evt.preventDefault();
        var panelContainer = this.props.getPanelContainer();
        var dashboard = panelContainer.getDashboard();
        dashboard.removePanel(dashboard.panels[0]);
    };
    AddPanelPanel.prototype.renderText = function (text) {
        var searchWords = this.state.filter.split('');
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_highlight_words__WEBPACK_IMPORTED_MODULE_8___default.a, { highlightClassName: "highlight-search-match", textToHighlight: text, searchWords: searchWords });
    };
    AddPanelPanel.prototype.renderPanelItem = function (panel, index) {
        var _this = this;
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { key: index, className: "add-panel__item", onClick: function () { return _this.onAddPanel(panel); }, title: panel.name },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", { className: "add-panel__item-img", src: panel.info.logos.small }),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "add-panel__item-name" }, this.renderText(panel.name))));
    };
    AddPanelPanel.prototype.noCopiedPanelPlugins = function () {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "add-panel__no-panels" }, "No copied panels yet.");
    };
    AddPanelPanel.prototype.filterChange = function (evt) {
        this.setState({
            filter: evt.target.value,
            panelPlugins: this.getPanelPlugins(evt.target.value),
            copiedPanelPlugins: this.getCopiedPanelPlugins(evt.target.value),
        });
    };
    AddPanelPanel.prototype.filterKeyPress = function (evt) {
        if (evt.key === 'Enter') {
            var panel = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.head(this.state.panelPlugins);
            if (panel) {
                this.onAddPanel(panel);
            }
        }
    };
    AddPanelPanel.prototype.filterPanels = function (panels, filter) {
        var regex = new RegExp(filter, 'i');
        return panels.filter(function (panel) {
            return regex.test(panel.name);
        });
    };
    AddPanelPanel.prototype.openCopy = function () {
        this.setState({
            tab: 'Copy',
            filter: '',
            panelPlugins: this.getPanelPlugins(''),
            copiedPanelPlugins: this.getCopiedPanelPlugins(''),
        });
    };
    AddPanelPanel.prototype.openAdd = function () {
        this.setState({
            tab: 'Add',
            filter: '',
            panelPlugins: this.getPanelPlugins(''),
            copiedPanelPlugins: this.getCopiedPanelPlugins(''),
        });
    };
    AddPanelPanel.prototype.render = function () {
        var _this = this;
        var addClass = classnames__WEBPACK_IMPORTED_MODULE_3___default()({
            'active active--panel': this.state.tab === 'Add',
            '': this.state.tab === 'Copy',
        });
        var copyClass = classnames__WEBPACK_IMPORTED_MODULE_3___default()({
            '': this.state.tab === 'Add',
            'active active--panel': this.state.tab === 'Copy',
        });
        var panelTab;
        if (this.state.tab === 'Add') {
            panelTab = this.state.panelPlugins.map(this.renderPanelItem);
        }
        else if (this.state.tab === 'Copy') {
            if (this.state.copiedPanelPlugins.length > 0) {
                panelTab = this.state.copiedPanelPlugins.map(this.renderPanelItem);
            }
            else {
                panelTab = this.noCopiedPanelPlugins();
            }
        }
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "panel-container add-panel-container" },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "add-panel" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "add-panel__header" },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "gicon gicon-add-panel" }),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", { className: "add-panel__title" }, "New Panel"),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", { className: "gf-tabs" },
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", { className: "gf-tabs-item" },
                            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: 'gf-tabs-link pointer ' + addClass, onClick: this.openAdd.bind(this) }, "Add")),
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", { className: "gf-tabs-item" },
                            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: 'gf-tabs-link pointer ' + copyClass, onClick: this.openCopy.bind(this) }, "Paste"))),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", { className: "add-panel__close", onClick: this.handleCloseAddPanel },
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "fa fa-close" }))),
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(app_core_components_ScrollBar_ScrollBar__WEBPACK_IMPORTED_MODULE_5__["default"], { ref: function (element) { return (_this.scrollbar = element); }, className: "add-panel__items" },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "add-panel__searchbar" },
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("label", { className: "gf-form gf-form--grow gf-form--has-input-icon" },
                            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", { type: "text", autoFocus: true, className: "gf-form-input gf-form--grow", placeholder: "Panel Search Filter", value: this.state.filter, onChange: this.filterChange.bind(this), onKeyPress: this.filterKeyPress.bind(this) }),
                            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "gf-form-input-icon fa fa-search" }))),
                    panelTab))));
    };
    return AddPanelPanel;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));



/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/DashboardGrid.tsx":
/*!******************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/DashboardGrid.tsx ***!
  \******************************************************************/
/*! exports provided: DashboardGrid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardGrid", function() { return DashboardGrid; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_grid_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-grid-layout */ "./node_modules/react-grid-layout/index.js");
/* harmony import */ var react_grid_layout__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_grid_layout__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/constants */ "./public/app/core/constants.ts");
/* harmony import */ var _DashboardPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DashboardPanel */ "./public/app/features/dashboard/dashgrid/DashboardPanel.tsx");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_sizeme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-sizeme */ "./node_modules/react-sizeme/dist/react-sizeme.js");
/* harmony import */ var react_sizeme__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_sizeme__WEBPACK_IMPORTED_MODULE_6__);







var lastGridWidth = 1200;
function GridWrapper(_a) {
    var size = _a.size, layout = _a.layout, onLayoutChange = _a.onLayoutChange, children = _a.children, onDragStop = _a.onDragStop, onResize = _a.onResize, onResizeStop = _a.onResizeStop, onWidthChange = _a.onWidthChange, className = _a.className, isResizable = _a.isResizable, isDraggable = _a.isDraggable;
    if (size.width === 0) {
        console.log('size is zero!');
    }
    var width = size.width > 0 ? size.width : lastGridWidth;
    if (width !== lastGridWidth) {
        onWidthChange();
        lastGridWidth = width;
    }
    return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_grid_layout__WEBPACK_IMPORTED_MODULE_2___default.a, { width: lastGridWidth, className: className, isDraggable: isDraggable, isResizable: isResizable, measureBeforeMount: false, containerPadding: [0, 0], useCSSTransforms: true, margin: [app_core_constants__WEBPACK_IMPORTED_MODULE_3__["GRID_CELL_VMARGIN"], app_core_constants__WEBPACK_IMPORTED_MODULE_3__["GRID_CELL_VMARGIN"]], cols: app_core_constants__WEBPACK_IMPORTED_MODULE_3__["GRID_COLUMN_COUNT"], rowHeight: app_core_constants__WEBPACK_IMPORTED_MODULE_3__["GRID_CELL_HEIGHT"], draggableHandle: ".grid-drag-handle", layout: layout, onResize: onResize, onResizeStop: onResizeStop, onDragStop: onDragStop, onLayoutChange: onLayoutChange }, children));
}
var SizedReactLayoutGrid = react_sizeme__WEBPACK_IMPORTED_MODULE_6___default()({ monitorWidth: true })(GridWrapper);
var DashboardGrid = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DashboardGrid, _super);
    function DashboardGrid(props) {
        var _this = _super.call(this, props) || this;
        _this.panelContainer = _this.props.getPanelContainer();
        _this.onLayoutChange = _this.onLayoutChange.bind(_this);
        _this.onResize = _this.onResize.bind(_this);
        _this.onResizeStop = _this.onResizeStop.bind(_this);
        _this.onDragStop = _this.onDragStop.bind(_this);
        _this.onWidthChange = _this.onWidthChange.bind(_this);
        _this.state = { animated: false };
        // subscribe to dashboard events
        _this.dashboard = _this.panelContainer.getDashboard();
        _this.dashboard.on('panel-added', _this.triggerForceUpdate.bind(_this));
        _this.dashboard.on('panel-removed', _this.triggerForceUpdate.bind(_this));
        _this.dashboard.on('repeats-processed', _this.triggerForceUpdate.bind(_this));
        _this.dashboard.on('view-mode-changed', _this.triggerForceUpdate.bind(_this));
        _this.dashboard.on('row-collapsed', _this.triggerForceUpdate.bind(_this));
        _this.dashboard.on('row-expanded', _this.triggerForceUpdate.bind(_this));
        return _this;
    }
    DashboardGrid.prototype.buildLayout = function () {
        var layout = [];
        this.panelMap = {};
        for (var _i = 0, _a = this.dashboard.panels; _i < _a.length; _i++) {
            var panel = _a[_i];
            var stringId = panel.id.toString();
            this.panelMap[stringId] = panel;
            if (!panel.gridPos) {
                console.log('panel without gridpos');
                continue;
            }
            var panelPos = {
                i: stringId,
                x: panel.gridPos.x,
                y: panel.gridPos.y,
                w: panel.gridPos.w,
                h: panel.gridPos.h,
            };
            if (panel.type === 'row') {
                panelPos.w = app_core_constants__WEBPACK_IMPORTED_MODULE_3__["GRID_COLUMN_COUNT"];
                panelPos.h = 1;
                panelPos.isResizable = false;
                panelPos.isDraggable = panel.collapsed;
            }
            layout.push(panelPos);
        }
        return layout;
    };
    DashboardGrid.prototype.onLayoutChange = function (newLayout) {
        for (var _i = 0, newLayout_1 = newLayout; _i < newLayout_1.length; _i++) {
            var newPos = newLayout_1[_i];
            this.panelMap[newPos.i].updateGridPos(newPos);
        }
        this.dashboard.sortPanelsByGridPos();
    };
    DashboardGrid.prototype.triggerForceUpdate = function () {
        this.forceUpdate();
    };
    DashboardGrid.prototype.onWidthChange = function () {
        for (var _i = 0, _a = this.dashboard.panels; _i < _a.length; _i++) {
            var panel = _a[_i];
            panel.resizeDone();
        }
    };
    DashboardGrid.prototype.updateGridPos = function (item, layout) {
        this.panelMap[item.i].updateGridPos(item);
        // react-grid-layout has a bug (#670), and onLayoutChange() is only called when the component is mounted.
        // So it's required to call it explicitly when panel resized or moved to save layout changes.
        this.onLayoutChange(layout);
    };
    DashboardGrid.prototype.onResize = function (layout, oldItem, newItem) {
        this.panelMap[newItem.i].updateGridPos(newItem);
    };
    DashboardGrid.prototype.onResizeStop = function (layout, oldItem, newItem) {
        this.updateGridPos(newItem, layout);
        this.panelMap[newItem.i].resizeDone();
    };
    DashboardGrid.prototype.onDragStop = function (layout, oldItem, newItem) {
        this.updateGridPos(newItem, layout);
    };
    DashboardGrid.prototype.componentDidMount = function () {
        var _this = this;
        setTimeout(function () {
            _this.setState(function () {
                return { animated: true };
            });
        });
    };
    DashboardGrid.prototype.renderPanels = function () {
        var panelElements = [];
        for (var _i = 0, _a = this.dashboard.panels; _i < _a.length; _i++) {
            var panel = _a[_i];
            var panelClasses = classnames__WEBPACK_IMPORTED_MODULE_5___default()({ panel: true, 'panel--fullscreen': panel.fullscreen });
            panelElements.push(
            /** panel-id is set for html bookmarks */
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { key: panel.id.toString(), className: panelClasses, id: "panel-" + panel.id.toString() },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_DashboardPanel__WEBPACK_IMPORTED_MODULE_4__["DashboardPanel"], { panel: panel, getPanelContainer: this.props.getPanelContainer })));
        }
        return panelElements;
    };
    DashboardGrid.prototype.render = function () {
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(SizedReactLayoutGrid, { className: classnames__WEBPACK_IMPORTED_MODULE_5___default()({ layout: true, animated: this.state.animated }), layout: this.buildLayout(), isResizable: this.dashboard.meta.canEdit, isDraggable: this.dashboard.meta.canEdit, onLayoutChange: this.onLayoutChange, onWidthChange: this.onWidthChange, onDragStop: this.onDragStop, onResize: this.onResize, onResizeStop: this.onResizeStop }, this.renderPanels()));
    };
    return DashboardGrid;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));



/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts":
/*!**************************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts ***!
  \**************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_utils_react2angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/react2angular */ "./public/app/core/utils/react2angular.ts");
/* harmony import */ var _DashboardGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DashboardGrid */ "./public/app/features/dashboard/dashgrid/DashboardGrid.tsx");


Object(app_core_utils_react2angular__WEBPACK_IMPORTED_MODULE_0__["react2AngularDirective"])('dashboardGrid', _DashboardGrid__WEBPACK_IMPORTED_MODULE_1__["DashboardGrid"], [
    ['getPanelContainer', { watchDepth: 'reference', wrapApply: false }],
]);


/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/DashboardPanel.tsx":
/*!*******************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/DashboardPanel.tsx ***!
  \*******************************************************************/
/*! exports provided: DashboardPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardPanel", function() { return DashboardPanel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _DashboardRow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DashboardRow */ "./public/app/features/dashboard/dashgrid/DashboardRow.tsx");
/* harmony import */ var _AddPanelPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AddPanelPanel */ "./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx");




var DashboardPanel = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DashboardPanel, _super);
    function DashboardPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {};
        return _this;
    }
    DashboardPanel.prototype.componentDidMount = function () {
        if (!this.element) {
            return;
        }
        var panelContainer = this.props.getPanelContainer();
        var dashboard = panelContainer.getDashboard();
        var loader = panelContainer.getPanelLoader();
        this.attachedPanel = loader.load(this.element, this.props.panel, dashboard);
    };
    DashboardPanel.prototype.componentWillUnmount = function () {
        if (this.attachedPanel) {
            this.attachedPanel.destroy();
        }
    };
    DashboardPanel.prototype.render = function () {
        var _this = this;
        // special handling for rows
        if (this.props.panel.type === 'row') {
            return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_DashboardRow__WEBPACK_IMPORTED_MODULE_2__["DashboardRow"], { panel: this.props.panel, getPanelContainer: this.props.getPanelContainer });
        }
        if (this.props.panel.type === 'add-panel') {
            return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_AddPanelPanel__WEBPACK_IMPORTED_MODULE_3__["AddPanelPanel"], { panel: this.props.panel, getPanelContainer: this.props.getPanelContainer });
        }
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { ref: function (element) { return _this.element = element; }, className: "panel-height-helper" }));
    };
    return DashboardPanel;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));



/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/DashboardRow.tsx":
/*!*****************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/DashboardRow.tsx ***!
  \*****************************************************************/
/*! exports provided: DashboardRow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardRow", function() { return DashboardRow; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_features_templating_template_srv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/features/templating/template_srv */ "./public/app/features/templating/template_srv.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");





var DashboardRow = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DashboardRow, _super);
    function DashboardRow(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            collapsed: _this.props.panel.collapsed,
        };
        _this.panelContainer = _this.props.getPanelContainer();
        _this.dashboard = _this.panelContainer.getDashboard();
        _this.toggle = _this.toggle.bind(_this);
        _this.openSettings = _this.openSettings.bind(_this);
        _this.delete = _this.delete.bind(_this);
        _this.update = _this.update.bind(_this);
        return _this;
    }
    DashboardRow.prototype.toggle = function () {
        this.dashboard.toggleRow(this.props.panel);
        this.setState(function (prevState) {
            return { collapsed: !prevState.collapsed };
        });
    };
    DashboardRow.prototype.update = function () {
        this.dashboard.processRepeats();
        this.forceUpdate();
    };
    DashboardRow.prototype.openSettings = function () {
        app_core_app_events__WEBPACK_IMPORTED_MODULE_4__["default"].emit('show-modal', {
            templateHtml: "<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>",
            modalClass: 'modal--narrow',
            model: {
                row: this.props.panel,
                onUpdated: this.update.bind(this),
            },
        });
    };
    DashboardRow.prototype.delete = function () {
        var _this = this;
        app_core_app_events__WEBPACK_IMPORTED_MODULE_4__["default"].emit('confirm-modal', {
            title: 'Delete Row',
            text: 'Are you sure you want to remove this row and all its panels?',
            altActionText: 'Delete row only',
            icon: 'fa-trash',
            onConfirm: function () {
                var panelContainer = _this.props.getPanelContainer();
                var dashboard = panelContainer.getDashboard();
                dashboard.removeRow(_this.props.panel, true);
            },
            onAltAction: function () {
                var panelContainer = _this.props.getPanelContainer();
                var dashboard = panelContainer.getDashboard();
                dashboard.removeRow(_this.props.panel, false);
            },
        });
    };
    DashboardRow.prototype.render = function () {
        var classes = classnames__WEBPACK_IMPORTED_MODULE_2___default()({
            'dashboard-row': true,
            'dashboard-row--collapsed': this.state.collapsed,
        });
        var chevronClass = classnames__WEBPACK_IMPORTED_MODULE_2___default()({
            fa: true,
            'fa-chevron-down': !this.state.collapsed,
            'fa-chevron-right': this.state.collapsed,
        });
        var title = app_features_templating_template_srv__WEBPACK_IMPORTED_MODULE_3__["default"].replaceWithText(this.props.panel.title, this.props.panel.scopedVars);
        var count = this.props.panel.panels ? this.props.panel.panels.length : 0;
        var panels = count === 1 ? 'panel' : 'panels';
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: classes },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", { className: "dashboard-row__title pointer", onClick: this.toggle },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: chevronClass }),
                title,
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", { className: "dashboard-row__panel_count" },
                    "(",
                    count,
                    " ",
                    panels,
                    ")")),
            this.dashboard.meta.canEdit === true && (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "dashboard-row__actions" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", { className: "pointer", onClick: this.openSettings },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "fa fa-cog" })),
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", { className: "pointer", onClick: this.delete },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "fa fa-trash" })))),
            this.state.collapsed === true && (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "dashboard-row__toggle-target", onClick: this.toggle }, "\u00A0")),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "dashboard-row__drag grid-drag-handle" })));
    };
    return DashboardRow;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component));



/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/PanelLoader.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/PanelLoader.ts ***!
  \***************************************************************/
/*! exports provided: PanelLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelLoader", function() { return PanelLoader; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");


var PanelLoader = /** @class */ (function () {
    /** @ngInject */
    function PanelLoader($compile, $rootScope) {
        this.$compile = $compile;
        this.$rootScope = $rootScope;
    }
    PanelLoader.prototype.load = function (elem, panel, dashboard) {
        var template = '<plugin-component type="panel" class="panel-height-helper"></plugin-component>';
        var panelScope = this.$rootScope.$new();
        panelScope.panel = panel;
        panelScope.dashboard = dashboard;
        var compiledElem = this.$compile(template)(panelScope);
        var rootNode = angular__WEBPACK_IMPORTED_MODULE_0___default.a.element(elem);
        rootNode.append(compiledElem);
        return {
            destroy: function () {
                panelScope.$destroy();
                compiledElem.remove();
            },
        };
    };
    return PanelLoader;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].service('panelLoader', PanelLoader);


/***/ }),

/***/ "./public/app/features/dashboard/dashgrid/RowOptions.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/dashgrid/RowOptions.ts ***!
  \**************************************************************/
/*! exports provided: RowOptionsCtrl, rowOptionsDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RowOptionsCtrl", function() { return RowOptionsCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rowOptionsDirective", function() { return rowOptionsDirective; });
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");

var RowOptionsCtrl = /** @class */ (function () {
    /** @ngInject */
    function RowOptionsCtrl() {
        this.source = this.row;
        this.row = this.row.getSaveModel();
    }
    RowOptionsCtrl.prototype.update = function () {
        this.source.title = this.row.title;
        this.source.repeat = this.row.repeat;
        this.onUpdated();
        this.dismiss();
    };
    return RowOptionsCtrl;
}());

function rowOptionsDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/partials/row_options.html',
        controller: RowOptionsCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            row: '=',
            dismiss: '&',
            onUpdated: '&',
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_0__["coreModule"].directive('rowOptions', rowOptionsDirective);


/***/ }),

/***/ "./public/app/features/dashboard/dashlinks/editor.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/dashboard/dashlinks/editor.ts ***!
  \***********************************************************/
/*! exports provided: iconMap, DashLinkEditorCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iconMap", function() { return iconMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashLinkEditorCtrl", function() { return DashLinkEditorCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var iconMap = {
    'external link': 'fa-external-link',
    dashboard: 'fa-th-large',
    question: 'fa-question',
    info: 'fa-info',
    bolt: 'fa-bolt',
    doc: 'fa-file-text-o',
    cloud: 'fa-cloud',
};
var DashLinkEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashLinkEditorCtrl($scope, $rootScope) {
        this.iconMap = iconMap;
        this.dashboard.links = this.dashboard.links || [];
        this.mode = 'list';
        $scope.$on('$destroy', function () {
            $rootScope.appEvent('dash-links-updated');
        });
    }
    DashLinkEditorCtrl.prototype.backToList = function () {
        this.mode = 'list';
    };
    DashLinkEditorCtrl.prototype.setupNew = function () {
        this.mode = 'new';
        this.link = { type: 'dashboards', icon: 'external link' };
    };
    DashLinkEditorCtrl.prototype.addLink = function () {
        this.dashboard.links.push(this.link);
        this.mode = 'list';
    };
    DashLinkEditorCtrl.prototype.editLink = function (link) {
        this.link = link;
        this.mode = 'edit';
        console.log(this.link);
    };
    DashLinkEditorCtrl.prototype.saveLink = function () {
        this.backToList();
    };
    DashLinkEditorCtrl.prototype.moveLink = function (index, dir) {
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.move(this.dashboard.links, index, index + dir);
    };
    DashLinkEditorCtrl.prototype.deleteLink = function (index) {
        this.dashboard.links.splice(index, 1);
        this.dashboard.updateSubmenuVisibility();
    };
    return DashLinkEditorCtrl;
}());

function dashLinksEditor() {
    return {
        restrict: 'E',
        controller: DashLinkEditorCtrl,
        templateUrl: 'public/app/features/dashboard/dashlinks/editor.html',
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dashboard: '=',
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('dashLinksEditor', dashLinksEditor);


/***/ }),

/***/ "./public/app/features/dashboard/dashlinks/module.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/dashboard/dashlinks/module.ts ***!
  \***********************************************************/
/*! exports provided: DashLinksContainerCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashLinksContainerCtrl", function() { return DashLinksContainerCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editor */ "./public/app/features/dashboard/dashlinks/editor.ts");



function dashLinksContainer() {
    return {
        scope: {
            links: '=',
        },
        restrict: 'E',
        controller: 'DashLinksContainerCtrl',
        template: '<dash-link ng-repeat="link in generatedLinks" link="link"></dash-link>',
        link: function () { },
    };
}
/** @ngInject */
function dashLink($compile, $sanitize, linkSrv) {
    return {
        restrict: 'E',
        link: function (scope, elem) {
            var link = scope.link;
            var template = '<div class="gf-form">' +
                '<a class="pointer gf-form-label" data-placement="bottom"' +
                (link.asDropdown ? ' ng-click="fillDropdown(link)" data-toggle="dropdown"' : '') +
                '>' +
                '<i></i> <span></span></a>';
            if (link.asDropdown) {
                template +=
                    '<ul class="dropdown-menu" role="menu">' +
                        '<li ng-repeat="dash in link.searchHits">' +
                        '<a href="{{dash.url}}" target="{{dash.target}}">{{dash.title}}</a>' +
                        '</li>' +
                        '</ul>';
            }
            template += '</div>';
            elem.html(template);
            $compile(elem.contents())(scope);
            function update() {
                var linkInfo = linkSrv.getAnchorInfo(link);
                var anchor = elem.find('a');
                var span = elem.find('span');
                span.text(linkInfo.title);
                if (!link.asDropdown) {
                    anchor.attr('href', linkInfo.href);
                    sanitizeAnchor();
                }
                anchor.attr('data-placement', 'bottom');
                // tooltip
                anchor.tooltip({
                    title: $sanitize(scope.link.tooltip),
                    html: true,
                    container: 'body',
                });
            }
            function sanitizeAnchor() {
                var anchor = elem.find('a');
                var anchorSanitized = $sanitize(anchor.parent().html());
                anchor.parent().html(anchorSanitized);
            }
            elem.find('i').attr('class', 'fa fa-fw ' + scope.link.icon);
            elem.find('a').attr('target', scope.link.target);
            // fix for menus on the far right
            if (link.asDropdown && scope.$last) {
                elem.find('.dropdown-menu').addClass('pull-right');
            }
            update();
            scope.$on('refresh', update);
        },
    };
}
var DashLinksContainerCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashLinksContainerCtrl($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {
        var currentDashId = dashboardSrv.getCurrent().id;
        function buildLinks(linkDef) {
            if (linkDef.type === 'dashboards') {
                if (!linkDef.tags) {
                    console.log('Dashboard link missing tag');
                    return $q.when([]);
                }
                if (linkDef.asDropdown) {
                    return $q.when([
                        {
                            title: linkDef.title,
                            tags: linkDef.tags,
                            keepTime: linkDef.keepTime,
                            includeVars: linkDef.includeVars,
                            target: linkDef.targetBlank ? '_blank' : '_self',
                            icon: 'fa fa-bars',
                            asDropdown: true,
                        },
                    ]);
                }
                return $scope.searchDashboards(linkDef, 7);
            }
            if (linkDef.type === 'link') {
                return $q.when([
                    {
                        url: linkDef.url,
                        title: linkDef.title,
                        icon: _editor__WEBPACK_IMPORTED_MODULE_2__["iconMap"][linkDef.icon],
                        tooltip: linkDef.tooltip,
                        target: linkDef.targetBlank ? '_blank' : '_self',
                        keepTime: linkDef.keepTime,
                        includeVars: linkDef.includeVars,
                    },
                ]);
            }
            return $q.when([]);
        }
        function updateDashLinks() {
            var promises = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map($scope.links, buildLinks);
            $q.all(promises).then(function (results) {
                $scope.generatedLinks = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.flatten(results);
            });
        }
        $scope.searchDashboards = function (link, limit) {
            return backendSrv.search({ tag: link.tags, limit: limit }).then(function (results) {
                return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(results, function (memo, dash) {
                    // do not add current dashboard
                    if (dash.id !== currentDashId) {
                        memo.push({
                            title: dash.title,
                            url: dash.url,
                            target: link.target === '_self' ? '' : link.target,
                            icon: 'fa fa-th-large',
                            keepTime: link.keepTime,
                            includeVars: link.includeVars,
                        });
                    }
                    return memo;
                }, []);
            });
        };
        $scope.fillDropdown = function (link) {
            $scope.searchDashboards(link, 100).then(function (results) {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(results, function (hit) {
                    hit.url = linkSrv.getLinkUrl(hit);
                });
                link.searchHits = results;
            });
        };
        updateDashLinks();
        $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);
    }
    return DashLinksContainerCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('dashLinksContainer', dashLinksContainer);
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('dashLink', dashLink);
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').controller('DashLinksContainerCtrl', DashLinksContainerCtrl);


/***/ }),

/***/ "./public/app/features/dashboard/dashnav/dashnav.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/dashboard/dashnav/dashnav.ts ***!
  \**********************************************************/
/*! exports provided: DashNavCtrl, dashNavDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashNavCtrl", function() { return DashNavCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashNavDirective", function() { return dashNavDirective; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");



var DashNavCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashNavCtrl($scope, dashboardSrv, $location, playlistSrv) {
        this.$scope = $scope;
        this.dashboardSrv = dashboardSrv;
        this.$location = $location;
        this.playlistSrv = playlistSrv;
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].on('save-dashboard', this.saveDashboard.bind(this), $scope);
        if (this.dashboard.meta.isSnapshot) {
            var meta = this.dashboard.meta;
            this.titleTooltip = 'Created: &nbsp;' + moment__WEBPACK_IMPORTED_MODULE_0___default()(meta.created).calendar();
            if (meta.expires) {
                this.titleTooltip += '<br>Expires: &nbsp;' + moment__WEBPACK_IMPORTED_MODULE_0___default()(meta.expires).fromNow() + '<br>';
            }
        }
    }
    DashNavCtrl.prototype.toggleSettings = function () {
        var search = this.$location.search();
        if (search.editview) {
            delete search.editview;
        }
        else {
            search.editview = 'settings';
        }
        this.$location.search(search);
    };
    DashNavCtrl.prototype.toggleViewMode = function () {
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].emit('toggle-kiosk-mode');
    };
    DashNavCtrl.prototype.close = function () {
        var search = this.$location.search();
        if (search.editview) {
            delete search.editview;
        }
        else if (search.fullscreen) {
            delete search.fullscreen;
            delete search.edit;
        }
        this.$location.search(search);
    };
    DashNavCtrl.prototype.starDashboard = function () {
        var _this = this;
        this.dashboardSrv.starDashboard(this.dashboard.id, this.dashboard.meta.isStarred).then(function (newState) {
            _this.dashboard.meta.isStarred = newState;
        });
    };
    DashNavCtrl.prototype.shareDashboard = function (tabIndex) {
        var modalScope = this.$scope.$new();
        modalScope.tabIndex = tabIndex;
        modalScope.dashboard = this.dashboard;
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].emit('show-modal', {
            src: 'public/app/features/dashboard/partials/shareModal.html',
            scope: modalScope,
        });
    };
    DashNavCtrl.prototype.hideTooltip = function (evt) {
        angular__WEBPACK_IMPORTED_MODULE_1___default.a.element(evt.currentTarget).tooltip('hide');
    };
    DashNavCtrl.prototype.saveDashboard = function () {
        return this.dashboardSrv.saveDashboard();
    };
    DashNavCtrl.prototype.showSearch = function () {
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].emit('show-dash-search');
    };
    DashNavCtrl.prototype.addPanel = function () {
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].emit('dash-scroll', { animate: true, evt: 0 });
        if (this.dashboard.panels.length > 0 && this.dashboard.panels[0].type === 'add-panel') {
            return; // Return if the "Add panel" exists already
        }
        this.dashboard.addPanel({
            type: 'add-panel',
            gridPos: { x: 0, y: 0, w: 12, h: 9 },
            title: 'Panel Title',
        });
    };
    DashNavCtrl.prototype.navItemClicked = function (navItem, evt) {
        if (navItem.clickHandler) {
            navItem.clickHandler();
            evt.preventDefault();
        }
    };
    return DashNavCtrl;
}());

function dashNavDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',
        controller: DashNavCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        transclude: true,
        scope: { dashboard: '=' },
    };
}
angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.directives').directive('dashnav', dashNavDirective);


/***/ }),

/***/ "./public/app/features/dashboard/export/export_modal.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/export/export_modal.ts ***!
  \**************************************************************/
/*! exports provided: DashExportCtrl, dashExportDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashExportCtrl", function() { return DashExportCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashExportDirective", function() { return dashExportDirective; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/FileSaver.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _exporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./exporter */ "./public/app/features/dashboard/export/exporter.ts");




var DashExportCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashExportCtrl(dashboardSrv, datasourceSrv, $scope, $rootScope) {
        var _this = this;
        this.dashboardSrv = dashboardSrv;
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.exporter = new _exporter__WEBPACK_IMPORTED_MODULE_3__["DashboardExporter"](datasourceSrv);
        this.exporter.makeExportable(this.dashboardSrv.getCurrent()).then(function (dash) {
            _this.$scope.$apply(function () {
                _this.dash = dash;
            });
        });
    }
    DashExportCtrl.prototype.save = function () {
        var blob = new Blob([angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(this.dash, true)], {
            type: 'application/json;charset=utf-8',
        });
        Object(file_saver__WEBPACK_IMPORTED_MODULE_1__["saveAs"])(blob, this.dash.title + '-' + new Date().getTime() + '.json');
    };
    DashExportCtrl.prototype.saveJson = function () {
        var clone = this.dash;
        var editScope = this.$rootScope.$new();
        editScope.object = clone;
        editScope.enableCopy = true;
        this.$rootScope.appEvent('show-modal', {
            src: 'public/app/partials/edit_json.html',
            scope: editScope,
        });
        this.dismiss();
    };
    return DashExportCtrl;
}());

function dashExportDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/export/export_modal.html',
        controller: DashExportCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: { dismiss: '&' },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].directive('dashExportModal', dashExportDirective);


/***/ }),

/***/ "./public/app/features/dashboard/export/exporter.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/dashboard/export/exporter.ts ***!
  \**********************************************************/
/*! exports provided: DashboardExporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardExporter", function() { return DashboardExporter; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var DashboardExporter = /** @class */ (function () {
    function DashboardExporter(datasourceSrv) {
        this.datasourceSrv = datasourceSrv;
    }
    DashboardExporter.prototype.makeExportable = function (dashboard) {
        var _this = this;
        // clean up repeated rows and panels,
        // this is done on the live real dashboard instance, not on a clone
        // so we need to undo this
        // this is pretty hacky and needs to be changed
        dashboard.cleanUpRepeats();
        var saveModel = dashboard.getSaveModelClone();
        saveModel.id = null;
        // undo repeat cleanup
        dashboard.processRepeats();
        var inputs = [];
        var requires = {};
        var datasources = {};
        var promises = [];
        var variableLookup = {};
        for (var _i = 0, _a = saveModel.templating.list; _i < _a.length; _i++) {
            var variable = _a[_i];
            variableLookup[variable.name] = variable;
        }
        var templateizeDatasourceUsage = function (obj) {
            // ignore data source properties that contain a variable
            if (obj.datasource && obj.datasource.indexOf('$') === 0) {
                if (variableLookup[obj.datasource.substring(1)]) {
                    return;
                }
            }
            promises.push(_this.datasourceSrv.get(obj.datasource).then(function (ds) {
                if (ds.meta.builtIn) {
                    return;
                }
                var refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();
                datasources[refName] = {
                    name: refName,
                    label: ds.name,
                    description: '',
                    type: 'datasource',
                    pluginId: ds.meta.id,
                    pluginName: ds.meta.name,
                };
                obj.datasource = '${' + refName + '}';
                requires['datasource' + ds.meta.id] = {
                    type: 'datasource',
                    id: ds.meta.id,
                    name: ds.meta.name,
                    version: ds.meta.info.version || '1.0.0',
                };
            }));
        };
        var processPanel = function (panel) {
            if (panel.datasource !== undefined) {
                templateizeDatasourceUsage(panel);
            }
            if (panel.targets) {
                for (var _i = 0, _a = panel.targets; _i < _a.length; _i++) {
                    var target = _a[_i];
                    if (target.datasource !== undefined) {
                        templateizeDatasourceUsage(target);
                    }
                }
            }
            var panelDef = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].panels[panel.type];
            if (panelDef) {
                requires['panel' + panelDef.id] = {
                    type: 'panel',
                    id: panelDef.id,
                    name: panelDef.name,
                    version: panelDef.info.version,
                };
            }
        };
        // check up panel data sources
        for (var _b = 0, _c = saveModel.panels; _b < _c.length; _b++) {
            var panel = _c[_b];
            processPanel(panel);
            // handle collapsed rows
            if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {
                for (var _d = 0, _e = panel.panels; _d < _e.length; _d++) {
                    var rowPanel = _e[_d];
                    processPanel(rowPanel);
                }
            }
        }
        // templatize template vars
        for (var _f = 0, _g = saveModel.templating.list; _f < _g.length; _f++) {
            var variable = _g[_f];
            if (variable.type === 'query') {
                templateizeDatasourceUsage(variable);
                variable.options = [];
                variable.current = {};
                variable.refresh = variable.refresh > 0 ? variable.refresh : 1;
            }
        }
        // templatize annotations vars
        for (var _h = 0, _j = saveModel.annotations.list; _h < _j.length; _h++) {
            var annotationDef = _j[_h];
            templateizeDatasourceUsage(annotationDef);
        }
        // add grafana version
        requires['grafana'] = {
            type: 'grafana',
            id: 'grafana',
            name: 'Grafana',
            version: app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].buildInfo.version,
        };
        return Promise.all(promises)
            .then(function () {
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(datasources, function (value, key) {
                inputs.push(value);
            });
            // templatize constants
            for (var _i = 0, _a = saveModel.templating.list; _i < _a.length; _i++) {
                var variable = _a[_i];
                if (variable.type === 'constant') {
                    var refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();
                    inputs.push({
                        name: refName,
                        type: 'constant',
                        label: variable.label || variable.name,
                        value: variable.current.value,
                        description: '',
                    });
                    // update current and option
                    variable.query = '${' + refName + '}';
                    variable.options[0] = variable.current = {
                        value: variable.query,
                        text: variable.query,
                    };
                }
            }
            // make inputs and requires a top thing
            var newObj = {};
            newObj['__inputs'] = inputs;
            newObj['__requires'] = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(requires, ['id']);
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(newObj, saveModel);
            return newObj;
        })
            .catch(function (err) {
            console.log('Export failed:', err);
            return {
                error: err,
            };
        });
    };
    return DashboardExporter;
}());



/***/ }),

/***/ "./public/app/features/dashboard/export_data/export_data_modal.ts":
/*!************************************************************************!*\
  !*** ./public/app/features/dashboard/export_data/export_data_modal.ts ***!
  \************************************************************************/
/*! exports provided: ExportDataModalCtrl, exportDataModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExportDataModalCtrl", function() { return ExportDataModalCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exportDataModal", function() { return exportDataModal; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/file_export */ "./public/app/core/utils/file_export.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");



var ExportDataModalCtrl = /** @class */ (function () {
    function ExportDataModalCtrl() {
        this.asRows = true;
        this.dateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        this.excel = false;
    }
    ExportDataModalCtrl.prototype.export = function () {
        if (this.panel === 'table') {
            app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_1__["exportTableDataToCsv"](this.data, this.excel);
        }
        else {
            if (this.asRows) {
                app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_1__["exportSeriesListToCsv"](this.data, this.dateTimeFormat, this.excel);
            }
            else {
                app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_1__["exportSeriesListToCsvColumns"](this.data, this.dateTimeFormat, this.excel);
            }
        }
        this.dismiss();
    };
    ExportDataModalCtrl.prototype.dismiss = function () {
        app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('hide-modal');
    };
    return ExportDataModalCtrl;
}());

function exportDataModal() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/export_data/export_data_modal.html',
        controller: ExportDataModalCtrl,
        controllerAs: 'ctrl',
        scope: {
            panel: '<',
            data: '<',
        },
        bindToController: true,
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('exportDataModal', exportDataModal);


/***/ }),

/***/ "./public/app/features/dashboard/folder_dashboards_ctrl.ts":
/*!*****************************************************************!*\
  !*** ./public/app/features/dashboard/folder_dashboards_ctrl.ts ***!
  \*****************************************************************/
/*! exports provided: FolderDashboardsCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FolderDashboardsCtrl", function() { return FolderDashboardsCtrl; });
/* harmony import */ var _folder_page_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./folder_page_loader */ "./public/app/features/dashboard/folder_page_loader.ts");
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");


var FolderDashboardsCtrl = /** @class */ (function () {
    /** @ngInject */
    function FolderDashboardsCtrl(backendSrv, navModelSrv, $routeParams, $location) {
        this.backendSrv = backendSrv;
        this.$routeParams = $routeParams;
        if (this.$routeParams.uid) {
            this.uid = $routeParams.uid;
            var loader = new _folder_page_loader__WEBPACK_IMPORTED_MODULE_0__["FolderPageLoader"](this.backendSrv);
            loader.load(this, this.uid, 'manage-folder-dashboards').then(function (folder) {
                var url = app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__["default"].stripBaseFromUrl(folder.url);
                if (url !== $location.path()) {
                    $location.path(url).replace();
                }
            });
        }
    }
    return FolderDashboardsCtrl;
}());



/***/ }),

/***/ "./public/app/features/dashboard/folder_page_loader.ts":
/*!*************************************************************!*\
  !*** ./public/app/features/dashboard/folder_page_loader.ts ***!
  \*************************************************************/
/*! exports provided: FolderPageLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FolderPageLoader", function() { return FolderPageLoader; });
var FolderPageLoader = /** @class */ (function () {
    function FolderPageLoader(backendSrv) {
        this.backendSrv = backendSrv;
    }
    FolderPageLoader.prototype.load = function (ctrl, uid, activeChildId) {
        ctrl.navModel = {
            main: {
                icon: 'fa fa-folder-open',
                id: 'manage-folder',
                subTitle: 'Manage folder dashboards & permissions',
                url: '',
                text: '',
                breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],
                children: [
                    {
                        active: activeChildId === 'manage-folder-dashboards',
                        icon: 'fa fa-fw fa-th-large',
                        id: 'manage-folder-dashboards',
                        text: 'Dashboards',
                        url: 'dashboards',
                    },
                    {
                        active: activeChildId === 'manage-folder-permissions',
                        icon: 'fa fa-fw fa-lock',
                        id: 'manage-folder-permissions',
                        text: 'Permissions',
                        url: 'dashboards/permissions',
                    },
                    {
                        active: activeChildId === 'manage-folder-settings',
                        icon: 'fa fa-fw fa-cog',
                        id: 'manage-folder-settings',
                        text: 'Settings',
                        url: 'dashboards/settings',
                    },
                ],
            },
        };
        return this.backendSrv.getFolderByUid(uid).then(function (folder) {
            ctrl.folderId = folder.id;
            var folderTitle = folder.title;
            var folderUrl = folder.url;
            ctrl.navModel.main.text = folderTitle;
            var dashTab = ctrl.navModel.main.children.find(function (child) { return child.id === 'manage-folder-dashboards'; });
            dashTab.url = folderUrl;
            if (folder.canAdmin) {
                var permTab = ctrl.navModel.main.children.find(function (child) { return child.id === 'manage-folder-permissions'; });
                permTab.url = folderUrl + '/permissions';
                var settingsTab = ctrl.navModel.main.children.find(function (child) { return child.id === 'manage-folder-settings'; });
                settingsTab.url = folderUrl + '/settings';
            }
            else {
                ctrl.navModel.main.children = [dashTab];
            }
            return folder;
        });
    };
    return FolderPageLoader;
}());



/***/ }),

/***/ "./public/app/features/dashboard/folder_picker/folder_picker.ts":
/*!**********************************************************************!*\
  !*** ./public/app/features/dashboard/folder_picker/folder_picker.ts ***!
  \**********************************************************************/
/*! exports provided: FolderPickerCtrl, folderPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FolderPickerCtrl", function() { return FolderPickerCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "folderPicker", function() { return folderPicker; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");



var FolderPickerCtrl = /** @class */ (function () {
    /** @ngInject */
    function FolderPickerCtrl(backendSrv, validationSrv, contextSrv) {
        this.backendSrv = backendSrv;
        this.validationSrv = validationSrv;
        this.contextSrv = contextSrv;
        this.rootName = 'General';
        this.isEditor = this.contextSrv.isEditor;
        if (!this.labelClass) {
            this.labelClass = 'width-7';
        }
        this.loadInitialValue();
    }
    FolderPickerCtrl.prototype.getOptions = function (query) {
        var _this = this;
        var params = {
            query: query,
            type: 'dash-folder',
            permission: 'Edit',
        };
        return this.backendSrv.get('api/search', params).then(function (result) {
            if (_this.isEditor &&
                (query === '' ||
                    query.toLowerCase() === 'g' ||
                    query.toLowerCase() === 'ge' ||
                    query.toLowerCase() === 'gen' ||
                    query.toLowerCase() === 'gene' ||
                    query.toLowerCase() === 'gener' ||
                    query.toLowerCase() === 'genera' ||
                    query.toLowerCase() === 'general')) {
                result.unshift({ title: _this.rootName, id: 0 });
            }
            if (_this.isEditor && _this.enableCreateNew && query === '') {
                result.unshift({ title: '-- New Folder --', id: -1 });
            }
            if (_this.enableReset && query === '' && _this.initialTitle !== '') {
                result.unshift({ title: _this.initialTitle, id: null });
            }
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result, function (item) {
                return { text: item.title, value: item.id };
            });
        });
    };
    FolderPickerCtrl.prototype.onFolderChange = function (option) {
        if (!option) {
            option = { value: 0, text: this.rootName };
        }
        else if (option.value === -1) {
            this.createNewFolder = true;
            this.enterFolderCreation();
            return;
        }
        this.onChange({ $folder: { id: option.value, title: option.text } });
    };
    FolderPickerCtrl.prototype.newFolderNameChanged = function () {
        var _this = this;
        this.newFolderNameTouched = true;
        this.validationSrv
            .validateNewFolderName(this.newFolderName)
            .then(function () {
            _this.hasValidationError = false;
        })
            .catch(function (err) {
            _this.hasValidationError = true;
            _this.validationError = err.message;
        });
    };
    FolderPickerCtrl.prototype.createFolder = function (evt) {
        var _this = this;
        if (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        }
        return this.backendSrv.createFolder({ title: this.newFolderName }).then(function (result) {
            app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('alert-success', ['Folder Created', 'OK']);
            _this.closeCreateFolder();
            _this.folder = { text: result.title, value: result.id };
            _this.onFolderChange(_this.folder);
        });
    };
    FolderPickerCtrl.prototype.cancelCreateFolder = function (evt) {
        if (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        }
        this.closeCreateFolder();
        this.loadInitialValue();
    };
    FolderPickerCtrl.prototype.closeCreateFolder = function () {
        this.exitFolderCreation();
        this.createNewFolder = false;
        this.hasValidationError = false;
        this.validationError = null;
        this.newFolderName = '';
        this.newFolderNameTouched = false;
    };
    FolderPickerCtrl.prototype.loadInitialValue = function () {
        var _this = this;
        var resetFolder = { text: this.initialTitle, value: null };
        var rootFolder = { text: this.rootName, value: 0 };
        this.getOptions('').then(function (result) {
            var folder;
            if (_this.initialFolderId) {
                folder = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(result, { value: _this.initialFolderId });
            }
            else if (_this.enableReset && _this.initialTitle && _this.initialFolderId === null) {
                folder = resetFolder;
            }
            if (!folder) {
                if (_this.isEditor) {
                    folder = rootFolder;
                }
                else {
                    folder = result.length > 0 ? result[0] : resetFolder;
                }
            }
            _this.folder = folder;
            // if this is not the same as our initial value notify parent
            if (_this.folder.value !== _this.initialFolderId) {
                _this.onChange({ $folder: { id: _this.folder.value, title: _this.folder.text } });
            }
        });
    };
    return FolderPickerCtrl;
}());

function folderPicker() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/folder_picker/folder_picker.html',
        controller: FolderPickerCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            initialTitle: '<',
            initialFolderId: '<',
            labelClass: '@',
            rootName: '@',
            onChange: '&',
            onCreateFolder: '&',
            enterFolderCreation: '&',
            exitFolderCreation: '&',
            enableCreateNew: '@',
            enableReset: '@',
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].directive('folderPicker', folderPicker);


/***/ }),

/***/ "./public/app/features/dashboard/history/history.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/dashboard/history/history.ts ***!
  \**********************************************************/
/*! exports provided: HistoryListCtrl, dashboardHistoryDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HistoryListCtrl", function() { return HistoryListCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashboardHistoryDirective", function() { return dashboardHistoryDirective; });
/* harmony import */ var _history_srv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./history_srv */ "./public/app/features/dashboard/history/history_srv.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");





var HistoryListCtrl = /** @class */ (function () {
    /** @ngInject */
    function HistoryListCtrl($route, $rootScope, $location, $q, historySrv, $scope) {
        this.$route = $route;
        this.$rootScope = $rootScope;
        this.$location = $location;
        this.$q = $q;
        this.historySrv = historySrv;
        this.$scope = $scope;
        this.appending = false;
        this.diff = 'basic';
        this.limit = 10;
        this.loading = false;
        this.max = 2;
        this.mode = 'list';
        this.start = 0;
        this.canCompare = false;
        this.$rootScope.onAppEvent('dashboard-saved', this.onDashboardSaved.bind(this), $scope);
        this.resetFromSource();
    }
    HistoryListCtrl.prototype.onDashboardSaved = function () {
        this.resetFromSource();
    };
    HistoryListCtrl.prototype.switchMode = function (mode) {
        this.mode = mode;
        if (this.mode === 'list') {
            this.reset();
        }
    };
    HistoryListCtrl.prototype.dismiss = function () {
        this.$rootScope.appEvent('hide-dash-editor');
    };
    HistoryListCtrl.prototype.addToLog = function () {
        this.start = this.start + this.limit;
        this.getLog(true);
    };
    HistoryListCtrl.prototype.revisionSelectionChanged = function () {
        var selected = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(this.revisions, { checked: true }).length;
        this.canCompare = selected === 2;
    };
    HistoryListCtrl.prototype.formatDate = function (date) {
        return this.dashboard.formatDate(date);
    };
    HistoryListCtrl.prototype.formatBasicDate = function (date) {
        var now = this.dashboard.timezone === 'browser' ? moment__WEBPACK_IMPORTED_MODULE_3___default()() : moment__WEBPACK_IMPORTED_MODULE_3___default.a.utc();
        var then = this.dashboard.timezone === 'browser' ? moment__WEBPACK_IMPORTED_MODULE_3___default()(date) : moment__WEBPACK_IMPORTED_MODULE_3___default.a.utc(date);
        return then.from(now);
    };
    HistoryListCtrl.prototype.getDiff = function (diff) {
        var _this = this;
        this.diff = diff;
        this.mode = 'compare';
        // have it already been fetched?
        if (this.delta[this.diff]) {
            return this.$q.when(this.delta[this.diff]);
        }
        var selected = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(this.revisions, { checked: true });
        this.newInfo = selected[0];
        this.baseInfo = selected[1];
        this.isNewLatest = this.newInfo.version === this.dashboard.version;
        this.loading = true;
        var options = {
            new: {
                dashboardId: this.dashboard.id,
                version: this.newInfo.version,
            },
            base: {
                dashboardId: this.dashboard.id,
                version: this.baseInfo.version,
            },
            diffType: diff,
        };
        return this.historySrv
            .calculateDiff(options)
            .then(function (response) {
            _this.delta[_this.diff] = response;
        })
            .catch(function () {
            _this.mode = 'list';
        })
            .finally(function () {
            _this.loading = false;
        });
    };
    HistoryListCtrl.prototype.getLog = function (append) {
        var _this = this;
        if (append === void 0) { append = false; }
        this.loading = !append;
        this.appending = append;
        var options = {
            limit: this.limit,
            start: this.start,
        };
        return this.historySrv
            .getHistoryList(this.dashboard, options)
            .then(function (revisions) {
            // set formatted dates & default values
            for (var _i = 0, revisions_1 = revisions; _i < revisions_1.length; _i++) {
                var rev = revisions_1[_i];
                rev.createdDateString = _this.formatDate(rev.created);
                rev.ageString = _this.formatBasicDate(rev.created);
                rev.checked = false;
            }
            _this.revisions = append ? _this.revisions.concat(revisions) : revisions;
        })
            .catch(function (err) {
            _this.loading = false;
        })
            .finally(function () {
            _this.loading = false;
            _this.appending = false;
        });
    };
    HistoryListCtrl.prototype.isLastPage = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(this.revisions, function (rev) { return rev.version === 1; });
    };
    HistoryListCtrl.prototype.reset = function () {
        this.delta = { basic: '', json: '' };
        this.diff = 'basic';
        this.mode = 'list';
        this.revisions = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.revisions, function (rev) { return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, rev, { checked: false }); });
        this.canCompare = false;
        this.start = 0;
        this.isNewLatest = false;
    };
    HistoryListCtrl.prototype.resetFromSource = function () {
        this.revisions = [];
        return this.getLog().then(this.reset.bind(this));
    };
    HistoryListCtrl.prototype.restore = function (version) {
        this.$rootScope.appEvent('confirm-modal', {
            title: 'Restore version',
            text: '',
            text2: "Are you sure you want to restore the dashboard to version " + version + "? All unsaved changes will be lost.",
            icon: 'fa-history',
            yesText: "Yes, restore to version " + version,
            onConfirm: this.restoreConfirm.bind(this, version),
        });
    };
    HistoryListCtrl.prototype.restoreConfirm = function (version) {
        var _this = this;
        this.loading = true;
        return this.historySrv
            .restoreDashboard(this.dashboard, version)
            .then(function (response) {
            _this.$location.url(app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_4__["default"].stripBaseFromUrl(response.url)).replace();
            _this.$route.reload();
            _this.$rootScope.appEvent('alert-success', ['Dashboard restored', 'Restored from version ' + version]);
        })
            .catch(function () {
            _this.mode = 'list';
            _this.loading = false;
        });
    };
    return HistoryListCtrl;
}());

function dashboardHistoryDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/history/history.html',
        controller: HistoryListCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dashboard: '=',
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_2___default.a.module('grafana.directives').directive('gfDashboardHistory', dashboardHistoryDirective);


/***/ }),

/***/ "./public/app/features/dashboard/history/history_srv.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/history/history_srv.ts ***!
  \**************************************************************/
/*! exports provided: HistorySrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HistorySrv", function() { return HistorySrv; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");


var HistorySrv = /** @class */ (function () {
    /** @ngInject */
    function HistorySrv(backendSrv) {
        this.backendSrv = backendSrv;
    }
    HistorySrv.prototype.getHistoryList = function (dashboard, options) {
        var id = dashboard && dashboard.id ? dashboard.id : void 0;
        return id ? this.backendSrv.get("api/dashboards/id/" + id + "/versions", options) : Promise.resolve([]);
    };
    HistorySrv.prototype.calculateDiff = function (options) {
        return this.backendSrv.post('api/dashboards/calculate-diff', options);
    };
    HistorySrv.prototype.restoreDashboard = function (dashboard, version) {
        var id = dashboard && dashboard.id ? dashboard.id : void 0;
        var url = "api/dashboards/id/" + id + "/restore";
        return id && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(version) ? this.backendSrv.post(url, { version: version }) : Promise.resolve({});
    };
    return HistorySrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].service('historySrv', HistorySrv);


/***/ }),

/***/ "./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts":
/*!******************************************************************************!*\
  !*** ./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts ***!
  \******************************************************************************/
/*! exports provided: MoveToFolderCtrl, moveToFolderModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveToFolderCtrl", function() { return MoveToFolderCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moveToFolderModal", function() { return moveToFolderModal; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");


var MoveToFolderCtrl = /** @class */ (function () {
    /** @ngInject */
    function MoveToFolderCtrl(backendSrv) {
        this.backendSrv = backendSrv;
        this.isValidFolderSelection = true;
    }
    MoveToFolderCtrl.prototype.onFolderChange = function (folder) {
        this.folder = folder;
    };
    MoveToFolderCtrl.prototype.save = function () {
        var _this = this;
        return this.backendSrv.moveDashboards(this.dashboards, this.folder).then(function (result) {
            if (result.successCount > 0) {
                var header = "Dashboard" + (result.successCount === 1 ? '' : 's') + " Moved";
                var msg = result.successCount + " dashboard" + (result.successCount === 1 ? '' : 's') + " moved to " + _this.folder.title;
                app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].emit('alert-success', [header, msg]);
            }
            if (result.totalCount === result.alreadyInFolderCount) {
                app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].emit('alert-error', ['Error', "Dashboards already belongs to folder " + _this.folder.title]);
            }
            _this.dismiss();
            return _this.afterSave();
        });
    };
    MoveToFolderCtrl.prototype.onEnterFolderCreation = function () {
        this.isValidFolderSelection = false;
    };
    MoveToFolderCtrl.prototype.onExitFolderCreation = function () {
        this.isValidFolderSelection = true;
    };
    return MoveToFolderCtrl;
}());

function moveToFolderModal() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/move_to_folder_modal/move_to_folder.html',
        controller: MoveToFolderCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dismiss: '&',
            dashboards: '=',
            afterSave: '&',
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('moveToFolderModal', moveToFolderModal);


/***/ }),

/***/ "./public/app/features/dashboard/panellinks/link_srv.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/panellinks/link_srv.ts ***!
  \**************************************************************/
/*! exports provided: LinkSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkSrv", function() { return LinkSrv; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");



var LinkSrv = /** @class */ (function () {
    /** @ngInject */
    function LinkSrv(templateSrv, timeSrv) {
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
    }
    LinkSrv.prototype.getLinkUrl = function (link) {
        var url = this.templateSrv.replace(link.url || '');
        var params = {};
        if (link.keepTime) {
            var range = this.timeSrv.timeRangeForUrl();
            params['from'] = range.from;
            params['to'] = range.to;
        }
        if (link.includeVars) {
            this.templateSrv.fillVariableValuesForUrl(params);
        }
        return this.addParamsToUrl(url, params);
    };
    LinkSrv.prototype.addParamsToUrl = function (url, params) {
        var paramsArray = [];
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(params, function (value, key) {
            if (value === null) {
                return;
            }
            if (value === true) {
                paramsArray.push(key);
            }
            else if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(value)) {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(value, function (instance) {
                    paramsArray.push(key + '=' + encodeURIComponent(instance));
                });
            }
            else {
                paramsArray.push(key + '=' + encodeURIComponent(value));
            }
        });
        if (paramsArray.length === 0) {
            return url;
        }
        return this.appendToQueryString(url, paramsArray.join('&'));
    };
    LinkSrv.prototype.appendToQueryString = function (url, stringToAppend) {
        if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {
            var pos = url.indexOf('?');
            if (pos !== -1) {
                if (url.length - pos > 1) {
                    url += '&';
                }
            }
            else {
                url += '?';
            }
            url += stringToAppend;
        }
        return url;
    };
    LinkSrv.prototype.getAnchorInfo = function (link) {
        var info = {};
        info.href = this.getLinkUrl(link);
        info.title = this.templateSrv.replace(link.title || '');
        return info;
    };
    LinkSrv.prototype.getPanelLinkAnchorInfo = function (link, scopedVars) {
        var info = {};
        if (link.type === 'absolute') {
            info.target = link.targetBlank ? '_blank' : '_self';
            info.href = this.templateSrv.replace(link.url || '', scopedVars);
            info.title = this.templateSrv.replace(link.title || '', scopedVars);
        }
        else if (link.url) {
            info.href = link.url;
            info.title = this.templateSrv.replace(link.title || '', scopedVars);
            info.target = link.targetBlank ? '_blank' : '';
        }
        else if (link.dashUri) {
            info.href = 'dashboard/' + link.dashUri + '?';
            info.title = this.templateSrv.replace(link.title || '', scopedVars);
            info.target = link.targetBlank ? '_blank' : '';
        }
        else {
            info.title = this.templateSrv.replace(link.title || '', scopedVars);
            var slug = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].slugifyForUrl(link.dashboard || '');
            info.href = 'dashboard/db/' + slug + '?';
        }
        var params = {};
        if (link.keepTime) {
            var range = this.timeSrv.timeRangeForUrl();
            params['from'] = range.from;
            params['to'] = range.to;
        }
        if (link.includeVars) {
            this.templateSrv.fillVariableValuesForUrl(params, scopedVars);
        }
        info.href = this.addParamsToUrl(info.href, params);
        if (link.params) {
            info.href = this.appendToQueryString(info.href, this.templateSrv.replace(link.params, scopedVars));
        }
        return info;
    };
    return LinkSrv;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.services').service('linkSrv', LinkSrv);


/***/ }),

/***/ "./public/app/features/dashboard/panellinks/module.ts":
/*!************************************************************!*\
  !*** ./public/app/features/dashboard/panellinks/module.ts ***!
  \************************************************************/
/*! exports provided: PanelLinksEditorCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelLinksEditorCtrl", function() { return PanelLinksEditorCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _link_srv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./link_srv */ "./public/app/features/dashboard/panellinks/link_srv.ts");



function panelLinksEditor() {
    return {
        scope: {
            panel: '=',
        },
        restrict: 'E',
        controller: 'PanelLinksEditorCtrl',
        templateUrl: 'public/app/features/dashboard/panellinks/module.html',
        link: function () { },
    };
}
var PanelLinksEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function PanelLinksEditorCtrl($scope, backendSrv) {
        $scope.panel.links = $scope.panel.links || [];
        $scope.addLink = function () {
            $scope.panel.links.push({
                type: 'dashboard',
            });
        };
        $scope.searchDashboards = function (queryStr, callback) {
            backendSrv.search({ query: queryStr }).then(function (hits) {
                var dashboards = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(hits, function (dash) {
                    return dash.title;
                });
                callback(dashboards);
            });
        };
        $scope.dashboardChanged = function (link) {
            backendSrv.search({ query: link.dashboard }).then(function (hits) {
                var dashboard = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(hits, { title: link.dashboard });
                if (dashboard) {
                    if (dashboard.url) {
                        link.url = dashboard.url;
                    }
                    else {
                        // To support legacy url's
                        link.dashUri = dashboard.uri;
                    }
                    link.title = dashboard.title;
                }
            });
        };
        $scope.deleteLink = function (link) {
            $scope.panel.links = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.without($scope.panel.links, link);
        };
    }
    return PanelLinksEditorCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a
    .module('grafana.directives')
    .directive('panelLinksEditor', panelLinksEditor)
    .controller('PanelLinksEditorCtrl', PanelLinksEditorCtrl);


/***/ }),

/***/ "./public/app/features/dashboard/permissions/DashboardPermissions.tsx":
/*!****************************************************************************!*\
  !*** ./public/app/features/dashboard/permissions/DashboardPermissions.tsx ***!
  \****************************************************************************/
/*! exports provided: DashboardPermissions, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardPermissions", function() { return DashboardPermissions; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var app_core_components_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/components/Tooltip/Tooltip */ "./public/app/core/components/Tooltip/Tooltip.tsx");
/* harmony import */ var app_core_components_Animations_SlideDown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/components/Animations/SlideDown */ "./public/app/core/components/Animations/SlideDown.tsx");
/* harmony import */ var _state_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../state/actions */ "./public/app/features/dashboard/state/actions.ts");
/* harmony import */ var app_core_components_PermissionList_PermissionList__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/components/PermissionList/PermissionList */ "./public/app/core/components/PermissionList/PermissionList.tsx");
/* harmony import */ var app_core_components_PermissionList_AddPermission__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/components/PermissionList/AddPermission */ "./public/app/core/components/PermissionList/AddPermission.tsx");
/* harmony import */ var app_core_components_PermissionList_PermissionsInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/core/components/PermissionList/PermissionsInfo */ "./public/app/core/components/PermissionList/PermissionsInfo.tsx");
/* harmony import */ var app_store_configureStore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! app/store/configureStore */ "./public/app/store/configureStore.ts");










var DashboardPermissions = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DashboardPermissions, _super);
    function DashboardPermissions(props) {
        var _this = _super.call(this, props) || this;
        _this.onOpenAddPermissions = function () {
            _this.setState({ isAdding: true });
        };
        _this.onRemoveItem = function (item) {
            _this.props.removeDashboardPermission(_this.props.dashboardId, item);
        };
        _this.onPermissionChanged = function (item, level) {
            _this.props.updateDashboardPermission(_this.props.dashboardId, item, level);
        };
        _this.onAddPermission = function (newItem) {
            return _this.props.addDashboardPermission(_this.props.dashboardId, newItem);
        };
        _this.onCancelAddPermission = function () {
            _this.setState({ isAdding: false });
        };
        _this.state = {
            isAdding: false,
        };
        return _this;
    }
    DashboardPermissions.prototype.componentDidMount = function () {
        this.props.getDashboardPermissions(this.props.dashboardId);
    };
    DashboardPermissions.prototype.render = function () {
        var _a = this.props, permissions = _a.permissions, folder = _a.folder;
        var isAdding = this.state.isAdding;
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null,
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "dashboard-settings__header" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "page-action-bar" },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h3", { className: "d-inline-block" }, "Permissions"),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(app_core_components_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_3__["default"], { className: "page-sub-heading-icon", placement: "auto", content: app_core_components_PermissionList_PermissionsInfo__WEBPACK_IMPORTED_MODULE_8__["default"] },
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "gicon gicon-question gicon--has-hover" })),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "page-action-bar__spacer" }),
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", { className: "btn btn-success pull-right", onClick: this.onOpenAddPermissions, disabled: isAdding },
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", { className: "fa fa-plus" }),
                        " Add Permission"))),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(app_core_components_Animations_SlideDown__WEBPACK_IMPORTED_MODULE_4__["default"], { in: isAdding },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(app_core_components_PermissionList_AddPermission__WEBPACK_IMPORTED_MODULE_7__["default"], { onAddPermission: this.onAddPermission, onCancel: this.onCancelAddPermission })),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(app_core_components_PermissionList_PermissionList__WEBPACK_IMPORTED_MODULE_6__["default"], { items: permissions, onRemoveItem: this.onRemoveItem, onPermissionChanged: this.onPermissionChanged, isFetching: false, folderInfo: folder })));
    };
    return DashboardPermissions;
}(react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"]));

function connectWithStore(WrappedComponent) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var ConnectedWrappedComponent = react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"].apply(void 0, args)(WrappedComponent);
    return function (props) {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ConnectedWrappedComponent, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, props, { store: app_store_configureStore__WEBPACK_IMPORTED_MODULE_9__["store"] }));
    };
}
var mapStateToProps = function (state) { return ({
    permissions: state.dashboard.permissions,
}); };
var mapDispatchToProps = {
    getDashboardPermissions: _state_actions__WEBPACK_IMPORTED_MODULE_5__["getDashboardPermissions"],
    addDashboardPermission: _state_actions__WEBPACK_IMPORTED_MODULE_5__["addDashboardPermission"],
    removeDashboardPermission: _state_actions__WEBPACK_IMPORTED_MODULE_5__["removeDashboardPermission"],
    updateDashboardPermission: _state_actions__WEBPACK_IMPORTED_MODULE_5__["updateDashboardPermission"],
};
/* harmony default export */ __webpack_exports__["default"] = (connectWithStore(DashboardPermissions, mapStateToProps, mapDispatchToProps));


/***/ }),

/***/ "./public/app/features/dashboard/repeat_option/repeat_option.ts":
/*!**********************************************************************!*\
  !*** ./public/app/features/dashboard/repeat_option/repeat_option.ts ***!
  \**********************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");

var template = "\n<div class=\"gf-form-select-wrapper max-width-18\">\n  <select class=\"gf-form-input\" ng-model=\"panel.repeat\" ng-options=\"f.value as f.text for f in variables\" ng-change=\"optionChanged()\">\n  <option value=\"\"></option>\n</div>\n";
/** @ngInject */
function dashRepeatOptionDirective(variableSrv) {
    return {
        restrict: 'E',
        template: template,
        scope: {
            panel: '=',
        },
        link: function (scope, element) {
            element.css({ display: 'block', width: '100%' });
            scope.variables = variableSrv.variables.map(function (item) {
                return { text: item.name, value: item.name };
            });
            if (scope.variables.length === 0) {
                scope.variables.unshift({
                    text: 'No template variables found',
                    value: null,
                });
            }
            scope.variables.unshift({ text: 'Disabled', value: null });
            // if repeat is set and no direction set to horizontal
            if (scope.panel.repeat && !scope.panel.repeatDirection) {
                scope.panel.repeatDirection = 'h';
            }
            scope.optionChanged = function () {
                if (scope.panel.repeat) {
                    scope.panel.repeatDirection = 'h';
                }
            };
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_0__["coreModule"].directive('dashRepeatOption', dashRepeatOptionDirective);


/***/ }),

/***/ "./public/app/features/dashboard/save_as_modal.ts":
/*!********************************************************!*\
  !*** ./public/app/features/dashboard/save_as_modal.ts ***!
  \********************************************************/
/*! exports provided: SaveDashboardAsModalCtrl, saveDashboardAsDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveDashboardAsModalCtrl", function() { return SaveDashboardAsModalCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveDashboardAsDirective", function() { return saveDashboardAsDirective; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var template = "\n<div class=\"modal-body\">\n\t<div class=\"modal-header\">\n\t\t<h2 class=\"modal-header-title\">\n\t\t\t<i class=\"fa fa-copy\"></i>\n\t\t\t<span class=\"p-l-1\">Save As...</span>\n\t\t</h2>\n\n\t\t<a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t</a>\n\t</div>\n\n\t<form name=\"ctrl.saveForm\" class=\"modal-content\" novalidate>\n\t\t<div class=\"p-t-2\">\n\t\t\t<div class=\"gf-form\">\n\t\t\t\t<label class=\"gf-form-label width-7\">New name</label>\n\t\t\t\t<input type=\"text\" class=\"gf-form-input\" ng-model=\"ctrl.clone.title\" give-focus=\"true\" required>\n\t\t\t</div>\n      <div class=\"gf-form\">\n        <folder-picker initial-folder-id=\"ctrl.folderId\"\n                       on-change=\"ctrl.onFolderChange($folder)\"\n                       enter-folder-creation=\"ctrl.onEnterFolderCreation()\"\n                       exit-folder-creation=\"ctrl.onExitFolderCreation()\"\n                       enable-create-new=\"true\"\n                       label-class=\"width-7\">\n        </folder-picker>\n      </div>\n\t\t</div>\n\n\t\t<div class=\"gf-form-button-row text-center\">\n\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.save()\" ng-disabled=\"!ctrl.isValidFolderSelection\">Save</button>\n\t\t\t<a class=\"btn-text\" ng-click=\"ctrl.dismiss();\">Cancel</a>\n\t\t</div>\n\t</form>\n</div>\n";
var SaveDashboardAsModalCtrl = /** @class */ (function () {
    /** @ngInject */
    function SaveDashboardAsModalCtrl(dashboardSrv) {
        this.dashboardSrv = dashboardSrv;
        this.isValidFolderSelection = true;
        var dashboard = this.dashboardSrv.getCurrent();
        this.clone = dashboard.getSaveModelClone();
        this.clone.id = null;
        this.clone.uid = '';
        this.clone.title += ' Copy';
        this.clone.editable = true;
        this.clone.hideControls = false;
        this.folderId = dashboard.meta.folderId;
        // remove alerts if source dashboard is already persisted
        // do not want to create alert dupes
        if (dashboard.id > 0) {
            this.clone.panels.forEach(function (panel) {
                if (panel.type === 'graph' && panel.alert) {
                    delete panel.thresholds;
                }
                delete panel.alert;
            });
        }
        delete this.clone.autoUpdate;
    }
    SaveDashboardAsModalCtrl.prototype.save = function () {
        return this.dashboardSrv.save(this.clone, { folderId: this.folderId }).then(this.dismiss);
    };
    SaveDashboardAsModalCtrl.prototype.keyDown = function (evt) {
        if (evt.keyCode === 13) {
            this.save();
        }
    };
    SaveDashboardAsModalCtrl.prototype.onFolderChange = function (folder) {
        this.folderId = folder.id;
    };
    SaveDashboardAsModalCtrl.prototype.onEnterFolderCreation = function () {
        this.isValidFolderSelection = false;
    };
    SaveDashboardAsModalCtrl.prototype.onExitFolderCreation = function () {
        this.isValidFolderSelection = true;
    };
    return SaveDashboardAsModalCtrl;
}());

function saveDashboardAsDirective() {
    return {
        restrict: 'E',
        template: template,
        controller: SaveDashboardAsModalCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: { dismiss: '&' },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('saveDashboardAsModal', saveDashboardAsDirective);


/***/ }),

/***/ "./public/app/features/dashboard/save_modal.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/dashboard/save_modal.ts ***!
  \*****************************************************/
/*! exports provided: SaveDashboardModalCtrl, saveDashboardModalDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveDashboardModalCtrl", function() { return SaveDashboardModalCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveDashboardModalDirective", function() { return saveDashboardModalDirective; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var template = "\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i>\n      <span class=\"p-l-1\">Save changes</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <form name=\"ctrl.saveForm\" ng-submit=\"ctrl.save()\" class=\"modal-content\" novalidate>\n    <div class=\"p-t-1\">\n      <div class=\"gf-form-group\" ng-if=\"ctrl.timeChange || ctrl.variableValueChange\">\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"Save current time range\" ng-if=\"ctrl.timeChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveTimerange\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"Save current variables\" ng-if=\"ctrl.variableValueChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveVariables\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t    </div>\n      <div class=\"gf-form\">\n        <label class=\"gf-form-hint\">\n          <input\n            type=\"text\"\n            name=\"message\"\n            class=\"gf-form-input\"\n            placeholder=\"Add a note to describe your changes &hellip;\"\n            give-focus=\"true\"\n            ng-model=\"ctrl.message\"\n            ng-model-options=\"{allowInvalid: true}\"\n            ng-maxlength=\"this.max\"\n            maxlength=\"64\"\n            autocomplete=\"off\" />\n          <small class=\"gf-form-hint-text muted\" ng-cloak>\n            <span ng-class=\"{'text-error': ctrl.saveForm.message.$invalid && ctrl.saveForm.message.$dirty }\">\n              {{ctrl.message.length || 0}}\n            </span>\n            / {{ctrl.max}} characters\n          </small>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row text-center\">\n      <button\n        id=\"saveBtn\"\n        type=\"submit\"\n        class=\"btn btn-success\"\n        ng-class=\"{'btn-success--processing': ctrl.isSaving}\"\n        ng-disabled=\"ctrl.saveForm.$invalid || ctrl.isSaving\"\n      >\n        <span ng-if=\"!ctrl.isSaving\">Save</span>\n        <span ng-if=\"ctrl.isSaving === true\">Saving...</span>\n      </button>\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss();\">Cancel</button>\n    </div>\n  </form>\n</div>\n";
var SaveDashboardModalCtrl = /** @class */ (function () {
    /** @ngInject */
    function SaveDashboardModalCtrl(dashboardSrv) {
        this.dashboardSrv = dashboardSrv;
        this.saveVariables = false;
        this.saveTimerange = false;
        this.current = [];
        this.originalCurrent = [];
        this.timeChange = false;
        this.variableValueChange = false;
        this.message = '';
        this.max = 64;
        this.isSaving = false;
        this.timeChange = this.dashboardSrv.getCurrent().hasTimeChanged();
        this.variableValueChange = this.dashboardSrv.getCurrent().hasVariableValuesChanged();
    }
    SaveDashboardModalCtrl.prototype.save = function () {
        if (!this.saveForm.$valid) {
            return;
        }
        var options = {
            saveVariables: this.saveVariables,
            saveTimerange: this.saveTimerange,
            message: this.message,
        };
        var dashboard = this.dashboardSrv.getCurrent();
        var saveModel = dashboard.getSaveModelClone(options);
        this.isSaving = true;
        return this.dashboardSrv.save(saveModel, options).then(this.postSave.bind(this, options));
    };
    SaveDashboardModalCtrl.prototype.postSave = function (options) {
        if (options.saveVariables) {
            this.dashboardSrv.getCurrent().resetOriginalVariables();
        }
        if (options.saveTimerange) {
            this.dashboardSrv.getCurrent().resetOriginalTime();
        }
        this.dismiss();
    };
    return SaveDashboardModalCtrl;
}());

function saveDashboardModalDirective() {
    return {
        restrict: 'E',
        template: template,
        controller: SaveDashboardModalCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: { dismiss: '&' },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('saveDashboardModal', saveDashboardModalDirective);


/***/ }),

/***/ "./public/app/features/dashboard/save_provisioned_modal.ts":
/*!*****************************************************************!*\
  !*** ./public/app/features/dashboard/save_provisioned_modal.ts ***!
  \*****************************************************************/
/*! exports provided: SaveProvisionedDashboardModalCtrl, saveProvisionedDashboardModalDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveProvisionedDashboardModalCtrl", function() { return SaveProvisionedDashboardModalCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveProvisionedDashboardModalDirective", function() { return saveProvisionedDashboardModalDirective; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/FileSaver.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");



var template = "\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i><span class=\"p-l-1\">Cannot save provisioned dashboard</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content\">\n    <small>\n      This dashboard cannot be saved from Grafana's UI since it has been provisioned from another source.\n      Copy the JSON or save it to a file below. Then you can update your dashboard in corresponding provisioning source.<br/>\n      <i>See <a class=\"external-link\" href=\"http://docs.grafana.org/administration/provisioning/#dashboards\" target=\"_blank\">\n      documentation</a> for more information about provisioning.</i>\n    </small>\n    <div class=\"p-t-2\">\n      <div class=\"gf-form\">\n        <code-editor content=\"ctrl.dashboardJson\" data-mode=\"json\" data-max-lines=15></code-editor>\n      </div>\n      <div class=\"gf-form-button-row\">\n        <button class=\"btn btn-success\" clipboard-button=\"ctrl.getJsonForClipboard()\">\n          <i class=\"fa fa-clipboard\"></i>&nbsp;Copy JSON to Clipboard\n        </button>\n        <button class=\"btn btn-secondary\" clipboard-button=\"ctrl.save()\">\n          <i class=\"fa fa-save\"></i>&nbsp;Save JSON to file\n        </button>\n        <a class=\"btn btn-link\" ng-click=\"ctrl.dismiss();\">Cancel</a>\n      </div>\n    </div>\n  </div>\n</div>\n";
var SaveProvisionedDashboardModalCtrl = /** @class */ (function () {
    /** @ngInject */
    function SaveProvisionedDashboardModalCtrl(dashboardSrv) {
        this.dash = dashboardSrv.getCurrent().getSaveModelClone();
        delete this.dash.id;
        this.dashboardJson = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(this.dash, true);
    }
    SaveProvisionedDashboardModalCtrl.prototype.save = function () {
        var blob = new Blob([angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(this.dash, true)], {
            type: 'application/json;charset=utf-8',
        });
        Object(file_saver__WEBPACK_IMPORTED_MODULE_1__["saveAs"])(blob, this.dash.title + '-' + new Date().getTime() + '.json');
    };
    SaveProvisionedDashboardModalCtrl.prototype.getJsonForClipboard = function () {
        return this.dashboardJson;
    };
    return SaveProvisionedDashboardModalCtrl;
}());

function saveProvisionedDashboardModalDirective() {
    return {
        restrict: 'E',
        template: template,
        controller: SaveProvisionedDashboardModalCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: { dismiss: '&' },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].directive('saveProvisionedDashboardModal', saveProvisionedDashboardModalDirective);


/***/ }),

/***/ "./public/app/features/dashboard/settings/settings.ts":
/*!************************************************************!*\
  !*** ./public/app/features/dashboard/settings/settings.ts ***!
  \************************************************************/
/*! exports provided: SettingsCtrl, dashboardSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingsCtrl", function() { return SettingsCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashboardSettings", function() { return dashboardSettings; });
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");





var SettingsCtrl = /** @class */ (function () {
    /** @ngInject */
    function SettingsCtrl($scope, $route, $location, $rootScope, backendSrv, dashboardSrv) {
        var _this = this;
        this.$scope = $scope;
        this.$route = $route;
        this.$location = $location;
        this.$rootScope = $rootScope;
        this.backendSrv = backendSrv;
        this.dashboardSrv = dashboardSrv;
        // temp hack for annotations and variables editors
        // that rely on inherited scope
        $scope.dashboard = this.dashboard;
        this.$scope.$on('$destroy', function () {
            _this.dashboard.updateSubmenuVisibility();
            _this.$rootScope.$broadcast('refresh');
            setTimeout(function () {
                _this.$rootScope.appEvent('dash-scroll', { restore: true });
            });
        });
        this.canSaveAs = this.dashboard.meta.canEdit && app_core_core__WEBPACK_IMPORTED_MODULE_0__["contextSrv"].hasEditPermissionInFolders;
        this.canSave = this.dashboard.meta.canSave;
        this.canDelete = this.dashboard.meta.canSave;
        this.buildSectionList();
        this.onRouteUpdated();
        this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);
        this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });
        this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);
    }
    SettingsCtrl.prototype.buildSectionList = function () {
        this.sections = [];
        if (this.dashboard.meta.canEdit) {
            this.sections.push({
                title: 'General',
                id: 'settings',
                icon: 'gicon gicon-preferences',
            });
            this.sections.push({
                title: 'Annotations',
                id: 'annotations',
                icon: 'gicon gicon-annotation',
            });
            this.sections.push({
                title: 'Variables',
                id: 'templating',
                icon: 'gicon gicon-variable',
            });
            this.sections.push({
                title: 'Links',
                id: 'links',
                icon: 'gicon gicon-link',
            });
        }
        if (this.dashboard.id && this.dashboard.meta.canSave) {
            this.sections.push({
                title: 'Versions',
                id: 'versions',
                icon: 'fa fa-fw fa-history',
            });
        }
        if (this.dashboard.id && this.dashboard.meta.canAdmin) {
            this.sections.push({
                title: 'Permissions',
                id: 'permissions',
                icon: 'fa fa-fw fa-lock',
            });
        }
        if (this.dashboard.meta.canMakeEditable) {
            this.sections.push({
                title: 'General',
                icon: 'gicon gicon-preferences',
                id: 'make_editable',
            });
        }
        this.sections.push({
            title: 'JSON Model',
            id: 'dashboard_json',
            icon: 'gicon gicon-json',
        });
        var params = this.$location.search();
        var url = this.$location.path();
        for (var _i = 0, _a = this.sections; _i < _a.length; _i++) {
            var section = _a[_i];
            var sectionParams = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.defaults({ editview: section.id }, params);
            section.url = app_core_config__WEBPACK_IMPORTED_MODULE_4__["default"].appSubUrl + url + '?' + jquery__WEBPACK_IMPORTED_MODULE_1___default.a.param(sectionParams);
        }
    };
    SettingsCtrl.prototype.onRouteUpdated = function () {
        this.viewId = this.$location.search().editview;
        if (this.viewId) {
            this.json = angular__WEBPACK_IMPORTED_MODULE_3___default.a.toJson(this.dashboard.getSaveModelClone(), true);
        }
        if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {
            this.viewId = 'make_editable';
        }
        var currentSection = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(this.sections, { id: this.viewId });
        if (!currentSection) {
            this.sections.unshift({
                title: 'Not found',
                id: '404',
                icon: 'fa fa-fw fa-warning',
            });
            this.viewId = '404';
        }
    };
    SettingsCtrl.prototype.openSaveAsModal = function () {
        this.dashboardSrv.showSaveAsModal();
    };
    SettingsCtrl.prototype.saveDashboard = function () {
        this.dashboardSrv.saveDashboard();
    };
    SettingsCtrl.prototype.saveDashboardJson = function () {
        var _this = this;
        this.dashboardSrv.saveJSONDashboard(this.json).then(function () {
            _this.$route.reload();
        });
    };
    SettingsCtrl.prototype.onPostSave = function () {
        this.hasUnsavedFolderChange = false;
    };
    SettingsCtrl.prototype.hideSettings = function () {
        var _this = this;
        var urlParams = this.$location.search();
        delete urlParams.editview;
        setTimeout(function () {
            _this.$rootScope.$apply(function () {
                _this.$location.search(urlParams);
            });
        });
    };
    SettingsCtrl.prototype.makeEditable = function () {
        this.dashboard.editable = true;
        this.dashboard.meta.canMakeEditable = false;
        this.dashboard.meta.canEdit = true;
        this.dashboard.meta.canSave = true;
        this.canDelete = true;
        this.viewId = 'settings';
        this.buildSectionList();
        var currentSection = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(this.sections, { id: this.viewId });
        this.$location.url(currentSection.url);
    };
    SettingsCtrl.prototype.deleteDashboard = function () {
        var _this = this;
        var confirmText = '';
        var text2 = this.dashboard.title;
        var alerts = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.sumBy(this.dashboard.panels, function (panel) {
            return panel.alert ? 1 : 0;
        });
        if (alerts > 0) {
            confirmText = 'DELETE';
            text2 = "This dashboard contains " + alerts + " alerts. Deleting this dashboard will also delete those alerts";
        }
        app_core_core__WEBPACK_IMPORTED_MODULE_0__["appEvents"].emit('confirm-modal', {
            title: 'Delete',
            text: 'Do you want to delete this dashboard?',
            text2: text2,
            icon: 'fa-trash',
            confirmText: confirmText,
            yesText: 'Delete',
            onConfirm: function () {
                _this.dashboard.meta.canSave = false;
                _this.deleteDashboardConfirmed();
            },
        });
    };
    SettingsCtrl.prototype.deleteDashboardConfirmed = function () {
        var _this = this;
        this.backendSrv.deleteDashboard(this.dashboard.uid).then(function () {
            app_core_core__WEBPACK_IMPORTED_MODULE_0__["appEvents"].emit('alert-success', ['Dashboard Deleted', _this.dashboard.title + ' has been deleted']);
            _this.$location.url('/');
        });
    };
    SettingsCtrl.prototype.onFolderChange = function (folder) {
        this.dashboard.meta.folderId = folder.id;
        this.dashboard.meta.folderTitle = folder.title;
        this.hasUnsavedFolderChange = true;
    };
    SettingsCtrl.prototype.getFolder = function () {
        return {
            id: this.dashboard.meta.folderId,
            title: this.dashboard.meta.folderTitle,
            url: this.dashboard.meta.folderUrl,
        };
    };
    return SettingsCtrl;
}());

function dashboardSettings() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/settings/settings.html',
        controller: SettingsCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        transclude: true,
        scope: { dashboard: '=' },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_0__["coreModule"].directive('dashboardSettings', dashboardSettings);


/***/ }),

/***/ "./public/app/features/dashboard/shareModalCtrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/shareModalCtrl.ts ***!
  \*********************************************************/
/*! exports provided: ShareModalCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShareModalCtrl", function() { return ShareModalCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);



/** @ngInject */
function ShareModalCtrl($scope, $rootScope, $location, $timeout, timeSrv, templateSrv, linkSrv) {
    $scope.options = {
        forCurrent: true,
        includeTemplateVars: true,
        theme: 'current',
    };
    $scope.editor = { index: $scope.tabIndex || 0 };
    $scope.init = function () {
        $scope.modeSharePanel = $scope.panel ? true : false;
        $scope.tabs = [{ title: 'Link', src: 'shareLink.html' }];
        if ($scope.modeSharePanel) {
            $scope.modalTitle = 'Share Panel';
            $scope.tabs.push({ title: 'Embed', src: 'shareEmbed.html' });
        }
        else {
            $scope.modalTitle = 'Share';
        }
        if (!$scope.dashboard.meta.isSnapshot) {
            $scope.tabs.push({ title: 'Snapshot', src: 'shareSnapshot.html' });
        }
        if (!$scope.dashboard.meta.isSnapshot && !$scope.modeSharePanel) {
            $scope.tabs.push({ title: 'Export', src: 'shareExport.html' });
        }
        $scope.buildUrl();
    };
    $scope.buildUrl = function () {
        var baseUrl = $location.absUrl();
        var queryStart = baseUrl.indexOf('?');
        if (queryStart !== -1) {
            baseUrl = baseUrl.substring(0, queryStart);
        }
        var params = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy($location.search());
        var range = timeSrv.timeRange();
        params.from = range.from.valueOf();
        params.to = range.to.valueOf();
        params.orgId = app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].bootData.user.orgId;
        if ($scope.options.includeTemplateVars) {
            templateSrv.fillVariableValuesForUrl(params);
        }
        if (!$scope.options.forCurrent) {
            delete params.from;
            delete params.to;
        }
        if ($scope.options.theme !== 'current') {
            params.theme = $scope.options.theme;
        }
        if ($scope.modeSharePanel) {
            params.panelId = $scope.panel.id;
            params.fullscreen = true;
        }
        else {
            delete params.panelId;
            delete params.fullscreen;
        }
        $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);
        var soloUrl = baseUrl.replace(app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/dashboard/', app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/dashboard-solo/');
        soloUrl = soloUrl.replace(app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/d/', app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/d-solo/');
        delete params.fullscreen;
        delete params.edit;
        soloUrl = linkSrv.addParamsToUrl(soloUrl, params);
        $scope.iframeHtml = '<iframe src="' + soloUrl + '" width="450" height="200" frameborder="0"></iframe>';
        $scope.imageUrl = soloUrl.replace(app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/dashboard-solo/', app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/render/dashboard-solo/');
        $scope.imageUrl = $scope.imageUrl.replace(app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/d-solo/', app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/render/d-solo/');
        $scope.imageUrl += '&width=1000&height=500' + $scope.getLocalTimeZone();
    };
    // This function will try to return the proper full name of the local timezone
    // Chrome does not handle the timezone offset (but phantomjs does)
    $scope.getLocalTimeZone = function () {
        var utcOffset = '&tz=UTC' + encodeURIComponent(moment__WEBPACK_IMPORTED_MODULE_2___default()().format('Z'));
        // Older browser does not the internationalization API
        if (!window.Intl) {
            return utcOffset;
        }
        var dateFormat = window.Intl.DateTimeFormat();
        if (!dateFormat.resolvedOptions) {
            return utcOffset;
        }
        var options = dateFormat.resolvedOptions();
        if (!options.timeZone) {
            return utcOffset;
        }
        return '&tz=' + encodeURIComponent(options.timeZone);
    };
    $scope.getShareUrl = function () {
        return $scope.shareUrl;
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('ShareModalCtrl', ShareModalCtrl);


/***/ }),

/***/ "./public/app/features/dashboard/share_snapshot_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/share_snapshot_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: ShareSnapshotCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShareSnapshotCtrl", function() { return ShareSnapshotCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var ShareSnapshotCtrl = /** @class */ (function () {
    /** @ngInject */
    function ShareSnapshotCtrl($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {
        $scope.snapshot = {
            name: $scope.dashboard.title,
            expires: 0,
            timeoutSeconds: 4,
        };
        $scope.step = 1;
        $scope.expireOptions = [
            { text: '1 Hour', value: 60 * 60 },
            { text: '1 Day', value: 60 * 60 * 24 },
            { text: '7 Days', value: 60 * 60 * 24 * 7 },
            { text: 'Never', value: 0 },
        ];
        $scope.accessOptions = [
            { text: 'Anyone with the link', value: 1 },
            { text: 'Organization users', value: 2 },
            { text: 'Public on the web', value: 3 },
        ];
        $scope.init = function () {
            backendSrv.get('/api/snapshot/shared-options').then(function (options) {
                $scope.externalUrl = options['externalSnapshotURL'];
                $scope.sharingButtonText = options['externalSnapshotName'];
                $scope.externalEnabled = options['externalEnabled'];
            });
        };
        $scope.apiUrl = '/api/snapshots';
        $scope.createSnapshot = function (external) {
            $scope.dashboard.snapshot = {
                timestamp: new Date(),
            };
            if (!external) {
                $scope.dashboard.snapshot.originalUrl = $location.absUrl();
            }
            $scope.loading = true;
            $scope.snapshot.external = external;
            $rootScope.$broadcast('refresh');
            $timeout(function () {
                $scope.saveSnapshot(external);
            }, $scope.snapshot.timeoutSeconds * 1000);
        };
        $scope.saveSnapshot = function (external) {
            var dash = $scope.dashboard.getSaveModelClone();
            $scope.scrubDashboard(dash);
            var cmdData = {
                dashboard: dash,
                name: dash.title,
                expires: $scope.snapshot.expires,
            };
            var postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;
            backendSrv.post(postUrl, cmdData).then(function (results) {
                $scope.loading = false;
                if (external) {
                    $scope.deleteUrl = results.deleteUrl;
                    $scope.snapshotUrl = results.url;
                    $scope.saveExternalSnapshotRef(cmdData, results);
                }
                else {
                    var url = $location.url();
                    var baseUrl = $location.absUrl();
                    if (url !== '/') {
                        baseUrl = baseUrl.replace(url, '') + '/';
                    }
                    $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;
                    $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;
                }
                $scope.step = 2;
            }, function () {
                $scope.loading = false;
            });
        };
        $scope.getSnapshotUrl = function () {
            return $scope.snapshotUrl;
        };
        $scope.scrubDashboard = function (dash) {
            // change title
            dash.title = $scope.snapshot.name;
            // make relative times absolute
            dash.time = timeSrv.timeRange();
            // remove panel queries & links
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(dash.panels, function (panel) {
                panel.targets = [];
                panel.links = [];
                panel.datasource = null;
            });
            // remove annotation queries
            dash.annotations.list = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.chain(dash.annotations.list)
                .filter(function (annotation) {
                return annotation.enable;
            })
                .map(function (annotation) {
                return {
                    name: annotation.name,
                    enable: annotation.enable,
                    iconColor: annotation.iconColor,
                    snapshotData: annotation.snapshotData,
                    type: annotation.type,
                    builtIn: annotation.builtIn,
                    hide: annotation.hide,
                };
            })
                .value();
            // remove template queries
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(dash.templating.list, function (variable) {
                variable.query = '';
                variable.options = variable.current;
                variable.refresh = false;
            });
            // snapshot single panel
            if ($scope.modeSharePanel) {
                var singlePanel = $scope.panel.getSaveModel();
                singlePanel.gridPos.w = 24;
                singlePanel.gridPos.x = 0;
                singlePanel.gridPos.y = 0;
                singlePanel.gridPos.h = 20;
                dash.panels = [singlePanel];
            }
            // cleanup snapshotData
            delete $scope.dashboard.snapshot;
            $scope.dashboard.forEachPanel(function (panel) {
                delete panel.snapshotData;
            });
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each($scope.dashboard.annotations.list, function (annotation) {
                delete annotation.snapshotData;
            });
        };
        $scope.deleteSnapshot = function () {
            backendSrv.get($scope.deleteUrl).then(function () {
                $scope.step = 3;
            });
        };
        $scope.saveExternalSnapshotRef = function (cmdData, results) {
            // save external in local instance as well
            cmdData.external = true;
            cmdData.key = results.key;
            cmdData.deleteKey = results.deleteKey;
            backendSrv.post('/api/snapshots/', cmdData);
        };
    }
    return ShareSnapshotCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('ShareSnapshotCtrl', ShareSnapshotCtrl);


/***/ }),

/***/ "./public/app/features/dashboard/submenu/submenu.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/dashboard/submenu/submenu.ts ***!
  \**********************************************************/
/*! exports provided: SubmenuCtrl, submenuDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmenuCtrl", function() { return SubmenuCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "submenuDirective", function() { return submenuDirective; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var SubmenuCtrl = /** @class */ (function () {
    /** @ngInject */
    function SubmenuCtrl($rootScope, variableSrv, $location) {
        this.$rootScope = $rootScope;
        this.variableSrv = variableSrv;
        this.$location = $location;
        this.annotations = this.dashboard.templating.list;
        this.variables = this.variableSrv.variables;
    }
    SubmenuCtrl.prototype.annotationStateChanged = function () {
        this.$rootScope.$broadcast('refresh');
    };
    SubmenuCtrl.prototype.variableUpdated = function (variable) {
        this.variableSrv.variableUpdated(variable, true);
    };
    SubmenuCtrl.prototype.openEditView = function (editview) {
        var search = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend(this.$location.search(), { editview: editview });
        this.$location.search(search);
    };
    return SubmenuCtrl;
}());

function submenuDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/submenu/submenu.html',
        controller: SubmenuCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dashboard: '=',
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);


/***/ }),

/***/ "./public/app/features/dashboard/time_srv.ts":
/*!***************************************************!*\
  !*** ./public/app/features/dashboard/time_srv.ts ***!
  \***************************************************/
/*! exports provided: TimeSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeSrv", function() { return TimeSrv; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");





var TimeSrv = /** @class */ (function () {
    /** @ngInject */
    function TimeSrv($rootScope, $timeout, $location, timer, contextSrv) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.$timeout = $timeout;
        this.$location = $location;
        this.timer = timer;
        this.contextSrv = contextSrv;
        // default time
        this.time = { from: '6h', to: 'now' };
        $rootScope.$on('zoom-out', this.zoomOut.bind(this));
        $rootScope.$on('$routeUpdate', this.routeUpdated.bind(this));
        document.addEventListener('visibilitychange', function () {
            if (_this.autoRefreshBlocked && document.visibilityState === 'visible') {
                _this.autoRefreshBlocked = false;
                _this.refreshDashboard();
            }
        });
    }
    TimeSrv.prototype.init = function (dashboard) {
        this.timer.cancelAll();
        this.dashboard = dashboard;
        this.time = dashboard.time;
        this.refresh = dashboard.refresh;
        this.initTimeFromUrl();
        this.parseTime();
        // remember time at load so we can go back to it
        this.timeAtLoad = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.cloneDeep(this.time);
        if (this.refresh) {
            this.setAutoRefresh(this.refresh);
        }
    };
    TimeSrv.prototype.parseTime = function () {
        // when absolute time is saved in json it is turned to a string
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {
            this.time.from = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.time.from).utc();
        }
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {
            this.time.to = moment__WEBPACK_IMPORTED_MODULE_0___default()(this.time.to).utc();
        }
    };
    TimeSrv.prototype.parseUrlParam = function (value) {
        if (value.indexOf('now') !== -1) {
            return value;
        }
        if (value.length === 8) {
            return moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(value, 'YYYYMMDD');
        }
        if (value.length === 15) {
            return moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(value, 'YYYYMMDDTHHmmss');
        }
        if (!isNaN(value)) {
            var epoch = parseInt(value, 10);
            return moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(epoch);
        }
        return null;
    };
    TimeSrv.prototype.initTimeFromUrl = function () {
        var params = this.$location.search();
        if (params.from) {
            this.time.from = this.parseUrlParam(params.from) || this.time.from;
        }
        if (params.to) {
            this.time.to = this.parseUrlParam(params.to) || this.time.to;
        }
        // if absolute ignore refresh option saved to dashboard
        if (params.to && params.to.indexOf('now') === -1) {
            this.refresh = false;
            this.dashboard.refresh = false;
        }
        // but if refresh explicitly set then use that
        if (params.refresh) {
            this.refresh = params.refresh || this.refresh;
        }
    };
    TimeSrv.prototype.routeUpdated = function () {
        var params = this.$location.search();
        var urlRange = this.timeRangeForUrl();
        // check if url has time range
        if (params.from && params.to) {
            // is it different from what our current time range?
            if (params.from !== urlRange.from || params.to !== urlRange.to) {
                // issue update
                this.initTimeFromUrl();
                this.setTime(this.time, true);
            }
        }
        else if (this.timeHasChangedSinceLoad()) {
            this.setTime(this.timeAtLoad, true);
        }
    };
    TimeSrv.prototype.timeHasChangedSinceLoad = function () {
        return this.timeAtLoad && (this.timeAtLoad.from !== this.time.from || this.timeAtLoad.to !== this.time.to);
    };
    TimeSrv.prototype.setAutoRefresh = function (interval) {
        var _this = this;
        this.dashboard.refresh = interval;
        this.cancelNextRefresh();
        if (interval) {
            var intervalMs_1 = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_ms(interval);
            this.refreshTimer = this.timer.register(this.$timeout(function () {
                _this.startNextRefreshTimer(intervalMs_1);
                _this.refreshDashboard();
            }, intervalMs_1));
        }
        // update url
        var params = this.$location.search();
        if (interval) {
            params.refresh = interval;
            this.$location.search(params);
        }
        else if (params.refresh) {
            delete params.refresh;
            this.$location.search(params);
        }
    };
    TimeSrv.prototype.refreshDashboard = function () {
        this.$rootScope.$broadcast('refresh');
    };
    TimeSrv.prototype.startNextRefreshTimer = function (afterMs) {
        var _this = this;
        this.cancelNextRefresh();
        this.refreshTimer = this.timer.register(this.$timeout(function () {
            _this.startNextRefreshTimer(afterMs);
            if (_this.contextSrv.isGrafanaVisible()) {
                _this.refreshDashboard();
            }
            else {
                _this.autoRefreshBlocked = true;
            }
        }, afterMs));
    };
    TimeSrv.prototype.cancelNextRefresh = function () {
        this.timer.cancel(this.refreshTimer);
    };
    TimeSrv.prototype.setTime = function (time, fromRouteUpdate) {
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend(this.time, time);
        // disable refresh if zoom in or zoom out
        if (moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(time.to)) {
            this.oldRefresh = this.dashboard.refresh || this.oldRefresh;
            this.setAutoRefresh(false);
        }
        else if (this.oldRefresh && this.oldRefresh !== this.dashboard.refresh) {
            this.setAutoRefresh(this.oldRefresh);
            this.oldRefresh = null;
        }
        // update url
        if (fromRouteUpdate !== true) {
            var urlRange = this.timeRangeForUrl();
            var urlParams = this.$location.search();
            urlParams.from = urlRange.from;
            urlParams.to = urlRange.to;
            this.$location.search(urlParams);
        }
        this.$rootScope.appEvent('time-range-changed', this.time);
        this.$timeout(this.refreshDashboard.bind(this), 0);
    };
    TimeSrv.prototype.timeRangeForUrl = function () {
        var range = this.timeRange().raw;
        if (moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(range.from)) {
            range.from = range.from.valueOf().toString();
        }
        if (moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(range.to)) {
            range.to = range.to.valueOf().toString();
        }
        return range;
    };
    TimeSrv.prototype.timeRange = function () {
        // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)
        var raw = {
            from: moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(this.time.from) ? moment__WEBPACK_IMPORTED_MODULE_0___default()(this.time.from) : this.time.from,
            to: moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(this.time.to) ? moment__WEBPACK_IMPORTED_MODULE_0___default()(this.time.to) : this.time.to,
        };
        var timezone = this.dashboard && this.dashboard.getTimezone();
        return {
            from: app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_4__["parse"](raw.from, false, timezone),
            to: app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_4__["parse"](raw.to, true, timezone),
            raw: raw,
        };
    };
    TimeSrv.prototype.zoomOut = function (e, factor) {
        var range = this.timeRange();
        var timespan = range.to.valueOf() - range.from.valueOf();
        var center = range.to.valueOf() - timespan / 2;
        var to = center + timespan * factor / 2;
        var from = center - timespan * factor / 2;
        if (to > Date.now() && range.to <= Date.now()) {
            var offset = to - Date.now();
            from = from - offset;
            to = Date.now();
        }
        this.setTime({ from: moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(from), to: moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(to) });
    };
    return TimeSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].service('timeSrv', TimeSrv);


/***/ }),

/***/ "./public/app/features/dashboard/timepicker/input_date.ts":
/*!****************************************************************!*\
  !*** ./public/app/features/dashboard/timepicker/input_date.ts ***!
  \****************************************************************/
/*! exports provided: inputDateDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inputDateDirective", function() { return inputDateDirective; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");


function inputDateDirective() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function ($scope, $elem, attrs, ngModel) {
            var format = 'YYYY-MM-DD HH:mm:ss';
            var fromUser = function (text) {
                if (text.indexOf('now') !== -1) {
                    if (!app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__["isValid"](text)) {
                        ngModel.$setValidity('error', false);
                        return undefined;
                    }
                    ngModel.$setValidity('error', true);
                    return text;
                }
                var parsed;
                if ($scope.ctrl.isUtc) {
                    parsed = moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc(text, format);
                }
                else {
                    parsed = moment__WEBPACK_IMPORTED_MODULE_0___default()(text, format);
                }
                if (!parsed.isValid()) {
                    ngModel.$setValidity('error', false);
                    return undefined;
                }
                ngModel.$setValidity('error', true);
                return parsed;
            };
            var toUser = function (currentValue) {
                if (moment__WEBPACK_IMPORTED_MODULE_0___default.a.isMoment(currentValue)) {
                    return currentValue.format(format);
                }
                else {
                    return currentValue;
                }
            };
            ngModel.$parsers.push(fromUser);
            ngModel.$formatters.push(toUser);
        },
    };
}


/***/ }),

/***/ "./public/app/features/dashboard/timepicker/timepicker.ts":
/*!****************************************************************!*\
  !*** ./public/app/features/dashboard/timepicker/timepicker.ts ***!
  \****************************************************************/
/*! exports provided: TimePickerCtrl, settingsDirective, timePickerDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimePickerCtrl", function() { return TimePickerCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settingsDirective", function() { return settingsDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timePickerDirective", function() { return timePickerDirective; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/rangeutil */ "./public/app/core/utils/rangeutil.ts");
/* harmony import */ var _input_date__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./input_date */ "./public/app/features/dashboard/timepicker/input_date.ts");




var TimePickerCtrl = /** @class */ (function () {
    /** @ngInject */
    function TimePickerCtrl($scope, $rootScope, timeSrv) {
        var _this = this;
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.timeSrv = timeSrv;
        this.$scope.ctrl = this;
        $rootScope.onAppEvent('shift-time-forward', function () { return _this.move(1); }, $scope);
        $rootScope.onAppEvent('shift-time-backward', function () { return _this.move(-1); }, $scope);
        $rootScope.onAppEvent('refresh', this.onRefresh.bind(this), $scope);
        $rootScope.onAppEvent('closeTimepicker', this.openDropdown.bind(this), $scope);
        // init options
        this.panel = this.dashboard.timepicker;
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaults(this.panel, TimePickerCtrl.defaults);
        this.firstDayOfWeek = moment__WEBPACK_IMPORTED_MODULE_2___default.a.localeData().firstDayOfWeek();
        // init time stuff
        this.onRefresh();
    }
    TimePickerCtrl.prototype.onRefresh = function () {
        var time = angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(this.timeSrv.timeRange());
        var timeRaw = angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(time.raw);
        if (!this.dashboard.isTimezoneUtc()) {
            time.from.local();
            time.to.local();
            if (moment__WEBPACK_IMPORTED_MODULE_2___default.a.isMoment(timeRaw.from)) {
                timeRaw.from.local();
            }
            if (moment__WEBPACK_IMPORTED_MODULE_2___default.a.isMoment(timeRaw.to)) {
                timeRaw.to.local();
            }
            this.isUtc = false;
        }
        else {
            this.isUtc = true;
        }
        this.rangeString = app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_3__["describeTimeRange"](timeRaw);
        this.absolute = { fromJs: time.from.toDate(), toJs: time.to.toDate() };
        this.tooltip = this.dashboard.formatDate(time.from) + ' <br>to<br>';
        this.tooltip += this.dashboard.formatDate(time.to);
        this.timeRaw = timeRaw;
        this.isAbsolute = moment__WEBPACK_IMPORTED_MODULE_2___default.a.isMoment(this.timeRaw.to);
    };
    TimePickerCtrl.prototype.zoom = function (factor) {
        this.$rootScope.appEvent('zoom-out', 2);
    };
    TimePickerCtrl.prototype.move = function (direction) {
        var range = this.timeSrv.timeRange();
        var timespan = (range.to.valueOf() - range.from.valueOf()) / 2;
        var to, from;
        if (direction === -1) {
            to = range.to.valueOf() - timespan;
            from = range.from.valueOf() - timespan;
        }
        else if (direction === 1) {
            to = range.to.valueOf() + timespan;
            from = range.from.valueOf() + timespan;
            if (to > Date.now() && range.to < Date.now()) {
                to = Date.now();
                from = range.from.valueOf();
            }
        }
        else {
            to = range.to.valueOf();
            from = range.from.valueOf();
        }
        this.timeSrv.setTime({ from: moment__WEBPACK_IMPORTED_MODULE_2___default.a.utc(from), to: moment__WEBPACK_IMPORTED_MODULE_2___default.a.utc(to) });
    };
    TimePickerCtrl.prototype.openDropdown = function () {
        if (this.isOpen) {
            this.closeDropdown();
            return;
        }
        this.onRefresh();
        this.editTimeRaw = this.timeRaw;
        this.timeOptions = app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_3__["getRelativeTimesList"](this.panel, this.rangeString);
        this.refresh = {
            value: this.dashboard.refresh,
            options: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.panel.refresh_intervals, function (interval) {
                return { text: interval, value: interval };
            }),
        };
        this.refresh.options.unshift({ text: 'off' });
        this.isOpen = true;
        this.$rootScope.appEvent('timepickerOpen');
    };
    TimePickerCtrl.prototype.closeDropdown = function () {
        this.isOpen = false;
        this.$rootScope.appEvent('timepickerClosed');
    };
    TimePickerCtrl.prototype.applyCustom = function () {
        if (this.refresh.value !== this.dashboard.refresh) {
            this.timeSrv.setAutoRefresh(this.refresh.value);
        }
        this.timeSrv.setTime(this.editTimeRaw);
        this.closeDropdown();
    };
    TimePickerCtrl.prototype.absoluteFromChanged = function () {
        this.editTimeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);
    };
    TimePickerCtrl.prototype.absoluteToChanged = function () {
        this.editTimeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);
    };
    TimePickerCtrl.prototype.getAbsoluteMomentForTimezone = function (jsDate) {
        return this.dashboard.isTimezoneUtc() ? moment__WEBPACK_IMPORTED_MODULE_2___default()(jsDate).utc() : moment__WEBPACK_IMPORTED_MODULE_2___default()(jsDate);
    };
    TimePickerCtrl.prototype.setRelativeFilter = function (timespan) {
        var range = { from: timespan.from, to: timespan.to };
        if (this.panel.nowDelay && range.to === 'now') {
            range.to = 'now-' + this.panel.nowDelay;
        }
        this.timeSrv.setTime(range);
        this.closeDropdown();
    };
    TimePickerCtrl.tooltipFormat = 'MMM D, YYYY HH:mm:ss';
    TimePickerCtrl.defaults = {
        time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],
        refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],
    };
    return TimePickerCtrl;
}());

function settingsDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/timepicker/settings.html',
        controller: TimePickerCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dashboard: '=',
        },
    };
}
function timePickerDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',
        controller: TimePickerCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            dashboard: '=',
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);
angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.directives').directive('gfTimePicker', timePickerDirective);

angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.directives').directive('inputDatetime', _input_date__WEBPACK_IMPORTED_MODULE_4__["inputDateDirective"]);


/***/ }),

/***/ "./public/app/features/dashboard/unsaved_changes_modal.ts":
/*!****************************************************************!*\
  !*** ./public/app/features/dashboard/unsaved_changes_modal.ts ***!
  \****************************************************************/
/*! exports provided: UnsavedChangesModalCtrl, unsavedChangesModalDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsavedChangesModalCtrl", function() { return UnsavedChangesModalCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsavedChangesModalDirective", function() { return unsavedChangesModalDirective; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var template = "\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-exclamation\"></i>\n      <span class=\"p-l-1\">Unsaved changes</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content text-center\">\n\n    <div class=\"confirm-modal-text\">\n      Do you want to save your changes?\n    </div>\n\n    <div class=\"confirm-modal-buttons\">\n      <button type=\"button\" class=\"btn btn-success\" ng-click=\"ctrl.save()\">Save</button>\n      <button type=\"button\" class=\"btn btn-danger\" ng-click=\"ctrl.discard()\">Discard</button>\n      <button type=\"button\" class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss()\">Cancel</button>\n    </div>\n  </div>\n</div>\n";
var UnsavedChangesModalCtrl = /** @class */ (function () {
    /** @ngInject */
    function UnsavedChangesModalCtrl(unsavedChangesSrv) {
        this.unsavedChangesSrv = unsavedChangesSrv;
    }
    UnsavedChangesModalCtrl.prototype.discard = function () {
        this.dismiss();
        this.unsavedChangesSrv.tracker.discardChanges();
    };
    UnsavedChangesModalCtrl.prototype.save = function () {
        this.dismiss();
        this.unsavedChangesSrv.tracker.saveChanges();
    };
    return UnsavedChangesModalCtrl;
}());

function unsavedChangesModalDirective() {
    return {
        restrict: 'E',
        template: template,
        controller: UnsavedChangesModalCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: { dismiss: '&' },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('unsavedChangesModal', unsavedChangesModalDirective);


/***/ }),

/***/ "./public/app/features/dashboard/unsaved_changes_srv.ts":
/*!**************************************************************!*\
  !*** ./public/app/features/dashboard/unsaved_changes_srv.ts ***!
  \**************************************************************/
/*! exports provided: unsavedChangesSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsavedChangesSrv", function() { return unsavedChangesSrv; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _change_tracker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./change_tracker */ "./public/app/features/dashboard/change_tracker.ts");


/** @ngInject */
function unsavedChangesSrv($rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {
    this.init = function (dashboard, scope) {
        this.tracker = new _change_tracker__WEBPACK_IMPORTED_MODULE_1__["ChangeTracker"](dashboard, scope, 1000, $location, $window, $timeout, contextSrv, $rootScope);
        return this.tracker;
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.services').service('unsavedChangesSrv', unsavedChangesSrv);


/***/ }),

/***/ "./public/app/features/dashboard/upload.ts":
/*!*************************************************!*\
  !*** ./public/app/features/dashboard/upload.ts ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_2__);



var template = "\n<input type=\"file\" id=\"dashupload\" name=\"dashupload\" class=\"hide\" onchange=\"angular.element(this).scope().file_selected\"/>\n<label class=\"btn btn-success\" for=\"dashupload\">\n  <i class=\"fa fa-upload\"></i>\n  {{btnText}}\n</label>\n";
/** @ngInject */
function uploadDashboardDirective(timer, alertSrv, $location) {
    return {
        restrict: 'E',
        template: template,
        scope: {
            onUpload: '&',
            btnText: '@?',
        },
        link: function (scope, elem) {
            scope.btnText = angular__WEBPACK_IMPORTED_MODULE_2___default.a.isDefined(scope.btnText) ? scope.btnText : 'Upload .json File';
            function file_selected(evt) {
                var files = evt.target.files; // FileList object
                var readerOnload = function () {
                    return function (e) {
                        var dash;
                        try {
                            dash = JSON.parse(e.target.result);
                        }
                        catch (err) {
                            console.log(err);
                            app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].emit('alert-error', ['Import failed', 'JSON -> JS Serialization failed: ' + err.message]);
                            return;
                        }
                        scope.$apply(function () {
                            scope.onUpload({ dash: dash });
                        });
                    };
                };
                var i = 0;
                var file = files[i];
                while (file) {
                    var reader = new FileReader();
                    reader.onload = readerOnload();
                    reader.readAsText(file);
                    i += 1;
                    file = files[i];
                }
            }
            var wnd = window;
            // Check for the various File API support.
            if (wnd.File && wnd.FileReader && wnd.FileList && wnd.Blob) {
                // Something
                elem[0].addEventListener('change', file_selected, false);
            }
            else {
                alertSrv.set('Oops', 'Sorry, the HTML5 File APIs are not fully supported in this browser.', 'error');
            }
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('dashUpload', uploadDashboardDirective);


/***/ }),

/***/ "./public/app/features/dashboard/validation_srv.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/validation_srv.ts ***!
  \*********************************************************/
/*! exports provided: ValidationSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationSrv", function() { return ValidationSrv; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var hitTypes = {
    FOLDER: 'dash-folder',
    DASHBOARD: 'dash-db',
};
var ValidationSrv = /** @class */ (function () {
    /** @ngInject */
    function ValidationSrv($q, backendSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.rootName = 'general';
    }
    ValidationSrv.prototype.validateNewDashboardName = function (folderId, name) {
        return this.validate(folderId, name, 'A dashboard in this folder with the same name already exists');
    };
    ValidationSrv.prototype.validateNewFolderName = function (name) {
        return this.validate(0, name, 'A folder or dashboard in the general folder with the same name already exists');
    };
    ValidationSrv.prototype.validate = function (folderId, name, existingErrorMessage) {
        name = (name || '').trim();
        var nameLowerCased = name.toLowerCase();
        if (name.length === 0) {
            return this.$q.reject({
                type: 'REQUIRED',
                message: 'Name is required',
            });
        }
        if (folderId === 0 && nameLowerCased === this.rootName) {
            return this.$q.reject({
                type: 'EXISTING',
                message: 'This is a reserved name and cannot be used for a folder.',
            });
        }
        var deferred = this.$q.defer();
        var promises = [];
        promises.push(this.backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));
        promises.push(this.backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));
        this.$q.all(promises).then(function (res) {
            var hits = [];
            if (res.length > 0 && res[0].length > 0) {
                hits = res[0];
            }
            if (res.length > 1 && res[1].length > 0) {
                hits = hits.concat(res[1]);
            }
            for (var _i = 0, hits_1 = hits; _i < hits_1.length; _i++) {
                var hit = hits_1[_i];
                if (nameLowerCased === hit.title.toLowerCase()) {
                    deferred.reject({
                        type: 'EXISTING',
                        message: existingErrorMessage,
                    });
                    break;
                }
            }
            deferred.resolve();
        });
        return deferred.promise;
    };
    return ValidationSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].service('validationSrv', ValidationSrv);


/***/ }),

/***/ "./public/app/features/dashboard/view_state_srv.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/dashboard/view_state_srv.ts ***!
  \*********************************************************/
/*! exports provided: DashboardViewState, dashboardViewStateSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardViewState", function() { return DashboardViewState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashboardViewStateSrv", function() { return dashboardViewStateSrv; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");



// represents the transient view state
// like fullscreen panel & edit
var DashboardViewState = /** @class */ (function () {
    /** @ngInject */
    function DashboardViewState($scope, $location, $timeout, $rootScope) {
        this.$location = $location;
        this.$timeout = $timeout;
        this.$rootScope = $rootScope;
        var self = this;
        self.state = {};
        self.panelScopes = [];
        self.$scope = $scope;
        self.dashboard = $scope.dashboard;
        $scope.onAppEvent('$routeUpdate', function () {
            var urlState = self.getQueryStringState();
            if (self.needsSync(urlState)) {
                self.update(urlState, true);
            }
        });
        $scope.onAppEvent('panel-change-view', function (evt, payload) {
            self.update(payload);
        });
        $scope.onAppEvent('panel-initialized', function (evt, payload) {
            self.registerPanel(payload.scope);
        });
        // this marks changes to location during this digest cycle as not to add history item
        // don't want url changes like adding orgId to add browser history
        $location.replace();
        this.update(this.getQueryStringState());
    }
    DashboardViewState.prototype.needsSync = function (urlState) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEqual(this.state, urlState) === false;
    };
    DashboardViewState.prototype.getQueryStringState = function () {
        var state = this.$location.search();
        state.panelId = parseInt(state.panelId, 10) || null;
        state.fullscreen = state.fullscreen ? true : null;
        state.edit = state.edit === 'true' || state.edit === true || null;
        state.editview = state.editview || null;
        state.orgId = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].bootData.user.orgId;
        return state;
    };
    DashboardViewState.prototype.serializeToUrl = function () {
        var urlState = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.clone(this.state);
        urlState.fullscreen = this.state.fullscreen ? true : null;
        urlState.edit = this.state.edit ? true : null;
        return urlState;
    };
    DashboardViewState.prototype.update = function (state, fromRouteUpdated) {
        // implement toggle logic
        if (state.toggle) {
            delete state.toggle;
            if (this.state.fullscreen && state.fullscreen) {
                if (this.state.edit === state.edit) {
                    state.fullscreen = !state.fullscreen;
                }
            }
        }
        // remember if editStateChanged
        this.editStateChanged = (state.edit || false) !== (this.state.edit || false);
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend(this.state, state);
        this.dashboard.meta.fullscreen = this.state.fullscreen;
        if (!this.state.fullscreen) {
            this.state.fullscreen = null;
            this.state.edit = null;
            // clear panel id unless in solo mode
            if (!this.dashboard.meta.soloMode) {
                this.state.panelId = null;
            }
        }
        if ((this.state.fullscreen || this.dashboard.meta.soloMode) && this.state.panelId) {
            // Trying to render panel in fullscreen when it's in the collapsed row causes an issue.
            // So in this case expand collapsed row first.
            this.toggleCollapsedPanelRow(this.state.panelId);
        }
        // if no edit state cleanup tab parm
        if (!this.state.edit) {
            delete this.state.tab;
        }
        // do not update url params if we are here
        // from routeUpdated event
        if (fromRouteUpdated !== true) {
            this.$location.search(this.serializeToUrl());
        }
        this.syncState();
    };
    DashboardViewState.prototype.toggleCollapsedPanelRow = function (panelId) {
        for (var _i = 0, _a = this.dashboard.panels; _i < _a.length; _i++) {
            var panel = _a[_i];
            if (panel.collapsed) {
                for (var _b = 0, _c = panel.panels; _b < _c.length; _b++) {
                    var rowPanel = _c[_b];
                    if (rowPanel.id === panelId) {
                        this.dashboard.toggleRow(panel);
                        return;
                    }
                }
            }
        }
    };
    DashboardViewState.prototype.syncState = function () {
        if (this.panelScopes.length === 0) {
            return;
        }
        if (this.dashboard.meta.fullscreen) {
            var panelScope = this.getPanelScope(this.state.panelId);
            if (!panelScope) {
                return;
            }
            if (this.fullscreenPanel) {
                // if already fullscreen
                if (this.fullscreenPanel === panelScope && this.editStateChanged === false) {
                    return;
                }
                else {
                    this.leaveFullscreen(false);
                }
            }
            if (!panelScope.ctrl.editModeInitiated) {
                panelScope.ctrl.initEditMode();
            }
            if (!panelScope.ctrl.fullscreen) {
                this.enterFullscreen(panelScope);
            }
        }
        else if (this.fullscreenPanel) {
            this.leaveFullscreen(true);
        }
    };
    DashboardViewState.prototype.getPanelScope = function (id) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(this.panelScopes, function (panelScope) {
            return panelScope.ctrl.panel.id === id;
        });
    };
    DashboardViewState.prototype.leaveFullscreen = function (render) {
        var self = this;
        var ctrl = self.fullscreenPanel.ctrl;
        ctrl.editMode = false;
        ctrl.fullscreen = false;
        this.dashboard.setViewMode(ctrl.panel, false, false);
        this.$scope.appEvent('panel-fullscreen-exit', { panelId: ctrl.panel.id });
        this.$scope.appEvent('dash-scroll', { restore: true });
        if (!render) {
            return false;
        }
        this.$timeout(function () {
            if (self.oldTimeRange !== ctrl.range) {
                self.$rootScope.$broadcast('refresh');
            }
            else {
                self.$rootScope.$broadcast('render');
            }
            delete self.fullscreenPanel;
        });
        return true;
    };
    DashboardViewState.prototype.enterFullscreen = function (panelScope) {
        var ctrl = panelScope.ctrl;
        ctrl.editMode = this.state.edit && this.dashboard.meta.canEdit;
        ctrl.fullscreen = true;
        this.oldTimeRange = ctrl.range;
        this.fullscreenPanel = panelScope;
        // Firefox doesn't return scrollTop position properly if 'dash-scroll' is emitted after setViewMode()
        this.$scope.appEvent('dash-scroll', { animate: false, pos: 0 });
        this.dashboard.setViewMode(ctrl.panel, true, ctrl.editMode);
        this.$scope.appEvent('panel-fullscreen-enter', { panelId: ctrl.panel.id });
    };
    DashboardViewState.prototype.registerPanel = function (panelScope) {
        var self = this;
        self.panelScopes.push(panelScope);
        if (!self.dashboard.meta.soloMode) {
            if (self.state.panelId === panelScope.ctrl.panel.id) {
                if (self.state.edit) {
                    panelScope.ctrl.editPanel();
                }
                else {
                    panelScope.ctrl.viewPanel();
                }
            }
        }
        var unbind = panelScope.$on('$destroy', function () {
            self.panelScopes = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.without(self.panelScopes, panelScope);
            unbind();
        });
    };
    return DashboardViewState;
}());

/** @ngInject */
function dashboardViewStateSrv($location, $timeout, $rootScope) {
    return {
        create: function ($scope) {
            return new DashboardViewState($scope, $location, $timeout, $rootScope);
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.services').factory('dashboardViewStateSrv', dashboardViewStateSrv);


/***/ }),

/***/ "./public/app/features/manage-dashboards/DashboardListCtrl.ts":
/*!********************************************************************!*\
  !*** ./public/app/features/manage-dashboards/DashboardListCtrl.ts ***!
  \********************************************************************/
/*! exports provided: DashboardListCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardListCtrl", function() { return DashboardListCtrl; });
var DashboardListCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashboardListCtrl(navModelSrv) {
        this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);
    }
    return DashboardListCtrl;
}());



/***/ }),

/***/ "./public/app/features/manage-dashboards/SnapshotListCtrl.ts":
/*!*******************************************************************!*\
  !*** ./public/app/features/manage-dashboards/SnapshotListCtrl.ts ***!
  \*******************************************************************/
/*! exports provided: SnapshotListCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SnapshotListCtrl", function() { return SnapshotListCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var SnapshotListCtrl = /** @class */ (function () {
    /** @ngInject */
    function SnapshotListCtrl($rootScope, backendSrv, navModelSrv) {
        var _this = this;
        this.$rootScope = $rootScope;
        this.backendSrv = backendSrv;
        this.navModel = navModelSrv.getNav('dashboards', 'snapshots', 0);
        this.backendSrv.get('/api/dashboard/snapshots').then(function (result) {
            _this.snapshots = result;
        });
    }
    SnapshotListCtrl.prototype.removeSnapshotConfirmed = function (snapshot) {
        var _this = this;
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.remove(this.snapshots, { key: snapshot.key });
        this.backendSrv.delete('/api/snapshots/' + snapshot.key).then(function () { }, function () {
            _this.snapshots.push(snapshot);
        });
    };
    SnapshotListCtrl.prototype.removeSnapshot = function (snapshot) {
        var _this = this;
        this.$rootScope.appEvent('confirm-modal', {
            title: 'Delete',
            text: 'Are you sure you want to delete snapshot ' + snapshot.name + '?',
            yesText: 'Delete',
            icon: 'fa-trash',
            onConfirm: function () {
                _this.removeSnapshotConfirmed(snapshot);
            },
        });
    };
    return SnapshotListCtrl;
}());



/***/ }),

/***/ "./public/app/features/manage-dashboards/index.ts":
/*!********************************************************!*\
  !*** ./public/app/features/manage-dashboards/index.ts ***!
  \********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _DashboardListCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DashboardListCtrl */ "./public/app/features/manage-dashboards/DashboardListCtrl.ts");
/* harmony import */ var _SnapshotListCtrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SnapshotListCtrl */ "./public/app/features/manage-dashboards/SnapshotListCtrl.ts");



app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].controller('DashboardListCtrl', _DashboardListCtrl__WEBPACK_IMPORTED_MODULE_1__["DashboardListCtrl"]);
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].controller('SnapshotListCtrl', _SnapshotListCtrl__WEBPACK_IMPORTED_MODULE_2__["SnapshotListCtrl"]);


/***/ }),

/***/ "./public/app/features/org/all.ts":
/*!****************************************!*\
  !*** ./public/app/features/org/all.ts ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _org_users_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./org_users_ctrl */ "./public/app/features/org/org_users_ctrl.ts");
/* harmony import */ var _profile_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./profile_ctrl */ "./public/app/features/org/profile_ctrl.ts");
/* harmony import */ var _select_org_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./select_org_ctrl */ "./public/app/features/org/select_org_ctrl.ts");
/* harmony import */ var _change_password_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./change_password_ctrl */ "./public/app/features/org/change_password_ctrl.ts");
/* harmony import */ var _new_org_ctrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./new_org_ctrl */ "./public/app/features/org/new_org_ctrl.ts");
/* harmony import */ var _user_invite_ctrl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user_invite_ctrl */ "./public/app/features/org/user_invite_ctrl.ts");
/* harmony import */ var _create_team_ctrl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create_team_ctrl */ "./public/app/features/org/create_team_ctrl.ts");
/* harmony import */ var _org_details_ctrl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./org_details_ctrl */ "./public/app/features/org/org_details_ctrl.ts");
/* harmony import */ var _prefs_control__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./prefs_control */ "./public/app/features/org/prefs_control.ts");












/***/ }),

/***/ "./public/app/features/org/change_password_ctrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/org/change_password_ctrl.ts ***!
  \*********************************************************/
/*! exports provided: ChangePasswordCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangePasswordCtrl", function() { return ChangePasswordCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");


var ChangePasswordCtrl = /** @class */ (function () {
    /** @ngInject */
    function ChangePasswordCtrl($scope, backendSrv, $location, navModelSrv) {
        $scope.command = {};
        $scope.authProxyEnabled = app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].authProxyEnabled;
        $scope.ldapEnabled = app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].ldapEnabled;
        $scope.navModel = navModelSrv.getNav('profile', 'change-password', 0);
        $scope.changePassword = function () {
            if (!$scope.userForm.$valid) {
                return;
            }
            if ($scope.command.newPassword !== $scope.command.confirmNew) {
                $scope.appEvent('alert-warning', ['New passwords do not match', '']);
                return;
            }
            backendSrv.put('/api/user/password', $scope.command).then(function () {
                $location.path('profile');
            });
        };
    }
    return ChangePasswordCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('ChangePasswordCtrl', ChangePasswordCtrl);


/***/ }),

/***/ "./public/app/features/org/create_team_ctrl.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/org/create_team_ctrl.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var CreateTeamCtrl = /** @class */ (function () {
    /** @ngInject */
    function CreateTeamCtrl(backendSrv, $location, navModelSrv) {
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.navModel = navModelSrv.getNav('cfg', 'teams', 0);
    }
    CreateTeamCtrl.prototype.create = function () {
        var _this = this;
        var payload = {
            name: this.name,
            email: this.email,
        };
        this.backendSrv.post('/api/teams', payload).then(function (result) {
            if (result.teamId) {
                _this.$location.path('/org/teams/edit/' + result.teamId);
            }
        });
    };
    return CreateTeamCtrl;
}());
/* harmony default export */ __webpack_exports__["default"] = (CreateTeamCtrl);
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].controller('CreateTeamCtrl', CreateTeamCtrl);


/***/ }),

/***/ "./public/app/features/org/new_org_ctrl.ts":
/*!*************************************************!*\
  !*** ./public/app/features/org/new_org_ctrl.ts ***!
  \*************************************************/
/*! exports provided: NewOrgCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewOrgCtrl", function() { return NewOrgCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");


var NewOrgCtrl = /** @class */ (function () {
    /** @ngInject */
    function NewOrgCtrl($scope, $http, backendSrv, navModelSrv) {
        $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);
        $scope.newOrg = { name: '' };
        $scope.createOrg = function () {
            backendSrv.post('/api/orgs/', $scope.newOrg).then(function (result) {
                backendSrv.post('/api/user/using/' + result.orgId).then(function () {
                    window.location.href = app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/org';
                });
            });
        };
    }
    return NewOrgCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('NewOrgCtrl', NewOrgCtrl);


/***/ }),

/***/ "./public/app/features/org/org_details_ctrl.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/org/org_details_ctrl.ts ***!
  \*****************************************************/
/*! exports provided: OrgDetailsCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrgDetailsCtrl", function() { return OrgDetailsCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);

var OrgDetailsCtrl = /** @class */ (function () {
    /** @ngInject */
    function OrgDetailsCtrl($scope, $http, backendSrv, contextSrv, navModelSrv) {
        $scope.init = function () {
            $scope.getOrgInfo();
            $scope.navModel = navModelSrv.getNav('cfg', 'org-settings', 0);
        };
        $scope.getOrgInfo = function () {
            backendSrv.get('/api/org').then(function (org) {
                $scope.org = org;
                $scope.address = org.address;
                contextSrv.user.orgName = org.name;
            });
        };
        $scope.update = function () {
            if (!$scope.orgForm.$valid) {
                return;
            }
            var data = { name: $scope.org.name };
            backendSrv.put('/api/org', data).then($scope.getOrgInfo);
        };
        $scope.updateAddress = function () {
            if (!$scope.addressForm.$valid) {
                return;
            }
            backendSrv.put('/api/org/address', $scope.address).then($scope.getOrgInfo);
        };
        $scope.init();
    }
    return OrgDetailsCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('OrgDetailsCtrl', OrgDetailsCtrl);


/***/ }),

/***/ "./public/app/features/org/org_users_ctrl.ts":
/*!***************************************************!*\
  !*** ./public/app/features/org/org_users_ctrl.ts ***!
  \***************************************************/
/*! exports provided: OrgUsersCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrgUsersCtrl", function() { return OrgUsersCtrl; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remarkable */ "./node_modules/remarkable/index.js");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(remarkable__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);




var OrgUsersCtrl = /** @class */ (function () {
    /** @ngInject */
    function OrgUsersCtrl($scope, backendSrv, navModelSrv, $sce) {
        this.$scope = $scope;
        this.backendSrv = backendSrv;
        this.navModel = navModelSrv.getNav('cfg', 'users', 0);
        this.get();
        this.externalUserMngLinkUrl = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].externalUserMngLinkUrl;
        this.externalUserMngLinkName = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].externalUserMngLinkName;
        this.canInvite = !app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].disableLoginForm && !app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].externalUserMngLinkName;
        // render external user management info markdown
        if (app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].externalUserMngInfo) {
            this.externalUserMngInfo = new remarkable__WEBPACK_IMPORTED_MODULE_2___default.a({
                linkTarget: '__blank',
            }).render(app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].externalUserMngInfo);
        }
    }
    OrgUsersCtrl.prototype.get = function () {
        var _this = this;
        this.backendSrv.get('/api/org/users').then(function (users) {
            _this.users = users;
            _this.unfiltered = users;
        });
        this.backendSrv.get('/api/org/invites').then(function (pendingInvites) {
            _this.pendingInvites = pendingInvites;
        });
    };
    OrgUsersCtrl.prototype.onQueryUpdated = function () {
        var regex = new RegExp(this.searchQuery, 'ig');
        this.users = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.filter(this.unfiltered, function (item) {
            return regex.test(item.email) || regex.test(item.login);
        });
    };
    OrgUsersCtrl.prototype.updateOrgUser = function (user) {
        this.backendSrv.patch('/api/org/users/' + user.userId, user);
    };
    OrgUsersCtrl.prototype.removeUser = function (user) {
        var _this = this;
        this.$scope.appEvent('confirm-modal', {
            title: 'Delete',
            text: 'Are you sure you want to delete user ' + user.login + '?',
            yesText: 'Delete',
            icon: 'fa-warning',
            onConfirm: function () {
                _this.removeUserConfirmed(user);
            },
        });
    };
    OrgUsersCtrl.prototype.removeUserConfirmed = function (user) {
        this.backendSrv.delete('/api/org/users/' + user.userId).then(this.get.bind(this));
    };
    OrgUsersCtrl.prototype.revokeInvite = function (invite, evt) {
        evt.stopPropagation();
        this.backendSrv.patch('/api/org/invites/' + invite.code + '/revoke').then(this.get.bind(this));
    };
    OrgUsersCtrl.prototype.copyInviteToClipboard = function (evt) {
        evt.stopPropagation();
    };
    OrgUsersCtrl.prototype.getInviteUrl = function (invite) {
        return invite.url;
    };
    return OrgUsersCtrl;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].controller('OrgUsersCtrl', OrgUsersCtrl);


/***/ }),

/***/ "./public/app/features/org/prefs_control.ts":
/*!**************************************************!*\
  !*** ./public/app/features/org/prefs_control.ts ***!
  \**************************************************/
/*! exports provided: PrefsControlCtrl, prefsControlDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrefsControlCtrl", function() { return PrefsControlCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prefsControlDirective", function() { return prefsControlDirective; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");


var PrefsControlCtrl = /** @class */ (function () {
    /** @ngInject */
    function PrefsControlCtrl(backendSrv, $location) {
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.timezones = [
            { value: '', text: 'Default' },
            { value: 'browser', text: 'Local browser time' },
            { value: 'utc', text: 'UTC' },
        ];
        this.themes = [{ value: '', text: 'Default' }, { value: 'dark', text: 'Dark' }, { value: 'light', text: 'Light' }];
    }
    PrefsControlCtrl.prototype.$onInit = function () {
        var _this = this;
        return this.backendSrv.get("/api/" + this.mode + "/preferences").then(function (prefs) {
            _this.prefs = prefs;
            _this.oldTheme = prefs.theme;
        });
    };
    PrefsControlCtrl.prototype.updatePrefs = function () {
        var _this = this;
        if (!this.prefsForm.$valid) {
            return;
        }
        var cmd = {
            theme: this.prefs.theme,
            timezone: this.prefs.timezone,
            homeDashboardId: this.prefs.homeDashboardId,
        };
        this.backendSrv.put("/api/" + this.mode + "/preferences", cmd).then(function () {
            window.location.href = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].appSubUrl + _this.$location.path();
        });
    };
    return PrefsControlCtrl;
}());

var template = "\n<form name=\"ctrl.prefsForm\" class=\"section gf-form-group\">\n  <h3 class=\"page-heading\">Preferences</h3>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">UI Theme</span>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.theme\" ng-options=\"f.value as f.text for f in ctrl.themes\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">\n      Home Dashboard\n      <info-popover mode=\"right-normal\">\n        Not finding dashboard you want? Star it first, then it should appear in this select box.\n      </info-popover>\n    </span>\n    <dashboard-selector class=\"gf-form-select-wrapper max-width-20\" model=\"ctrl.prefs.homeDashboardId\">\n    </dashboard-selector>\n  </div>\n\n  <div class=\"gf-form\">\n    <label class=\"gf-form-label width-11\">Timezone</label>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.timezone\" ng-options=\"f.value as f.text for f in ctrl.timezones\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form-button-row\">\n    <button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.updatePrefs()\">Save</button>\n  </div>\n</form>\n";
function prefsControlDirective() {
    return {
        restrict: 'E',
        controller: PrefsControlCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        template: template,
        scope: {
            mode: '@',
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].directive('prefsControl', prefsControlDirective);


/***/ }),

/***/ "./public/app/features/org/profile_ctrl.ts":
/*!*************************************************!*\
  !*** ./public/app/features/org/profile_ctrl.ts ***!
  \*************************************************/
/*! exports provided: ProfileCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileCtrl", function() { return ProfileCtrl; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");


var ProfileCtrl = /** @class */ (function () {
    /** @ngInject */
    function ProfileCtrl(backendSrv, contextSrv, $location, navModelSrv) {
        this.backendSrv = backendSrv;
        this.contextSrv = contextSrv;
        this.$location = $location;
        this.teams = [];
        this.orgs = [];
        this.showTeamsList = false;
        this.showOrgsList = false;
        this.readonlyLoginFields = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].disableLoginForm;
        this.getUser();
        this.getUserTeams();
        this.getUserOrgs();
        this.navModel = navModelSrv.getNav('profile', 'profile-settings', 0);
    }
    ProfileCtrl.prototype.getUser = function () {
        var _this = this;
        this.backendSrv.get('/api/user').then(function (user) {
            _this.user = user;
            _this.user.theme = user.theme || 'dark';
        });
    };
    ProfileCtrl.prototype.getUserTeams = function () {
        var _this = this;
        this.backendSrv.get('/api/user/teams').then(function (teams) {
            _this.teams = teams;
            _this.showTeamsList = _this.teams.length > 0;
        });
    };
    ProfileCtrl.prototype.getUserOrgs = function () {
        var _this = this;
        this.backendSrv.get('/api/user/orgs').then(function (orgs) {
            _this.orgs = orgs;
            _this.showOrgsList = orgs.length > 1;
        });
    };
    ProfileCtrl.prototype.setUsingOrg = function (org) {
        this.backendSrv.post('/api/user/using/' + org.orgId).then(function () {
            window.location.href = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].appSubUrl + '/profile';
        });
    };
    ProfileCtrl.prototype.update = function () {
        var _this = this;
        if (!this.userForm.$valid) {
            return;
        }
        this.backendSrv.put('/api/user/', this.user).then(function () {
            _this.contextSrv.user.name = _this.user.name || _this.user.login;
            if (_this.oldTheme !== _this.user.theme) {
                window.location.href = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].appSubUrl + _this.$location.path();
            }
        });
    };
    return ProfileCtrl;
}());

app_core_core__WEBPACK_IMPORTED_MODULE_1__["coreModule"].controller('ProfileCtrl', ProfileCtrl);


/***/ }),

/***/ "./public/app/features/org/select_org_ctrl.ts":
/*!****************************************************!*\
  !*** ./public/app/features/org/select_org_ctrl.ts ***!
  \****************************************************/
/*! exports provided: SelectOrgCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectOrgCtrl", function() { return SelectOrgCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");


var SelectOrgCtrl = /** @class */ (function () {
    /** @ngInject */
    function SelectOrgCtrl($scope, backendSrv, contextSrv) {
        contextSrv.sidemenu = false;
        $scope.navModel = {
            main: {
                icon: 'gicon gicon-branding',
                subTitle: 'Preferences',
                text: 'Select active organization',
            },
        };
        $scope.init = function () {
            $scope.getUserOrgs();
        };
        $scope.getUserOrgs = function () {
            backendSrv.get('/api/user/orgs').then(function (orgs) {
                $scope.orgs = orgs;
            });
        };
        $scope.setUsingOrg = function (org) {
            backendSrv.post('/api/user/using/' + org.orgId).then(function () {
                window.location.href = app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].appSubUrl + '/';
            });
        };
        $scope.init();
    }
    return SelectOrgCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('SelectOrgCtrl', SelectOrgCtrl);


/***/ }),

/***/ "./public/app/features/org/user_invite_ctrl.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/org/user_invite_ctrl.ts ***!
  \*****************************************************/
/*! exports provided: UserInviteCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserInviteCtrl", function() { return UserInviteCtrl; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var UserInviteCtrl = /** @class */ (function () {
    /** @ngInject */
    function UserInviteCtrl(backendSrv, navModelSrv, $location) {
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.navModel = navModelSrv.getNav('cfg', 'users', 0);
        this.invite = {
            name: '',
            email: '',
            role: 'Editor',
            sendEmail: true,
        };
    }
    UserInviteCtrl.prototype.sendInvite = function () {
        var _this = this;
        if (!this.inviteForm.$valid) {
            return;
        }
        return this.backendSrv.post('/api/org/invites', this.invite).then(function () {
            _this.$location.path('org/users/');
        });
    };
    return UserInviteCtrl;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].controller('UserInviteCtrl', UserInviteCtrl);


/***/ }),

/***/ "./public/app/features/panel/all.ts":
/*!******************************************!*\
  !*** ./public/app/features/panel/all.ts ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _panel_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./panel_header */ "./public/app/features/panel/panel_header.ts");
/* harmony import */ var _panel_directive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panel_directive */ "./public/app/features/panel/panel_directive.ts");
/* harmony import */ var _solo_panel_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solo_panel_ctrl */ "./public/app/features/panel/solo_panel_ctrl.ts");
/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/features/panel/query_ctrl.ts");
/* harmony import */ var _panel_editor_tab__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./panel_editor_tab */ "./public/app/features/panel/panel_editor_tab.ts");
/* harmony import */ var _query_editor_row__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_editor_row */ "./public/app/features/panel/query_editor_row.ts");
/* harmony import */ var _query_troubleshooter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./query_troubleshooter */ "./public/app/features/panel/query_troubleshooter.ts");









/***/ }),

/***/ "./public/app/features/panel/metrics_panel_ctrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/panel/metrics_panel_ctrl.ts ***!
  \*********************************************************/
/*! exports provided: MetricsPanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetricsPanelCtrl", function() { return MetricsPanelCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/features/panel/panel_ctrl */ "./public/app/features/panel/panel_ctrl.ts");
/* harmony import */ var app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/utils/rangeutil */ "./public/app/core/utils/rangeutil.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var app_core_utils_explore__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/core/utils/explore */ "./public/app/core/utils/explore.ts");
/* harmony import */ var _metrics_tab__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./metrics_tab */ "./public/app/features/panel/metrics_tab.ts");










var MetricsPanelCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MetricsPanelCtrl, _super);
    function MetricsPanelCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        // make metrics tab the default
        _this.editorTabIndex = 1;
        _this.$q = $injector.get('$q');
        _this.contextSrv = $injector.get('contextSrv');
        _this.datasourceSrv = $injector.get('datasourceSrv');
        _this.timeSrv = $injector.get('timeSrv');
        _this.templateSrv = $injector.get('templateSrv');
        _this.scope = $scope;
        _this.panel.datasource = _this.panel.datasource || null;
        if (!_this.panel.targets) {
            _this.panel.targets = [{}];
        }
        _this.events.on('refresh', _this.onMetricsPanelRefresh.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitMetricsPanelEditMode.bind(_this));
        _this.events.on('panel-teardown', _this.onPanelTearDown.bind(_this));
        return _this;
    }
    MetricsPanelCtrl.prototype.onPanelTearDown = function () {
        if (this.dataSubscription) {
            this.dataSubscription.unsubscribe();
            this.dataSubscription = null;
        }
    };
    MetricsPanelCtrl.prototype.onInitMetricsPanelEditMode = function () {
        this.addEditorTab('Metrics', _metrics_tab__WEBPACK_IMPORTED_MODULE_9__["metricsTabDirective"]);
        this.addEditorTab('Time range', 'public/app/features/panel/partials/panelTime.html');
    };
    MetricsPanelCtrl.prototype.onMetricsPanelRefresh = function () {
        var _this = this;
        // ignore fetching data if another panel is in fullscreen
        if (this.otherPanelInFullscreenMode()) {
            return;
        }
        // if we have snapshot data use that
        if (this.panel.snapshotData) {
            this.updateTimeRange();
            var data_1 = this.panel.snapshotData;
            // backward compatibility
            if (!lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isArray(data_1)) {
                data_1 = data_1.data;
            }
            // Defer panel rendering till the next digest cycle.
            // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.
            return this.$timeout(function () {
                _this.events.emit('data-snapshot-load', data_1);
            });
        }
        // // ignore if we have data stream
        if (this.dataStream) {
            return;
        }
        // clear loading/error state
        delete this.error;
        this.loading = true;
        // load datasource service
        this.setTimeQueryStart();
        this.datasourceSrv
            .get(this.panel.datasource)
            .then(this.updateTimeRange.bind(this))
            .then(this.issueQueries.bind(this))
            .then(this.handleQueryResult.bind(this))
            .catch(function (err) {
            // if cancelled  keep loading set to true
            if (err.cancelled) {
                console.log('Panel request cancelled', err);
                return;
            }
            _this.loading = false;
            _this.error = err.message || 'Request Error';
            _this.inspector = { error: err };
            if (err.data) {
                if (err.data.message) {
                    _this.error = err.data.message;
                }
                if (err.data.error) {
                    _this.error = err.data.error;
                }
            }
            _this.events.emit('data-error', err);
            console.log('Panel data error:', err);
        });
    };
    MetricsPanelCtrl.prototype.setTimeQueryStart = function () {
        this.timing.queryStart = new Date().getTime();
    };
    MetricsPanelCtrl.prototype.setTimeQueryEnd = function () {
        this.timing.queryEnd = new Date().getTime();
    };
    MetricsPanelCtrl.prototype.updateTimeRange = function (datasource) {
        this.datasource = datasource || this.datasource;
        this.range = this.timeSrv.timeRange();
        this.applyPanelTimeOverrides();
        if (this.panel.maxDataPoints) {
            this.resolution = this.panel.maxDataPoints;
        }
        else {
            this.resolution = Math.ceil(jquery__WEBPACK_IMPORTED_MODULE_1___default()(window).width() * (this.panel.gridPos.w / 24));
        }
        this.calculateInterval();
        return this.datasource;
    };
    MetricsPanelCtrl.prototype.calculateInterval = function () {
        var intervalOverride = this.panel.interval;
        // if no panel interval check datasource
        if (intervalOverride) {
            intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);
        }
        else if (this.datasource && this.datasource.interval) {
            intervalOverride = this.datasource.interval;
        }
        var res = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__["default"].calculateInterval(this.range, this.resolution, intervalOverride);
        this.interval = res.interval;
        this.intervalMs = res.intervalMs;
    };
    MetricsPanelCtrl.prototype.applyPanelTimeOverrides = function () {
        this.timeInfo = '';
        // check panel time overrrides
        if (this.panel.timeFrom) {
            var timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);
            var timeFromInfo = app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_6__["describeTextRange"](timeFromInterpolated);
            if (timeFromInfo.invalid) {
                this.timeInfo = 'invalid time override';
                return;
            }
            if (lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isString(this.range.raw.from)) {
                var timeFromDate = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_7__["parse"](timeFromInfo.from);
                this.timeInfo = timeFromInfo.display;
                this.range.from = timeFromDate;
                this.range.to = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_7__["parse"](timeFromInfo.to);
                this.range.raw.from = timeFromInfo.from;
                this.range.raw.to = timeFromInfo.to;
            }
        }
        if (this.panel.timeShift) {
            var timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);
            var timeShiftInfo = app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_6__["describeTextRange"](timeShiftInterpolated);
            if (timeShiftInfo.invalid) {
                this.timeInfo = 'invalid timeshift';
                return;
            }
            var timeShift = '-' + timeShiftInterpolated;
            this.timeInfo += ' timeshift ' + timeShift;
            this.range.from = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_7__["parseDateMath"](timeShift, this.range.from, false);
            this.range.to = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_7__["parseDateMath"](timeShift, this.range.to, true);
            this.range.raw = { from: this.range.from, to: this.range.to };
        }
        if (this.panel.hideTimeOverride) {
            this.timeInfo = '';
        }
    };
    MetricsPanelCtrl.prototype.issueQueries = function (datasource) {
        this.datasource = datasource;
        if (!this.panel.targets || this.panel.targets.length === 0) {
            return this.$q.when([]);
        }
        // make shallow copy of scoped vars,
        // and add built in variables interval and interval_ms
        var scopedVars = Object.assign({}, this.panel.scopedVars, {
            __interval: { text: this.interval, value: this.interval },
            __interval_ms: { text: this.intervalMs, value: this.intervalMs },
        });
        var metricsQuery = {
            timezone: this.dashboard.getTimezone(),
            panelId: this.panel.id,
            dashboardId: this.dashboard.id,
            range: this.range,
            rangeRaw: this.range.raw,
            interval: this.interval,
            intervalMs: this.intervalMs,
            targets: this.panel.targets,
            maxDataPoints: this.resolution,
            scopedVars: scopedVars,
            cacheTimeout: this.panel.cacheTimeout,
        };
        return datasource.query(metricsQuery);
    };
    MetricsPanelCtrl.prototype.handleQueryResult = function (result) {
        this.setTimeQueryEnd();
        this.loading = false;
        // check for if data source returns subject
        if (result && result.subscribe) {
            this.handleDataStream(result);
            return;
        }
        if (this.dashboard.snapshot) {
            this.panel.snapshotData = result.data;
        }
        if (!result || !result.data) {
            console.log('Data source query result invalid, missing data field:', result);
            result = { data: [] };
        }
        this.events.emit('data-received', result.data);
    };
    MetricsPanelCtrl.prototype.handleDataStream = function (stream) {
        var _this = this;
        // if we already have a connection
        if (this.dataStream) {
            console.log('two stream observables!');
            return;
        }
        this.dataStream = stream;
        this.dataSubscription = stream.subscribe({
            next: function (data) {
                console.log('dataSubject next!');
                if (data.range) {
                    _this.range = data.range;
                }
                _this.events.emit('data-received', data.data);
            },
            error: function (error) {
                _this.events.emit('data-error', error);
                console.log('panel: observer got error');
            },
            complete: function () {
                console.log('panel: observer got complete');
                _this.dataStream = null;
            },
        });
    };
    MetricsPanelCtrl.prototype.setDatasource = function (datasource) {
        var _this = this;
        // switching to mixed
        if (datasource.meta.mixed) {
            lodash__WEBPACK_IMPORTED_MODULE_2___default.a.each(this.panel.targets, function (target) {
                target.datasource = _this.panel.datasource;
                if (!target.datasource) {
                    target.datasource = app_core_config__WEBPACK_IMPORTED_MODULE_3__["default"].defaultDatasource;
                }
            });
        }
        else if (this.datasource && this.datasource.meta.mixed) {
            lodash__WEBPACK_IMPORTED_MODULE_2___default.a.each(this.panel.targets, function (target) {
                delete target.datasource;
            });
        }
        this.panel.datasource = datasource.value;
        this.datasourceName = datasource.name;
        this.datasource = null;
        this.refresh();
    };
    MetricsPanelCtrl.prototype.getAdditionalMenuItems = function () {
        var items = [];
        if (app_core_config__WEBPACK_IMPORTED_MODULE_3__["default"].exploreEnabled &&
            this.contextSrv.isEditor &&
            this.datasource &&
            (this.datasource.meta.explore || this.datasource.meta.id === 'mixed')) {
            items.push({
                text: 'Explore',
                click: 'ctrl.explore();',
                icon: 'fa fa-fw fa-rocket',
                shortcut: 'x',
            });
        }
        return items;
    };
    MetricsPanelCtrl.prototype.explore = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var url;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Object(app_core_utils_explore__WEBPACK_IMPORTED_MODULE_8__["getExploreUrl"])(this.panel, this.panel.targets, this.datasource, this.datasourceSrv, this.timeSrv)];
                    case 1:
                        url = _a.sent();
                        if (url) {
                            this.$timeout(function () { return _this.$location.url(url); });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MetricsPanelCtrl.prototype.addQuery = function (target) {
        target.refId = this.dashboard.getNextQueryLetter(this.panel);
        this.panel.targets.push(target);
        this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);
    };
    MetricsPanelCtrl.prototype.removeQuery = function (target) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.indexOf(this.panel.targets, target);
        this.panel.targets.splice(index, 1);
        this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);
        this.refresh();
    };
    MetricsPanelCtrl.prototype.moveQuery = function (target, direction) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.indexOf(this.panel.targets, target);
        lodash__WEBPACK_IMPORTED_MODULE_2___default.a.move(this.panel.targets, index, index + direction);
    };
    return MetricsPanelCtrl;
}(app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_5__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/features/panel/metrics_tab.ts":
/*!**************************************************!*\
  !*** ./public/app/features/panel/metrics_tab.ts ***!
  \**************************************************/
/*! exports provided: MetricsTabCtrl, metricsTabDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetricsTabCtrl", function() { return MetricsTabCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "metricsTabDirective", function() { return metricsTabDirective; });
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! remarkable */ "./node_modules/remarkable/index.js");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(remarkable__WEBPACK_IMPORTED_MODULE_0__);

var MetricsTabCtrl = /** @class */ (function () {
    /** @ngInject */
    function MetricsTabCtrl($scope, $sce, datasourceSrv, backendSrv) {
        this.$sce = $sce;
        this.backendSrv = backendSrv;
        this.panelCtrl = $scope.ctrl;
        $scope.ctrl = this;
        this.panel = this.panelCtrl.panel;
        this.dashboard = this.panelCtrl.dashboard;
        this.datasources = datasourceSrv.getMetricSources();
        this.panelDsValue = this.panelCtrl.panel.datasource;
        for (var _i = 0, _a = this.datasources; _i < _a.length; _i++) {
            var ds = _a[_i];
            if (ds.value === this.panelDsValue) {
                this.datasourceInstance = ds;
            }
        }
        this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };
        // update next ref id
        this.panelCtrl.nextRefId = this.dashboard.getNextQueryLetter(this.panel);
        this.updateDatasourceOptions();
    }
    MetricsTabCtrl.prototype.updateDatasourceOptions = function () {
        if (this.datasourceInstance) {
            this.hasQueryHelp = this.datasourceInstance.meta.hasQueryHelp;
            this.queryOptions = this.datasourceInstance.meta.queryOptions;
        }
    };
    MetricsTabCtrl.prototype.getOptions = function (includeBuiltin) {
        return Promise.resolve(this.datasources
            .filter(function (value) {
            return includeBuiltin || !value.meta.builtIn;
        })
            .map(function (ds) {
            return { value: ds.value, text: ds.name, datasource: ds };
        }));
    };
    MetricsTabCtrl.prototype.datasourceChanged = function (option) {
        if (!option) {
            return;
        }
        this.datasourceInstance = option.datasource;
        this.panelCtrl.setDatasource(option.datasource);
        this.updateDatasourceOptions();
    };
    MetricsTabCtrl.prototype.addMixedQuery = function (option) {
        if (!option) {
            return;
        }
        this.panelCtrl.addQuery({
            isNew: true,
            datasource: option.datasource.name,
        });
        this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };
    };
    MetricsTabCtrl.prototype.addQuery = function () {
        this.panelCtrl.addQuery({ isNew: true });
    };
    MetricsTabCtrl.prototype.toggleHelp = function () {
        var _this = this;
        this.optionsOpen = false;
        this.queryTroubleshooterOpen = false;
        this.helpOpen = !this.helpOpen;
        this.backendSrv.get("/api/plugins/" + this.datasourceInstance.meta.id + "/markdown/query_help").then(function (res) {
            var md = new remarkable__WEBPACK_IMPORTED_MODULE_0___default.a();
            _this.helpHtml = _this.$sce.trustAsHtml(md.render(res));
        });
    };
    MetricsTabCtrl.prototype.toggleOptions = function () {
        this.helpOpen = false;
        this.queryTroubleshooterOpen = false;
        this.optionsOpen = !this.optionsOpen;
    };
    MetricsTabCtrl.prototype.toggleQueryTroubleshooter = function () {
        this.helpOpen = false;
        this.optionsOpen = false;
        this.queryTroubleshooterOpen = !this.queryTroubleshooterOpen;
    };
    return MetricsTabCtrl;
}());

/** @ngInject */
function metricsTabDirective() {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/features/panel/partials/metrics_tab.html',
        controller: MetricsTabCtrl,
    };
}


/***/ }),

/***/ "./public/app/features/panel/panel_ctrl.ts":
/*!*************************************************!*\
  !*** ./public/app/features/panel/panel_ctrl.ts ***!
  \*************************************************/
/*! exports provided: PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return PanelCtrl; });
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_features_dashboard_panel_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/features/dashboard/panel_model */ "./public/app/features/dashboard/panel_model.ts");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remarkable */ "./node_modules/remarkable/index.js");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(remarkable__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var app_core_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/constants */ "./public/app/core/constants.ts");
/* harmony import */ var app_core_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/store */ "./public/app/core/store.ts");








var TITLE_HEIGHT = 27;
var PANEL_BORDER = 2;
var PanelCtrl = /** @class */ (function () {
    function PanelCtrl($scope, $injector) {
        var _this = this;
        this.$injector = $injector;
        this.$location = $injector.get('$location');
        this.$scope = $scope;
        this.$timeout = $injector.get('$timeout');
        this.editorTabIndex = 0;
        this.events = this.panel.events;
        this.timing = {};
        var plugin = app_core_config__WEBPACK_IMPORTED_MODULE_0__["default"].panels[this.panel.type];
        if (plugin) {
            this.pluginId = plugin.id;
            this.pluginName = plugin.name;
        }
        $scope.$on('refresh', function () { return _this.refresh(); });
        $scope.$on('component-did-mount', function () { return _this.panelDidMount(); });
        $scope.$on('$destroy', function () {
            _this.events.emit('panel-teardown');
            _this.events.removeAllListeners();
        });
    }
    PanelCtrl.prototype.init = function () {
        this.events.emit('panel-initialized');
        this.publishAppEvent('panel-initialized', { scope: this.$scope });
    };
    PanelCtrl.prototype.panelDidMount = function () {
        this.events.emit('component-did-mount');
    };
    PanelCtrl.prototype.renderingCompleted = function () {
        app_core_core__WEBPACK_IMPORTED_MODULE_3__["profiler"].renderingCompleted(this.panel.id, this.timing);
    };
    PanelCtrl.prototype.refresh = function () {
        this.events.emit('refresh', null);
    };
    PanelCtrl.prototype.publishAppEvent = function (evtName, evt) {
        this.$scope.$root.appEvent(evtName, evt);
    };
    PanelCtrl.prototype.changeView = function (fullscreen, edit) {
        this.publishAppEvent('panel-change-view', {
            fullscreen: fullscreen,
            edit: edit,
            panelId: this.panel.id,
        });
    };
    PanelCtrl.prototype.viewPanel = function () {
        this.changeView(true, false);
    };
    PanelCtrl.prototype.editPanel = function () {
        this.changeView(true, true);
    };
    PanelCtrl.prototype.exitFullscreen = function () {
        this.changeView(false, false);
    };
    PanelCtrl.prototype.initEditMode = function () {
        var _this = this;
        this.editorTabs = [];
        this.addEditorTab('General', 'public/app/partials/panelgeneral.html');
        this.editModeInitiated = true;
        this.events.emit('init-edit-mode', null);
        var urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();
        if (urlTab) {
            this.editorTabs.forEach(function (tab, i) {
                if (tab.title.toLowerCase() === urlTab) {
                    _this.editorTabIndex = i;
                }
            });
        }
    };
    PanelCtrl.prototype.changeTab = function (newIndex) {
        this.editorTabIndex = newIndex;
        var route = this.$injector.get('$route');
        route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();
        route.updateParams();
    };
    PanelCtrl.prototype.addEditorTab = function (title, directiveFn, index) {
        var editorTab = { title: title, directiveFn: directiveFn };
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(directiveFn)) {
            editorTab.directiveFn = function () {
                return { templateUrl: directiveFn };
            };
        }
        if (index) {
            this.editorTabs.splice(index, 0, editorTab);
        }
        else {
            this.editorTabs.push(editorTab);
        }
    };
    PanelCtrl.prototype.getMenu = function () {
        var menu = [];
        menu.push({
            text: 'View',
            click: 'ctrl.viewPanel();',
            icon: 'fa fa-fw fa-eye',
            shortcut: 'v',
        });
        if (this.dashboard.meta.canEdit) {
            menu.push({
                text: 'Edit',
                click: 'ctrl.editPanel();',
                role: 'Editor',
                icon: 'fa fa-fw fa-edit',
                shortcut: 'e',
            });
        }
        menu.push({
            text: 'Share',
            click: 'ctrl.sharePanel();',
            icon: 'fa fa-fw fa-share',
            shortcut: 'p s',
        });
        // Additional items from sub-class
        menu.push.apply(menu, this.getAdditionalMenuItems());
        var extendedMenu = this.getExtendedMenu();
        menu.push({
            text: 'More ...',
            click: '',
            icon: 'fa fa-fw fa-cube',
            submenu: extendedMenu,
        });
        if (this.dashboard.meta.canEdit) {
            menu.push({ divider: true, role: 'Editor' });
            menu.push({
                text: 'Remove',
                click: 'ctrl.removePanel();',
                role: 'Editor',
                icon: 'fa fa-fw fa-trash',
                shortcut: 'p r',
            });
        }
        return menu;
    };
    PanelCtrl.prototype.getExtendedMenu = function () {
        var menu = [];
        if (!this.fullscreen && this.dashboard.meta.canEdit) {
            menu.push({
                text: 'Duplicate',
                click: 'ctrl.duplicate()',
                role: 'Editor',
                shortcut: 'p d',
            });
            menu.push({
                text: 'Copy',
                click: 'ctrl.copyPanel()',
                role: 'Editor',
            });
        }
        menu.push({
            text: 'Panel JSON',
            click: 'ctrl.editPanelJson(); dismiss();',
        });
        this.events.emit('init-panel-actions', menu);
        return menu;
    };
    // Override in sub-class to add items before extended menu
    PanelCtrl.prototype.getAdditionalMenuItems = function () {
        return [];
    };
    PanelCtrl.prototype.otherPanelInFullscreenMode = function () {
        return this.dashboard.meta.fullscreen && !this.fullscreen;
    };
    PanelCtrl.prototype.calculatePanelHeight = function () {
        if (this.fullscreen) {
            var docHeight = jquery__WEBPACK_IMPORTED_MODULE_2___default()(window).height();
            var editHeight = Math.floor(docHeight * 0.4);
            var fullscreenHeight = Math.floor(docHeight * 0.8);
            this.containerHeight = this.editMode ? editHeight : fullscreenHeight;
        }
        else {
            this.containerHeight = this.panel.gridPos.h * app_core_constants__WEBPACK_IMPORTED_MODULE_6__["GRID_CELL_HEIGHT"] + (this.panel.gridPos.h - 1) * app_core_constants__WEBPACK_IMPORTED_MODULE_6__["GRID_CELL_VMARGIN"];
        }
        if (this.panel.soloMode) {
            this.containerHeight = jquery__WEBPACK_IMPORTED_MODULE_2___default()(window).height();
        }
        this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);
    };
    PanelCtrl.prototype.render = function (payload) {
        this.timing.renderStart = new Date().getTime();
        this.events.emit('render', payload);
    };
    PanelCtrl.prototype.duplicate = function () {
        var _this = this;
        this.dashboard.duplicatePanel(this.panel);
        this.$timeout(function () {
            _this.$scope.$root.$broadcast('render');
        });
    };
    PanelCtrl.prototype.removePanel = function () {
        this.publishAppEvent('panel-remove', {
            panelId: this.panel.id,
        });
    };
    PanelCtrl.prototype.editPanelJson = function () {
        var editScope = this.$scope.$root.$new();
        editScope.object = this.panel.getSaveModel();
        editScope.updateHandler = this.replacePanel.bind(this);
        editScope.enableCopy = true;
        this.publishAppEvent('show-modal', {
            src: 'public/app/partials/edit_json.html',
            scope: editScope,
        });
    };
    PanelCtrl.prototype.copyPanel = function () {
        app_core_store__WEBPACK_IMPORTED_MODULE_7__["default"].set(app_core_constants__WEBPACK_IMPORTED_MODULE_6__["LS_PANEL_COPY_KEY"], JSON.stringify(this.panel.getSaveModel()));
        app_core_core__WEBPACK_IMPORTED_MODULE_3__["appEvents"].emit('alert-success', ['Panel copied. Open Add Panel to paste']);
    };
    PanelCtrl.prototype.replacePanel = function (newPanel, oldPanel) {
        var dashboard = this.dashboard;
        var index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.findIndex(dashboard.panels, function (panel) {
            return panel.id === oldPanel.id;
        });
        var deletedPanel = dashboard.panels.splice(index, 1);
        this.dashboard.events.emit('panel-removed', deletedPanel);
        newPanel = new app_features_dashboard_panel_model__WEBPACK_IMPORTED_MODULE_4__["PanelModel"](newPanel);
        newPanel.id = oldPanel.id;
        dashboard.panels.splice(index, 0, newPanel);
        dashboard.sortPanelsByGridPos();
        dashboard.events.emit('panel-added', newPanel);
    };
    PanelCtrl.prototype.sharePanel = function () {
        var shareScope = this.$scope.$new();
        shareScope.panel = this.panel;
        shareScope.dashboard = this.dashboard;
        this.publishAppEvent('show-modal', {
            src: 'public/app/features/dashboard/partials/shareModal.html',
            scope: shareScope,
        });
    };
    PanelCtrl.prototype.getInfoMode = function () {
        if (this.error) {
            return 'error';
        }
        if (!!this.panel.description) {
            return 'info';
        }
        if (this.panel.links && this.panel.links.length) {
            return 'links';
        }
        return '';
    };
    PanelCtrl.prototype.getInfoContent = function (options) {
        var markdown = this.panel.description;
        if (options.mode === 'tooltip') {
            markdown = this.error || this.panel.description;
        }
        var linkSrv = this.$injector.get('linkSrv');
        var sanitize = this.$injector.get('$sanitize');
        var templateSrv = this.$injector.get('templateSrv');
        var interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);
        var html = '<div class="markdown-html">';
        html += new remarkable__WEBPACK_IMPORTED_MODULE_5___default.a().render(interpolatedMarkdown);
        if (this.panel.links && this.panel.links.length > 0) {
            html += '<ul>';
            for (var _i = 0, _a = this.panel.links; _i < _a.length; _i++) {
                var link = _a[_i];
                var info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);
                html +=
                    '<li><a class="panel-menu-link" href="' +
                        info.href +
                        '" target="' +
                        info.target +
                        '">' +
                        info.title +
                        '</a></li>';
            }
            html += '</ul>';
        }
        html += '</div>';
        return sanitize(html);
    };
    PanelCtrl.prototype.openInspector = function () {
        var modalScope = this.$scope.$new();
        modalScope.panel = this.panel;
        modalScope.dashboard = this.dashboard;
        modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });
        modalScope.inspector = jquery__WEBPACK_IMPORTED_MODULE_2___default.a.extend(true, {}, this.inspector);
        this.publishAppEvent('show-modal', {
            src: 'public/app/features/dashboard/partials/inspector.html',
            scope: modalScope,
        });
    };
    return PanelCtrl;
}());



/***/ }),

/***/ "./public/app/features/panel/panel_directive.ts":
/*!******************************************************!*\
  !*** ./public/app/features/panel/panel_directive.ts ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tether-drop */ "./node_modules/tether-drop/dist/js/drop.js");
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tether_drop__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! baron */ "./node_modules/baron/src/core.js");
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(baron__WEBPACK_IMPORTED_MODULE_3__);




var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
var panelTemplate = "\n  <div class=\"panel-container\">\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\n      <span class=\"panel-info-corner\">\n        <i class=\"fa\"></i>\n        <span class=\"panel-info-corner-inner\"></span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h3 class=\"tabbed-view-panel-title\">\n          {{ctrl.pluginName}}\n        </h3>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n";
module.directive('grafanaPanel', function ($rootScope, $document, $timeout) {
    return {
        restrict: 'E',
        template: panelTemplate,
        transclude: true,
        scope: { ctrl: '=' },
        link: function (scope, elem) {
            var panelContainer = elem.find('.panel-container');
            var panelContent = elem.find('.panel-content');
            var cornerInfoElem = elem.find('.panel-info-corner');
            var ctrl = scope.ctrl;
            var infoDrop;
            var panelScrollbar;
            // the reason for handling these classes this way is for performance
            // limit the watchers on panels etc
            var transparentLastState = false;
            var lastHasAlertRule = false;
            var lastAlertState;
            var hasAlertRule;
            function mouseEnter() {
                panelContainer.toggleClass('panel-hover-highlight', true);
                ctrl.dashboard.setPanelFocus(ctrl.panel.id);
            }
            function mouseLeave() {
                panelContainer.toggleClass('panel-hover-highlight', false);
                ctrl.dashboard.setPanelFocus(0);
            }
            function panelHeightUpdated() {
                panelContent.css({ height: ctrl.height + 'px' });
            }
            function resizeScrollableContent() {
                if (panelScrollbar) {
                    panelScrollbar.update();
                }
            }
            // set initial transparency
            if (ctrl.panel.transparent) {
                transparentLastState = true;
                panelContainer.addClass('panel-transparent', true);
            }
            // update scrollbar after mounting
            ctrl.events.on('component-did-mount', function () {
                if (ctrl.__proto__.constructor.scrollable) {
                    var scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';
                    var scrollerClass = 'baron__scroller';
                    var scrollBarHTML = "\n            <div class=\"baron__track\">\n              <div class=\"baron__bar\"></div>\n            </div>\n          ";
                    var scrollRoot = panelContent;
                    var scroller = panelContent.find(':first').find(':first');
                    scrollRoot.addClass(scrollRootClass);
                    jquery__WEBPACK_IMPORTED_MODULE_1___default()(scrollBarHTML).appendTo(scrollRoot);
                    scroller.addClass(scrollerClass);
                    panelScrollbar = baron__WEBPACK_IMPORTED_MODULE_3___default()({
                        root: scrollRoot[0],
                        scroller: scroller[0],
                        bar: '.baron__bar',
                        barOnCls: '_scrollbar',
                        scrollingCls: '_scrolling',
                    });
                    panelScrollbar.scroll();
                }
            });
            ctrl.events.on('panel-size-changed', function () {
                ctrl.calculatePanelHeight();
                panelHeightUpdated();
                $timeout(function () {
                    resizeScrollableContent();
                    ctrl.render();
                });
            });
            // set initial height
            ctrl.calculatePanelHeight();
            panelHeightUpdated();
            ctrl.events.on('render', function () {
                if (transparentLastState !== ctrl.panel.transparent) {
                    panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);
                    transparentLastState = ctrl.panel.transparent;
                }
                hasAlertRule = ctrl.panel.alert !== undefined;
                if (lastHasAlertRule !== hasAlertRule) {
                    panelContainer.toggleClass('panel-has-alert', hasAlertRule);
                    lastHasAlertRule = hasAlertRule;
                }
                if (ctrl.alertState) {
                    if (lastAlertState) {
                        panelContainer.removeClass('panel-alert-state--' + lastAlertState);
                    }
                    if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {
                        panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);
                    }
                    lastAlertState = ctrl.alertState.state;
                }
                else if (lastAlertState) {
                    panelContainer.removeClass('panel-alert-state--' + lastAlertState);
                    lastAlertState = null;
                }
            });
            function updatePanelCornerInfo() {
                var cornerMode = ctrl.getInfoMode();
                cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;
                if (cornerMode) {
                    if (infoDrop) {
                        infoDrop.destroy();
                    }
                    infoDrop = new tether_drop__WEBPACK_IMPORTED_MODULE_2___default.a({
                        target: cornerInfoElem[0],
                        content: function () {
                            return ctrl.getInfoContent({ mode: 'tooltip' });
                        },
                        classes: ctrl.error ? 'drop-error' : 'drop-help',
                        openOn: 'hover',
                        hoverOpenDelay: 100,
                        tetherOptions: {
                            attachment: 'bottom left',
                            targetAttachment: 'top left',
                            constraints: [
                                {
                                    to: 'window',
                                    attachment: 'together',
                                    pin: true,
                                },
                            ],
                        },
                    });
                }
            }
            scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);
            scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);
            cornerInfoElem.on('click', function () {
                infoDrop.close();
                scope.$apply(ctrl.openInspector.bind(ctrl));
            });
            elem.on('mouseenter', mouseEnter);
            elem.on('mouseleave', mouseLeave);
            scope.$on('$destroy', function () {
                elem.off();
                cornerInfoElem.off();
                if (infoDrop) {
                    infoDrop.destroy();
                }
                if (panelScrollbar) {
                    panelScrollbar.dispose();
                }
            });
        },
    };
});
module.directive('panelHelpCorner', function ($rootScope) {
    return {
        restrict: 'E',
        template: "\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\n    </span>\n    </span>\n    ",
        link: function (scope, elem) { },
    };
});


/***/ }),

/***/ "./public/app/features/panel/panel_editor_tab.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/panel/panel_editor_tab.ts ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);

var directiveModule = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
/** @ngInject */
function panelEditorTab(dynamicDirectiveSrv) {
    return dynamicDirectiveSrv.create({
        scope: {
            ctrl: '=',
            editorTab: '=',
            index: '=',
        },
        directive: function (scope) {
            var pluginId = scope.ctrl.pluginId;
            var tabIndex = scope.index;
            // create a wrapper for directiveFn
            // required for metrics tab directive
            // that is the same for many panels but
            // given different names in this function
            var fn = function () { return scope.editorTab.directiveFn(); };
            return Promise.resolve({
                name: "panel-editor-tab-" + pluginId + tabIndex,
                fn: fn,
            });
        },
    });
}
directiveModule.directive('panelEditorTab', panelEditorTab);


/***/ }),

/***/ "./public/app/features/panel/panel_header.ts":
/*!***************************************************!*\
  !*** ./public/app/features/panel/panel_header.ts ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");


var template = "\n<span class=\"panel-title\">\n  <span class=\"icon-gf panel-alert-icon\"></span>\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\n  <span class=\"panel-menu-container dropdown\">\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\n      <li>\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\n          <i class=\"fa fa-cog\"></i> Edit <span class=\"dropdown-menu-item-shortcut\">e</span>\n        </a>\n      </li>\n      <li class=\"dropdown-submenu\">\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\n        <ul class=\"dropdown-menu panel-menu\">\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> Add Annotation</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> Toggle Legend</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> Export to CSV</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> View JSON</a></li>\n        </ul>\n      </li>\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> Remove</a></li>\n    </ul>\n  </span>\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\n</span>";
function renderMenuItem(item, ctrl) {
    var html = '';
    var listItemClass = '';
    if (item.divider) {
        return '<li class="divider"></li>';
    }
    if (item.submenu) {
        listItemClass = 'dropdown-submenu';
    }
    html += "<li class=\"" + listItemClass + "\"><a ";
    if (item.click) {
        html += " ng-click=\"" + item.click + "\"";
    }
    if (item.href) {
        html += " href=\"" + item.href + "\"";
    }
    html += "><i class=\"" + item.icon + "\"></i>";
    html += "<span class=\"dropdown-item-text\">" + item.text + "</span>";
    if (item.shortcut) {
        html += "<span class=\"dropdown-menu-item-shortcut\">" + item.shortcut + "</span>";
    }
    html += "</a>";
    if (item.submenu) {
        html += '<ul class="dropdown-menu dropdown-menu--menu panel-menu">';
        for (var _i = 0, _a = item.submenu; _i < _a.length; _i++) {
            var subitem = _a[_i];
            html += renderMenuItem(subitem, ctrl);
        }
        html += '</ul>';
    }
    html += "</li>";
    return html;
}
function createMenuTemplate(ctrl) {
    var html = '';
    for (var _i = 0, _a = ctrl.getMenu(); _i < _a.length; _i++) {
        var item = _a[_i];
        html += renderMenuItem(item, ctrl);
    }
    return html;
}
/** @ngInject */
function panelHeader($compile) {
    return {
        restrict: 'E',
        template: template,
        link: function (scope, elem, attrs) {
            var menuElem = elem.find('.panel-menu');
            var menuScope;
            var isDragged;
            elem.click(function (evt) {
                var targetClass = evt.target.className;
                // remove existing scope
                if (menuScope) {
                    menuScope.$destroy();
                }
                menuScope = scope.$new();
                var menuHtml = createMenuTemplate(scope.ctrl);
                menuElem.html(menuHtml);
                $compile(menuElem)(menuScope);
                if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {
                    togglePanelMenu(evt);
                }
            });
            elem.find('.panel-menu-toggle').click(function () {
                togglePanelStackPosition();
            });
            function togglePanelMenu(e) {
                if (!isDragged) {
                    e.stopPropagation();
                    togglePanelStackPosition();
                    elem.find('[data-toggle=dropdown]').dropdown('toggle');
                }
            }
            /**
             * Hack for adding special class 'dropdown-menu-open' to the panel.
             * This class sets z-index for panel and prevents menu overlapping.
             */
            function togglePanelStackPosition() {
                var menuOpenClass = 'dropdown-menu-open';
                var panelGridClass = '.react-grid-item.panel';
                var panelElem = elem
                    .find('[data-toggle=dropdown]')
                    .parentsUntil('.panel')
                    .parent();
                var menuElem = elem.find('[data-toggle=dropdown]').parent();
                panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;
                if (panelElem) {
                    panelElem = jquery__WEBPACK_IMPORTED_MODULE_0___default()(panelElem);
                    jquery__WEBPACK_IMPORTED_MODULE_0___default()(panelGridClass).removeClass(menuOpenClass);
                    var state = !menuElem.hasClass('open');
                    panelElem.toggleClass(menuOpenClass, state);
                }
            }
            var mouseX, mouseY;
            elem.mousedown(function (e) {
                mouseX = e.pageX;
                mouseY = e.pageY;
            });
            elem.mouseup(function (e) {
                if (mouseX === e.pageX && mouseY === e.pageY) {
                    isDragged = false;
                }
                else {
                    isDragged = true;
                }
            });
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_1__["coreModule"].directive('panelHeader', panelHeader);


/***/ }),

/***/ "./public/app/features/panel/query_ctrl.ts":
/*!*************************************************!*\
  !*** ./public/app/features/panel/query_ctrl.ts ***!
  \*************************************************/
/*! exports provided: QueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return QueryCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var QueryCtrl = /** @class */ (function () {
    function QueryCtrl($scope, $injector) {
        this.$scope = $scope;
        this.$injector = $injector;
        this.panel = this.panelCtrl.panel;
        this.isLastQuery = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;
    }
    QueryCtrl.prototype.refresh = function () {
        this.panelCtrl.refresh();
    };
    return QueryCtrl;
}());



/***/ }),

/***/ "./public/app/features/panel/query_editor_row.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/panel/query_editor_row.ts ***!
  \*******************************************************/
/*! exports provided: QueryRowCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryRowCtrl", function() { return QueryRowCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);

var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
var QueryRowCtrl = /** @class */ (function () {
    function QueryRowCtrl() {
        this.panelCtrl = this.queryCtrl.panelCtrl;
        this.target = this.queryCtrl.target;
        this.panel = this.panelCtrl.panel;
        if (!this.target.refId) {
            this.target.refId = this.panelCtrl.dashboard.getNextQueryLetter(this.panel);
        }
        this.toggleCollapse(true);
        if (this.target.isNew) {
            delete this.target.isNew;
            this.toggleCollapse(false);
        }
        if (this.panel.targets.length < 4) {
            this.collapsed = false;
        }
    }
    QueryRowCtrl.prototype.toggleHideQuery = function () {
        this.target.hide = !this.target.hide;
        this.panelCtrl.refresh();
    };
    QueryRowCtrl.prototype.toggleCollapse = function (init) {
        if (!this.canCollapse) {
            return;
        }
        if (!this.panelCtrl.__collapsedQueryCache) {
            this.panelCtrl.__collapsedQueryCache = {};
        }
        if (init) {
            this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;
        }
        else {
            this.collapsed = !this.collapsed;
            this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;
        }
        try {
            this.collapsedText = this.queryCtrl.getCollapsedText();
        }
        catch (e) {
            var err = e.message || e.toString();
            this.collapsedText = 'Error: ' + err;
        }
    };
    QueryRowCtrl.prototype.toggleEditorMode = function () {
        if (this.canCollapse && this.collapsed) {
            this.collapsed = false;
        }
        this.queryCtrl.toggleEditorMode();
    };
    QueryRowCtrl.prototype.removeQuery = function () {
        if (this.panelCtrl.__collapsedQueryCache) {
            delete this.panelCtrl.__collapsedQueryCache[this.target.refId];
        }
        this.panelCtrl.removeQuery(this.target);
    };
    QueryRowCtrl.prototype.duplicateQuery = function () {
        var clone = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(this.target);
        this.panelCtrl.addQuery(clone);
    };
    QueryRowCtrl.prototype.moveQuery = function (direction) {
        this.panelCtrl.moveQuery(this.target, direction);
    };
    return QueryRowCtrl;
}());

/** @ngInject */
function queryEditorRowDirective() {
    return {
        restrict: 'E',
        controller: QueryRowCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        templateUrl: 'public/app/features/panel/partials/query_editor_row.html',
        transclude: true,
        scope: {
            queryCtrl: '=',
            canCollapse: '=',
            hasTextEditMode: '=',
        },
    };
}
module.directive('queryEditorRow', queryEditorRowDirective);


/***/ }),

/***/ "./public/app/features/panel/query_troubleshooter.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/panel/query_troubleshooter.ts ***!
  \***********************************************************/
/*! exports provided: QueryTroubleshooterCtrl, queryTroubleshooter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryTroubleshooterCtrl", function() { return QueryTroubleshooterCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryTroubleshooter", function() { return queryTroubleshooter; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");



var template = "\n<div class=\"query-troubleshooter\" ng-if=\"ctrl.isOpen\">\n  <div class=\"query-troubleshooter__header\">\n    <a class=\"pointer\" ng-click=\"ctrl.toggleMocking()\">Mock Response</a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-hide=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-plus-square-o\"></i> Expand All\n    </a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-show=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-minus-square-o\"></i> Collapse All\n    </a>\n    <a class=\"pointer\" clipboard-button=\"ctrl.getClipboardText()\"><i class=\"fa fa-clipboard\"></i> Copy to Clipboard</a>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-hide=\"ctrl.isMocking\">\n    <i class=\"fa fa-spinner fa-spin\" ng-show=\"ctrl.isLoading\"></i>\n    <div class=\"query-troubleshooter-json\"></div>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-show=\"ctrl.isMocking\">\n    <div class=\"gf-form p-l-1 gf-form--v-stretch\">\n\t\t\t<textarea class=\"gf-form-input\" style=\"width: 95%\" rows=\"10\" ng-model=\"ctrl.mockedResponse\"  placeholder=\"JSON\"></textarea>\n    </div>\n  </div>\n</div>\n";
var QueryTroubleshooterCtrl = /** @class */ (function () {
    /** @ngInject */
    function QueryTroubleshooterCtrl($scope, $timeout) {
        this.$timeout = $timeout;
        this.onRequestErrorEventListener = this.onRequestError.bind(this);
        this.onRequestResponseEventListener = this.onRequestResponse.bind(this);
        app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].on('ds-request-response', this.onRequestResponseEventListener);
        app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].on('ds-request-error', this.onRequestErrorEventListener);
        $scope.$on('$destroy', this.removeEventsListeners.bind(this));
        $scope.$watch('ctrl.isOpen', this.stateChanged.bind(this));
    }
    QueryTroubleshooterCtrl.prototype.removeEventsListeners = function () {
        app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].off('ds-request-response', this.onRequestResponseEventListener);
        app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].off('ds-request-error', this.onRequestErrorEventListener);
    };
    QueryTroubleshooterCtrl.prototype.toggleMocking = function () {
        this.isMocking = !this.isMocking;
    };
    QueryTroubleshooterCtrl.prototype.onRequestError = function (err) {
        // ignore if closed
        if (!this.isOpen) {
            return;
        }
        this.isOpen = true;
        this.hasError = true;
        this.onRequestResponse(err);
    };
    QueryTroubleshooterCtrl.prototype.stateChanged = function () {
        if (this.isOpen) {
            this.panelCtrl.refresh();
            this.isLoading = true;
        }
    };
    QueryTroubleshooterCtrl.prototype.getClipboardText = function () {
        if (this.jsonExplorer) {
            return JSON.stringify(this.jsonExplorer.json, null, 2);
        }
        return '';
    };
    QueryTroubleshooterCtrl.prototype.handleMocking = function (data) {
        var mockedData;
        try {
            mockedData = JSON.parse(this.mockedResponse);
        }
        catch (err) {
            app_core_app_events__WEBPACK_IMPORTED_MODULE_1__["default"].emit('alert-error', ['Failed to parse mocked response']);
            return;
        }
        data.data = mockedData;
    };
    QueryTroubleshooterCtrl.prototype.onRequestResponse = function (data) {
        // ignore if closed
        if (!this.isOpen) {
            return;
        }
        if (this.isMocking) {
            this.handleMocking(data);
            return;
        }
        this.isLoading = false;
        data = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(data);
        if (data.headers) {
            delete data.headers;
        }
        if (data.config) {
            data.request = data.config;
            delete data.config;
            delete data.request.transformRequest;
            delete data.request.transformResponse;
            delete data.request.paramSerializer;
            delete data.request.jsonpCallbackParam;
            delete data.request.headers;
            delete data.request.requestId;
            delete data.request.inspect;
            delete data.request.retry;
            delete data.request.timeout;
        }
        if (data.data) {
            data.response = data.data;
            if (data.status === 200) {
                // if we are in error state, assume we automatically opened
                // and auto close it again
                if (this.hasError) {
                    this.hasError = false;
                    this.isOpen = false;
                }
            }
            delete data.data;
            delete data.status;
            delete data.statusText;
            delete data.$$config;
        }
        this.$timeout(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.partial(this.renderJsonExplorer, data));
    };
    QueryTroubleshooterCtrl.prototype.toggleExpand = function (depth) {
        if (this.jsonExplorer) {
            this.allNodesExpanded = !this.allNodesExpanded;
            this.jsonExplorer.openAtDepth(this.allNodesExpanded ? 20 : 1);
        }
    };
    return QueryTroubleshooterCtrl;
}());

function queryTroubleshooter() {
    return {
        restrict: 'E',
        template: template,
        controller: QueryTroubleshooterCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            panelCtrl: '=',
            isOpen: '=',
        },
        link: function (scope, elem, attrs, ctrl) {
            ctrl.renderJsonExplorer = function (data) {
                var jsonElem = elem.find('.query-troubleshooter-json');
                ctrl.jsonExplorer = new app_core_core__WEBPACK_IMPORTED_MODULE_2__["JsonExplorer"](data, 3, {
                    animateOpen: true,
                });
                var html = ctrl.jsonExplorer.render(true);
                jsonElem.html(html);
            };
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_2__["coreModule"].directive('queryTroubleshooter', queryTroubleshooter);


/***/ }),

/***/ "./public/app/features/panel/solo_panel_ctrl.ts":
/*!******************************************************!*\
  !*** ./public/app/features/panel/solo_panel_ctrl.ts ***!
  \******************************************************/
/*! exports provided: SoloPanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SoloPanelCtrl", function() { return SoloPanelCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/location_util */ "./public/app/core/utils/location_util.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");



var SoloPanelCtrl = /** @class */ (function () {
    /** @ngInject */
    function SoloPanelCtrl($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv, backendSrv) {
        var panelId;
        $scope.init = function () {
            contextSrv.sidemenu = false;
            app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('toggle-sidemenu-hidden');
            var params = $location.search();
            panelId = parseInt(params.panelId, 10);
            $scope.onAppEvent('dashboard-initialized', $scope.initPanelScope);
            // if no uid, redirect to new route based on slug
            if (!($routeParams.type === 'script' || $routeParams.type === 'snapshot') && !$routeParams.uid) {
                backendSrv.getDashboardBySlug($routeParams.slug).then(function (res) {
                    if (res) {
                        var url = app_core_utils_location_util__WEBPACK_IMPORTED_MODULE_1__["default"].stripBaseFromUrl(res.meta.url.replace('/d/', '/d-solo/'));
                        $location.path(url).replace();
                    }
                });
                return;
            }
            dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug, $routeParams.uid).then(function (result) {
                result.meta.soloMode = true;
                $scope.initDashboard(result, $scope);
            });
        };
        $scope.initPanelScope = function () {
            var panelInfo = $scope.dashboard.getPanelInfoById(panelId);
            // fake row ctrl scope
            $scope.ctrl = {
                dashboard: $scope.dashboard,
            };
            $scope.panel = panelInfo.panel;
            $scope.panel.soloMode = true;
            $scope.$index = 0;
            if (!$scope.panel) {
                $scope.appEvent('alert-error', ['Panel not found', '']);
                return;
            }
        };
        $scope.init();
    }
    return SoloPanelCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.routes').controller('SoloPanelCtrl', SoloPanelCtrl);


/***/ }),

/***/ "./public/app/features/playlist/all.ts":
/*!*********************************************!*\
  !*** ./public/app/features/playlist/all.ts ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _playlists_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlists_ctrl */ "./public/app/features/playlist/playlists_ctrl.ts");
/* harmony import */ var _playlist_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playlist_search */ "./public/app/features/playlist/playlist_search.ts");
/* harmony import */ var _playlist_srv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./playlist_srv */ "./public/app/features/playlist/playlist_srv.ts");
/* harmony import */ var _playlist_edit_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./playlist_edit_ctrl */ "./public/app/features/playlist/playlist_edit_ctrl.ts");
/* harmony import */ var _playlist_routes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./playlist_routes */ "./public/app/features/playlist/playlist_routes.ts");







/***/ }),

/***/ "./public/app/features/playlist/playlist_edit_ctrl.ts":
/*!************************************************************!*\
  !*** ./public/app/features/playlist/playlist_edit_ctrl.ts ***!
  \************************************************************/
/*! exports provided: PlaylistEditCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistEditCtrl", function() { return PlaylistEditCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/core_module */ "./public/app/core/core_module.ts");


var PlaylistEditCtrl = /** @class */ (function () {
    /** @ngInject */
    function PlaylistEditCtrl($scope, backendSrv, $location, $route, navModelSrv) {
        var _this = this;
        this.$scope = $scope;
        this.backendSrv = backendSrv;
        this.$location = $location;
        this.filteredDashboards = [];
        this.filteredTags = [];
        this.searchQuery = '';
        this.loading = false;
        this.playlist = {
            interval: '5m',
        };
        this.playlistItems = [];
        this.dashboardresult = [];
        this.tagresult = [];
        this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);
        this.isNew = !$route.current.params.id;
        if ($route.current.params.id) {
            var playlistId = $route.current.params.id;
            backendSrv.get('/api/playlists/' + playlistId).then(function (result) {
                _this.playlist = result;
            });
            backendSrv.get('/api/playlists/' + playlistId + '/items').then(function (result) {
                _this.playlistItems = result;
            });
        }
    }
    PlaylistEditCtrl.prototype.filterFoundPlaylistItems = function () {
        var _this = this;
        this.filteredDashboards = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reject(this.dashboardresult, function (playlistItem) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(_this.playlistItems, function (listPlaylistItem) {
                return parseInt(listPlaylistItem.value, 10) === playlistItem.id;
            });
        });
        this.filteredTags = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reject(this.tagresult, function (tag) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(_this.playlistItems, function (listPlaylistItem) {
                return listPlaylistItem.value === tag.term;
            });
        });
    };
    PlaylistEditCtrl.prototype.addPlaylistItem = function (playlistItem) {
        playlistItem.value = playlistItem.id.toString();
        playlistItem.type = 'dashboard_by_id';
        playlistItem.order = this.playlistItems.length + 1;
        this.playlistItems.push(playlistItem);
        this.filterFoundPlaylistItems();
    };
    PlaylistEditCtrl.prototype.addTagPlaylistItem = function (tag) {
        var playlistItem = {
            value: tag.term,
            type: 'dashboard_by_tag',
            order: this.playlistItems.length + 1,
            title: tag.term,
        };
        this.playlistItems.push(playlistItem);
        this.filterFoundPlaylistItems();
    };
    PlaylistEditCtrl.prototype.removePlaylistItem = function (playlistItem) {
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.remove(this.playlistItems, function (listedPlaylistItem) {
            return playlistItem === listedPlaylistItem;
        });
        this.filterFoundPlaylistItems();
    };
    PlaylistEditCtrl.prototype.savePlaylist = function (playlist, playlistItems) {
        var _this = this;
        var savePromise;
        playlist.items = playlistItems;
        savePromise = playlist.id
            ? this.backendSrv.put('/api/playlists/' + playlist.id, playlist)
            : this.backendSrv.post('/api/playlists', playlist);
        savePromise.then(function () {
            _this.$scope.appEvent('alert-success', ['Playlist saved', '']);
            _this.$location.path('/playlists');
        }, function () {
            _this.$scope.appEvent('alert-error', ['Unable to save playlist', '']);
        });
    };
    PlaylistEditCtrl.prototype.isPlaylistEmpty = function () {
        return !this.playlistItems.length;
    };
    PlaylistEditCtrl.prototype.backToList = function () {
        this.$location.path('/playlists');
    };
    PlaylistEditCtrl.prototype.searchStarted = function (promise) {
        var _this = this;
        promise.then(function (data) {
            _this.dashboardresult = data.dashboardResult;
            _this.tagresult = data.tagResult;
            _this.filterFoundPlaylistItems();
        });
    };
    PlaylistEditCtrl.prototype.movePlaylistItem = function (playlistItem, offset) {
        var currentPosition = this.playlistItems.indexOf(playlistItem);
        var newPosition = currentPosition + offset;
        if (newPosition >= 0 && newPosition < this.playlistItems.length) {
            this.playlistItems.splice(currentPosition, 1);
            this.playlistItems.splice(newPosition, 0, playlistItem);
        }
    };
    PlaylistEditCtrl.prototype.movePlaylistItemUp = function (playlistItem) {
        this.movePlaylistItem(playlistItem, -1);
    };
    PlaylistEditCtrl.prototype.movePlaylistItemDown = function (playlistItem) {
        this.movePlaylistItem(playlistItem, 1);
    };
    return PlaylistEditCtrl;
}());

_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].controller('PlaylistEditCtrl', PlaylistEditCtrl);


/***/ }),

/***/ "./public/app/features/playlist/playlist_routes.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/playlist/playlist_routes.ts ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);

/** @ngInject */
function grafanaRoutes($routeProvider) {
    $routeProvider
        .when('/playlists', {
        templateUrl: 'public/app/features/playlist/partials/playlists.html',
        controllerAs: 'ctrl',
        controller: 'PlaylistsCtrl',
    })
        .when('/playlists/create', {
        templateUrl: 'public/app/features/playlist/partials/playlist.html',
        controllerAs: 'ctrl',
        controller: 'PlaylistEditCtrl',
    })
        .when('/playlists/edit/:id', {
        templateUrl: 'public/app/features/playlist/partials/playlist.html',
        controllerAs: 'ctrl',
        controller: 'PlaylistEditCtrl',
    })
        .when('/playlists/play/:id', {
        template: '',
        resolve: {
            init: function (playlistSrv, $route) {
                var playlistId = $route.current.params.id;
                playlistSrv.start(playlistId);
            },
        },
    });
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.routes').config(grafanaRoutes);


/***/ }),

/***/ "./public/app/features/playlist/playlist_search.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/playlist/playlist_search.ts ***!
  \*********************************************************/
/*! exports provided: PlaylistSearchCtrl, playlistSearchDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistSearchCtrl", function() { return PlaylistSearchCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "playlistSearchDirective", function() { return playlistSearchDirective; });
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/core_module */ "./public/app/core/core_module.ts");

var PlaylistSearchCtrl = /** @class */ (function () {
    /** @ngInject */
    function PlaylistSearchCtrl($timeout, backendSrv) {
        var _this = this;
        this.backendSrv = backendSrv;
        this.query = { query: '', tag: [], starred: false, limit: 20 };
        $timeout(function () {
            _this.query.query = '';
            _this.query.type = 'dash-db';
            _this.searchDashboards();
        }, 100);
    }
    PlaylistSearchCtrl.prototype.searchDashboards = function () {
        this.tagsMode = false;
        var prom = {};
        prom.promise = this.backendSrv.search(this.query).then(function (result) {
            return {
                dashboardResult: result,
                tagResult: [],
            };
        });
        this.searchStarted(prom);
    };
    PlaylistSearchCtrl.prototype.showStarred = function () {
        this.query.starred = !this.query.starred;
        this.searchDashboards();
    };
    PlaylistSearchCtrl.prototype.queryHasNoFilters = function () {
        return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;
    };
    PlaylistSearchCtrl.prototype.filterByTag = function (tag, evt) {
        this.query.tag.push(tag);
        this.searchDashboards();
        if (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };
    PlaylistSearchCtrl.prototype.getTags = function () {
        var prom = {};
        prom.promise = this.backendSrv.get('/api/dashboards/tags').then(function (result) {
            return {
                dashboardResult: [],
                tagResult: result,
            };
        });
        this.searchStarted(prom);
    };
    return PlaylistSearchCtrl;
}());

function playlistSearchDirective() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/playlist/partials/playlist_search.html',
        controller: PlaylistSearchCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            searchStarted: '&',
        },
    };
}
_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('playlistSearch', playlistSearchDirective);


/***/ }),

/***/ "./public/app/features/playlist/playlist_srv.ts":
/*!******************************************************!*\
  !*** ./public/app/features/playlist/playlist_srv.ts ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var app_core_utils_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/url */ "./public/app/core/utils/url.ts");





var PlaylistSrv = /** @class */ (function () {
    /** @ngInject */
    function PlaylistSrv($location, $timeout, backendSrv) {
        this.$location = $location;
        this.$timeout = $timeout;
        this.backendSrv = backendSrv;
    }
    PlaylistSrv.prototype.next = function () {
        var _this = this;
        this.$timeout.cancel(this.cancelPromise);
        var playedAllDashboards = this.index > this.dashboards.length - 1;
        if (playedAllDashboards) {
            window.location.href = this.startUrl;
            return;
        }
        var dash = this.dashboards[this.index];
        var queryParams = this.$location.search();
        var filteredParams = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.pickBy(queryParams, function (value) { return value !== null; });
        this.$location.url('dashboard/' + dash.uri + '?' + Object(app_core_utils_url__WEBPACK_IMPORTED_MODULE_4__["toUrlParams"])(filteredParams));
        this.index++;
        this.cancelPromise = this.$timeout(function () { return _this.next(); }, this.interval);
    };
    PlaylistSrv.prototype.prev = function () {
        this.index = Math.max(this.index - 2, 0);
        this.next();
    };
    PlaylistSrv.prototype.start = function (playlistId) {
        var _this = this;
        this.stop();
        this.startUrl = window.location.href;
        this.index = 0;
        this.isPlaying = true;
        this.backendSrv.get("/api/playlists/" + playlistId).then(function (playlist) {
            _this.backendSrv.get("/api/playlists/" + playlistId + "/dashboards").then(function (dashboards) {
                _this.dashboards = dashboards;
                _this.interval = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__["default"].interval_to_ms(playlist.interval);
                _this.next();
            });
        });
    };
    PlaylistSrv.prototype.stop = function () {
        if (this.isPlaying) {
            var queryParams = this.$location.search();
            if (queryParams.kiosk) {
                app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('toggle-kiosk-mode', { exit: true });
            }
        }
        this.index = 0;
        this.isPlaying = false;
        if (this.cancelPromise) {
            this.$timeout.cancel(this.cancelPromise);
        }
    };
    return PlaylistSrv;
}());
_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].service('playlistSrv', PlaylistSrv);


/***/ }),

/***/ "./public/app/features/playlist/playlists_ctrl.ts":
/*!********************************************************!*\
  !*** ./public/app/features/playlist/playlists_ctrl.ts ***!
  \********************************************************/
/*! exports provided: PlaylistsCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaylistsCtrl", function() { return PlaylistsCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/core_module */ "./public/app/core/core_module.ts");


var PlaylistsCtrl = /** @class */ (function () {
    /** @ngInject */
    function PlaylistsCtrl($scope, backendSrv, navModelSrv) {
        var _this = this;
        this.$scope = $scope;
        this.backendSrv = backendSrv;
        this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);
        backendSrv.get('/api/playlists').then(function (result) {
            _this.playlists = result.map(function (item) {
                item.startUrl = "playlists/play/" + item.id;
                return item;
            });
        });
    }
    PlaylistsCtrl.prototype.removePlaylistConfirmed = function (playlist) {
        var _this = this;
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.remove(this.playlists, { id: playlist.id });
        this.backendSrv.delete('/api/playlists/' + playlist.id).then(function () {
            _this.$scope.appEvent('alert-success', ['Playlist deleted', '']);
        }, function () {
            _this.$scope.appEvent('alert-error', ['Unable to delete playlist', '']);
            _this.playlists.push(playlist);
        });
    };
    PlaylistsCtrl.prototype.removePlaylist = function (playlist) {
        var _this = this;
        this.$scope.appEvent('confirm-modal', {
            title: 'Delete',
            text: 'Are you sure you want to delete playlist ' + playlist.name + '?',
            yesText: 'Delete',
            icon: 'fa-trash',
            onConfirm: function () {
                _this.removePlaylistConfirmed(playlist);
            },
        });
    };
    return PlaylistsCtrl;
}());

_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].controller('PlaylistsCtrl', PlaylistsCtrl);


/***/ }),

/***/ "./public/app/features/plugins/all.ts":
/*!********************************************!*\
  !*** ./public/app/features/plugins/all.ts ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _plugin_edit_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin_edit_ctrl */ "./public/app/features/plugins/plugin_edit_ctrl.ts");
/* harmony import */ var _plugin_page_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plugin_page_ctrl */ "./public/app/features/plugins/plugin_page_ctrl.ts");
/* harmony import */ var _import_list_import_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./import_list/import_list */ "./public/app/features/plugins/import_list/import_list.ts");
/* harmony import */ var _ds_edit_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ds_edit_ctrl */ "./public/app/features/plugins/ds_edit_ctrl.ts");
/* harmony import */ var _ds_dashboards_ctrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ds_dashboards_ctrl */ "./public/app/features/plugins/ds_dashboards_ctrl.ts");
/* harmony import */ var _datasource_srv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./datasource_srv */ "./public/app/features/plugins/datasource_srv.ts");
/* harmony import */ var _plugin_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugin_component */ "./public/app/features/plugins/plugin_component.ts");









/***/ }),

/***/ "./public/app/features/plugins/built_in_plugins.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/plugins/built_in_plugins.ts ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_plugins_datasource_graphite_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/plugins/datasource/graphite/module */ "./public/app/plugins/datasource/graphite/module.ts");
/* harmony import */ var app_plugins_datasource_cloudwatch_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/plugins/datasource/cloudwatch/module */ "./public/app/plugins/datasource/cloudwatch/module.ts");
/* harmony import */ var app_plugins_datasource_elasticsearch_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/datasource/elasticsearch/module */ "./public/app/plugins/datasource/elasticsearch/module.ts");
/* harmony import */ var app_plugins_datasource_opentsdb_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/plugins/datasource/opentsdb/module */ "./public/app/plugins/datasource/opentsdb/module.ts");
/* harmony import */ var app_plugins_datasource_grafana_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/plugins/datasource/grafana/module */ "./public/app/plugins/datasource/grafana/module.ts");
/* harmony import */ var app_plugins_datasource_influxdb_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/plugins/datasource/influxdb/module */ "./public/app/plugins/datasource/influxdb/module.ts");
/* harmony import */ var app_plugins_datasource_logging_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/plugins/datasource/logging/module */ "./public/app/plugins/datasource/logging/module.ts");
/* harmony import */ var app_plugins_datasource_mixed_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/plugins/datasource/mixed/module */ "./public/app/plugins/datasource/mixed/module.ts");
/* harmony import */ var app_plugins_datasource_mysql_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/plugins/datasource/mysql/module */ "./public/app/plugins/datasource/mysql/module.ts");
/* harmony import */ var app_plugins_datasource_postgres_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! app/plugins/datasource/postgres/module */ "./public/app/plugins/datasource/postgres/module.ts");
/* harmony import */ var app_plugins_datasource_prometheus_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! app/plugins/datasource/prometheus/module */ "./public/app/plugins/datasource/prometheus/module.ts");
/* harmony import */ var app_plugins_datasource_mssql_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! app/plugins/datasource/mssql/module */ "./public/app/plugins/datasource/mssql/module.ts");
/* harmony import */ var app_plugins_datasource_testdata_module__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! app/plugins/datasource/testdata/module */ "./public/app/plugins/datasource/testdata/module.ts");
/* harmony import */ var app_plugins_datasource_stackdriver_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! app/plugins/datasource/stackdriver/module */ "./public/app/plugins/datasource/stackdriver/module.ts");
/* harmony import */ var app_plugins_panel_text_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! app/plugins/panel/text/module */ "./public/app/plugins/panel/text/module.ts");
/* harmony import */ var app_plugins_panel_graph_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! app/plugins/panel/graph/module */ "./public/app/plugins/panel/graph/module.ts");
/* harmony import */ var app_plugins_panel_dashlist_module__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! app/plugins/panel/dashlist/module */ "./public/app/plugins/panel/dashlist/module.ts");
/* harmony import */ var app_plugins_panel_pluginlist_module__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! app/plugins/panel/pluginlist/module */ "./public/app/plugins/panel/pluginlist/module.ts");
/* harmony import */ var app_plugins_panel_alertlist_module__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! app/plugins/panel/alertlist/module */ "./public/app/plugins/panel/alertlist/module.ts");
/* harmony import */ var app_plugins_panel_heatmap_module__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! app/plugins/panel/heatmap/module */ "./public/app/plugins/panel/heatmap/module.ts");
/* harmony import */ var app_plugins_panel_table_module__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! app/plugins/panel/table/module */ "./public/app/plugins/panel/table/module.ts");
/* harmony import */ var app_plugins_panel_singlestat_module__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! app/plugins/panel/singlestat/module */ "./public/app/plugins/panel/singlestat/module.ts");
/* harmony import */ var app_plugins_panel_gettingstarted_module__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! app/plugins/panel/gettingstarted/module */ "./public/app/plugins/panel/gettingstarted/module.ts");























var builtInPlugins = {
    'app/plugins/datasource/graphite/module': app_plugins_datasource_graphite_module__WEBPACK_IMPORTED_MODULE_0__,
    'app/plugins/datasource/cloudwatch/module': app_plugins_datasource_cloudwatch_module__WEBPACK_IMPORTED_MODULE_1__,
    'app/plugins/datasource/elasticsearch/module': app_plugins_datasource_elasticsearch_module__WEBPACK_IMPORTED_MODULE_2__,
    'app/plugins/datasource/opentsdb/module': app_plugins_datasource_opentsdb_module__WEBPACK_IMPORTED_MODULE_3__,
    'app/plugins/datasource/grafana/module': app_plugins_datasource_grafana_module__WEBPACK_IMPORTED_MODULE_4__,
    'app/plugins/datasource/influxdb/module': app_plugins_datasource_influxdb_module__WEBPACK_IMPORTED_MODULE_5__,
    'app/plugins/datasource/logging/module': app_plugins_datasource_logging_module__WEBPACK_IMPORTED_MODULE_6__,
    'app/plugins/datasource/mixed/module': app_plugins_datasource_mixed_module__WEBPACK_IMPORTED_MODULE_7__,
    'app/plugins/datasource/mysql/module': app_plugins_datasource_mysql_module__WEBPACK_IMPORTED_MODULE_8__,
    'app/plugins/datasource/postgres/module': app_plugins_datasource_postgres_module__WEBPACK_IMPORTED_MODULE_9__,
    'app/plugins/datasource/mssql/module': app_plugins_datasource_mssql_module__WEBPACK_IMPORTED_MODULE_11__,
    'app/plugins/datasource/prometheus/module': app_plugins_datasource_prometheus_module__WEBPACK_IMPORTED_MODULE_10__,
    'app/plugins/datasource/testdata/module': app_plugins_datasource_testdata_module__WEBPACK_IMPORTED_MODULE_12__,
    'app/plugins/datasource/stackdriver/module': app_plugins_datasource_stackdriver_module__WEBPACK_IMPORTED_MODULE_13__,
    'app/plugins/panel/text/module': app_plugins_panel_text_module__WEBPACK_IMPORTED_MODULE_14__,
    'app/plugins/panel/graph/module': app_plugins_panel_graph_module__WEBPACK_IMPORTED_MODULE_15__,
    'app/plugins/panel/dashlist/module': app_plugins_panel_dashlist_module__WEBPACK_IMPORTED_MODULE_16__,
    'app/plugins/panel/pluginlist/module': app_plugins_panel_pluginlist_module__WEBPACK_IMPORTED_MODULE_17__,
    'app/plugins/panel/alertlist/module': app_plugins_panel_alertlist_module__WEBPACK_IMPORTED_MODULE_18__,
    'app/plugins/panel/heatmap/module': app_plugins_panel_heatmap_module__WEBPACK_IMPORTED_MODULE_19__,
    'app/plugins/panel/table/module': app_plugins_panel_table_module__WEBPACK_IMPORTED_MODULE_20__,
    'app/plugins/panel/singlestat/module': app_plugins_panel_singlestat_module__WEBPACK_IMPORTED_MODULE_21__,
    'app/plugins/panel/gettingstarted/module': app_plugins_panel_gettingstarted_module__WEBPACK_IMPORTED_MODULE_22__,
};
/* harmony default export */ __webpack_exports__["default"] = (builtInPlugins);


/***/ }),

/***/ "./public/app/features/plugins/datasource_srv.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/plugins/datasource_srv.ts ***!
  \*******************************************************/
/*! exports provided: DatasourceSrv, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatasourceSrv", function() { return DatasourceSrv; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var _plugin_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugin_loader */ "./public/app/features/plugins/plugin_loader.ts");




var DatasourceSrv = /** @class */ (function () {
    /** @ngInject */
    function DatasourceSrv($q, $injector, $rootScope, templateSrv) {
        this.$q = $q;
        this.$injector = $injector;
        this.$rootScope = $rootScope;
        this.templateSrv = templateSrv;
        this.init();
    }
    DatasourceSrv.prototype.init = function () {
        this.datasources = {};
    };
    DatasourceSrv.prototype.get = function (name) {
        if (!name) {
            return this.get(app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDatasource);
        }
        name = this.templateSrv.replace(name);
        if (name === 'default') {
            return this.get(app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDatasource);
        }
        if (this.datasources[name]) {
            return this.$q.when(this.datasources[name]);
        }
        return this.loadDatasource(name);
    };
    DatasourceSrv.prototype.loadDatasource = function (name) {
        var _this = this;
        var dsConfig = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources[name];
        if (!dsConfig) {
            return this.$q.reject({ message: 'Datasource named ' + name + ' was not found' });
        }
        var deferred = this.$q.defer();
        var pluginDef = dsConfig.meta;
        Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_3__["importPluginModule"])(pluginDef.module)
            .then(function (plugin) {
            // check if its in cache now
            if (_this.datasources[name]) {
                deferred.resolve(_this.datasources[name]);
                return;
            }
            // plugin module needs to export a constructor function named Datasource
            if (!plugin.Datasource) {
                throw new Error('Plugin module is missing Datasource constructor');
            }
            var instance = _this.$injector.instantiate(plugin.Datasource, { instanceSettings: dsConfig });
            instance.meta = pluginDef;
            instance.name = name;
            _this.datasources[name] = instance;
            deferred.resolve(instance);
        })
            .catch(function (err) {
            _this.$rootScope.appEvent('alert-error', [dsConfig.name + ' plugin failed', err.toString()]);
        });
        return deferred.promise;
    };
    DatasourceSrv.prototype.getAll = function () {
        return app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources;
    };
    DatasourceSrv.prototype.getAnnotationSources = function () {
        var sources = [];
        this.addDataSourceVariables(sources);
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources, function (value) {
            if (value.meta && value.meta.annotations) {
                sources.push(value);
            }
        });
        return sources;
    };
    DatasourceSrv.prototype.getExploreSources = function () {
        var datasources = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources;
        var es = Object.keys(datasources)
            .map(function (name) { return datasources[name]; })
            .filter(function (ds) { return ds.meta && ds.meta.explore; });
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(es, ['name']);
    };
    DatasourceSrv.prototype.getMetricSources = function (options) {
        var metricSources = [];
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources, function (value, key) {
            if (value.meta && value.meta.metrics) {
                var metricSource = { value: key, name: key, meta: value.meta, sort: key };
                //Make sure grafana and mixed are sorted at the bottom
                if (value.meta.id === 'grafana') {
                    metricSource.sort = String.fromCharCode(253);
                }
                else if (value.meta.id === 'mixed') {
                    metricSource.sort = String.fromCharCode(254);
                }
                metricSources.push(metricSource);
                if (key === app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDatasource) {
                    metricSource = { value: null, name: 'default', meta: value.meta, sort: key };
                    metricSources.push(metricSource);
                }
            }
        });
        if (!options || !options.skipVariables) {
            this.addDataSourceVariables(metricSources);
        }
        metricSources.sort(function (a, b) {
            if (a.sort.toLowerCase() > b.sort.toLowerCase()) {
                return 1;
            }
            if (a.sort.toLowerCase() < b.sort.toLowerCase()) {
                return -1;
            }
            return 0;
        });
        return metricSources;
    };
    DatasourceSrv.prototype.addDataSourceVariables = function (list) {
        // look for data source variables
        for (var i = 0; i < this.templateSrv.variables.length; i++) {
            var variable = this.templateSrv.variables[i];
            if (variable.type !== 'datasource') {
                continue;
            }
            var first = variable.current.value;
            if (first === 'default') {
                first = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDatasource;
            }
            var ds = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].datasources[first];
            if (ds) {
                var key = "$" + variable.name;
                list.push({
                    name: key,
                    value: key,
                    meta: ds.meta,
                    sort: key,
                });
            }
        }
    };
    return DatasourceSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].service('datasourceSrv', DatasourceSrv);
/* harmony default export */ __webpack_exports__["default"] = (DatasourceSrv);


/***/ }),

/***/ "./public/app/features/plugins/ds_dashboards_ctrl.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/plugins/ds_dashboards_ctrl.ts ***!
  \***********************************************************/
/*! exports provided: DataSourceDashboardsCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSourceDashboardsCtrl", function() { return DataSourceDashboardsCtrl; });
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_store_configureStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/store/configureStore */ "./public/app/store/configureStore.ts");
/* harmony import */ var app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/selectors/navModel */ "./public/app/core/selectors/navModel.ts");
/* harmony import */ var _state_navModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state/navModel */ "./public/app/features/plugins/state/navModel.ts");




var DataSourceDashboardsCtrl = /** @class */ (function () {
    /** @ngInject */
    function DataSourceDashboardsCtrl(backendSrv, $routeParams) {
        this.backendSrv = backendSrv;
        this.$routeParams = $routeParams;
        var state = app_store_configureStore__WEBPACK_IMPORTED_MODULE_1__["store"].getState();
        this.navModel = Object(app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_2__["getNavModel"])(state.navIndex, 'datasources');
        if (this.$routeParams.id) {
            this.getDatasourceById(this.$routeParams.id);
        }
    }
    DataSourceDashboardsCtrl.prototype.getDatasourceById = function (id) {
        var _this = this;
        this.backendSrv
            .get('/api/datasources/' + id)
            .then(function (ds) {
            _this.current = ds;
        })
            .then(this.getPluginInfo.bind(this));
    };
    DataSourceDashboardsCtrl.prototype.updateNav = function () {
        this.navModel = Object(_state_navModel__WEBPACK_IMPORTED_MODULE_3__["buildNavModel"])(this.current, this.datasourceMeta, 'datasource-dashboards');
    };
    DataSourceDashboardsCtrl.prototype.getPluginInfo = function () {
        var _this = this;
        return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(function (pluginInfo) {
            _this.datasourceMeta = pluginInfo;
            _this.updateNav();
        });
    };
    return DataSourceDashboardsCtrl;
}());

app_core_core__WEBPACK_IMPORTED_MODULE_0__["coreModule"].controller('DataSourceDashboardsCtrl', DataSourceDashboardsCtrl);


/***/ }),

/***/ "./public/app/features/plugins/ds_edit_ctrl.ts":
/*!*****************************************************!*\
  !*** ./public/app/features/plugins/ds_edit_ctrl.ts ***!
  \*****************************************************/
/*! exports provided: DataSourceEditCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataSourceEditCtrl", function() { return DataSourceEditCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_store_configureStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/store/configureStore */ "./public/app/store/configureStore.ts");
/* harmony import */ var app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/selectors/navModel */ "./public/app/core/selectors/navModel.ts");
/* harmony import */ var _state_navModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./state/navModel */ "./public/app/features/plugins/state/navModel.ts");






var datasourceTypes = [];
var defaults = {
    name: '',
    type: 'graphite',
    url: '',
    access: 'proxy',
    jsonData: {},
    secureJsonFields: {},
    secureJsonData: {},
};
var datasourceCreated = false;
var DataSourceEditCtrl = /** @class */ (function () {
    /** @ngInject */
    function DataSourceEditCtrl($q, backendSrv, $routeParams, $location, datasourceSrv) {
        var _this = this;
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.$routeParams = $routeParams;
        this.$location = $location;
        this.datasourceSrv = datasourceSrv;
        var state = app_store_configureStore__WEBPACK_IMPORTED_MODULE_3__["store"].getState();
        this.navModel = Object(app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_4__["getNavModel"])(state.navIndex, 'datasources');
        this.datasources = [];
        this.loadDatasourceTypes().then(function () {
            if (_this.$routeParams.id) {
                _this.getDatasourceById(_this.$routeParams.id);
            }
            else {
                _this.initNewDatasourceModel();
            }
        });
    }
    DataSourceEditCtrl.prototype.initNewDatasourceModel = function () {
        this.isNew = true;
        this.current = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(defaults);
        // We are coming from getting started
        if (this.$location.search().gettingstarted) {
            this.gettingStarted = true;
            this.current.isDefault = true;
        }
        this.typeChanged();
    };
    DataSourceEditCtrl.prototype.loadDatasourceTypes = function () {
        var _this = this;
        if (datasourceTypes.length > 0) {
            this.types = datasourceTypes;
            return this.$q.when(null);
        }
        return this.backendSrv.get('/api/plugins', { enabled: 1, type: 'datasource' }).then(function (plugins) {
            datasourceTypes = plugins;
            _this.types = plugins;
        });
    };
    DataSourceEditCtrl.prototype.getDatasourceById = function (id) {
        var _this = this;
        this.backendSrv.get('/api/datasources/' + id).then(function (ds) {
            _this.isNew = false;
            _this.current = ds;
            if (datasourceCreated) {
                datasourceCreated = false;
                _this.testDatasource();
            }
            return _this.typeChanged();
        });
    };
    DataSourceEditCtrl.prototype.userChangedType = function () {
        // reset model but keep name & default flag
        this.current = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaults({
            id: this.current.id,
            name: this.current.name,
            isDefault: this.current.isDefault,
            type: this.current.type,
        }, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(defaults));
        this.typeChanged();
    };
    DataSourceEditCtrl.prototype.updateNav = function () {
        this.navModel = Object(_state_navModel__WEBPACK_IMPORTED_MODULE_5__["buildNavModel"])(this.current, this.datasourceMeta, 'datasource-settings');
    };
    DataSourceEditCtrl.prototype.typeChanged = function () {
        var _this = this;
        return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(function (pluginInfo) {
            _this.datasourceMeta = pluginInfo;
            _this.updateNav();
        });
    };
    DataSourceEditCtrl.prototype.updateFrontendSettings = function () {
        var _this = this;
        return this.backendSrv.get('/api/frontend/settings').then(function (settings) {
            app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].datasources = settings.datasources;
            app_core_config__WEBPACK_IMPORTED_MODULE_1__["default"].defaultDatasource = settings.defaultDatasource;
            _this.datasourceSrv.init();
        });
    };
    DataSourceEditCtrl.prototype.testDatasource = function () {
        var _this = this;
        this.datasourceSrv.get(this.current.name).then(function (datasource) {
            if (!datasource.testDatasource) {
                return;
            }
            _this.testing = { done: false, status: 'error' };
            // make test call in no backend cache context
            _this.backendSrv
                .withNoBackendCache(function () {
                return datasource
                    .testDatasource()
                    .then(function (result) {
                    _this.testing.message = result.message;
                    _this.testing.status = result.status;
                })
                    .catch(function (err) {
                    if (err.statusText) {
                        _this.testing.message = 'HTTP Error ' + err.statusText;
                    }
                    else {
                        _this.testing.message = err.message;
                    }
                });
            })
                .finally(function () {
                _this.testing.done = true;
            });
        });
    };
    DataSourceEditCtrl.prototype.saveChanges = function () {
        var _this = this;
        if (!this.editForm.$valid) {
            return;
        }
        if (this.current.readOnly) {
            return;
        }
        if (this.current.id) {
            return this.backendSrv.put('/api/datasources/' + this.current.id, this.current).then(function (result) {
                _this.current = result.datasource;
                _this.updateNav();
                _this.updateFrontendSettings().then(function () {
                    _this.testDatasource();
                });
            });
        }
        else {
            return this.backendSrv.post('/api/datasources', this.current).then(function (result) {
                _this.current = result.datasource;
                _this.updateFrontendSettings();
                datasourceCreated = true;
                _this.$location.path('datasources/edit/' + result.id);
            });
        }
    };
    DataSourceEditCtrl.prototype.confirmDelete = function () {
        var _this = this;
        this.backendSrv.delete('/api/datasources/' + this.current.id).then(function () {
            _this.$location.path('datasources');
        });
    };
    DataSourceEditCtrl.prototype.delete = function (s) {
        var _this = this;
        app_core_core__WEBPACK_IMPORTED_MODULE_2__["appEvents"].emit('confirm-modal', {
            title: 'Delete',
            text: 'Are you sure you want to delete this datasource?',
            yesText: 'Delete',
            icon: 'fa-trash',
            onConfirm: function () {
                _this.confirmDelete();
            },
        });
    };
    return DataSourceEditCtrl;
}());

app_core_core__WEBPACK_IMPORTED_MODULE_2__["coreModule"].controller('DataSourceEditCtrl', DataSourceEditCtrl);
app_core_core__WEBPACK_IMPORTED_MODULE_2__["coreModule"].directive('datasourceHttpSettings', function () {
    return {
        scope: {
            current: '=',
            suggestUrl: '@',
            noDirectAccess: '@',
        },
        templateUrl: 'public/app/features/plugins/partials/ds_http_settings.html',
        link: {
            pre: function ($scope, elem, attrs) {
                // do not show access option if direct access is disabled
                $scope.showAccessOption = $scope.noDirectAccess !== 'true';
                $scope.showAccessHelp = false;
                $scope.toggleAccessHelp = function () {
                    $scope.showAccessHelp = !$scope.showAccessHelp;
                };
                $scope.getSuggestUrls = function () {
                    return [$scope.suggestUrl];
                };
            },
        },
    };
});


/***/ }),

/***/ "./public/app/features/plugins/import_list/import_list.ts":
/*!****************************************************************!*\
  !*** ./public/app/features/plugins/import_list/import_list.ts ***!
  \****************************************************************/
/*! exports provided: DashImportListCtrl, dashboardImportList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashImportListCtrl", function() { return DashImportListCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dashboardImportList", function() { return dashboardImportList; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");



var DashImportListCtrl = /** @class */ (function () {
    /** @ngInject */
    function DashImportListCtrl($scope, backendSrv, $rootScope) {
        var _this = this;
        this.backendSrv = backendSrv;
        this.$rootScope = $rootScope;
        this.dashboards = [];
        backendSrv.get("/api/plugins/" + this.plugin.id + "/dashboards").then(function (dashboards) {
            _this.dashboards = dashboards;
        });
        app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].on('dashboard-list-import-all', this.importAll.bind(this), $scope);
    }
    DashImportListCtrl.prototype.importAll = function (payload) {
        return this.importNext(0)
            .then(function () {
            payload.resolve('All dashboards imported');
        })
            .catch(function (err) {
            payload.reject(err);
        });
    };
    DashImportListCtrl.prototype.importNext = function (index) {
        var _this = this;
        return this.import(this.dashboards[index], true).then(function () {
            if (index + 1 < _this.dashboards.length) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        _this.importNext(index + 1).then(function () {
                            resolve();
                        });
                    }, 500);
                });
            }
            else {
                return Promise.resolve();
            }
        });
    };
    DashImportListCtrl.prototype.import = function (dash, overwrite) {
        var _this = this;
        var installCmd = {
            pluginId: this.plugin.id,
            path: dash.path,
            overwrite: overwrite,
            inputs: [],
        };
        if (this.datasource) {
            installCmd.inputs.push({
                name: '*',
                type: 'datasource',
                pluginId: this.datasource.type,
                value: this.datasource.name,
            });
        }
        return this.backendSrv.post("/api/dashboards/import", installCmd).then(function (res) {
            _this.$rootScope.appEvent('alert-success', ['Dashboard Imported', dash.title]);
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.extend(dash, res);
        });
    };
    DashImportListCtrl.prototype.remove = function (dash) {
        var _this = this;
        this.backendSrv.delete('/api/dashboards/' + dash.importedUri).then(function () {
            _this.$rootScope.appEvent('alert-success', ['Dashboard Deleted', dash.title]);
            dash.imported = false;
        });
    };
    return DashImportListCtrl;
}());

function dashboardImportList() {
    return {
        restrict: 'E',
        templateUrl: 'public/app/features/plugins/import_list/import_list.html',
        controller: DashImportListCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            plugin: '=',
            datasource: '=',
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].directive('dashboardImportList', dashboardImportList);


/***/ }),

/***/ "./public/app/features/plugins/plugin_component.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/plugins/plugin_component.ts ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _plugin_loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin_loader */ "./public/app/features/plugins/plugin_loader.ts");
/* harmony import */ var app_plugins_panel_unknown_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/plugins/panel/unknown/module */ "./public/app/plugins/panel/unknown/module.ts");






/** @ngInject */
function pluginDirectiveLoader($compile, datasourceSrv, $rootScope, $q, $http, $templateCache) {
    function getTemplate(component) {
        if (component.template) {
            return $q.when(component.template);
        }
        var cached = $templateCache.get(component.templateUrl);
        if (cached) {
            return $q.when(cached);
        }
        return $http.get(component.templateUrl).then(function (res) {
            return res.data;
        });
    }
    function relativeTemplateUrlToAbs(templateUrl, baseUrl) {
        if (!templateUrl) {
            return undefined;
        }
        if (templateUrl.indexOf('public') === 0) {
            return templateUrl;
        }
        return baseUrl + '/' + templateUrl;
    }
    function getPluginComponentDirective(options) {
        // handle relative template urls for plugin templates
        options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);
        return function () {
            return {
                templateUrl: options.Component.templateUrl,
                template: options.Component.template,
                restrict: 'E',
                controller: options.Component,
                controllerAs: 'ctrl',
                bindToController: true,
                scope: options.bindings,
                link: function (scope, elem, attrs, ctrl) {
                    if (ctrl.link) {
                        ctrl.link(scope, elem, attrs, ctrl);
                    }
                    if (ctrl.init) {
                        ctrl.init();
                    }
                },
            };
        };
    }
    function loadPanelComponentInfo(scope, attrs) {
        var componentInfo = {
            name: 'panel-plugin-' + scope.panel.type,
            bindings: { dashboard: '=', panel: '=', row: '=' },
            attrs: {
                dashboard: 'dashboard',
                panel: 'panel',
                class: 'panel-height-helper',
            },
        };
        var panelInfo = app_core_config__WEBPACK_IMPORTED_MODULE_2__["default"].panels[scope.panel.type];
        var panelCtrlPromise = Promise.resolve(app_plugins_panel_unknown_module__WEBPACK_IMPORTED_MODULE_5__["UnknownPanelCtrl"]);
        if (panelInfo) {
            panelCtrlPromise = Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(panelInfo.module).then(function (panelModule) {
                return panelModule.PanelCtrl;
            });
        }
        return panelCtrlPromise.then(function (PanelCtrl) {
            componentInfo.Component = PanelCtrl;
            if (!PanelCtrl || PanelCtrl.registered) {
                return componentInfo;
            }
            if (PanelCtrl.templatePromise) {
                return PanelCtrl.templatePromise.then(function (res) {
                    return componentInfo;
                });
            }
            if (panelInfo) {
                PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);
            }
            PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(function (template) {
                PanelCtrl.templateUrl = null;
                PanelCtrl.template = "<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">" + template + "</grafana-panel>";
                return componentInfo;
            });
            return PanelCtrl.templatePromise;
        });
    }
    function getModule(scope, attrs) {
        switch (attrs.type) {
            // QueryCtrl
            case 'query-ctrl': {
                var datasource = scope.target.datasource || scope.ctrl.panel.datasource;
                return datasourceSrv.get(datasource).then(function (ds) {
                    scope.datasource = ds;
                    return Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(ds.meta.module).then(function (dsModule) {
                        return {
                            baseUrl: ds.meta.baseUrl,
                            name: 'query-ctrl-' + ds.meta.id,
                            bindings: { target: '=', panelCtrl: '=', datasource: '=' },
                            attrs: {
                                target: 'target',
                                'panel-ctrl': 'ctrl.panelCtrl',
                                datasource: 'datasource',
                            },
                            Component: dsModule.QueryCtrl,
                        };
                    });
                });
            }
            // Annotations
            case 'annotations-query-ctrl': {
                return Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(scope.ctrl.currentDatasource.meta.module).then(function (dsModule) {
                    return {
                        baseUrl: scope.ctrl.currentDatasource.meta.baseUrl,
                        name: 'annotations-query-ctrl-' + scope.ctrl.currentDatasource.meta.id,
                        bindings: { annotation: '=', datasource: '=' },
                        attrs: {
                            annotation: 'ctrl.currentAnnotation',
                            datasource: 'ctrl.currentDatasource',
                        },
                        Component: dsModule.AnnotationsQueryCtrl,
                    };
                });
            }
            // Datasource ConfigCtrl
            case 'datasource-config-ctrl': {
                var dsMeta_1 = scope.ctrl.datasourceMeta;
                return Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(dsMeta_1.module).then(function (dsModule) {
                    if (!dsModule.ConfigCtrl) {
                        return { notFound: true };
                    }
                    return {
                        baseUrl: dsMeta_1.baseUrl,
                        name: 'ds-config-' + dsMeta_1.id,
                        bindings: { meta: '=', current: '=' },
                        attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },
                        Component: dsModule.ConfigCtrl,
                    };
                });
            }
            // AppConfigCtrl
            case 'app-config-ctrl': {
                var model_1 = scope.ctrl.model;
                return Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(model_1.module).then(function (appModule) {
                    return {
                        baseUrl: model_1.baseUrl,
                        name: 'app-config-' + model_1.id,
                        bindings: { appModel: '=', appEditCtrl: '=' },
                        attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },
                        Component: appModule.ConfigCtrl,
                    };
                });
            }
            // App Page
            case 'app-page': {
                var appModel_1 = scope.ctrl.appModel;
                return Object(_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["importPluginModule"])(appModel_1.module).then(function (appModule) {
                    return {
                        baseUrl: appModel_1.baseUrl,
                        name: 'app-page-' + appModel_1.id + '-' + scope.ctrl.page.slug,
                        bindings: { appModel: '=' },
                        attrs: { 'app-model': 'ctrl.appModel' },
                        Component: appModule[scope.ctrl.page.component],
                    };
                });
            }
            // Panel
            case 'panel': {
                return loadPanelComponentInfo(scope, attrs);
            }
            default: {
                return $q.reject({
                    message: 'Could not find component type: ' + attrs.type,
                });
            }
        }
    }
    function appendAndCompile(scope, elem, componentInfo) {
        var child = angular__WEBPACK_IMPORTED_MODULE_0___default.a.element(document.createElement(componentInfo.name));
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(componentInfo.attrs, function (value, key) {
            child.attr(key, value);
        });
        $compile(child)(scope);
        elem.empty();
        // let a binding digest cycle complete before adding to dom
        setTimeout(function () {
            elem.append(child);
            scope.$applyAsync(function () {
                scope.$broadcast('component-did-mount');
                scope.$broadcast('refresh');
            });
        });
    }
    function registerPluginComponent(scope, elem, attrs, componentInfo) {
        if (componentInfo.notFound) {
            elem.empty();
            return;
        }
        if (!componentInfo.Component) {
            throw {
                message: 'Failed to find exported plugin component for ' + componentInfo.name,
            };
        }
        if (!componentInfo.Component.registered) {
            var directiveName = attrs.$normalize(componentInfo.name);
            var directiveFn = getPluginComponentDirective(componentInfo);
            app_core_core_module__WEBPACK_IMPORTED_MODULE_3__["default"].directive(directiveName, directiveFn);
            componentInfo.Component.registered = true;
        }
        appendAndCompile(scope, elem, componentInfo);
    }
    return {
        restrict: 'E',
        link: function (scope, elem, attrs) {
            getModule(scope, attrs)
                .then(function (componentInfo) {
                registerPluginComponent(scope, elem, attrs, componentInfo);
            })
                .catch(function (err) {
                $rootScope.appEvent('alert-error', ['Plugin Error', err.message || err]);
                console.log('Plugin component error', err);
            });
        },
    };
}
app_core_core_module__WEBPACK_IMPORTED_MODULE_3__["default"].directive('pluginComponent', pluginDirectiveLoader);


/***/ }),

/***/ "./public/app/features/plugins/plugin_edit_ctrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/plugins/plugin_edit_ctrl.ts ***!
  \*********************************************************/
/*! exports provided: PluginEditCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluginEditCtrl", function() { return PluginEditCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remarkable */ "./node_modules/remarkable/index.js");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(remarkable__WEBPACK_IMPORTED_MODULE_2__);



var PluginEditCtrl = /** @class */ (function () {
    /** @ngInject */
    function PluginEditCtrl($scope, $rootScope, backendSrv, $sce, $routeParams, navModelSrv) {
        this.$scope = $scope;
        this.$rootScope = $rootScope;
        this.backendSrv = backendSrv;
        this.$sce = $sce;
        this.$routeParams = $routeParams;
        this.pluginId = $routeParams.pluginId;
        this.preUpdateHook = function () { return Promise.resolve(); };
        this.postUpdateHook = function () { return Promise.resolve(); };
        this.init();
    }
    PluginEditCtrl.prototype.setNavModel = function (model) {
        var defaultTab = 'readme';
        this.navModel = {
            main: {
                img: model.info.logos.large,
                subTitle: model.info.author.name,
                url: '',
                text: model.name,
                breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],
                children: [
                    {
                        icon: 'fa fa-fw fa-file-text-o',
                        id: 'readme',
                        text: 'Readme',
                        url: "plugins/" + this.model.id + "/edit?tab=readme",
                    },
                ],
            },
        };
        if (model.type === 'app') {
            this.navModel.main.children.push({
                icon: 'gicon gicon-cog',
                id: 'config',
                text: 'Config',
                url: "plugins/" + this.model.id + "/edit?tab=config",
            });
            var hasDashboards = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(model.includes, { type: 'dashboard' });
            if (hasDashboards) {
                this.navModel.main.children.push({
                    icon: 'gicon gicon-dashboard',
                    id: 'dashboards',
                    text: 'Dashboards',
                    url: "plugins/" + this.model.id + "/edit?tab=dashboards",
                });
            }
            defaultTab = 'config';
        }
        this.tab = this.$routeParams.tab || defaultTab;
        for (var _i = 0, _a = this.navModel.main.children; _i < _a.length; _i++) {
            var tab = _a[_i];
            if (tab.id === this.tab) {
                tab.active = true;
            }
        }
    };
    PluginEditCtrl.prototype.init = function () {
        var _this = this;
        return this.backendSrv.get("/api/plugins/" + this.pluginId + "/settings").then(function (result) {
            _this.model = result;
            _this.pluginIcon = _this.getPluginIcon(_this.model.type);
            _this.model.dependencies.plugins.forEach(function (plug) {
                plug.icon = _this.getPluginIcon(plug.type);
            });
            _this.includes = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(result.includes, function (plug) {
                plug.icon = _this.getPluginIcon(plug.type);
                return plug;
            });
            _this.setNavModel(_this.model);
            return _this.initReadme();
        });
    };
    PluginEditCtrl.prototype.initReadme = function () {
        var _this = this;
        return this.backendSrv.get("/api/plugins/" + this.pluginId + "/markdown/readme").then(function (res) {
            var md = new remarkable__WEBPACK_IMPORTED_MODULE_2___default.a({
                linkify: true,
            });
            _this.readmeHtml = _this.$sce.trustAsHtml(md.render(res));
        });
    };
    PluginEditCtrl.prototype.getPluginIcon = function (type) {
        switch (type) {
            case 'datasource':
                return 'icon-gf icon-gf-datasources';
            case 'panel':
                return 'icon-gf icon-gf-panel';
            case 'app':
                return 'icon-gf icon-gf-apps';
            case 'page':
                return 'icon-gf icon-gf-endpoint-tiny';
            case 'dashboard':
                return 'icon-gf icon-gf-dashboard';
            default:
                return 'icon-gf icon-gf-apps';
        }
    };
    PluginEditCtrl.prototype.update = function () {
        var _this = this;
        this.preUpdateHook()
            .then(function () {
            var updateCmd = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({
                enabled: _this.model.enabled,
                pinned: _this.model.pinned,
                jsonData: _this.model.jsonData,
                secureJsonData: _this.model.secureJsonData,
            }, {});
            return _this.backendSrv.post("/api/plugins/" + _this.pluginId + "/settings", updateCmd);
        })
            .then(this.postUpdateHook)
            .then(function (res) {
            window.location.href = window.location.href;
        });
    };
    PluginEditCtrl.prototype.importDashboards = function () {
        return Promise.resolve();
    };
    PluginEditCtrl.prototype.setPreUpdateHook = function (callback) {
        this.preUpdateHook = callback;
    };
    PluginEditCtrl.prototype.setPostUpdateHook = function (callback) {
        this.postUpdateHook = callback;
    };
    PluginEditCtrl.prototype.updateAvailable = function () {
        var modalScope = this.$scope.$new(true);
        modalScope.plugin = this.model;
        this.$rootScope.appEvent('show-modal', {
            src: 'public/app/features/plugins/partials/update_instructions.html',
            scope: modalScope,
        });
    };
    PluginEditCtrl.prototype.enable = function () {
        this.model.enabled = true;
        this.model.pinned = true;
        this.update();
    };
    PluginEditCtrl.prototype.disable = function () {
        this.model.enabled = false;
        this.model.pinned = false;
        this.update();
    };
    return PluginEditCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('PluginEditCtrl', PluginEditCtrl);


/***/ }),

/***/ "./public/app/features/plugins/plugin_loader.ts":
/*!******************************************************!*\
  !*** ./public/app/features/plugins/plugin_loader.ts ***!
  \******************************************************/
/*! exports provided: importPluginModule, loadPluginCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importPluginModule", function() { return importPluginModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadPluginCss", function() { return loadPluginCss; });
/* harmony import */ var systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! systemjs/dist/system.js */ "./node_modules/systemjs/dist/system.js");
/* harmony import */ var systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismjs */ "./node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! slate */ "./node_modules/slate/lib/slate.es.js");
/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! slate-react */ "./node_modules/slate-react/lib/slate-react.es.js");
/* harmony import */ var slate_plain_serializer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! slate-plain-serializer */ "./node_modules/slate-plain-serializer/lib/slate-plain-serializer.es.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_time_series2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! app/core/time_series2 */ "./public/app/core/time_series2.ts");
/* harmony import */ var app_core_table_model__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! app/core/table_model */ "./public/app/core/table_model.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! app/core/utils/file_export */ "./public/app/core/utils/file_export.ts");
/* harmony import */ var app_core_utils_flatten__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! app/core/utils/flatten */ "./public/app/core/utils/flatten.ts");
/* harmony import */ var app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! app/core/utils/ticks */ "./public/app/core/utils/ticks.ts");
/* harmony import */ var app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! app/core/services/impression_srv */ "./public/app/core/services/impression_srv.ts");
/* harmony import */ var _built_in_plugins__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./built_in_plugins */ "./public/app/features/plugins/built_in_plugins.ts");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
/* harmony import */ var rxjs_Observable__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs/Observable */ "./node_modules/rxjs/Observable.js");
/* harmony import */ var rxjs_Observable__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(rxjs_Observable__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var rxjs_Subject__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs/Subject */ "./node_modules/rxjs/Subject.js");
/* harmony import */ var rxjs_Subject__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(rxjs_Subject__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var rxjs_add_observable_empty__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/add/observable/empty */ "./node_modules/rxjs/add/observable/empty.js");
/* harmony import */ var rxjs_add_observable_empty__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(rxjs_add_observable_empty__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var rxjs_add_observable_from__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs/add/observable/from */ "./node_modules/rxjs/add/observable/from.js");
/* harmony import */ var rxjs_add_observable_from__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(rxjs_add_observable_from__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var rxjs_add_operator_map__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! rxjs/add/operator/map */ "./node_modules/rxjs/add/operator/map.js");
/* harmony import */ var rxjs_add_operator_map__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(rxjs_add_operator_map__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var rxjs_add_operator_combineAll__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! rxjs/add/operator/combineAll */ "./node_modules/rxjs/add/operator/combineAll.js");
/* harmony import */ var rxjs_add_operator_combineAll__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(rxjs_add_operator_combineAll__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! vendor/flot/jquery.flot */ "./public/vendor/flot/jquery.flot.js");
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! vendor/flot/jquery.flot.selection */ "./public/vendor/flot/jquery.flot.selection.js");
/* harmony import */ var vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! vendor/flot/jquery.flot.time */ "./public/vendor/flot/jquery.flot.time.js");
/* harmony import */ var vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! vendor/flot/jquery.flot.stack */ "./public/vendor/flot/jquery.flot.stack.js");
/* harmony import */ var vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var vendor_flot_jquery_flot_pie__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! vendor/flot/jquery.flot.pie */ "./public/vendor/flot/jquery.flot.pie.js");
/* harmony import */ var vendor_flot_jquery_flot_pie__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_pie__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! vendor/flot/jquery.flot.stackpercent */ "./public/vendor/flot/jquery.flot.stackpercent.js");
/* harmony import */ var vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! vendor/flot/jquery.flot.fillbelow */ "./public/vendor/flot/jquery.flot.fillbelow.js");
/* harmony import */ var vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! vendor/flot/jquery.flot.crosshair */ "./public/vendor/flot/jquery.flot.crosshair.js");
/* harmony import */ var vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_37__);
/* harmony import */ var vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! vendor/flot/jquery.flot.dashes */ "./public/vendor/flot/jquery.flot.dashes.js");
/* harmony import */ var vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_38__);
/* harmony import */ var vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! vendor/flot/jquery.flot.gauge */ "./public/vendor/flot/jquery.flot.gauge.js");
/* harmony import */ var vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_39__);







// Experimental module exports

















// rxjs


// these imports add functions to Observable




// add cache busting
var bust = "?_cache=" + Date.now();
function locate(load) {
    return load.address + bust;
}
systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.registry.set('plugin-loader', systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.newModule({ locate: locate }));
systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.config({
    baseURL: 'public',
    defaultExtension: 'js',
    packages: {
        plugins: {
            defaultExtension: 'js',
        },
    },
    map: {
        text: 'vendor/plugin-text/text.js',
        css: 'vendor/plugin-css/css.js',
    },
    meta: {
        '/*': {
            esModule: true,
            authorization: true,
            loader: 'plugin-loader',
        },
    },
});
function exposeToPlugin(name, component) {
    systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.registerDynamic(name, [], true, function (require, exports, module) {
        module.exports = component;
    });
}
exposeToPlugin('lodash', lodash__WEBPACK_IMPORTED_MODULE_1___default.a);
exposeToPlugin('moment', moment__WEBPACK_IMPORTED_MODULE_4___default.a);
exposeToPlugin('jquery', jquery__WEBPACK_IMPORTED_MODULE_6___default.a);
exposeToPlugin('angular', angular__WEBPACK_IMPORTED_MODULE_5___default.a);
exposeToPlugin('d3', d3__WEBPACK_IMPORTED_MODULE_23__);
exposeToPlugin('rxjs/Subject', rxjs_Subject__WEBPACK_IMPORTED_MODULE_25__["Subject"]);
exposeToPlugin('rxjs/Observable', rxjs_Observable__WEBPACK_IMPORTED_MODULE_24__["Observable"]);
// Experimental modules
exposeToPlugin('prismjs', prismjs__WEBPACK_IMPORTED_MODULE_7___default.a);
exposeToPlugin('slate', slate__WEBPACK_IMPORTED_MODULE_8__["default"]);
exposeToPlugin('slate-react', slate_react__WEBPACK_IMPORTED_MODULE_9__["default"]);
exposeToPlugin('slate-plain-serializer', slate_plain_serializer__WEBPACK_IMPORTED_MODULE_10__["default"]);
exposeToPlugin('react', react__WEBPACK_IMPORTED_MODULE_11___default.a);
exposeToPlugin('react-dom', react_dom__WEBPACK_IMPORTED_MODULE_12___default.a);
// backward compatible path
exposeToPlugin('vendor/npm/rxjs/Rx', {
    Subject: rxjs_Subject__WEBPACK_IMPORTED_MODULE_25__["Subject"],
    Observable: rxjs_Observable__WEBPACK_IMPORTED_MODULE_24__["Observable"],
});
exposeToPlugin('app/features/dashboard/impression_store', {
    impressions: app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_21__["default"],
    __esModule: true,
});
exposeToPlugin('app/plugins/sdk', app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__);
exposeToPlugin('app/core/utils/datemath', app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_17__);
exposeToPlugin('app/core/utils/file_export', app_core_utils_file_export__WEBPACK_IMPORTED_MODULE_18__);
exposeToPlugin('app/core/utils/flatten', app_core_utils_flatten__WEBPACK_IMPORTED_MODULE_19__);
exposeToPlugin('app/core/utils/kbn', app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"]);
exposeToPlugin('app/core/utils/ticks', app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_20__);
exposeToPlugin('app/core/config', app_core_config__WEBPACK_IMPORTED_MODULE_13__["default"]);
exposeToPlugin('app/core/time_series', app_core_time_series2__WEBPACK_IMPORTED_MODULE_14__["default"]);
exposeToPlugin('app/core/time_series2', app_core_time_series2__WEBPACK_IMPORTED_MODULE_14__["default"]);
exposeToPlugin('app/core/table_model', app_core_table_model__WEBPACK_IMPORTED_MODULE_15__["default"]);
exposeToPlugin('app/core/app_events', app_core_core__WEBPACK_IMPORTED_MODULE_16__["appEvents"]);
exposeToPlugin('app/core/core_module', app_core_core__WEBPACK_IMPORTED_MODULE_16__["coreModule"]);
exposeToPlugin('app/core/core', {
    coreModule: app_core_core__WEBPACK_IMPORTED_MODULE_16__["coreModule"],
    appEvents: app_core_core__WEBPACK_IMPORTED_MODULE_16__["appEvents"],
    contextSrv: app_core_core__WEBPACK_IMPORTED_MODULE_16__["contextSrv"],
    __esModule: true,
});










var flotDeps = [
    'jquery.flot',
    'jquery.flot.pie',
    'jquery.flot.time',
    'jquery.flot.fillbelow',
    'jquery.flot.crosshair',
    'jquery.flot.stack',
    'jquery.flot.selection',
    'jquery.flot.stackpercent',
    'jquery.flot.events',
    'jquery.flot.gauge',
];
for (var _i = 0, flotDeps_1 = flotDeps; _i < flotDeps_1.length; _i++) {
    var flotDep = flotDeps_1[_i];
    exposeToPlugin(flotDep, { fakeDep: 1 });
}
function importPluginModule(path) {
    var builtIn = _built_in_plugins__WEBPACK_IMPORTED_MODULE_22__["default"][path];
    if (builtIn) {
        return Promise.resolve(builtIn);
    }
    return systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.import(path);
}
function loadPluginCss(options) {
    if (app_core_config__WEBPACK_IMPORTED_MODULE_13__["default"].bootData.user.lightTheme) {
        systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.import(options.light + '!css');
    }
    else {
        systemjs_dist_system_js__WEBPACK_IMPORTED_MODULE_0___default.a.import(options.dark + '!css');
    }
}


/***/ }),

/***/ "./public/app/features/plugins/plugin_page_ctrl.ts":
/*!*********************************************************!*\
  !*** ./public/app/features/plugins/plugin_page_ctrl.ts ***!
  \*********************************************************/
/*! exports provided: AppPageCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppPageCtrl", function() { return AppPageCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var pluginInfoCache = {};
var AppPageCtrl = /** @class */ (function () {
    /** @ngInject */
    function AppPageCtrl(backendSrv, $routeParams, $rootScope, navModelSrv) {
        this.backendSrv = backendSrv;
        this.$routeParams = $routeParams;
        this.$rootScope = $rootScope;
        this.navModelSrv = navModelSrv;
        this.pluginId = $routeParams.pluginId;
        if (pluginInfoCache[this.pluginId]) {
            this.initPage(pluginInfoCache[this.pluginId]);
        }
        else {
            this.loadPluginInfo();
        }
    }
    AppPageCtrl.prototype.initPage = function (app) {
        this.appModel = app;
        this.page = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(app.includes, { slug: this.$routeParams.slug });
        pluginInfoCache[this.pluginId] = app;
        if (!this.page) {
            this.$rootScope.appEvent('alert-error', ['App Page Not Found', '']);
            this.navModel = this.navModelSrv.getNotFoundNav();
            return;
        }
        var pluginNav = this.navModelSrv.getNav('plugin-page-' + app.id);
        this.navModel = {
            main: {
                img: app.info.logos.large,
                subTitle: app.name,
                url: '',
                text: this.page.name,
                breadcrumbs: [{ title: app.name, url: pluginNav.main.url }],
            },
        };
    };
    AppPageCtrl.prototype.loadPluginInfo = function () {
        var _this = this;
        this.backendSrv.get("/api/plugins/" + this.pluginId + "/settings").then(function (app) {
            _this.initPage(app);
        });
    };
    return AppPageCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('AppPageCtrl', AppPageCtrl);


/***/ }),

/***/ "./public/app/features/plugins/state/navModel.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/plugins/state/navModel.ts ***!
  \*******************************************************/
/*! exports provided: buildNavModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildNavModel", function() { return buildNavModel; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

function buildNavModel(ds, plugin, currentPage) {
    var title = 'New';
    var subTitle = "Type: " + plugin.name;
    if (ds.id) {
        title = ds.name;
    }
    var main = {
        img: plugin.info.logos.large,
        id: 'ds-edit-' + plugin.id,
        subTitle: subTitle,
        url: '',
        text: title,
        breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],
        children: [
            {
                active: currentPage === 'datasource-settings',
                icon: 'fa fa-fw fa-sliders',
                id: 'datasource-settings',
                text: 'Settings',
                url: "datasources/edit/" + ds.id,
            },
        ],
    };
    var hasDashboards = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(plugin.includes, { type: 'dashboard' }) !== undefined;
    if (hasDashboards && ds.id) {
        main.children.push({
            active: currentPage === 'datasource-dashboards',
            icon: 'fa fa-fw fa-th-large',
            id: 'datasource-dashboards',
            text: 'Dashboards',
            url: "datasources/edit/" + ds.id + "/dashboards",
        });
    }
    return {
        main: main,
        node: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(main.children, { active: true }),
    };
}


/***/ }),

/***/ "./public/app/features/templating/TextBoxVariable.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/templating/TextBoxVariable.ts ***!
  \***********************************************************/
/*! exports provided: TextBoxVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextBoxVariable", function() { return TextBoxVariable; });
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");

var TextBoxVariable = /** @class */ (function () {
    /** @ngInject */
    function TextBoxVariable(model, variableSrv) {
        this.model = model;
        this.variableSrv = variableSrv;
        this.defaults = {
            type: 'textbox',
            name: '',
            hide: 2,
            label: '',
            query: '',
            current: {},
            options: [],
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_0__["assignModelProperties"])(this, model, this.defaults);
    }
    TextBoxVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_0__["assignModelProperties"])(this.model, this, this.defaults);
        return this.model;
    };
    TextBoxVariable.prototype.setValue = function (option) {
        this.variableSrv.setOptionAsCurrent(this, option);
    };
    TextBoxVariable.prototype.updateOptions = function () {
        this.options = [{ text: this.query.trim(), value: this.query.trim() }];
        this.current = this.options[0];
        return Promise.resolve();
    };
    TextBoxVariable.prototype.dependsOn = function (variable) {
        return false;
    };
    TextBoxVariable.prototype.setValueFromUrl = function (urlValue) {
        this.query = urlValue;
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    TextBoxVariable.prototype.getValueForUrl = function () {
        return this.current.value;
    };
    return TextBoxVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_0__["variableTypes"]['textbox'] = {
    name: 'Text box',
    ctor: TextBoxVariable,
    description: 'Define a textbox variable, where users can enter any arbitrary string',
};


/***/ }),

/***/ "./public/app/features/templating/adhoc_variable.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/templating/adhoc_variable.ts ***!
  \**********************************************************/
/*! exports provided: AdhocVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdhocVariable", function() { return AdhocVariable; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");


var AdhocVariable = /** @class */ (function () {
    /** @ngInject */
    function AdhocVariable(model) {
        this.model = model;
        this.defaults = {
            type: 'adhoc',
            name: '',
            label: '',
            hide: 0,
            datasource: null,
            filters: [],
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this, model, this.defaults);
    }
    AdhocVariable.prototype.setValue = function (option) {
        return Promise.resolve();
    };
    AdhocVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this.model, this, this.defaults);
        return this.model;
    };
    AdhocVariable.prototype.updateOptions = function () {
        return Promise.resolve();
    };
    AdhocVariable.prototype.dependsOn = function (variable) {
        return false;
    };
    AdhocVariable.prototype.setValueFromUrl = function (urlValue) {
        var _this = this;
        if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(urlValue)) {
            urlValue = [urlValue];
        }
        this.filters = urlValue.map(function (item) {
            var values = item.split('|').map(function (value) {
                return _this.unescapeDelimiter(value);
            });
            return {
                key: values[0],
                operator: values[1],
                value: values[2],
            };
        });
        return Promise.resolve();
    };
    AdhocVariable.prototype.getValueForUrl = function () {
        var _this = this;
        return this.filters.map(function (filter) {
            return [filter.key, filter.operator, filter.value]
                .map(function (value) {
                return _this.escapeDelimiter(value);
            })
                .join('|');
        });
    };
    AdhocVariable.prototype.escapeDelimiter = function (value) {
        return value.replace(/\|/g, '__gfp__');
    };
    AdhocVariable.prototype.unescapeDelimiter = function (value) {
        return value.replace(/__gfp__/g, '|');
    };
    AdhocVariable.prototype.setFilters = function (filters) {
        this.filters = filters;
    };
    return AdhocVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_1__["variableTypes"]['adhoc'] = {
    name: 'Ad hoc filters',
    ctor: AdhocVariable,
    description: 'Add key/value filters on the fly',
};


/***/ }),

/***/ "./public/app/features/templating/all.ts":
/*!***********************************************!*\
  !*** ./public/app/features/templating/all.ts ***!
  \***********************************************/
/*! exports provided: VariableSrv, IntervalVariable, QueryVariable, DatasourceVariable, CustomVariable, ConstantVariable, AdhocVariable, TextBoxVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _editor_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor_ctrl */ "./public/app/features/templating/editor_ctrl.ts");
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _template_srv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./template_srv */ "./public/app/features/templating/template_srv.ts");
/* harmony import */ var _variable_srv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./variable_srv */ "./public/app/features/templating/variable_srv.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VariableSrv", function() { return _variable_srv__WEBPACK_IMPORTED_MODULE_3__["VariableSrv"]; });

/* harmony import */ var _interval_variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interval_variable */ "./public/app/features/templating/interval_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntervalVariable", function() { return _interval_variable__WEBPACK_IMPORTED_MODULE_4__["IntervalVariable"]; });

/* harmony import */ var _query_variable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_variable */ "./public/app/features/templating/query_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryVariable", function() { return _query_variable__WEBPACK_IMPORTED_MODULE_5__["QueryVariable"]; });

/* harmony import */ var _datasource_variable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./datasource_variable */ "./public/app/features/templating/datasource_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DatasourceVariable", function() { return _datasource_variable__WEBPACK_IMPORTED_MODULE_6__["DatasourceVariable"]; });

/* harmony import */ var _custom_variable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./custom_variable */ "./public/app/features/templating/custom_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomVariable", function() { return _custom_variable__WEBPACK_IMPORTED_MODULE_7__["CustomVariable"]; });

/* harmony import */ var _constant_variable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constant_variable */ "./public/app/features/templating/constant_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConstantVariable", function() { return _constant_variable__WEBPACK_IMPORTED_MODULE_8__["ConstantVariable"]; });

/* harmony import */ var _adhoc_variable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./adhoc_variable */ "./public/app/features/templating/adhoc_variable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdhocVariable", function() { return _adhoc_variable__WEBPACK_IMPORTED_MODULE_9__["AdhocVariable"]; });

/* harmony import */ var _TextBoxVariable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./TextBoxVariable */ "./public/app/features/templating/TextBoxVariable.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextBoxVariable", function() { return _TextBoxVariable__WEBPACK_IMPORTED_MODULE_10__["TextBoxVariable"]; });












app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].factory('templateSrv', function () {
    return _template_srv__WEBPACK_IMPORTED_MODULE_2__["default"];
});



/***/ }),

/***/ "./public/app/features/templating/constant_variable.ts":
/*!*************************************************************!*\
  !*** ./public/app/features/templating/constant_variable.ts ***!
  \*************************************************************/
/*! exports provided: ConstantVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConstantVariable", function() { return ConstantVariable; });
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");

var ConstantVariable = /** @class */ (function () {
    /** @ngInject */
    function ConstantVariable(model, variableSrv) {
        this.model = model;
        this.variableSrv = variableSrv;
        this.defaults = {
            type: 'constant',
            name: '',
            hide: 2,
            label: '',
            query: '',
            current: {},
            options: [],
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_0__["assignModelProperties"])(this, model, this.defaults);
    }
    ConstantVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_0__["assignModelProperties"])(this.model, this, this.defaults);
        return this.model;
    };
    ConstantVariable.prototype.setValue = function (option) {
        this.variableSrv.setOptionAsCurrent(this, option);
    };
    ConstantVariable.prototype.updateOptions = function () {
        this.options = [{ text: this.query.trim(), value: this.query.trim() }];
        this.setValue(this.options[0]);
        return Promise.resolve();
    };
    ConstantVariable.prototype.dependsOn = function (variable) {
        return false;
    };
    ConstantVariable.prototype.setValueFromUrl = function (urlValue) {
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    ConstantVariable.prototype.getValueForUrl = function () {
        return this.current.value;
    };
    return ConstantVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_0__["variableTypes"]['constant'] = {
    name: 'Constant',
    ctor: ConstantVariable,
    description: 'Define a hidden constant variable, useful for metric prefixes in dashboards you want to share',
};


/***/ }),

/***/ "./public/app/features/templating/custom_variable.ts":
/*!***********************************************************!*\
  !*** ./public/app/features/templating/custom_variable.ts ***!
  \***********************************************************/
/*! exports provided: CustomVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomVariable", function() { return CustomVariable; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");


var CustomVariable = /** @class */ (function () {
    /** @ngInject */
    function CustomVariable(model, variableSrv) {
        this.model = model;
        this.variableSrv = variableSrv;
        this.defaults = {
            type: 'custom',
            name: '',
            label: '',
            hide: 0,
            options: [],
            current: {},
            query: '',
            includeAll: false,
            multi: false,
            allValue: null,
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this, model, this.defaults);
    }
    CustomVariable.prototype.setValue = function (option) {
        return this.variableSrv.setOptionAsCurrent(this, option);
    };
    CustomVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this.model, this, this.defaults);
        return this.model;
    };
    CustomVariable.prototype.updateOptions = function () {
        // extract options in comma separated string
        this.options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.query.split(/[,]+/), function (text) {
            return { text: text.trim(), value: text.trim() };
        });
        if (this.includeAll) {
            this.addAllOption();
        }
        return this.variableSrv.validateVariableSelectionState(this);
    };
    CustomVariable.prototype.addAllOption = function () {
        this.options.unshift({ text: 'All', value: '$__all' });
    };
    CustomVariable.prototype.dependsOn = function (variable) {
        return false;
    };
    CustomVariable.prototype.setValueFromUrl = function (urlValue) {
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    CustomVariable.prototype.getValueForUrl = function () {
        if (this.current.text === 'All') {
            return 'All';
        }
        return this.current.value;
    };
    return CustomVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_1__["variableTypes"]['custom'] = {
    name: 'Custom',
    ctor: CustomVariable,
    description: 'Define variable values manually',
    supportsMulti: true,
};


/***/ }),

/***/ "./public/app/features/templating/datasource_variable.ts":
/*!***************************************************************!*\
  !*** ./public/app/features/templating/datasource_variable.ts ***!
  \***************************************************************/
/*! exports provided: DatasourceVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatasourceVariable", function() { return DatasourceVariable; });
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");


var DatasourceVariable = /** @class */ (function () {
    /** @ngInject */
    function DatasourceVariable(model, datasourceSrv, variableSrv, templateSrv) {
        this.model = model;
        this.datasourceSrv = datasourceSrv;
        this.variableSrv = variableSrv;
        this.templateSrv = templateSrv;
        this.defaults = {
            type: 'datasource',
            name: '',
            hide: 0,
            label: '',
            current: {},
            regex: '',
            options: [],
            query: '',
            refresh: 1,
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this, model, this.defaults);
        this.refresh = 1;
    }
    DatasourceVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"])(this.model, this, this.defaults);
        // don't persist options
        this.model.options = [];
        return this.model;
    };
    DatasourceVariable.prototype.setValue = function (option) {
        return this.variableSrv.setOptionAsCurrent(this, option);
    };
    DatasourceVariable.prototype.updateOptions = function () {
        var options = [];
        var sources = this.datasourceSrv.getMetricSources({ skipVariables: true });
        var regex;
        if (this.regex) {
            regex = this.templateSrv.replace(this.regex, null, 'regex');
            regex = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].stringToJsRegex(regex);
        }
        for (var i = 0; i < sources.length; i++) {
            var source = sources[i];
            // must match on type
            if (source.meta.id !== this.query) {
                continue;
            }
            if (regex && !regex.exec(source.name)) {
                continue;
            }
            options.push({ text: source.name, value: source.name });
        }
        if (options.length === 0) {
            options.push({ text: 'No data sources found', value: '' });
        }
        this.options = options;
        return this.variableSrv.validateVariableSelectionState(this);
    };
    DatasourceVariable.prototype.dependsOn = function (variable) {
        if (this.regex) {
            return Object(_variable__WEBPACK_IMPORTED_MODULE_1__["containsVariable"])(this.regex, variable.name);
        }
        return false;
    };
    DatasourceVariable.prototype.setValueFromUrl = function (urlValue) {
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    DatasourceVariable.prototype.getValueForUrl = function () {
        return this.current.value;
    };
    return DatasourceVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_1__["variableTypes"]['datasource'] = {
    name: 'Datasource',
    ctor: DatasourceVariable,
    description: 'Enabled you to dynamically switch the datasource for multiple panels',
};


/***/ }),

/***/ "./public/app/features/templating/editor_ctrl.ts":
/*!*******************************************************!*\
  !*** ./public/app/features/templating/editor_ctrl.ts ***!
  \*******************************************************/
/*! exports provided: VariableEditorCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VariableEditorCtrl", function() { return VariableEditorCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");




var VariableEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function VariableEditorCtrl($scope, datasourceSrv, variableSrv, templateSrv) {
        $scope.variableTypes = _variable__WEBPACK_IMPORTED_MODULE_2__["variableTypes"];
        $scope.ctrl = {};
        $scope.namePattern = /^(?!__).*$/;
        $scope._ = lodash__WEBPACK_IMPORTED_MODULE_0___default.a;
        $scope.optionsLimit = 20;
        $scope.refreshOptions = [
            { value: 0, text: 'Never' },
            { value: 1, text: 'On Dashboard Load' },
            { value: 2, text: 'On Time Range Change' },
        ];
        $scope.sortOptions = [
            { value: 0, text: 'Disabled' },
            { value: 1, text: 'Alphabetical (asc)' },
            { value: 2, text: 'Alphabetical (desc)' },
            { value: 3, text: 'Numerical (asc)' },
            { value: 4, text: 'Numerical (desc)' },
            { value: 5, text: 'Alphabetical (case-insensitive, asc)' },
            { value: 6, text: 'Alphabetical (case-insensitive, desc)' },
        ];
        $scope.hideOptions = [{ value: 0, text: '' }, { value: 1, text: 'Label' }, { value: 2, text: 'Variable' }];
        $scope.init = function () {
            $scope.mode = 'list';
            $scope.variables = variableSrv.variables;
            $scope.reset();
            $scope.$watch('mode', function (val) {
                if (val === 'new') {
                    $scope.reset();
                }
            });
        };
        $scope.setMode = function (mode) {
            $scope.mode = mode;
        };
        $scope.add = function () {
            if ($scope.isValid()) {
                variableSrv.addVariable($scope.current);
                $scope.update();
            }
        };
        $scope.isValid = function () {
            if (!$scope.ctrl.form.$valid) {
                return false;
            }
            if (!$scope.current.name.match(/^\w+$/)) {
                app_core_app_events__WEBPACK_IMPORTED_MODULE_3__["default"].emit('alert-warning', ['Validation', 'Only word and digit characters are allowed in variable names']);
                return false;
            }
            var sameName = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find($scope.variables, { name: $scope.current.name });
            if (sameName && sameName !== $scope.current) {
                app_core_app_events__WEBPACK_IMPORTED_MODULE_3__["default"].emit('alert-warning', ['Validation', 'Variable with the same name already exists']);
                return false;
            }
            if ($scope.current.type === 'query' &&
                $scope.current.query.match(new RegExp('\\$' + $scope.current.name + '(/| |$)'))) {
                app_core_app_events__WEBPACK_IMPORTED_MODULE_3__["default"].emit('alert-warning', [
                    'Validation',
                    'Query cannot contain a reference to itself. Variable: $' + $scope.current.name,
                ]);
                return false;
            }
            return true;
        };
        $scope.validate = function () {
            $scope.infoText = '';
            if ($scope.current.type === 'adhoc' && $scope.current.datasource !== null) {
                $scope.infoText = 'Adhoc filters are applied automatically to all queries that target this datasource';
                datasourceSrv.get($scope.current.datasource).then(function (ds) {
                    if (!ds.getTagKeys) {
                        $scope.infoText = 'This datasource does not support adhoc filters yet.';
                    }
                });
            }
        };
        $scope.runQuery = function () {
            $scope.optionsLimit = 20;
            return variableSrv.updateOptions($scope.current).catch(function (err) {
                if (err.data && err.data.message) {
                    err.message = err.data.message;
                }
                app_core_app_events__WEBPACK_IMPORTED_MODULE_3__["default"].emit('alert-error', ['Templating', 'Template variables could not be initialized: ' + err.message]);
            });
        };
        $scope.edit = function (variable) {
            $scope.current = variable;
            $scope.currentIsNew = false;
            $scope.mode = 'edit';
            $scope.validate();
        };
        $scope.duplicate = function (variable) {
            var clone = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(variable.getSaveModel());
            $scope.current = variableSrv.createVariableFromModel(clone);
            $scope.current.name = 'copy_of_' + variable.name;
            variableSrv.addVariable($scope.current);
        };
        $scope.update = function () {
            if ($scope.isValid()) {
                $scope.runQuery().then(function () {
                    $scope.reset();
                    $scope.mode = 'list';
                    templateSrv.updateTemplateData();
                });
            }
        };
        $scope.reset = function () {
            $scope.currentIsNew = true;
            $scope.current = variableSrv.createVariableFromModel({ type: 'query' });
            // this is done here in case a new data source type variable was added
            $scope.datasources = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(datasourceSrv.getMetricSources(), function (ds) {
                return !ds.meta.mixed && ds.value !== null;
            });
            $scope.datasourceTypes = lodash__WEBPACK_IMPORTED_MODULE_0___default()($scope.datasources)
                .uniqBy('meta.id')
                .map(function (ds) {
                return { text: ds.meta.name, value: ds.meta.id };
            })
                .value();
        };
        $scope.typeChanged = function () {
            var old = $scope.current;
            $scope.current = variableSrv.createVariableFromModel({
                type: $scope.current.type,
            });
            $scope.current.name = old.name;
            $scope.current.hide = old.hide;
            $scope.current.label = old.label;
            var oldIndex = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(this.variables, old);
            if (oldIndex !== -1) {
                this.variables[oldIndex] = $scope.current;
            }
            $scope.validate();
        };
        $scope.removeVariable = function (variable) {
            variableSrv.removeVariable(variable);
        };
        $scope.showMoreOptions = function () {
            $scope.optionsLimit += 20;
        };
    }
    return VariableEditorCtrl;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_1__["default"].controller('VariableEditorCtrl', VariableEditorCtrl);


/***/ }),

/***/ "./public/app/features/templating/interval_variable.ts":
/*!*************************************************************!*\
  !*** ./public/app/features/templating/interval_variable.ts ***!
  \*************************************************************/
/*! exports provided: IntervalVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntervalVariable", function() { return IntervalVariable; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");



var IntervalVariable = /** @class */ (function () {
    /** @ngInject */
    function IntervalVariable(model, timeSrv, templateSrv, variableSrv) {
        this.model = model;
        this.timeSrv = timeSrv;
        this.templateSrv = templateSrv;
        this.variableSrv = variableSrv;
        this.defaults = {
            type: 'interval',
            name: '',
            hide: 0,
            label: '',
            refresh: 2,
            options: [],
            current: {},
            query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',
            auto: false,
            auto_min: '10s',
            auto_count: 30,
            skipUrlSync: false,
        };
        Object(_variable__WEBPACK_IMPORTED_MODULE_2__["assignModelProperties"])(this, model, this.defaults);
        this.refresh = 2;
    }
    IntervalVariable.prototype.getSaveModel = function () {
        Object(_variable__WEBPACK_IMPORTED_MODULE_2__["assignModelProperties"])(this.model, this, this.defaults);
        return this.model;
    };
    IntervalVariable.prototype.setValue = function (option) {
        this.updateAutoValue();
        return this.variableSrv.setOptionAsCurrent(this, option);
    };
    IntervalVariable.prototype.updateAutoValue = function () {
        if (!this.auto) {
            return;
        }
        // add auto option if missing
        if (this.options.length && this.options[0].text !== 'auto') {
            this.options.unshift({
                text: 'auto',
                value: '$__auto_interval_' + this.name,
            });
        }
        var res = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__["default"].calculateInterval(this.timeSrv.timeRange(), this.auto_count, this.auto_min);
        this.templateSrv.setGrafanaVariable('$__auto_interval_' + this.name, res.interval);
        // for backward compatibility, to be removed eventually
        this.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);
    };
    IntervalVariable.prototype.updateOptions = function () {
        // extract options between quotes and/or comma
        this.options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.query.match(/(["'])(.*?)\1|\w+/g), function (text) {
            text = text.replace(/["']+/g, '');
            return { text: text.trim(), value: text.trim() };
        });
        this.updateAutoValue();
        return this.variableSrv.validateVariableSelectionState(this);
    };
    IntervalVariable.prototype.dependsOn = function (variable) {
        return false;
    };
    IntervalVariable.prototype.setValueFromUrl = function (urlValue) {
        this.updateAutoValue();
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    IntervalVariable.prototype.getValueForUrl = function () {
        return this.current.value;
    };
    return IntervalVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_2__["variableTypes"]['interval'] = {
    name: 'Interval',
    ctor: IntervalVariable,
    description: 'Define a timespan interval (ex 1m, 1h, 1d)',
};


/***/ }),

/***/ "./public/app/features/templating/query_variable.ts":
/*!**********************************************************!*\
  !*** ./public/app/features/templating/query_variable.ts ***!
  \**********************************************************/
/*! exports provided: QueryVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryVariable", function() { return QueryVariable; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");



function getNoneOption() {
    return { text: 'None', value: '', isNone: true };
}
var QueryVariable = /** @class */ (function () {
    /** @ngInject */
    function QueryVariable(model, datasourceSrv, templateSrv, variableSrv, timeSrv) {
        this.model = model;
        this.datasourceSrv = datasourceSrv;
        this.templateSrv = templateSrv;
        this.variableSrv = variableSrv;
        this.timeSrv = timeSrv;
        this.defaults = {
            type: 'query',
            label: null,
            query: '',
            regex: '',
            sort: 0,
            datasource: null,
            refresh: 0,
            hide: 0,
            name: '',
            multi: false,
            includeAll: false,
            allValue: null,
            options: [],
            current: {},
            tags: [],
            useTags: false,
            tagsQuery: '',
            tagValuesQuery: '',
            skipUrlSync: false,
        };
        // copy model properties to this instance
        Object(_variable__WEBPACK_IMPORTED_MODULE_2__["assignModelProperties"])(this, model, this.defaults);
    }
    QueryVariable.prototype.getSaveModel = function () {
        // copy back model properties to model
        Object(_variable__WEBPACK_IMPORTED_MODULE_2__["assignModelProperties"])(this.model, this, this.defaults);
        // remove options
        if (this.refresh !== 0) {
            this.model.options = [];
        }
        return this.model;
    };
    QueryVariable.prototype.setValue = function (option) {
        return this.variableSrv.setOptionAsCurrent(this, option);
    };
    QueryVariable.prototype.setValueFromUrl = function (urlValue) {
        return this.variableSrv.setOptionFromUrl(this, urlValue);
    };
    QueryVariable.prototype.getValueForUrl = function () {
        if (this.current.text === 'All') {
            return 'All';
        }
        return this.current.value;
    };
    QueryVariable.prototype.updateOptions = function () {
        return this.datasourceSrv
            .get(this.datasource)
            .then(this.updateOptionsFromMetricFindQuery.bind(this))
            .then(this.updateTags.bind(this))
            .then(this.variableSrv.validateVariableSelectionState.bind(this.variableSrv, this));
    };
    QueryVariable.prototype.updateTags = function (datasource) {
        var _this = this;
        if (this.useTags) {
            return this.metricFindQuery(datasource, this.tagsQuery).then(function (results) {
                _this.tags = [];
                for (var i = 0; i < results.length; i++) {
                    _this.tags.push(results[i].text);
                }
                return datasource;
            });
        }
        else {
            delete this.tags;
        }
        return datasource;
    };
    QueryVariable.prototype.getValuesForTag = function (tagKey) {
        var _this = this;
        return this.datasourceSrv.get(this.datasource).then(function (datasource) {
            var query = _this.tagValuesQuery.replace('$tag', tagKey);
            return _this.metricFindQuery(datasource, query).then(function (results) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results, function (value) {
                    return value.text;
                });
            });
        });
    };
    QueryVariable.prototype.updateOptionsFromMetricFindQuery = function (datasource) {
        var _this = this;
        return this.metricFindQuery(datasource, this.query).then(function (results) {
            _this.options = _this.metricNamesToVariableValues(results);
            if (_this.includeAll) {
                _this.addAllOption();
            }
            if (!_this.options.length) {
                _this.options.push(getNoneOption());
            }
            return datasource;
        });
    };
    QueryVariable.prototype.metricFindQuery = function (datasource, query) {
        var options = { range: undefined, variable: this };
        if (this.refresh === 2) {
            options.range = this.timeSrv.timeRange();
        }
        return datasource.metricFindQuery(query, options);
    };
    QueryVariable.prototype.addAllOption = function () {
        this.options.unshift({ text: 'All', value: '$__all' });
    };
    QueryVariable.prototype.metricNamesToVariableValues = function (metricNames) {
        var regex, options, i, matches;
        options = [];
        if (this.regex) {
            regex = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__["default"].stringToJsRegex(this.templateSrv.replace(this.regex, {}, 'regex'));
        }
        for (i = 0; i < metricNames.length; i++) {
            var item = metricNames[i];
            var text = item.text === undefined || item.text === null ? item.value : item.text;
            var value = item.value === undefined || item.value === null ? item.text : item.value;
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(value)) {
                value = value.toString();
            }
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(text)) {
                text = text.toString();
            }
            if (regex) {
                matches = regex.exec(value);
                if (!matches) {
                    continue;
                }
                if (matches.length > 1) {
                    value = matches[1];
                    text = matches[1];
                }
            }
            options.push({ text: text, value: value });
        }
        options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniqBy(options, 'value');
        return this.sortVariableValues(options, this.sort);
    };
    QueryVariable.prototype.sortVariableValues = function (options, sortOrder) {
        if (sortOrder === 0) {
            return options;
        }
        var sortType = Math.ceil(sortOrder / 2);
        var reverseSort = sortOrder % 2 === 0;
        if (sortType === 1) {
            options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(options, 'text');
        }
        else if (sortType === 2) {
            options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(options, function (opt) {
                var matches = opt.text.match(/.*?(\d+).*/);
                if (!matches || matches.length < 2) {
                    return -1;
                }
                else {
                    return parseInt(matches[1], 10);
                }
            });
        }
        else if (sortType === 3) {
            options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(options, function (opt) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toLower(opt.text);
            });
        }
        if (reverseSort) {
            options = options.reverse();
        }
        return options;
    };
    QueryVariable.prototype.dependsOn = function (variable) {
        return Object(_variable__WEBPACK_IMPORTED_MODULE_2__["containsVariable"])(this.query, this.datasource, this.regex, variable.name);
    };
    return QueryVariable;
}());

_variable__WEBPACK_IMPORTED_MODULE_2__["variableTypes"]['query'] = {
    name: 'Query',
    ctor: QueryVariable,
    description: 'Variable values are fetched from a datasource query',
    supportsMulti: true,
};


/***/ }),

/***/ "./public/app/features/templating/template_srv.ts":
/*!********************************************************!*\
  !*** ./public/app/features/templating/template_srv.ts ***!
  \********************************************************/
/*! exports provided: TemplateSrv, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateSrv", function() { return TemplateSrv; });
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


function luceneEscape(value) {
    return value.replace(/([\!\*\+\-\=<>\s\&\|\(\)\[\]\{\}\^\~\?\:\\/"])/g, '\\$1');
}
var TemplateSrv = /** @class */ (function () {
    function TemplateSrv() {
        /*
         * This regex matches 3 types of variable reference with an optional format specifier
         * \$(\w+)                          $var1
         * \[\[([\s\S]+?)(?::(\w+))?\]\]    [[var2]] or [[var2:fmt2]]
         * \${(\w+)(?::(\w+))?}             ${var3} or ${var3:fmt3}
         */
        this.regex = /\$(\w+)|\[\[([\s\S]+?)(?::(\w+))?\]\]|\${(\w+)(?::(\w+))?}/g;
        this.index = {};
        this.grafanaVariables = {};
        this.builtIns = {};
        this.builtIns['__interval'] = { text: '1s', value: '1s' };
        this.builtIns['__interval_ms'] = { text: '100', value: '100' };
    }
    TemplateSrv.prototype.init = function (variables) {
        this.variables = variables;
        this.updateTemplateData();
    };
    TemplateSrv.prototype.updateTemplateData = function () {
        this.index = {};
        for (var i = 0; i < this.variables.length; i++) {
            var variable = this.variables[i];
            if (!variable.current || (!variable.current.isNone && !variable.current.value)) {
                continue;
            }
            this.index[variable.name] = variable;
        }
    };
    TemplateSrv.prototype.variableInitialized = function (variable) {
        this.index[variable.name] = variable;
    };
    TemplateSrv.prototype.getAdhocFilters = function (datasourceName) {
        var filters = [];
        if (this.variables) {
            for (var i = 0; i < this.variables.length; i++) {
                var variable = this.variables[i];
                if (variable.type !== 'adhoc') {
                    continue;
                }
                // null is the "default" datasource
                if (variable.datasource === null || variable.datasource === datasourceName) {
                    filters = filters.concat(variable.filters);
                }
                else if (variable.datasource.indexOf('$') === 0) {
                    if (this.replace(variable.datasource) === datasourceName) {
                        filters = filters.concat(variable.filters);
                    }
                }
            }
        }
        return filters;
    };
    TemplateSrv.prototype.luceneFormat = function (value) {
        if (typeof value === 'string') {
            return luceneEscape(value);
        }
        if (value instanceof Array && value.length === 0) {
            return '__empty__';
        }
        var quotedValues = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(value, function (val) {
            return '"' + luceneEscape(val) + '"';
        });
        return '(' + quotedValues.join(' OR ') + ')';
    };
    TemplateSrv.prototype.formatValue = function (value, format, variable) {
        // for some scopedVars there is no variable
        variable = variable || {};
        if (typeof format === 'function') {
            return format(value, variable, this.formatValue);
        }
        switch (format) {
            case 'regex': {
                if (typeof value === 'string') {
                    return app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].regexEscape(value);
                }
                var escapedValues = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(value, app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].regexEscape);
                if (escapedValues.length === 1) {
                    return escapedValues[0];
                }
                return '(' + escapedValues.join('|') + ')';
            }
            case 'lucene': {
                return this.luceneFormat(value);
            }
            case 'pipe': {
                if (typeof value === 'string') {
                    return value;
                }
                return value.join('|');
            }
            case 'distributed': {
                if (typeof value === 'string') {
                    return value;
                }
                return this.distributeVariable(value, variable.name);
            }
            case 'csv': {
                if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(value)) {
                    return value.join(',');
                }
                return value;
            }
            default: {
                if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(value)) {
                    return '{' + value.join(',') + '}';
                }
                return value;
            }
        }
    };
    TemplateSrv.prototype.setGrafanaVariable = function (name, value) {
        this.grafanaVariables[name] = value;
    };
    TemplateSrv.prototype.getVariableName = function (expression) {
        this.regex.lastIndex = 0;
        var match = this.regex.exec(expression);
        if (!match) {
            return null;
        }
        return match[1] || match[2];
    };
    TemplateSrv.prototype.variableExists = function (expression) {
        var name = this.getVariableName(expression);
        return name && this.index[name] !== void 0;
    };
    TemplateSrv.prototype.highlightVariablesAsHtml = function (str) {
        var _this = this;
        if (!str || !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(str)) {
            return str;
        }
        str = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.escape(str);
        this.regex.lastIndex = 0;
        return str.replace(this.regex, function (match, var1, var2, fmt2, var3) {
            if (_this.index[var1 || var2 || var3] || _this.builtIns[var1 || var2 || var3]) {
                return '<span class="template-variable">' + match + '</span>';
            }
            return match;
        });
    };
    TemplateSrv.prototype.getAllValue = function (variable) {
        if (variable.allValue) {
            return variable.allValue;
        }
        var values = [];
        for (var i = 1; i < variable.options.length; i++) {
            values.push(variable.options[i].value);
        }
        return values;
    };
    TemplateSrv.prototype.replace = function (target, scopedVars, format) {
        var _this = this;
        if (!target) {
            return target;
        }
        var variable, systemValue, value, fmt;
        this.regex.lastIndex = 0;
        return target.replace(this.regex, function (match, var1, var2, fmt2, var3, fmt3) {
            variable = _this.index[var1 || var2 || var3];
            fmt = fmt2 || fmt3 || format;
            if (scopedVars) {
                value = scopedVars[var1 || var2 || var3];
                if (value) {
                    return _this.formatValue(value.value, fmt, variable);
                }
            }
            if (!variable) {
                return match;
            }
            systemValue = _this.grafanaVariables[variable.current.value];
            if (systemValue) {
                return _this.formatValue(systemValue, fmt, variable);
            }
            value = variable.current.value;
            if (_this.isAllValue(value)) {
                value = _this.getAllValue(variable);
                // skip formatting of custom all values
                if (variable.allValue) {
                    return _this.replace(value);
                }
            }
            var res = _this.formatValue(value, fmt, variable);
            return res;
        });
    };
    TemplateSrv.prototype.isAllValue = function (value) {
        return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');
    };
    TemplateSrv.prototype.replaceWithText = function (target, scopedVars) {
        var _this = this;
        if (!target) {
            return target;
        }
        var variable;
        this.regex.lastIndex = 0;
        return target.replace(this.regex, function (match, var1, var2, fmt2, var3) {
            if (scopedVars) {
                var option = scopedVars[var1 || var2 || var3];
                if (option) {
                    return option.text;
                }
            }
            variable = _this.index[var1 || var2 || var3];
            if (!variable) {
                return match;
            }
            return _this.grafanaVariables[variable.current.value] || variable.current.text;
        });
    };
    TemplateSrv.prototype.fillVariableValuesForUrl = function (params, scopedVars) {
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(this.variables, function (variable) {
            if (scopedVars && scopedVars[variable.name] !== void 0) {
                if (scopedVars[variable.name].skipUrlSync) {
                    return;
                }
                params['var-' + variable.name] = scopedVars[variable.name].value;
            }
            else {
                if (variable.skipUrlSync) {
                    return;
                }
                params['var-' + variable.name] = variable.getValueForUrl();
            }
        });
    };
    TemplateSrv.prototype.distributeVariable = function (value, variable) {
        value = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(value, function (val, index) {
            if (index !== 0) {
                return variable + '=' + val;
            }
            else {
                return val;
            }
        });
        return value.join(',');
    };
    return TemplateSrv;
}());

/* harmony default export */ __webpack_exports__["default"] = (new TemplateSrv());


/***/ }),

/***/ "./public/app/features/templating/variable.ts":
/*!****************************************************!*\
  !*** ./public/app/features/templating/variable.ts ***!
  \****************************************************/
/*! exports provided: variableTypes, assignModelProperties, containsVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variableTypes", function() { return variableTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "containsVariable", function() { return containsVariable; });
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_utils_model_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/model_utils */ "./public/app/core/utils/model_utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assignModelProperties", function() { return app_core_utils_model_utils__WEBPACK_IMPORTED_MODULE_1__["assignModelProperties"]; });



var variableTypes = {};

function containsVariable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var variableName = args[args.length - 1];
    var str = args[0] || '';
    for (var i = 1; i < args.length - 1; i++) {
        str += ' ' + args[i] || '';
    }
    variableName = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].regexEscape(variableName);
    var findVarRegex = new RegExp('\\$(' + variableName + ')(?:\\W|$)|\\[\\[(' + variableName + ')\\]\\]', 'g');
    var match = findVarRegex.exec(str);
    return match !== null;
}


/***/ }),

/***/ "./public/app/features/templating/variable_srv.ts":
/*!********************************************************!*\
  !*** ./public/app/features/templating/variable_srv.ts ***!
  \********************************************************/
/*! exports provided: VariableSrv */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VariableSrv", function() { return VariableSrv; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./variable */ "./public/app/features/templating/variable.ts");
/* harmony import */ var app_core_utils_dag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/dag */ "./public/app/core/utils/dag.ts");





var VariableSrv = /** @class */ (function () {
    /** @ngInject */
    function VariableSrv($rootScope, $q, $location, $injector, templateSrv) {
        this.$rootScope = $rootScope;
        this.$q = $q;
        this.$location = $location;
        this.$injector = $injector;
        this.templateSrv = templateSrv;
        // update time variant variables
        $rootScope.$on('refresh', this.onDashboardRefresh.bind(this), $rootScope);
        $rootScope.$on('template-variable-value-updated', this.updateUrlParamsWithCurrentVariables.bind(this), $rootScope);
    }
    VariableSrv.prototype.init = function (dashboard) {
        var _this = this;
        this.dashboard = dashboard;
        // create working class models representing variables
        this.variables = dashboard.templating.list = dashboard.templating.list.map(this.createVariableFromModel.bind(this));
        this.templateSrv.init(this.variables);
        // init variables
        for (var _i = 0, _a = this.variables; _i < _a.length; _i++) {
            var variable = _a[_i];
            variable.initLock = this.$q.defer();
        }
        var queryParams = this.$location.search();
        return this.$q
            .all(this.variables.map(function (variable) {
            return _this.processVariable(variable, queryParams);
        }))
            .then(function () {
            _this.templateSrv.updateTemplateData();
        });
    };
    VariableSrv.prototype.onDashboardRefresh = function (evt, payload) {
        var _this = this;
        if (payload && payload.fromVariableValueUpdated) {
            return Promise.resolve({});
        }
        var promises = this.variables.filter(function (variable) { return variable.refresh === 2; }).map(function (variable) {
            var previousOptions = variable.options.slice();
            return variable.updateOptions().then(function () {
                if (angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(previousOptions) !== angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(variable.options)) {
                    _this.$rootScope.$emit('template-variable-value-updated');
                }
            });
        });
        return this.$q.all(promises);
    };
    VariableSrv.prototype.processVariable = function (variable, queryParams) {
        var _this = this;
        var dependencies = [];
        for (var _i = 0, _a = this.variables; _i < _a.length; _i++) {
            var otherVariable = _a[_i];
            if (variable.dependsOn(otherVariable)) {
                dependencies.push(otherVariable.initLock.promise);
            }
        }
        return this.$q
            .all(dependencies)
            .then(function () {
            var urlValue = queryParams['var-' + variable.name];
            if (urlValue !== void 0) {
                return variable.setValueFromUrl(urlValue).then(variable.initLock.resolve);
            }
            if (variable.refresh === 1 || variable.refresh === 2) {
                return variable.updateOptions().then(variable.initLock.resolve);
            }
            variable.initLock.resolve();
        })
            .finally(function () {
            _this.templateSrv.variableInitialized(variable);
            delete variable.initLock;
        });
    };
    VariableSrv.prototype.createVariableFromModel = function (model) {
        var ctor = _variable__WEBPACK_IMPORTED_MODULE_3__["variableTypes"][model.type].ctor;
        if (!ctor) {
            throw {
                message: 'Unable to find variable constructor for ' + model.type,
            };
        }
        var variable = this.$injector.instantiate(ctor, { model: model });
        return variable;
    };
    VariableSrv.prototype.addVariable = function (variable) {
        this.variables.push(variable);
        this.templateSrv.updateTemplateData();
        this.dashboard.updateSubmenuVisibility();
    };
    VariableSrv.prototype.removeVariable = function (variable) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(this.variables, variable);
        this.variables.splice(index, 1);
        this.templateSrv.updateTemplateData();
        this.dashboard.updateSubmenuVisibility();
    };
    VariableSrv.prototype.updateOptions = function (variable) {
        return variable.updateOptions();
    };
    VariableSrv.prototype.variableUpdated = function (variable, emitChangeEvents) {
        var _this = this;
        // if there is a variable lock ignore cascading update because we are in a boot up scenario
        if (variable.initLock) {
            return this.$q.when();
        }
        var g = this.createGraph();
        var node = g.getNode(variable.name);
        var promises = [];
        if (node) {
            promises = node.getOptimizedInputEdges().map(function (e) {
                return _this.updateOptions(_this.variables.find(function (v) { return v.name === e.inputNode.name; }));
            });
        }
        return this.$q.all(promises).then(function () {
            if (emitChangeEvents) {
                _this.$rootScope.$emit('template-variable-value-updated');
                _this.$rootScope.$broadcast('refresh', { fromVariableValueUpdated: true });
            }
        });
    };
    VariableSrv.prototype.selectOptionsForCurrentValue = function (variable) {
        var i, y, value, option;
        var selected = [];
        for (i = 0; i < variable.options.length; i++) {
            option = variable.options[i];
            option.selected = false;
            if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(variable.current.value)) {
                for (y = 0; y < variable.current.value.length; y++) {
                    value = variable.current.value[y];
                    if (option.value === value) {
                        option.selected = true;
                        selected.push(option);
                    }
                }
            }
            else if (option.value === variable.current.value) {
                option.selected = true;
                selected.push(option);
            }
        }
        return selected;
    };
    VariableSrv.prototype.validateVariableSelectionState = function (variable) {
        if (!variable.current) {
            variable.current = {};
        }
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(variable.current.value)) {
            var selected = this.selectOptionsForCurrentValue(variable);
            // if none pick first
            if (selected.length === 0) {
                selected = variable.options[0];
            }
            else {
                selected = {
                    value: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(selected, function (val) {
                        return val.value;
                    }),
                    text: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(selected, function (val) {
                        return val.text;
                    }).join(' + '),
                };
            }
            return variable.setValue(selected);
        }
        else {
            var currentOption = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(variable.options, {
                text: variable.current.text,
            });
            if (currentOption) {
                return variable.setValue(currentOption);
            }
            else {
                if (!variable.options.length) {
                    return Promise.resolve();
                }
                return variable.setValue(variable.options[0]);
            }
        }
    };
    VariableSrv.prototype.setOptionFromUrl = function (variable, urlValue) {
        var promise = this.$q.when();
        if (variable.refresh) {
            promise = variable.updateOptions();
        }
        return promise.then(function () {
            var option = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(variable.options, function (op) {
                return op.text === urlValue || op.value === urlValue;
            });
            var defaultText = urlValue;
            var defaultValue = urlValue;
            if (!option && lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(urlValue)) {
                defaultText = [];
                var _loop_1 = function (n) {
                    var t = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(variable.options, function (op) {
                        return op.value === urlValue[n];
                    });
                    if (t) {
                        defaultText.push(t.text);
                    }
                };
                for (var n = 0; n < urlValue.length; n++) {
                    _loop_1(n);
                }
            }
            option = option || { text: defaultText, value: defaultValue };
            return variable.setValue(option);
        });
    };
    VariableSrv.prototype.setOptionAsCurrent = function (variable, option) {
        variable.current = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.cloneDeep(option);
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(variable.current.text)) {
            variable.current.text = variable.current.text.join(' + ');
        }
        this.selectOptionsForCurrentValue(variable);
        return this.variableUpdated(variable);
    };
    VariableSrv.prototype.updateUrlParamsWithCurrentVariables = function () {
        // update url
        var params = this.$location.search();
        // remove variable params
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(params, function (value, key) {
            if (key.indexOf('var-') === 0) {
                delete params[key];
            }
        });
        // add new values
        this.templateSrv.fillVariableValuesForUrl(params);
        // update url
        this.$location.search(params);
    };
    VariableSrv.prototype.setAdhocFilter = function (options) {
        var variable = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(this.variables, {
            type: 'adhoc',
            datasource: options.datasource,
        });
        if (!variable) {
            variable = this.createVariableFromModel({
                name: 'Filters',
                type: 'adhoc',
                datasource: options.datasource,
            });
            this.addVariable(variable);
        }
        var filters = variable.filters;
        var filter = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(filters, { key: options.key, value: options.value });
        if (!filter) {
            filter = { key: options.key, value: options.value };
            filters.push(filter);
        }
        filter.operator = options.operator;
        this.variableUpdated(variable, true);
    };
    VariableSrv.prototype.createGraph = function () {
        var _this = this;
        var g = new app_core_utils_dag__WEBPACK_IMPORTED_MODULE_4__["Graph"]();
        this.variables.forEach(function (v1) {
            g.createNode(v1.name);
            _this.variables.forEach(function (v2) {
                if (v1 === v2) {
                    return;
                }
                if (v1.dependsOn(v2)) {
                    g.link(v1.name, v2.name);
                }
            });
        });
        return g;
    };
    return VariableSrv;
}());

app_core_core_module__WEBPACK_IMPORTED_MODULE_2__["default"].service('variableSrv', VariableSrv);


/***/ }),

/***/ "./public/app/plugins/datasource/cloudwatch/config_ctrl.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/cloudwatch/config_ctrl.ts ***!
  \*****************************************************************/
/*! exports provided: CloudWatchConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudWatchConfigCtrl", function() { return CloudWatchConfigCtrl; });
var CloudWatchConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function CloudWatchConfigCtrl($scope) {
        this.accessKeyExist = false;
        this.secretKeyExist = false;
        this.authTypes = [
            { name: 'Access & secret key', value: 'keys' },
            { name: 'Credentials file', value: 'credentials' },
            { name: 'ARN', value: 'arn' },
        ];
        this.indexPatternTypes = [
            { name: 'No pattern', value: undefined },
            { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },
            { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },
            { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },
            { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },
            { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },
        ];
        this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';
        this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';
        this.accessKeyExist = this.current.secureJsonFields.accessKey;
        this.secretKeyExist = this.current.secureJsonFields.secretKey;
    }
    CloudWatchConfigCtrl.prototype.resetAccessKey = function () {
        this.accessKeyExist = false;
    };
    CloudWatchConfigCtrl.prototype.resetSecretKey = function () {
        this.secretKeyExist = false;
    };
    CloudWatchConfigCtrl.templateUrl = 'partials/config.html';
    return CloudWatchConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/cloudwatch/datasource.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/cloudwatch/datasource.ts ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_features_templating_variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/features/templating/variable */ "./public/app/features/templating/variable.ts");





// import * as moment from 'moment';
var CloudWatchDatasource = /** @class */ (function () {
    /** @ngInject */
    function CloudWatchDatasource(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
        this.type = 'cloudwatch';
        this.name = instanceSettings.name;
        this.proxyUrl = instanceSettings.url;
        this.defaultRegion = instanceSettings.jsonData.defaultRegion;
        this.instanceSettings = instanceSettings;
        this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];
    }
    CloudWatchDatasource.prototype.query = function (options) {
        var _this = this;
        options = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(options);
        options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);
        var queries = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(options.targets, function (item) {
            return ((item.id !== '' || item.hide !== true) &&
                ((!!item.region && !!item.namespace && !!item.metricName && !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(item.statistics)) ||
                    item.expression.length > 0));
        }).map(function (item) {
            item.region = _this.templateSrv.replace(_this.getActualRegion(item.region), options.scopedVars);
            item.namespace = _this.templateSrv.replace(item.namespace, options.scopedVars);
            item.metricName = _this.templateSrv.replace(item.metricName, options.scopedVars);
            item.dimensions = _this.convertDimensionFormat(item.dimensions, options.scopedVars);
            item.period = String(_this.getPeriod(item, options)); // use string format for period in graph query, and alerting
            item.id = _this.templateSrv.replace(item.id, options.scopedVars);
            item.expression = _this.templateSrv.replace(item.expression, options.scopedVars);
            item.returnData = typeof item.hide === 'undefined' ? true : !item.hide;
            // valid ExtendedStatistics is like p90.00, check the pattern
            var hasInvalidStatistics = item.statistics.some(function (s) {
                return s.indexOf('p') === 0 && !/p\d{2}\.\d{2}/.test(s);
            });
            if (hasInvalidStatistics) {
                throw { message: 'Invalid extended statistics' };
            }
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({
                refId: item.refId,
                intervalMs: options.intervalMs,
                maxDataPoints: options.maxDataPoints,
                datasourceId: _this.instanceSettings.id,
                type: 'timeSeriesQuery',
            }, item);
        });
        // No valid targets, return the empty result to save a round trip.
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(queries)) {
            var d = this.$q.defer();
            d.resolve({ data: [] });
            return d.promise;
        }
        var request = {
            from: options.range.from.valueOf().toString(),
            to: options.range.to.valueOf().toString(),
            queries: queries,
        };
        return this.performTimeSeriesQuery(request);
    };
    CloudWatchDatasource.prototype.getPeriod = function (target, options, now) {
        var start = this.convertToCloudWatchTime(options.range.from, false);
        var end = this.convertToCloudWatchTime(options.range.to, true);
        now = Math.round((now || Date.now()) / 1000);
        var period;
        var range = end - start;
        var hourSec = 60 * 60;
        var daySec = hourSec * 24;
        var periodUnit = 60;
        if (!target.period) {
            if (now - start <= daySec * 15) {
                // until 15 days ago
                if (target.namespace === 'AWS/EC2') {
                    periodUnit = period = 300;
                }
                else {
                    periodUnit = period = 60;
                }
            }
            else if (now - start <= daySec * 63) {
                // until 63 days ago
                periodUnit = period = 60 * 5;
            }
            else if (now - start <= daySec * 455) {
                // until 455 days ago
                periodUnit = period = 60 * 60;
            }
            else {
                // over 455 days, should return error, but try to long period
                periodUnit = period = 60 * 60;
            }
        }
        else {
            if (/^\d+$/.test(target.period)) {
                period = parseInt(target.period, 10);
            }
            else {
                period = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));
            }
        }
        if (period < 1) {
            period = 1;
        }
        if (!target.highResolution && range / period >= 1440) {
            period = Math.ceil(range / 1440 / periodUnit) * periodUnit;
        }
        return period;
    };
    CloudWatchDatasource.prototype.performTimeSeriesQuery = function (request) {
        return this.awsRequest('/api/tsdb/query', request).then(function (res) {
            var data = [];
            if (res.results) {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.forEach(res.results, function (queryRes) {
                    lodash__WEBPACK_IMPORTED_MODULE_1___default.a.forEach(queryRes.series, function (series) {
                        data.push({ target: series.name, datapoints: series.points });
                    });
                });
            }
            return { data: data };
        });
    };
    CloudWatchDatasource.prototype.transformSuggestDataFromTable = function (suggestData) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(suggestData.results['metricFindQuery'].tables[0].rows, function (v) {
            return {
                text: v[0],
                value: v[1],
            };
        });
    };
    CloudWatchDatasource.prototype.doMetricQueryRequest = function (subtype, parameters) {
        var _this = this;
        var range = this.timeSrv.timeRange();
        return this.awsRequest('/api/tsdb/query', {
            from: range.from.valueOf().toString(),
            to: range.to.valueOf().toString(),
            queries: [
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({
                    refId: 'metricFindQuery',
                    intervalMs: 1,
                    maxDataPoints: 1,
                    datasourceId: this.instanceSettings.id,
                    type: 'metricFindQuery',
                    subtype: subtype,
                }, parameters),
            ],
        }).then(function (r) {
            return _this.transformSuggestDataFromTable(r);
        });
    };
    CloudWatchDatasource.prototype.getRegions = function () {
        return this.doMetricQueryRequest('regions', null);
    };
    CloudWatchDatasource.prototype.getNamespaces = function () {
        return this.doMetricQueryRequest('namespaces', null);
    };
    CloudWatchDatasource.prototype.getMetrics = function (namespace, region) {
        return this.doMetricQueryRequest('metrics', {
            region: this.templateSrv.replace(this.getActualRegion(region)),
            namespace: this.templateSrv.replace(namespace),
        });
    };
    CloudWatchDatasource.prototype.getDimensionKeys = function (namespace, region) {
        return this.doMetricQueryRequest('dimension_keys', {
            region: this.templateSrv.replace(this.getActualRegion(region)),
            namespace: this.templateSrv.replace(namespace),
        });
    };
    CloudWatchDatasource.prototype.getDimensionValues = function (region, namespace, metricName, dimensionKey, filterDimensions) {
        return this.doMetricQueryRequest('dimension_values', {
            region: this.templateSrv.replace(this.getActualRegion(region)),
            namespace: this.templateSrv.replace(namespace),
            metricName: this.templateSrv.replace(metricName),
            dimensionKey: this.templateSrv.replace(dimensionKey),
            dimensions: this.convertDimensionFormat(filterDimensions, {}),
        });
    };
    CloudWatchDatasource.prototype.getEbsVolumeIds = function (region, instanceId) {
        return this.doMetricQueryRequest('ebs_volume_ids', {
            region: this.templateSrv.replace(this.getActualRegion(region)),
            instanceId: this.templateSrv.replace(instanceId),
        });
    };
    CloudWatchDatasource.prototype.getEc2InstanceAttribute = function (region, attributeName, filters) {
        return this.doMetricQueryRequest('ec2_instance_attribute', {
            region: this.templateSrv.replace(this.getActualRegion(region)),
            attributeName: this.templateSrv.replace(attributeName),
            filters: filters,
        });
    };
    CloudWatchDatasource.prototype.metricFindQuery = function (query) {
        var region;
        var namespace;
        var metricName;
        var filterJson;
        var regionQuery = query.match(/^regions\(\)/);
        if (regionQuery) {
            return this.getRegions();
        }
        var namespaceQuery = query.match(/^namespaces\(\)/);
        if (namespaceQuery) {
            return this.getNamespaces();
        }
        var metricNameQuery = query.match(/^metrics\(([^\)]+?)(,\s?([^,]+?))?\)/);
        if (metricNameQuery) {
            namespace = metricNameQuery[1];
            region = metricNameQuery[3];
            return this.getMetrics(namespace, region);
        }
        var dimensionKeysQuery = query.match(/^dimension_keys\(([^\)]+?)(,\s?([^,]+?))?\)/);
        if (dimensionKeysQuery) {
            namespace = dimensionKeysQuery[1];
            region = dimensionKeysQuery[3];
            return this.getDimensionKeys(namespace, region);
        }
        var dimensionValuesQuery = query.match(/^dimension_values\(([^,]+?),\s?([^,]+?),\s?([^,]+?),\s?([^,]+?)(,\s?(.+))?\)/);
        if (dimensionValuesQuery) {
            region = dimensionValuesQuery[1];
            namespace = dimensionValuesQuery[2];
            metricName = dimensionValuesQuery[3];
            var dimensionKey = dimensionValuesQuery[4];
            filterJson = {};
            if (dimensionValuesQuery[6]) {
                filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));
            }
            return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);
        }
        var ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\(([^,]+?),\s?([^,]+?)\)/);
        if (ebsVolumeIdsQuery) {
            region = ebsVolumeIdsQuery[1];
            var instanceId = ebsVolumeIdsQuery[2];
            return this.getEbsVolumeIds(region, instanceId);
        }
        var ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\(([^,]+?),\s?([^,]+?),\s?(.+?)\)/);
        if (ec2InstanceAttributeQuery) {
            region = ec2InstanceAttributeQuery[1];
            var targetAttributeName = ec2InstanceAttributeQuery[2];
            filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));
            return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);
        }
        return this.$q.when([]);
    };
    CloudWatchDatasource.prototype.annotationQuery = function (options) {
        var _this = this;
        var annotation = options.annotation;
        var statistics = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(annotation.statistics, function (s) {
            return _this.templateSrv.replace(s);
        });
        var defaultPeriod = annotation.prefixMatching ? '' : '300';
        var period = annotation.period || defaultPeriod;
        period = parseInt(period, 10);
        var parameters = {
            prefixMatching: annotation.prefixMatching,
            region: this.templateSrv.replace(this.getActualRegion(annotation.region)),
            namespace: this.templateSrv.replace(annotation.namespace),
            metricName: this.templateSrv.replace(annotation.metricName),
            dimensions: this.convertDimensionFormat(annotation.dimensions, {}),
            statistics: statistics,
            period: period,
            actionPrefix: annotation.actionPrefix || '',
            alarmNamePrefix: annotation.alarmNamePrefix || '',
        };
        return this.awsRequest('/api/tsdb/query', {
            from: options.range.from.valueOf().toString(),
            to: options.range.to.valueOf().toString(),
            queries: [
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({
                    refId: 'annotationQuery',
                    intervalMs: 1,
                    maxDataPoints: 1,
                    datasourceId: this.instanceSettings.id,
                    type: 'annotationQuery',
                }, parameters),
            ],
        }).then(function (r) {
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(r.results['annotationQuery'].tables[0].rows, function (v) {
                return {
                    annotation: annotation,
                    time: Date.parse(v[0]),
                    title: v[1],
                    tags: [v[2]],
                    text: v[3],
                };
            });
        });
    };
    CloudWatchDatasource.prototype.targetContainsTemplate = function (target) {
        var _this = this;
        return (this.templateSrv.variableExists(target.region) ||
            this.templateSrv.variableExists(target.namespace) ||
            this.templateSrv.variableExists(target.metricName) ||
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(target.dimensions, function (v, k) {
                return _this.templateSrv.variableExists(k) || _this.templateSrv.variableExists(v);
            }));
    };
    CloudWatchDatasource.prototype.testDatasource = function () {
        /* use billing metrics for test */
        var region = this.defaultRegion;
        var namespace = 'AWS/Billing';
        var metricName = 'EstimatedCharges';
        var dimensions = {};
        return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(function () {
            return { status: 'success', message: 'Data source is working' };
        }, function (err) {
            return { status: 'error', message: err.message };
        });
    };
    CloudWatchDatasource.prototype.awsRequest = function (url, data) {
        var options = {
            method: 'POST',
            url: url,
            data: data,
        };
        return this.backendSrv.datasourceRequest(options).then(function (result) {
            return result.data;
        });
    };
    CloudWatchDatasource.prototype.getDefaultRegion = function () {
        return this.defaultRegion;
    };
    CloudWatchDatasource.prototype.getActualRegion = function (region) {
        if (region === 'default' || lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(region)) {
            return this.getDefaultRegion();
        }
        return region;
    };
    CloudWatchDatasource.prototype.getExpandedVariables = function (target, dimensionKey, variable, templateSrv) {
        /* if the all checkbox is marked we should add all values to the targets */
        var allSelected = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(variable.options, { selected: true, text: 'All' });
        var selectedVariables = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(variable.options, function (v) {
            if (allSelected) {
                return v.text !== 'All';
            }
            else {
                return v.selected;
            }
        });
        var currentVariables = !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(variable.current.value)
            ? [variable.current]
            : variable.current.value.map(function (v) {
                return {
                    text: v,
                    value: v,
                };
            });
        var useSelectedVariables = selectedVariables.some(function (s) {
            return s.value === currentVariables[0].value;
        }) || currentVariables[0].value === '$__all';
        return (useSelectedVariables ? selectedVariables : currentVariables).map(function (v) {
            var t = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(target);
            var scopedVar = {};
            scopedVar[variable.name] = v;
            t.refId = target.refId + '_' + v.value;
            t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);
            if (variable.multi && target.id) {
                t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id
            }
            else {
                t.id = target.id;
            }
            return t;
        });
    };
    CloudWatchDatasource.prototype.expandTemplateVariable = function (targets, scopedVars, templateSrv) {
        var _this = this;
        // Datasource and template srv logic uber-complected. This should be cleaned up.
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.chain(targets)
            .map(function (target) {
            var dimensionKey = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.findKey(target.dimensions, function (v) {
                return templateSrv.variableExists(v) && !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.has(scopedVars, templateSrv.getVariableName(v));
            });
            if (dimensionKey) {
                var multiVariable = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(templateSrv.variables, function (variable) {
                    return (app_features_templating_variable__WEBPACK_IMPORTED_MODULE_4__["containsVariable"](target.dimensions[dimensionKey], variable.name) && variable.multi);
                });
                var variable = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(templateSrv.variables, function (variable) {
                    return app_features_templating_variable__WEBPACK_IMPORTED_MODULE_4__["containsVariable"](target.dimensions[dimensionKey], variable.name);
                });
                return _this.getExpandedVariables(target, dimensionKey, multiVariable || variable, templateSrv);
            }
            else {
                return [target];
            }
        })
            .flatten()
            .value();
    };
    CloudWatchDatasource.prototype.convertToCloudWatchTime = function (date, roundUp) {
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(date)) {
            date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__["parse"](date, roundUp);
        }
        return Math.round(date.valueOf() / 1000);
    };
    CloudWatchDatasource.prototype.convertDimensionFormat = function (dimensions, scopedVars) {
        var _this = this;
        var convertedDimensions = {};
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(dimensions, function (value, key) {
            convertedDimensions[_this.templateSrv.replace(key, scopedVars)] = _this.templateSrv.replace(value, scopedVars);
        });
        return convertedDimensions;
    };
    return CloudWatchDatasource;
}());
/* harmony default export */ __webpack_exports__["default"] = (CloudWatchDatasource);


/***/ }),

/***/ "./public/app/plugins/datasource/cloudwatch/module.ts":
/*!************************************************************!*\
  !*** ./public/app/plugins/datasource/cloudwatch/module.ts ***!
  \************************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return CloudWatchAnnotationsQueryCtrl; });
/* harmony import */ var _query_parameter_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query_parameter_ctrl */ "./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts");
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/cloudwatch/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/cloudwatch/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_2__["CloudWatchQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/cloudwatch/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_3__["CloudWatchConfigCtrl"]; });





var CloudWatchAnnotationsQueryCtrl = /** @class */ (function () {
    function CloudWatchAnnotationsQueryCtrl() {
    }
    CloudWatchAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return CloudWatchAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/cloudwatch/query_ctrl.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/cloudwatch/query_ctrl.ts ***!
  \****************************************************************/
/*! exports provided: CloudWatchQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudWatchQueryCtrl", function() { return CloudWatchQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _query_parameter_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_parameter_ctrl */ "./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");



var CloudWatchQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CloudWatchQueryCtrl, _super);
    /** @ngInject */
    function CloudWatchQueryCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';
        return _this;
    }
    CloudWatchQueryCtrl.templateUrl = 'partials/query.editor.html';
    return CloudWatchQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts":
/*!**************************************************************************!*\
  !*** ./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts ***!
  \**************************************************************************/
/*! exports provided: CloudWatchQueryParameter, CloudWatchQueryParameterCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudWatchQueryParameter", function() { return CloudWatchQueryParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudWatchQueryParameterCtrl", function() { return CloudWatchQueryParameterCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var CloudWatchQueryParameter = /** @class */ (function () {
    function CloudWatchQueryParameter() {
        return {
            templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',
            controller: 'CloudWatchQueryParameterCtrl',
            restrict: 'E',
            scope: {
                target: '=',
                datasource: '=',
                onChange: '&',
            },
        };
    }
    return CloudWatchQueryParameter;
}());

var CloudWatchQueryParameterCtrl = /** @class */ (function () {
    /** @ngInject */
    function CloudWatchQueryParameterCtrl($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) {
        $scope.init = function () {
            var target = $scope.target;
            target.namespace = target.namespace || '';
            target.metricName = target.metricName || '';
            target.statistics = target.statistics || ['Average'];
            target.dimensions = target.dimensions || {};
            target.period = target.period || '';
            target.region = target.region || 'default';
            target.id = target.id || '';
            target.expression = target.expression || '';
            target.returnData = target.returnData || false;
            target.highResolution = target.highResolution || false;
            $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');
            $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');
            $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');
            $scope.dimSegments = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce($scope.target.dimensions, function (memo, value, key) {
                memo.push(uiSegmentSrv.newKey(key));
                memo.push(uiSegmentSrv.newOperator('='));
                memo.push(uiSegmentSrv.newKeyValue(value));
                return memo;
            }, []);
            $scope.statSegments = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map($scope.target.statistics, function (stat) {
                return uiSegmentSrv.getSegmentForValue(stat);
            });
            $scope.ensurePlusButton($scope.statSegments);
            $scope.ensurePlusButton($scope.dimSegments);
            $scope.removeDimSegment = uiSegmentSrv.newSegment({
                fake: true,
                value: '-- remove dimension --',
            });
            $scope.removeStatSegment = uiSegmentSrv.newSegment({
                fake: true,
                value: '-- remove stat --',
            });
            if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty($scope.target.region)) {
                $scope.target.region = 'default';
            }
            if (!$scope.onChange) {
                $scope.onChange = function () { };
            }
        };
        $scope.getStatSegments = function () {
            return $q.when(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.flatten([
                angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy($scope.removeStatSegment),
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map($scope.datasource.standardStatistics, function (s) {
                    return uiSegmentSrv.getSegmentForValue(s);
                }),
                uiSegmentSrv.getSegmentForValue('pNN.NN'),
            ]));
        };
        $scope.statSegmentChanged = function (segment, index) {
            if (segment.value === $scope.removeStatSegment.value) {
                $scope.statSegments.splice(index, 1);
            }
            else {
                segment.type = 'value';
            }
            $scope.target.statistics = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce($scope.statSegments, function (memo, seg) {
                if (!seg.fake) {
                    memo.push(seg.value);
                }
                return memo;
            }, []);
            $scope.ensurePlusButton($scope.statSegments);
            $scope.onChange();
        };
        $scope.ensurePlusButton = function (segments) {
            var count = segments.length;
            var lastSegment = segments[Math.max(count - 1, 0)];
            if (!lastSegment || lastSegment.type !== 'plus-button') {
                segments.push(uiSegmentSrv.newPlusButton());
            }
        };
        $scope.getDimSegments = function (segment, $index) {
            if (segment.type === 'operator') {
                return $q.when([]);
            }
            var target = $scope.target;
            var query = $q.when([]);
            if (segment.type === 'key' || segment.type === 'plus-button') {
                query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);
            }
            else if (segment.type === 'value') {
                var dimensionKey = $scope.dimSegments[$index - 2].value;
                query = $scope.datasource.getDimensionValues(target.region, target.namespace, target.metricName, dimensionKey, target.dimensions);
            }
            return query.then($scope.transformToSegments(true)).then(function (results) {
                if (segment.type === 'key') {
                    results.splice(0, 0, angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy($scope.removeDimSegment));
                }
                return results;
            });
        };
        $scope.dimSegmentChanged = function (segment, index) {
            $scope.dimSegments[index] = segment;
            if (segment.value === $scope.removeDimSegment.value) {
                $scope.dimSegments.splice(index, 3);
            }
            else if (segment.type === 'plus-button') {
                $scope.dimSegments.push(uiSegmentSrv.newOperator('='));
                $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));
                segment.type = 'key';
                segment.cssClass = 'query-segment-key';
            }
            $scope.syncDimSegmentsWithModel();
            $scope.ensurePlusButton($scope.dimSegments);
            $scope.onChange();
        };
        $scope.syncDimSegmentsWithModel = function () {
            var dims = {};
            var length = $scope.dimSegments.length;
            for (var i = 0; i < length - 2; i += 3) {
                var keySegment = $scope.dimSegments[i];
                var valueSegment = $scope.dimSegments[i + 2];
                if (!valueSegment.fake) {
                    dims[keySegment.value] = valueSegment.value;
                }
            }
            $scope.target.dimensions = dims;
        };
        $scope.getRegions = function () {
            return $scope.datasource
                .metricFindQuery('regions()')
                .then(function (results) {
                results.unshift({ text: 'default' });
                return results;
            })
                .then($scope.transformToSegments(true));
        };
        $scope.getNamespaces = function () {
            return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));
        };
        $scope.getMetrics = function () {
            return $scope.datasource
                .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')
                .then($scope.transformToSegments(true));
        };
        $scope.regionChanged = function () {
            $scope.target.region = $scope.regionSegment.value;
            $scope.onChange();
        };
        $scope.namespaceChanged = function () {
            $scope.target.namespace = $scope.namespaceSegment.value;
            $scope.onChange();
        };
        $scope.metricChanged = function () {
            $scope.target.metricName = $scope.metricSegment.value;
            $scope.onChange();
        };
        $scope.transformToSegments = function (addTemplateVars) {
            return function (results) {
                var segments = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(results, function (segment) {
                    return uiSegmentSrv.newSegment({
                        value: segment.text,
                        expandable: segment.expandable,
                    });
                });
                if (addTemplateVars) {
                    lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(templateSrv.variables, function (variable) {
                        segments.unshift(uiSegmentSrv.newSegment({
                            type: 'template',
                            value: '$' + variable.name,
                            expandable: true,
                        }));
                    });
                }
                return segments;
            };
        };
        $scope.init();
    }
    return CloudWatchQueryParameterCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').directive('cloudwatchQueryParameter', CloudWatchQueryParameter);
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('CloudWatchQueryParameterCtrl', CloudWatchQueryParameterCtrl);


/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/bucket_agg.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/bucket_agg.ts ***!
  \*******************************************************************/
/*! exports provided: elasticBucketAgg, ElasticBucketAggCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elasticBucketAgg", function() { return elasticBucketAgg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticBucketAggCtrl", function() { return ElasticBucketAggCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _query_def__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_def */ "./public/app/plugins/datasource/elasticsearch/query_def.ts");



function elasticBucketAgg() {
    return {
        templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',
        controller: 'ElasticBucketAggCtrl',
        restrict: 'E',
        scope: {
            target: '=',
            index: '=',
            onChange: '&',
            getFields: '&',
        },
    };
}
var ElasticBucketAggCtrl = /** @class */ (function () {
    /** @nginject */
    function ElasticBucketAggCtrl($scope, uiSegmentSrv, $q, $rootScope) {
        var bucketAggs = $scope.target.bucketAggs;
        $scope.orderByOptions = [];
        $scope.getBucketAggTypes = function () {
            return _query_def__WEBPACK_IMPORTED_MODULE_2__["bucketAggTypes"];
        };
        $scope.getOrderOptions = function () {
            return _query_def__WEBPACK_IMPORTED_MODULE_2__["orderOptions"];
        };
        $scope.getSizeOptions = function () {
            return _query_def__WEBPACK_IMPORTED_MODULE_2__["sizeOptions"];
        };
        $rootScope.onAppEvent('elastic-query-updated', function () {
            $scope.validateModel();
        }, $scope);
        $scope.init = function () {
            $scope.agg = bucketAggs[$scope.index];
            $scope.validateModel();
        };
        $scope.onChangeInternal = function () {
            $scope.onChange();
        };
        $scope.onTypeChanged = function () {
            $scope.agg.settings = {};
            $scope.showOptions = false;
            switch ($scope.agg.type) {
                case 'date_histogram':
                case 'histogram':
                case 'terms': {
                    delete $scope.agg.query;
                    $scope.agg.field = 'select field';
                    break;
                }
                case 'filters': {
                    delete $scope.agg.field;
                    $scope.agg.query = '*';
                    break;
                }
                case 'geohash_grid': {
                    $scope.agg.settings.precision = 3;
                    break;
                }
            }
            $scope.validateModel();
            $scope.onChange();
        };
        $scope.validateModel = function () {
            $scope.index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(bucketAggs, $scope.agg);
            $scope.isFirst = $scope.index === 0;
            $scope.bucketAggCount = bucketAggs.length;
            var settingsLinkText = '';
            var settings = $scope.agg.settings || {};
            switch ($scope.agg.type) {
                case 'terms': {
                    settings.order = settings.order || 'desc';
                    settings.size = settings.size || '10';
                    settings.min_doc_count = settings.min_doc_count || 1;
                    settings.orderBy = settings.orderBy || '_term';
                    if (settings.size !== '0') {
                        settingsLinkText = _query_def__WEBPACK_IMPORTED_MODULE_2__["describeOrder"](settings.order) + ' ' + settings.size + ', ';
                    }
                    if (settings.min_doc_count > 0) {
                        settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';
                    }
                    settingsLinkText += 'Order by: ' + _query_def__WEBPACK_IMPORTED_MODULE_2__["describeOrderBy"](settings.orderBy, $scope.target);
                    if (settings.size === '0') {
                        settingsLinkText += ' (' + settings.order + ')';
                    }
                    break;
                }
                case 'filters': {
                    settings.filters = settings.filters || [{ query: '*' }];
                    settingsLinkText = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce(settings.filters, function (memo, value, index) {
                        memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';
                        return memo;
                    }, '');
                    if (settingsLinkText.length > 50) {
                        settingsLinkText = settingsLinkText.substr(0, 50) + '...';
                    }
                    settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';
                    break;
                }
                case 'date_histogram': {
                    settings.interval = settings.interval || 'auto';
                    settings.min_doc_count = settings.min_doc_count || 0;
                    $scope.agg.field = $scope.target.timeField;
                    settingsLinkText = 'Interval: ' + settings.interval;
                    if (settings.min_doc_count > 0) {
                        settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;
                    }
                    if (settings.trimEdges === undefined || settings.trimEdges < 0) {
                        settings.trimEdges = 0;
                    }
                    if (settings.trimEdges && settings.trimEdges > 0) {
                        settingsLinkText += ', Trim edges: ' + settings.trimEdges;
                    }
                    break;
                }
                case 'histogram': {
                    settings.interval = settings.interval || 1000;
                    settings.min_doc_count = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaultTo(settings.min_doc_count, 1);
                    settingsLinkText = 'Interval: ' + settings.interval;
                    if (settings.min_doc_count > 0) {
                        settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;
                    }
                    break;
                }
                case 'geohash_grid': {
                    // limit precision to 7
                    settings.precision = Math.max(Math.min(settings.precision, 7), 1);
                    settingsLinkText = 'Precision: ' + settings.precision;
                    break;
                }
            }
            $scope.settingsLinkText = settingsLinkText;
            $scope.agg.settings = settings;
            return true;
        };
        $scope.addFiltersQuery = function () {
            $scope.agg.settings.filters.push({ query: '*' });
        };
        $scope.removeFiltersQuery = function (filter) {
            $scope.agg.settings.filters = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.without($scope.agg.settings.filters, filter);
        };
        $scope.toggleOptions = function () {
            $scope.showOptions = !$scope.showOptions;
        };
        $scope.getOrderByOptions = function () {
            return _query_def__WEBPACK_IMPORTED_MODULE_2__["getOrderByOptions"]($scope.target);
        };
        $scope.getFieldsInternal = function () {
            if ($scope.agg.type === 'date_histogram') {
                return $scope.getFields({ $fieldType: 'date' });
            }
            else {
                return $scope.getFields();
            }
        };
        $scope.getIntervalOptions = function () {
            return $q.when(uiSegmentSrv.transformToSegments(true, 'interval')(_query_def__WEBPACK_IMPORTED_MODULE_2__["intervalOptions"]));
        };
        $scope.addBucketAgg = function () {
            // if last is date histogram add it before
            var lastBucket = bucketAggs[bucketAggs.length - 1];
            var addIndex = bucketAggs.length - 1;
            if (lastBucket && lastBucket.type === 'date_histogram') {
                addIndex -= 1;
            }
            var id = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce($scope.target.bucketAggs.concat($scope.target.metrics), function (max, val) {
                return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;
            }, 0);
            bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });
            $scope.onChange();
        };
        $scope.removeBucketAgg = function () {
            bucketAggs.splice($scope.index, 1);
            $scope.onChange();
        };
        $scope.init();
    }
    return ElasticBucketAggCtrl;
}());

var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
module.directive('elasticBucketAgg', elasticBucketAgg);
module.controller('ElasticBucketAggCtrl', ElasticBucketAggCtrl);


/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/config_ctrl.ts":
/*!********************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/config_ctrl.ts ***!
  \********************************************************************/
/*! exports provided: ElasticConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticConfigCtrl", function() { return ElasticConfigCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var ElasticConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function ElasticConfigCtrl($scope) {
        this.indexPatternTypes = [
            { name: 'No pattern', value: undefined },
            { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },
            { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },
            { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },
            { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },
            { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },
        ];
        this.esVersions = [{ name: '2.x', value: 2 }, { name: '5.x', value: 5 }, { name: '5.6+', value: 56 }];
        this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';
        this.current.jsonData.esVersion = this.current.jsonData.esVersion || 5;
        this.current.jsonData.maxConcurrentShardRequests = this.current.jsonData.maxConcurrentShardRequests || 256;
    }
    ElasticConfigCtrl.prototype.indexPatternTypeChanged = function () {
        var def = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.indexPatternTypes, {
            value: this.current.jsonData.interval,
        });
        this.current.database = def.example || 'es-index-name';
    };
    ElasticConfigCtrl.templateUrl = 'public/app/plugins/datasource/elasticsearch/partials/config.html';
    return ElasticConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/datasource.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/datasource.ts ***!
  \*******************************************************************/
/*! exports provided: ElasticDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticDatasource", function() { return ElasticDatasource; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _query_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query_builder */ "./public/app/plugins/datasource/elasticsearch/query_builder.ts");
/* harmony import */ var _index_pattern__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index_pattern */ "./public/app/plugins/datasource/elasticsearch/index_pattern.ts");
/* harmony import */ var _elastic_response__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./elastic_response */ "./public/app/plugins/datasource/elasticsearch/elastic_response.ts");






var ElasticDatasource = /** @class */ (function () {
    /** @ngInject */
    function ElasticDatasource(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
        this.basicAuth = instanceSettings.basicAuth;
        this.withCredentials = instanceSettings.withCredentials;
        this.url = instanceSettings.url;
        this.name = instanceSettings.name;
        this.index = instanceSettings.index;
        this.timeField = instanceSettings.jsonData.timeField;
        this.esVersion = instanceSettings.jsonData.esVersion;
        this.indexPattern = new _index_pattern__WEBPACK_IMPORTED_MODULE_4__["IndexPattern"](instanceSettings.index, instanceSettings.jsonData.interval);
        this.interval = instanceSettings.jsonData.timeInterval;
        this.maxConcurrentShardRequests = instanceSettings.jsonData.maxConcurrentShardRequests;
        this.queryBuilder = new _query_builder__WEBPACK_IMPORTED_MODULE_3__["ElasticQueryBuilder"]({
            timeField: this.timeField,
            esVersion: this.esVersion,
        });
    }
    ElasticDatasource.prototype.request = function (method, url, data) {
        var options = {
            url: this.url + '/' + url,
            method: method,
            data: data,
        };
        if (this.basicAuth || this.withCredentials) {
            options.withCredentials = true;
        }
        if (this.basicAuth) {
            options.headers = {
                Authorization: this.basicAuth,
            };
        }
        return this.backendSrv.datasourceRequest(options);
    };
    ElasticDatasource.prototype.get = function (url) {
        var range = this.timeSrv.timeRange();
        var indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(indexList) && indexList.length) {
            return this.request('GET', indexList[0] + url).then(function (results) {
                results.data.$$config = results.config;
                return results.data;
            });
        }
        else {
            return this.request('GET', this.indexPattern.getIndexForToday() + url).then(function (results) {
                results.data.$$config = results.config;
                return results.data;
            });
        }
    };
    ElasticDatasource.prototype.post = function (url, data) {
        return this.request('POST', url, data)
            .then(function (results) {
            results.data.$$config = results.config;
            return results.data;
        })
            .catch(function (err) {
            if (err.data && err.data.error) {
                throw {
                    message: 'Elasticsearch error: ' + err.data.error.reason,
                    error: err.data.error,
                };
            }
            throw err;
        });
    };
    ElasticDatasource.prototype.annotationQuery = function (options) {
        var annotation = options.annotation;
        var timeField = annotation.timeField || '@timestamp';
        var queryString = annotation.query || '*';
        var tagsField = annotation.tagsField || 'tags';
        var textField = annotation.textField || null;
        var range = {};
        range[timeField] = {
            from: options.range.from.valueOf(),
            to: options.range.to.valueOf(),
            format: 'epoch_millis',
        };
        var queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');
        var query = {
            bool: {
                filter: [
                    { range: range },
                    {
                        query_string: {
                            query: queryInterpolated,
                        },
                    },
                ],
            },
        };
        var data = {
            query: query,
            size: 10000,
        };
        // fields field not supported on ES 5.x
        if (this.esVersion < 5) {
            data['fields'] = [timeField, '_source'];
        }
        var header = {
            search_type: 'query_then_fetch',
            ignore_unavailable: true,
        };
        // old elastic annotations had index specified on them
        if (annotation.index) {
            header.index = annotation.index;
        }
        else {
            header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);
        }
        var payload = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(header) + '\n' + angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(data) + '\n';
        return this.post('_msearch', payload).then(function (res) {
            var list = [];
            var hits = res.responses[0].hits.hits;
            var getFieldFromSource = function (source, fieldName) {
                if (!fieldName) {
                    return;
                }
                var fieldNames = fieldName.split('.');
                var fieldValue = source;
                for (var i = 0; i < fieldNames.length; i++) {
                    fieldValue = fieldValue[fieldNames[i]];
                    if (!fieldValue) {
                        console.log('could not find field in annotation: ', fieldName);
                        return '';
                    }
                }
                return fieldValue;
            };
            for (var i = 0; i < hits.length; i++) {
                var source = hits[i]._source;
                var time = getFieldFromSource(source, timeField);
                if (typeof hits[i].fields !== 'undefined') {
                    var fields = hits[i].fields;
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(fields[timeField]) || lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isNumber(fields[timeField])) {
                        time = fields[timeField];
                    }
                }
                var event = {
                    annotation: annotation,
                    time: moment__WEBPACK_IMPORTED_MODULE_2___default.a.utc(time).valueOf(),
                    text: getFieldFromSource(source, textField),
                    tags: getFieldFromSource(source, tagsField),
                };
                // legacy support for title tield
                if (annotation.titleField) {
                    var title = getFieldFromSource(source, annotation.titleField);
                    if (title) {
                        event.text = title + '\n' + event.text;
                    }
                }
                if (typeof event.tags === 'string') {
                    event.tags = event.tags.split(',');
                }
                list.push(event);
            }
            return list;
        });
    };
    ElasticDatasource.prototype.testDatasource = function () {
        var _this = this;
        this.timeSrv.setTime({ from: 'now-1m', to: 'now' }, true);
        // validate that the index exist and has date field
        return this.getFields({ type: 'date' }).then(function (dateFields) {
            var timeField = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(dateFields, { text: _this.timeField });
            if (!timeField) {
                return {
                    status: 'error',
                    message: 'No date field named ' + _this.timeField + ' found',
                };
            }
            return { status: 'success', message: 'Index OK. Time field name OK.' };
        }, function (err) {
            console.log(err);
            if (err.data && err.data.error) {
                var message = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(err.data.error);
                if (err.data.error.reason) {
                    message = err.data.error.reason;
                }
                return { status: 'error', message: message };
            }
            else {
                return { status: 'error', message: err.status };
            }
        });
    };
    ElasticDatasource.prototype.getQueryHeader = function (searchType, timeFrom, timeTo) {
        var queryHeader = {
            search_type: searchType,
            ignore_unavailable: true,
            index: this.indexPattern.getIndexList(timeFrom, timeTo),
        };
        if (this.esVersion >= 56) {
            queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;
        }
        return angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(queryHeader);
    };
    ElasticDatasource.prototype.query = function (options) {
        var payload = '';
        var target;
        var sentTargets = [];
        // add global adhoc filters to timeFilter
        var adhocFilters = this.templateSrv.getAdhocFilters(this.name);
        for (var i = 0; i < options.targets.length; i++) {
            target = options.targets[i];
            if (target.hide) {
                continue;
            }
            var queryString = this.templateSrv.replace(target.query || '*', options.scopedVars, 'lucene');
            var queryObj = this.queryBuilder.build(target, adhocFilters, queryString);
            var esQuery = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(queryObj);
            var searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';
            var header = this.getQueryHeader(searchType, options.range.from, options.range.to);
            payload += header + '\n';
            payload += esQuery + '\n';
            sentTargets.push(target);
        }
        if (sentTargets.length === 0) {
            return this.$q.when([]);
        }
        payload = payload.replace(/\$timeFrom/g, options.range.from.valueOf());
        payload = payload.replace(/\$timeTo/g, options.range.to.valueOf());
        payload = this.templateSrv.replace(payload, options.scopedVars);
        return this.post('_msearch', payload).then(function (res) {
            return new _elastic_response__WEBPACK_IMPORTED_MODULE_5__["ElasticResponse"](sentTargets, res).getTimeSeries();
        });
    };
    ElasticDatasource.prototype.getFields = function (query) {
        return this.get('/_mapping').then(function (result) {
            var typeMap = {
                float: 'number',
                double: 'number',
                integer: 'number',
                long: 'number',
                date: 'date',
                string: 'string',
                text: 'string',
                scaled_float: 'number',
                nested: 'nested',
            };
            function shouldAddField(obj, key, query) {
                if (key[0] === '_') {
                    return false;
                }
                if (!query.type) {
                    return true;
                }
                // equal query type filter, or via typemap translation
                return query.type === obj.type || query.type === typeMap[obj.type];
            }
            // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total
            var fieldNameParts = [];
            var fields = {};
            function getFieldsRecursively(obj) {
                for (var key in obj) {
                    var subObj = obj[key];
                    // Check mapping field for nested fields
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(subObj.properties)) {
                        fieldNameParts.push(key);
                        getFieldsRecursively(subObj.properties);
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isObject(subObj.fields)) {
                        fieldNameParts.push(key);
                        getFieldsRecursively(subObj.fields);
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(subObj.type)) {
                        var fieldName = fieldNameParts.concat(key).join('.');
                        // Hide meta-fields and check field type
                        if (shouldAddField(subObj, key, query)) {
                            fields[fieldName] = {
                                text: fieldName,
                                type: subObj.type,
                            };
                        }
                    }
                }
                fieldNameParts.pop();
            }
            for (var indexName in result) {
                var index = result[indexName];
                if (index && index.mappings) {
                    var mappings = index.mappings;
                    for (var typeName in mappings) {
                        var properties = mappings[typeName].properties;
                        getFieldsRecursively(properties);
                    }
                }
            }
            // transform to array
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(fields, function (value) {
                return value;
            });
        });
    };
    ElasticDatasource.prototype.getTerms = function (queryDef) {
        var range = this.timeSrv.timeRange();
        var searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';
        var header = this.getQueryHeader(searchType, range.from, range.to);
        var esQuery = angular__WEBPACK_IMPORTED_MODULE_0___default.a.toJson(this.queryBuilder.getTermsQuery(queryDef));
        esQuery = esQuery.replace(/\$timeFrom/g, range.from.valueOf());
        esQuery = esQuery.replace(/\$timeTo/g, range.to.valueOf());
        esQuery = header + '\n' + esQuery + '\n';
        return this.post('_msearch?search_type=' + searchType, esQuery).then(function (res) {
            if (!res.responses[0].aggregations) {
                return [];
            }
            var buckets = res.responses[0].aggregations['1'].buckets;
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(buckets, function (bucket) {
                return {
                    text: bucket.key_as_string || bucket.key,
                    value: bucket.key,
                };
            });
        });
    };
    ElasticDatasource.prototype.metricFindQuery = function (query) {
        query = angular__WEBPACK_IMPORTED_MODULE_0___default.a.fromJson(query);
        if (!query) {
            return this.$q.when([]);
        }
        if (query.find === 'fields') {
            query.field = this.templateSrv.replace(query.field, {}, 'lucene');
            return this.getFields(query);
        }
        if (query.find === 'terms') {
            query.field = this.templateSrv.replace(query.field, {}, 'lucene');
            query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');
            return this.getTerms(query);
        }
    };
    ElasticDatasource.prototype.getTagKeys = function () {
        return this.getFields({});
    };
    ElasticDatasource.prototype.getTagValues = function (options) {
        return this.getTerms({ field: options.key, query: '*' });
    };
    ElasticDatasource.prototype.targetContainsTemplate = function (target) {
        if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {
            return true;
        }
        for (var _i = 0, _a = target.bucketAggs; _i < _a.length; _i++) {
            var bucketAgg = _a[_i];
            if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {
                return true;
            }
        }
        for (var _b = 0, _c = target.metrics; _b < _c.length; _b++) {
            var metric = _c[_b];
            if (this.templateSrv.variableExists(metric.field) ||
                this.objectContainsTemplate(metric.settings) ||
                this.objectContainsTemplate(metric.meta)) {
                return true;
            }
        }
        return false;
    };
    ElasticDatasource.prototype.isPrimitive = function (obj) {
        if (obj === null || obj === undefined) {
            return true;
        }
        if (['string', 'number', 'boolean'].some(function (type) { return type === typeof true; })) {
            return true;
        }
        return false;
    };
    ElasticDatasource.prototype.objectContainsTemplate = function (obj) {
        if (!obj) {
            return false;
        }
        for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
            var key = _a[_i];
            if (this.isPrimitive(obj[key])) {
                if (this.templateSrv.variableExists(obj[key])) {
                    return true;
                }
            }
            else if (Array.isArray(obj[key])) {
                for (var _b = 0, _c = obj[key]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    if (this.objectContainsTemplate(item)) {
                        return true;
                    }
                }
            }
            else {
                if (this.objectContainsTemplate(obj[key])) {
                    return true;
                }
            }
        }
        return false;
    };
    return ElasticDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/elastic_response.ts":
/*!*************************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/elastic_response.ts ***!
  \*************************************************************************/
/*! exports provided: ElasticResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticResponse", function() { return ElasticResponse; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _query_def__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_def */ "./public/app/plugins/datasource/elasticsearch/query_def.ts");
/* harmony import */ var app_core_table_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/table_model */ "./public/app/core/table_model.ts");



var ElasticResponse = /** @class */ (function () {
    function ElasticResponse(targets, response) {
        this.targets = targets;
        this.response = response;
        this.targets = targets;
        this.response = response;
    }
    ElasticResponse.prototype.processMetrics = function (esAgg, target, seriesList, props) {
        var metric, y, i, newSeries, bucket, value;
        for (y = 0; y < target.metrics.length; y++) {
            metric = target.metrics[y];
            if (metric.hide) {
                continue;
            }
            switch (metric.type) {
                case 'count': {
                    newSeries = { datapoints: [], metric: 'count', props: props };
                    for (i = 0; i < esAgg.buckets.length; i++) {
                        bucket = esAgg.buckets[i];
                        value = bucket.doc_count;
                        newSeries.datapoints.push([value, bucket.key]);
                    }
                    seriesList.push(newSeries);
                    break;
                }
                case 'percentiles': {
                    if (esAgg.buckets.length === 0) {
                        break;
                    }
                    var firstBucket = esAgg.buckets[0];
                    var percentiles = firstBucket[metric.id].values;
                    for (var percentileName in percentiles) {
                        newSeries = {
                            datapoints: [],
                            metric: 'p' + percentileName,
                            props: props,
                            field: metric.field,
                        };
                        for (i = 0; i < esAgg.buckets.length; i++) {
                            bucket = esAgg.buckets[i];
                            var values = bucket[metric.id].values;
                            newSeries.datapoints.push([values[percentileName], bucket.key]);
                        }
                        seriesList.push(newSeries);
                    }
                    break;
                }
                case 'extended_stats': {
                    for (var statName in metric.meta) {
                        if (!metric.meta[statName]) {
                            continue;
                        }
                        newSeries = {
                            datapoints: [],
                            metric: statName,
                            props: props,
                            field: metric.field,
                        };
                        for (i = 0; i < esAgg.buckets.length; i++) {
                            bucket = esAgg.buckets[i];
                            var stats = bucket[metric.id];
                            // add stats that are in nested obj to top level obj
                            stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;
                            stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;
                            newSeries.datapoints.push([stats[statName], bucket.key]);
                        }
                        seriesList.push(newSeries);
                    }
                    break;
                }
                default: {
                    newSeries = {
                        datapoints: [],
                        metric: metric.type,
                        field: metric.field,
                        props: props,
                    };
                    for (i = 0; i < esAgg.buckets.length; i++) {
                        bucket = esAgg.buckets[i];
                        value = bucket[metric.id];
                        if (value !== undefined) {
                            if (value.normalized_value) {
                                newSeries.datapoints.push([value.normalized_value, bucket.key]);
                            }
                            else {
                                newSeries.datapoints.push([value.value, bucket.key]);
                            }
                        }
                    }
                    seriesList.push(newSeries);
                    break;
                }
            }
        }
    };
    ElasticResponse.prototype.processAggregationDocs = function (esAgg, aggDef, target, table, props) {
        // add columns
        if (table.columns.length === 0) {
            for (var _i = 0, _a = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keys(props); _i < _a.length; _i++) {
                var propKey = _a[_i];
                table.addColumn({ text: propKey, filterable: true });
            }
            table.addColumn({ text: aggDef.field, filterable: true });
        }
        // helper func to add values to value array
        var addMetricValue = function (values, metricName, value) {
            table.addColumn({ text: metricName });
            values.push(value);
        };
        for (var _b = 0, _c = esAgg.buckets; _b < _c.length; _b++) {
            var bucket = _c[_b];
            var values = [];
            for (var _d = 0, _e = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.values(props); _d < _e.length; _d++) {
                var propValues = _e[_d];
                values.push(propValues);
            }
            // add bucket key (value)
            values.push(bucket.key);
            for (var _f = 0, _g = target.metrics; _f < _g.length; _f++) {
                var metric = _g[_f];
                switch (metric.type) {
                    case 'count': {
                        addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);
                        break;
                    }
                    case 'extended_stats': {
                        for (var statName in metric.meta) {
                            if (!metric.meta[statName]) {
                                continue;
                            }
                            var stats = bucket[metric.id];
                            // add stats that are in nested obj to top level obj
                            stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;
                            stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;
                            addMetricValue(values, this.getMetricName(statName), stats[statName]);
                        }
                        break;
                    }
                    default: {
                        var metricName = this.getMetricName(metric.type);
                        var otherMetrics = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(target.metrics, { type: metric.type });
                        // if more of the same metric type include field field name in property
                        if (otherMetrics.length > 1) {
                            metricName += ' ' + metric.field;
                        }
                        addMetricValue(values, metricName, bucket[metric.id].value);
                        break;
                    }
                }
            }
            table.rows.push(values);
        }
    };
    // This is quite complex
    // need to recurise down the nested buckets to build series
    ElasticResponse.prototype.processBuckets = function (aggs, target, seriesList, table, props, depth) {
        var bucket, aggDef, esAgg, aggId;
        var maxDepth = target.bucketAggs.length - 1;
        for (aggId in aggs) {
            aggDef = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(target.bucketAggs, { id: aggId });
            esAgg = aggs[aggId];
            if (!aggDef) {
                continue;
            }
            if (depth === maxDepth) {
                if (aggDef.type === 'date_histogram') {
                    this.processMetrics(esAgg, target, seriesList, props);
                }
                else {
                    this.processAggregationDocs(esAgg, aggDef, target, table, props);
                }
            }
            else {
                for (var nameIndex in esAgg.buckets) {
                    bucket = esAgg.buckets[nameIndex];
                    props = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(props);
                    if (bucket.key !== void 0) {
                        props[aggDef.field] = bucket.key;
                    }
                    else {
                        props['filter'] = nameIndex;
                    }
                    if (bucket.key_as_string) {
                        props[aggDef.field] = bucket.key_as_string;
                    }
                    this.processBuckets(bucket, target, seriesList, table, props, depth + 1);
                }
            }
        }
    };
    ElasticResponse.prototype.getMetricName = function (metric) {
        var metricDef = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(_query_def__WEBPACK_IMPORTED_MODULE_1__["metricAggTypes"], { value: metric });
        if (!metricDef) {
            metricDef = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(_query_def__WEBPACK_IMPORTED_MODULE_1__["extendedStats"], { value: metric });
        }
        return metricDef ? metricDef.text : metric;
    };
    ElasticResponse.prototype.getSeriesName = function (series, target, metricTypeCount) {
        var metricName = this.getMetricName(series.metric);
        if (target.alias) {
            var regex = /\{\{([\s\S]+?)\}\}/g;
            return target.alias.replace(regex, function (match, g1, g2) {
                var group = g1 || g2;
                if (group.indexOf('term ') === 0) {
                    return series.props[group.substring(5)];
                }
                if (series.props[group] !== void 0) {
                    return series.props[group];
                }
                if (group === 'metric') {
                    return metricName;
                }
                if (group === 'field') {
                    return series.field;
                }
                return match;
            });
        }
        if (series.field && _query_def__WEBPACK_IMPORTED_MODULE_1__["isPipelineAgg"](series.metric)) {
            var appliedAgg = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(target.metrics, { id: series.field });
            if (appliedAgg) {
                metricName += ' ' + _query_def__WEBPACK_IMPORTED_MODULE_1__["describeMetric"](appliedAgg);
            }
            else {
                metricName = 'Unset';
            }
        }
        else if (series.field) {
            metricName += ' ' + series.field;
        }
        var propKeys = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keys(series.props);
        if (propKeys.length === 0) {
            return metricName;
        }
        var name = '';
        for (var propName in series.props) {
            name += series.props[propName] + ' ';
        }
        if (metricTypeCount === 1) {
            return name.trim();
        }
        return name.trim() + ' ' + metricName;
    };
    ElasticResponse.prototype.nameSeries = function (seriesList, target) {
        var metricTypeCount = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(seriesList, 'metric')).length;
        for (var i = 0; i < seriesList.length; i++) {
            var series = seriesList[i];
            series.target = this.getSeriesName(series, target, metricTypeCount);
        }
    };
    ElasticResponse.prototype.processHits = function (hits, seriesList) {
        var series = {
            target: 'docs',
            type: 'docs',
            datapoints: [],
            total: hits.total,
            filterable: true,
        };
        var propName, hit, doc, i;
        for (i = 0; i < hits.hits.length; i++) {
            hit = hits.hits[i];
            doc = {
                _id: hit._id,
                _type: hit._type,
                _index: hit._index,
            };
            if (hit._source) {
                for (propName in hit._source) {
                    doc[propName] = hit._source[propName];
                }
            }
            for (propName in hit.fields) {
                doc[propName] = hit.fields[propName];
            }
            series.datapoints.push(doc);
        }
        seriesList.push(series);
    };
    ElasticResponse.prototype.trimDatapoints = function (aggregations, target) {
        var histogram = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(target.bucketAggs, { type: 'date_histogram' });
        var shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;
        if (shouldDropFirstAndLast) {
            var trim = histogram.settings.trimEdges;
            for (var prop in aggregations) {
                var points = aggregations[prop];
                if (points.datapoints.length > trim * 2) {
                    points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);
                }
            }
        }
    };
    ElasticResponse.prototype.getErrorFromElasticResponse = function (response, err) {
        var result = {};
        result.data = JSON.stringify(err, null, 4);
        if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {
            result.message = err.root_cause[0].reason;
        }
        else {
            result.message = err.reason || 'Unkown elastic error response';
        }
        if (response.$$config) {
            result.config = response.$$config;
        }
        return result;
    };
    ElasticResponse.prototype.getTimeSeries = function () {
        var seriesList = [];
        for (var i = 0; i < this.response.responses.length; i++) {
            var response = this.response.responses[i];
            if (response.error) {
                throw this.getErrorFromElasticResponse(this.response, response.error);
            }
            if (response.hits && response.hits.hits.length > 0) {
                this.processHits(response.hits, seriesList);
            }
            if (response.aggregations) {
                var aggregations = response.aggregations;
                var target = this.targets[i];
                var tmpSeriesList = [];
                var table = new app_core_table_model__WEBPACK_IMPORTED_MODULE_2__["default"]();
                this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);
                this.trimDatapoints(tmpSeriesList, target);
                this.nameSeries(tmpSeriesList, target);
                for (var y = 0; y < tmpSeriesList.length; y++) {
                    seriesList.push(tmpSeriesList[y]);
                }
                if (table.rows.length > 0) {
                    seriesList.push(table);
                }
            }
        }
        return { data: seriesList };
    };
    return ElasticResponse;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/index_pattern.ts":
/*!**********************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/index_pattern.ts ***!
  \**********************************************************************/
/*! exports provided: IndexPattern */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IndexPattern", function() { return IndexPattern; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);

var intervalMap = {
    Hourly: { startOf: 'hour', amount: 'hours' },
    Daily: { startOf: 'day', amount: 'days' },
    Weekly: { startOf: 'isoWeek', amount: 'weeks' },
    Monthly: { startOf: 'month', amount: 'months' },
    Yearly: { startOf: 'year', amount: 'years' },
};
var IndexPattern = /** @class */ (function () {
    function IndexPattern(pattern, interval) {
        this.pattern = pattern;
        this.interval = interval;
    }
    IndexPattern.prototype.getIndexForToday = function () {
        if (this.interval) {
            return moment__WEBPACK_IMPORTED_MODULE_0___default.a.utc().format(this.pattern);
        }
        else {
            return this.pattern;
        }
    };
    IndexPattern.prototype.getIndexList = function (from, to) {
        if (!this.interval) {
            return this.pattern;
        }
        var intervalInfo = intervalMap[this.interval];
        var start = moment__WEBPACK_IMPORTED_MODULE_0___default()(from)
            .utc()
            .startOf(intervalInfo.startOf);
        var endEpoch = moment__WEBPACK_IMPORTED_MODULE_0___default()(to)
            .utc()
            .startOf(intervalInfo.startOf)
            .valueOf();
        var indexList = [];
        while (start.valueOf() <= endEpoch) {
            indexList.push(start.format(this.pattern));
            start.add(1, intervalInfo.amount);
        }
        return indexList;
    };
    return IndexPattern;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/metric_agg.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/metric_agg.ts ***!
  \*******************************************************************/
/*! exports provided: elasticMetricAgg, ElasticMetricAggCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elasticMetricAgg", function() { return elasticMetricAgg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticMetricAggCtrl", function() { return ElasticMetricAggCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _query_def__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_def */ "./public/app/plugins/datasource/elasticsearch/query_def.ts");



function elasticMetricAgg() {
    return {
        templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',
        controller: 'ElasticMetricAggCtrl',
        restrict: 'E',
        scope: {
            target: '=',
            index: '=',
            onChange: '&',
            getFields: '&',
            esVersion: '=',
        },
    };
}
var ElasticMetricAggCtrl = /** @class */ (function () {
    function ElasticMetricAggCtrl($scope, uiSegmentSrv, $q, $rootScope) {
        var metricAggs = $scope.target.metrics;
        $scope.metricAggTypes = _query_def__WEBPACK_IMPORTED_MODULE_2__["getMetricAggTypes"]($scope.esVersion);
        $scope.extendedStats = _query_def__WEBPACK_IMPORTED_MODULE_2__["extendedStats"];
        $scope.pipelineAggOptions = [];
        $scope.modelSettingsValues = {};
        $scope.init = function () {
            $scope.agg = metricAggs[$scope.index];
            $scope.validateModel();
            $scope.updatePipelineAggOptions();
        };
        $scope.updatePipelineAggOptions = function () {
            $scope.pipelineAggOptions = _query_def__WEBPACK_IMPORTED_MODULE_2__["getPipelineAggOptions"]($scope.target);
        };
        $rootScope.onAppEvent('elastic-query-updated', function () {
            $scope.index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(metricAggs, $scope.agg);
            $scope.updatePipelineAggOptions();
            $scope.validateModel();
        }, $scope);
        $scope.validateModel = function () {
            $scope.isFirst = $scope.index === 0;
            $scope.isSingle = metricAggs.length === 1;
            $scope.settingsLinkText = '';
            $scope.aggDef = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find($scope.metricAggTypes, { value: $scope.agg.type });
            if (_query_def__WEBPACK_IMPORTED_MODULE_2__["isPipelineAgg"]($scope.agg.type)) {
                $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';
                $scope.agg.field = $scope.agg.pipelineAgg;
                var pipelineOptions = _query_def__WEBPACK_IMPORTED_MODULE_2__["getPipelineOptions"]($scope.agg);
                if (pipelineOptions.length > 0) {
                    lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(pipelineOptions, function (opt) {
                        $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;
                    });
                    $scope.settingsLinkText = 'Options';
                }
            }
            else if (!$scope.agg.field) {
                $scope.agg.field = 'select field';
            }
            switch ($scope.agg.type) {
                case 'cardinality': {
                    var precisionThreshold = $scope.agg.settings.precision_threshold || '';
                    $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;
                    break;
                }
                case 'percentiles': {
                    $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];
                    $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');
                    break;
                }
                case 'extended_stats': {
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.keys($scope.agg.meta).length === 0) {
                        $scope.agg.meta.std_deviation_bounds_lower = true;
                        $scope.agg.meta.std_deviation_bounds_upper = true;
                    }
                    var stats = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce($scope.agg.meta, function (memo, val, key) {
                        if (val) {
                            var def = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find($scope.extendedStats, { value: key });
                            memo.push(def.text);
                        }
                        return memo;
                    }, []);
                    $scope.settingsLinkText = 'Stats: ' + stats.join(', ');
                    break;
                }
                case 'moving_avg': {
                    $scope.movingAvgModelTypes = _query_def__WEBPACK_IMPORTED_MODULE_2__["movingAvgModelOptions"];
                    $scope.modelSettings = _query_def__WEBPACK_IMPORTED_MODULE_2__["getMovingAvgSettings"]($scope.agg.settings.model, true);
                    $scope.updateMovingAvgModelSettings();
                    break;
                }
                case 'raw_document': {
                    $scope.agg.settings.size = $scope.agg.settings.size || 500;
                    $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;
                    $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);
                    $scope.target.bucketAggs = [];
                    break;
                }
            }
            if ($scope.aggDef.supportsInlineScript) {
                // I know this stores the inline script twice
                // but having it like this simplifes the query_builder
                var inlineScript = $scope.agg.inlineScript;
                if (inlineScript) {
                    $scope.agg.settings.script = { inline: inlineScript };
                }
                else {
                    delete $scope.agg.settings.script;
                }
                if ($scope.settingsLinkText === '') {
                    $scope.settingsLinkText = 'Options';
                }
            }
        };
        $scope.toggleOptions = function () {
            $scope.showOptions = !$scope.showOptions;
            $scope.updatePipelineAggOptions();
        };
        $scope.onChangeInternal = function () {
            $scope.onChange();
        };
        $scope.updateMovingAvgModelSettings = function () {
            var modelSettingsKeys = [];
            var modelSettings = _query_def__WEBPACK_IMPORTED_MODULE_2__["getMovingAvgSettings"]($scope.agg.settings.model, false);
            for (var i = 0; i < modelSettings.length; i++) {
                modelSettingsKeys.push(modelSettings[i].value);
            }
            for (var key in $scope.agg.settings.settings) {
                if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {
                    delete $scope.agg.settings.settings[key];
                }
            }
        };
        $scope.onChangeClearInternal = function () {
            delete $scope.agg.settings.minimize;
            $scope.onChange();
        };
        $scope.onTypeChange = function () {
            $scope.agg.settings = {};
            $scope.agg.meta = {};
            $scope.showOptions = false;
            $scope.updatePipelineAggOptions();
            $scope.onChange();
        };
        $scope.getFieldsInternal = function () {
            if ($scope.agg.type === 'cardinality') {
                return $scope.getFields();
            }
            return $scope.getFields({ $fieldType: 'number' });
        };
        $scope.addMetricAgg = function () {
            var addIndex = metricAggs.length;
            var id = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.reduce($scope.target.bucketAggs.concat($scope.target.metrics), function (max, val) {
                return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;
            }, 0);
            metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });
            $scope.onChange();
        };
        $scope.removeMetricAgg = function () {
            metricAggs.splice($scope.index, 1);
            $scope.onChange();
        };
        $scope.toggleShowMetric = function () {
            $scope.agg.hide = !$scope.agg.hide;
            if (!$scope.agg.hide) {
                delete $scope.agg.hide;
            }
            $scope.onChange();
        };
        $scope.init();
    }
    return ElasticMetricAggCtrl;
}());

var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
module.directive('elasticMetricAgg', elasticMetricAgg);
module.controller('ElasticMetricAggCtrl', ElasticMetricAggCtrl);


/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/module.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/module.ts ***!
  \***************************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return ElasticAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/elasticsearch/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["ElasticDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/elasticsearch/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["ElasticQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/elasticsearch/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["ElasticConfigCtrl"]; });




var ElasticAnnotationsQueryCtrl = /** @class */ (function () {
    function ElasticAnnotationsQueryCtrl() {
    }
    ElasticAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return ElasticAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/query_builder.ts":
/*!**********************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/query_builder.ts ***!
  \**********************************************************************/
/*! exports provided: ElasticQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticQueryBuilder", function() { return ElasticQueryBuilder; });
/* harmony import */ var _query_def__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query_def */ "./public/app/plugins/datasource/elasticsearch/query_def.ts");

var ElasticQueryBuilder = /** @class */ (function () {
    function ElasticQueryBuilder(options) {
        this.timeField = options.timeField;
        this.esVersion = options.esVersion;
    }
    ElasticQueryBuilder.prototype.getRangeFilter = function () {
        var filter = {};
        filter[this.timeField] = {
            gte: '$timeFrom',
            lte: '$timeTo',
            format: 'epoch_millis',
        };
        return filter;
    };
    ElasticQueryBuilder.prototype.buildTermsAgg = function (aggDef, queryNode, target) {
        var metricRef, metric, y;
        queryNode.terms = { field: aggDef.field };
        if (!aggDef.settings) {
            return queryNode;
        }
        queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);
        if (aggDef.settings.orderBy !== void 0) {
            queryNode.terms.order = {};
            queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;
            // if metric ref, look it up and add it to this agg level
            metricRef = parseInt(aggDef.settings.orderBy, 10);
            if (!isNaN(metricRef)) {
                for (y = 0; y < target.metrics.length; y++) {
                    metric = target.metrics[y];
                    if (metric.id === aggDef.settings.orderBy) {
                        queryNode.aggs = {};
                        queryNode.aggs[metric.id] = {};
                        queryNode.aggs[metric.id][metric.type] = { field: metric.field };
                        break;
                    }
                }
            }
        }
        if (aggDef.settings.min_doc_count !== void 0) {
            queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);
        }
        if (aggDef.settings.missing) {
            queryNode.terms.missing = aggDef.settings.missing;
        }
        return queryNode;
    };
    ElasticQueryBuilder.prototype.getDateHistogramAgg = function (aggDef) {
        var esAgg = {};
        var settings = aggDef.settings || {};
        esAgg.interval = settings.interval;
        esAgg.field = this.timeField;
        esAgg.min_doc_count = settings.min_doc_count || 0;
        esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };
        esAgg.format = 'epoch_millis';
        if (esAgg.interval === 'auto') {
            esAgg.interval = '$__interval';
        }
        if (settings.missing) {
            esAgg.missing = settings.missing;
        }
        return esAgg;
    };
    ElasticQueryBuilder.prototype.getHistogramAgg = function (aggDef) {
        var esAgg = {};
        var settings = aggDef.settings || {};
        esAgg.interval = settings.interval;
        esAgg.field = aggDef.field;
        esAgg.min_doc_count = settings.min_doc_count || 0;
        if (settings.missing) {
            esAgg.missing = settings.missing;
        }
        return esAgg;
    };
    ElasticQueryBuilder.prototype.getFiltersAgg = function (aggDef) {
        var filterObj = {};
        for (var i = 0; i < aggDef.settings.filters.length; i++) {
            var query = aggDef.settings.filters[i].query;
            var label = aggDef.settings.filters[i].label;
            label = label === '' || label === undefined ? query : label;
            filterObj[label] = {
                query_string: {
                    query: query,
                    analyze_wildcard: true,
                },
            };
        }
        return filterObj;
    };
    ElasticQueryBuilder.prototype.documentQuery = function (query, size) {
        query.size = size;
        query.sort = {};
        query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };
        // fields field not supported on ES 5.x
        if (this.esVersion < 5) {
            query.fields = ['*', '_source'];
        }
        query.script_fields = {};
        if (this.esVersion < 5) {
            query.fielddata_fields = [this.timeField];
        }
        else {
            query.docvalue_fields = [this.timeField];
        }
        return query;
    };
    ElasticQueryBuilder.prototype.addAdhocFilters = function (query, adhocFilters) {
        if (!adhocFilters) {
            return;
        }
        var i, filter, condition, queryCondition;
        for (i = 0; i < adhocFilters.length; i++) {
            filter = adhocFilters[i];
            condition = {};
            condition[filter.key] = filter.value;
            queryCondition = {};
            queryCondition[filter.key] = { query: filter.value };
            switch (filter.operator) {
                case '=':
                    if (!query.query.bool.must) {
                        query.query.bool.must = [];
                    }
                    query.query.bool.must.push({ match_phrase: queryCondition });
                    break;
                case '!=':
                    if (!query.query.bool.must_not) {
                        query.query.bool.must_not = [];
                    }
                    query.query.bool.must_not.push({ match_phrase: queryCondition });
                    break;
                case '<':
                    condition[filter.key] = { lt: filter.value };
                    query.query.bool.filter.push({ range: condition });
                    break;
                case '>':
                    condition[filter.key] = { gt: filter.value };
                    query.query.bool.filter.push({ range: condition });
                    break;
                case '=~':
                    query.query.bool.filter.push({ regexp: condition });
                    break;
                case '!~':
                    query.query.bool.filter.push({
                        bool: { must_not: { regexp: condition } },
                    });
                    break;
            }
        }
    };
    ElasticQueryBuilder.prototype.build = function (target, adhocFilters, queryString) {
        // make sure query has defaults;
        target.metrics = target.metrics || [{ type: 'count', id: '1' }];
        target.bucketAggs = target.bucketAggs || [{ type: 'date_histogram', id: '2', settings: { interval: 'auto' } }];
        target.timeField = this.timeField;
        var i, nestedAggs, metric;
        var query = {
            size: 0,
            query: {
                bool: {
                    filter: [
                        { range: this.getRangeFilter() },
                        {
                            query_string: {
                                analyze_wildcard: true,
                                query: queryString,
                            },
                        },
                    ],
                },
            },
        };
        this.addAdhocFilters(query, adhocFilters);
        // handle document query
        if (target.bucketAggs.length === 0) {
            metric = target.metrics[0];
            if (!metric || metric.type !== 'raw_document') {
                throw { message: 'Invalid query' };
            }
            var size = (metric.settings && metric.settings.size) || 500;
            return this.documentQuery(query, size);
        }
        nestedAggs = query;
        for (i = 0; i < target.bucketAggs.length; i++) {
            var aggDef = target.bucketAggs[i];
            var esAgg = {};
            switch (aggDef.type) {
                case 'date_histogram': {
                    esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);
                    break;
                }
                case 'histogram': {
                    esAgg['histogram'] = this.getHistogramAgg(aggDef);
                    break;
                }
                case 'filters': {
                    esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };
                    break;
                }
                case 'terms': {
                    this.buildTermsAgg(aggDef, esAgg, target);
                    break;
                }
                case 'geohash_grid': {
                    esAgg['geohash_grid'] = {
                        field: aggDef.field,
                        precision: aggDef.settings.precision,
                    };
                    break;
                }
            }
            nestedAggs.aggs = nestedAggs.aggs || {};
            nestedAggs.aggs[aggDef.id] = esAgg;
            nestedAggs = esAgg;
        }
        nestedAggs.aggs = {};
        for (i = 0; i < target.metrics.length; i++) {
            metric = target.metrics[i];
            if (metric.type === 'count') {
                continue;
            }
            var aggField = {};
            var metricAgg = null;
            if (_query_def__WEBPACK_IMPORTED_MODULE_0__["isPipelineAgg"](metric.type)) {
                if (metric.pipelineAgg && /^\d*$/.test(metric.pipelineAgg)) {
                    metricAgg = { buckets_path: metric.pipelineAgg };
                }
                else {
                    continue;
                }
            }
            else {
                metricAgg = { field: metric.field };
            }
            for (var prop in metric.settings) {
                if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {
                    metricAgg[prop] = metric.settings[prop];
                }
            }
            aggField[metric.type] = metricAgg;
            nestedAggs.aggs[metric.id] = aggField;
        }
        return query;
    };
    ElasticQueryBuilder.prototype.getTermsQuery = function (queryDef) {
        var query = {
            size: 0,
            query: {
                bool: {
                    filter: [{ range: this.getRangeFilter() }],
                },
            },
        };
        if (queryDef.query) {
            query.query.bool.filter.push({
                query_string: {
                    analyze_wildcard: true,
                    query: queryDef.query,
                },
            });
        }
        var size = 500;
        if (queryDef.size) {
            size = queryDef.size;
        }
        query.aggs = {
            '1': {
                terms: {
                    field: queryDef.field,
                    size: size,
                    order: {
                        _term: 'asc',
                    },
                },
            },
        };
        return query;
    };
    return ElasticQueryBuilder;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/query_ctrl.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/query_ctrl.ts ***!
  \*******************************************************************/
/*! exports provided: ElasticQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElasticQueryCtrl", function() { return ElasticQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _bucket_agg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bucket_agg */ "./public/app/plugins/datasource/elasticsearch/bucket_agg.ts");
/* harmony import */ var _metric_agg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metric_agg */ "./public/app/plugins/datasource/elasticsearch/metric_agg.ts");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _query_def__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_def */ "./public/app/plugins/datasource/elasticsearch/query_def.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");







var ElasticQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ElasticQueryCtrl, _super);
    /** @ngInject */
    function ElasticQueryCtrl($scope, $injector, $rootScope, uiSegmentSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.$rootScope = $rootScope;
        _this.uiSegmentSrv = uiSegmentSrv;
        _this.esVersion = _this.datasource.esVersion;
        _this.queryUpdated();
        return _this;
    }
    ElasticQueryCtrl.prototype.getFields = function (type) {
        var jsonStr = angular__WEBPACK_IMPORTED_MODULE_3___default.a.toJson({ find: 'fields', type: type });
        return this.datasource
            .metricFindQuery(jsonStr)
            .then(this.uiSegmentSrv.transformToSegments(false))
            .catch(this.handleQueryError.bind(this));
    };
    ElasticQueryCtrl.prototype.queryUpdated = function () {
        var newJson = angular__WEBPACK_IMPORTED_MODULE_3___default.a.toJson(this.datasource.queryBuilder.build(this.target), true);
        if (this.rawQueryOld && newJson !== this.rawQueryOld) {
            this.refresh();
        }
        this.rawQueryOld = newJson;
        this.$rootScope.appEvent('elastic-query-updated');
    };
    ElasticQueryCtrl.prototype.getCollapsedText = function () {
        var metricAggs = this.target.metrics;
        var bucketAggs = this.target.bucketAggs;
        var metricAggTypes = _query_def__WEBPACK_IMPORTED_MODULE_5__["getMetricAggTypes"](this.esVersion);
        var bucketAggTypes = _query_def__WEBPACK_IMPORTED_MODULE_5__["bucketAggTypes"];
        var text = '';
        if (this.target.query) {
            text += 'Query: ' + this.target.query + ', ';
        }
        text += 'Metrics: ';
        lodash__WEBPACK_IMPORTED_MODULE_4___default.a.each(metricAggs, function (metric, index) {
            var aggDef = lodash__WEBPACK_IMPORTED_MODULE_4___default.a.find(metricAggTypes, { value: metric.type });
            text += aggDef.text + '(';
            if (aggDef.requiresField) {
                text += metric.field;
            }
            text += '), ';
        });
        lodash__WEBPACK_IMPORTED_MODULE_4___default.a.each(bucketAggs, function (bucketAgg, index) {
            if (index === 0) {
                text += ' Group by: ';
            }
            var aggDef = lodash__WEBPACK_IMPORTED_MODULE_4___default.a.find(bucketAggTypes, { value: bucketAgg.type });
            text += aggDef.text + '(';
            if (aggDef.requiresField) {
                text += bucketAgg.field;
            }
            text += '), ';
        });
        if (this.target.alias) {
            text += 'Alias: ' + this.target.alias;
        }
        return text;
    };
    ElasticQueryCtrl.prototype.handleQueryError = function (err) {
        this.error = err.message || 'Failed to issue metric query';
        return [];
    };
    ElasticQueryCtrl.templateUrl = 'partials/query.editor.html';
    return ElasticQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_6__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/elasticsearch/query_def.ts":
/*!******************************************************************!*\
  !*** ./public/app/plugins/datasource/elasticsearch/query_def.ts ***!
  \******************************************************************/
/*! exports provided: metricAggTypes, bucketAggTypes, orderByOptions, orderOptions, sizeOptions, extendedStats, intervalOptions, movingAvgModelOptions, pipelineOptions, movingAvgModelSettings, getMetricAggTypes, getPipelineOptions, isPipelineAgg, getPipelineAggOptions, getMovingAvgSettings, getOrderByOptions, describeOrder, describeMetric, describeOrderBy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "metricAggTypes", function() { return metricAggTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bucketAggTypes", function() { return bucketAggTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orderByOptions", function() { return orderByOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orderOptions", function() { return orderOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sizeOptions", function() { return sizeOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendedStats", function() { return extendedStats; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intervalOptions", function() { return intervalOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "movingAvgModelOptions", function() { return movingAvgModelOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipelineOptions", function() { return pipelineOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "movingAvgModelSettings", function() { return movingAvgModelSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMetricAggTypes", function() { return getMetricAggTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPipelineOptions", function() { return getPipelineOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPipelineAgg", function() { return isPipelineAgg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPipelineAggOptions", function() { return getPipelineAggOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMovingAvgSettings", function() { return getMovingAvgSettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrderByOptions", function() { return getOrderByOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeOrder", function() { return describeOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeMetric", function() { return describeMetric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "describeOrderBy", function() { return describeOrderBy; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var metricAggTypes = [
    { text: 'Count', value: 'count', requiresField: false },
    {
        text: 'Average',
        value: 'avg',
        requiresField: true,
        supportsInlineScript: true,
        supportsMissing: true,
    },
    {
        text: 'Sum',
        value: 'sum',
        requiresField: true,
        supportsInlineScript: true,
        supportsMissing: true,
    },
    {
        text: 'Max',
        value: 'max',
        requiresField: true,
        supportsInlineScript: true,
        supportsMissing: true,
    },
    {
        text: 'Min',
        value: 'min',
        requiresField: true,
        supportsInlineScript: true,
        supportsMissing: true,
    },
    {
        text: 'Extended Stats',
        value: 'extended_stats',
        requiresField: true,
        supportsMissing: true,
        supportsInlineScript: true,
    },
    {
        text: 'Percentiles',
        value: 'percentiles',
        requiresField: true,
        supportsMissing: true,
        supportsInlineScript: true,
    },
    {
        text: 'Unique Count',
        value: 'cardinality',
        requiresField: true,
        supportsMissing: true,
    },
    {
        text: 'Moving Average',
        value: 'moving_avg',
        requiresField: false,
        isPipelineAgg: true,
        minVersion: 2,
    },
    {
        text: 'Derivative',
        value: 'derivative',
        requiresField: false,
        isPipelineAgg: true,
        minVersion: 2,
    },
    { text: 'Raw Document', value: 'raw_document', requiresField: false },
];
var bucketAggTypes = [
    { text: 'Terms', value: 'terms', requiresField: true },
    { text: 'Filters', value: 'filters' },
    { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },
    { text: 'Date Histogram', value: 'date_histogram', requiresField: true },
    { text: 'Histogram', value: 'histogram', requiresField: true },
];
var orderByOptions = [{ text: 'Doc Count', value: '_count' }, { text: 'Term value', value: '_term' }];
var orderOptions = [{ text: 'Top', value: 'desc' }, { text: 'Bottom', value: 'asc' }];
var sizeOptions = [
    { text: 'No limit', value: '0' },
    { text: '1', value: '1' },
    { text: '2', value: '2' },
    { text: '3', value: '3' },
    { text: '5', value: '5' },
    { text: '10', value: '10' },
    { text: '15', value: '15' },
    { text: '20', value: '20' },
];
var extendedStats = [
    { text: 'Avg', value: 'avg' },
    { text: 'Min', value: 'min' },
    { text: 'Max', value: 'max' },
    { text: 'Sum', value: 'sum' },
    { text: 'Count', value: 'count' },
    { text: 'Std Dev', value: 'std_deviation' },
    { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },
    { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },
];
var intervalOptions = [
    { text: 'auto', value: 'auto' },
    { text: '10s', value: '10s' },
    { text: '1m', value: '1m' },
    { text: '5m', value: '5m' },
    { text: '10m', value: '10m' },
    { text: '20m', value: '20m' },
    { text: '1h', value: '1h' },
    { text: '1d', value: '1d' },
];
var movingAvgModelOptions = [
    { text: 'Simple', value: 'simple' },
    { text: 'Linear', value: 'linear' },
    { text: 'Exponentially Weighted', value: 'ewma' },
    { text: 'Holt Linear', value: 'holt' },
    { text: 'Holt Winters', value: 'holt_winters' },
];
var pipelineOptions = {
    moving_avg: [
        { text: 'window', default: 5 },
        { text: 'model', default: 'simple' },
        { text: 'predict', default: undefined },
        { text: 'minimize', default: false },
    ],
    derivative: [{ text: 'unit', default: undefined }],
};
var movingAvgModelSettings = {
    simple: [],
    linear: [],
    ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],
    holt: [{ text: 'Alpha', value: 'alpha', default: undefined }, { text: 'Beta', value: 'beta', default: undefined }],
    holt_winters: [
        { text: 'Alpha', value: 'alpha', default: undefined },
        { text: 'Beta', value: 'beta', default: undefined },
        { text: 'Gamma', value: 'gamma', default: undefined },
        { text: 'Period', value: 'period', default: undefined },
        { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },
    ],
};
function getMetricAggTypes(esVersion) {
    return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(metricAggTypes, function (f) {
        if (f.minVersion) {
            return f.minVersion <= esVersion;
        }
        else {
            return true;
        }
    });
}
function getPipelineOptions(metric) {
    if (!isPipelineAgg(metric.type)) {
        return [];
    }
    return pipelineOptions[metric.type];
}
function isPipelineAgg(metricType) {
    if (metricType) {
        var po = pipelineOptions[metricType];
        return po !== null && po !== undefined;
    }
    return false;
}
function getPipelineAggOptions(targets) {
    var result = [];
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(targets.metrics, function (metric) {
        if (!isPipelineAgg(metric.type)) {
            result.push({ text: describeMetric(metric), value: metric.id });
        }
    });
    return result;
}
function getMovingAvgSettings(model, filtered) {
    var filteredResult = [];
    if (filtered) {
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(movingAvgModelSettings[model], function (setting) {
            if (!setting.isCheckbox) {
                filteredResult.push(setting);
            }
        });
        return filteredResult;
    }
    return movingAvgModelSettings[model];
}
function getOrderByOptions(target) {
    var metricRefs = [];
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(target.metrics, function (metric) {
        if (metric.type !== 'count') {
            metricRefs.push({ text: describeMetric(metric), value: metric.id });
        }
    });
    return orderByOptions.concat(metricRefs);
}
function describeOrder(order) {
    var def = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(orderOptions, { value: order });
    return def.text;
}
function describeMetric(metric) {
    var def = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(metricAggTypes, { value: metric.type });
    return def.text + ' ' + metric.field;
}
function describeOrderBy(orderBy, target) {
    var def = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(orderByOptions, { value: orderBy });
    if (def) {
        return def.text;
    }
    var metric = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(target.metrics, { id: orderBy });
    if (metric) {
        return describeMetric(metric);
    }
    else {
        return 'metric not found';
    }
}


/***/ }),

/***/ "./public/app/plugins/datasource/grafana/datasource.ts":
/*!*************************************************************!*\
  !*** ./public/app/plugins/datasource/grafana/datasource.ts ***!
  \*************************************************************/
/*! exports provided: GrafanaDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrafanaDatasource", function() { return GrafanaDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var GrafanaDatasource = /** @class */ (function () {
    /** @ngInject */
    function GrafanaDatasource(backendSrv, $q, templateSrv) {
        this.backendSrv = backendSrv;
        this.$q = $q;
        this.templateSrv = templateSrv;
    }
    GrafanaDatasource.prototype.query = function (options) {
        return this.backendSrv
            .get('/api/tsdb/testdata/random-walk', {
            from: options.range.from.valueOf(),
            to: options.range.to.valueOf(),
            intervalMs: options.intervalMs,
            maxDataPoints: options.maxDataPoints,
        })
            .then(function (res) {
            var data = [];
            if (res.results) {
                lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(res.results, function (queryRes) {
                    for (var _i = 0, _a = queryRes.series; _i < _a.length; _i++) {
                        var series = _a[_i];
                        data.push({
                            target: series.name,
                            datapoints: series.points,
                        });
                    }
                });
            }
            return { data: data };
        });
    };
    GrafanaDatasource.prototype.metricFindQuery = function (options) {
        return this.$q.when({ data: [] });
    };
    GrafanaDatasource.prototype.annotationQuery = function (options) {
        var params = {
            from: options.range.from.valueOf(),
            to: options.range.to.valueOf(),
            limit: options.annotation.limit,
            tags: options.annotation.tags,
            matchAny: options.annotation.matchAny,
        };
        if (options.annotation.type === 'dashboard') {
            // if no dashboard id yet return
            if (!options.dashboard.id) {
                return this.$q.when([]);
            }
            // filter by dashboard id
            params.dashboardId = options.dashboard.id;
            // remove tags filter if any
            delete params.tags;
        }
        else {
            // require at least one tag
            if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {
                return this.$q.when([]);
            }
            var tags = [];
            for (var _i = 0, _a = params.tags; _i < _a.length; _i++) {
                var t = _a[_i];
                var renderedValues = this.templateSrv.replace(t, {}, 'pipe');
                for (var _b = 0, _c = renderedValues.split('|'); _b < _c.length; _b++) {
                    var tt = _c[_b];
                    tags.push(tt);
                }
            }
            params.tags = tags;
        }
        return this.backendSrv.get('/api/annotations', params);
    };
    return GrafanaDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/grafana/module.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/datasource/grafana/module.ts ***!
  \*********************************************************/
/*! exports provided: GrafanaDatasource, Datasource, QueryCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return GrafanaQueryCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return GrafanaAnnotationsQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/grafana/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrafanaDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_1__["GrafanaDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_1__["GrafanaDatasource"]; });

/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");



var GrafanaQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GrafanaQueryCtrl, _super);
    function GrafanaQueryCtrl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GrafanaQueryCtrl.templateUrl = 'partials/query.editor.html';
    return GrafanaQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));
var GrafanaAnnotationsQueryCtrl = /** @class */ (function () {
    function GrafanaAnnotationsQueryCtrl() {
        this.types = [{ text: 'Dashboard', value: 'dashboard' }, { text: 'Tags', value: 'tags' }];
        this.annotation.type = this.annotation.type || 'tags';
        this.annotation.limit = this.annotation.limit || 100;
    }
    GrafanaAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return GrafanaAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/graphite/add_graphite_func.ts":
/*!*********************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/add_graphite_func.ts ***!
  \*********************************************************************/
/*! exports provided: graphiteAddFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "graphiteAddFunc", function() { return graphiteAddFunc; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rst2html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rst2html */ "./node_modules/rst2html/dist/rst2html.min.js");
/* harmony import */ var rst2html__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rst2html__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tether-drop */ "./node_modules/tether-drop/dist/js/drop.js");
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tether_drop__WEBPACK_IMPORTED_MODULE_4__);





/** @ngInject */
function graphiteAddFunc($compile) {
    var inputTemplate = '<input type="text"' + ' class="gf-form-input"' + ' spellcheck="false" style="display:none"></input>';
    var buttonTemplate = '<a class="gf-form-label query-part dropdown-toggle"' +
        ' tabindex="1" gf-dropdown="functionMenu" data-toggle="dropdown">' +
        '<i class="fa fa-plus"></i></a>';
    return {
        link: function ($scope, elem) {
            var _this = this;
            var ctrl = $scope.ctrl;
            var $input = jquery__WEBPACK_IMPORTED_MODULE_2___default()(inputTemplate);
            var $button = jquery__WEBPACK_IMPORTED_MODULE_2___default()(buttonTemplate);
            $input.appendTo(elem);
            $button.appendTo(elem);
            ctrl.datasource.getFuncDefs().then(function (funcDefs) {
                var allFunctions = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(funcDefs, 'name').sort();
                $scope.functionMenu = createFunctionDropDownMenu(funcDefs);
                $input.attr('data-provide', 'typeahead');
                $input.typeahead({
                    source: allFunctions,
                    minLength: 1,
                    items: 10,
                    updater: function (value) {
                        var funcDef = ctrl.datasource.getFuncDef(value);
                        if (!funcDef) {
                            // try find close match
                            value = value.toLowerCase();
                            funcDef = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(allFunctions, function (funcName) {
                                return funcName.toLowerCase().indexOf(value) === 0;
                            });
                            if (!funcDef) {
                                return '';
                            }
                        }
                        $scope.$apply(function () {
                            ctrl.addFunction(funcDef);
                        });
                        $input.trigger('blur');
                        return '';
                    },
                });
                $button.click(function () {
                    $button.hide();
                    $input.show();
                    $input.focus();
                });
                $input.keyup(function () {
                    elem.toggleClass('open', $input.val() === '');
                });
                $input.blur(function () {
                    // clicking the function dropdown menu won't
                    // work if you remove class at once
                    setTimeout(function () {
                        $input.val('');
                        $input.hide();
                        $button.show();
                        elem.removeClass('open');
                    }, 200);
                });
                $compile(elem.contents())($scope);
            });
            var drop;
            var cleanUpDrop = function () {
                if (drop) {
                    drop.destroy();
                    drop = null;
                }
            };
            jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem)
                .on('mouseenter', 'ul.dropdown-menu li', function () {
                cleanUpDrop();
                var funcDef;
                try {
                    funcDef = ctrl.datasource.getFuncDef(jquery__WEBPACK_IMPORTED_MODULE_2___default()('a', _this).text());
                }
                catch (e) {
                    // ignore
                }
                if (funcDef && funcDef.description) {
                    var shortDesc = funcDef.description;
                    if (shortDesc.length > 500) {
                        shortDesc = shortDesc.substring(0, 497) + '...';
                    }
                    var contentElement = document.createElement('div');
                    contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html__WEBPACK_IMPORTED_MODULE_3___default()(shortDesc);
                    drop = new tether_drop__WEBPACK_IMPORTED_MODULE_4___default.a({
                        target: _this,
                        content: contentElement,
                        classes: 'drop-popover',
                        openOn: 'always',
                        tetherOptions: {
                            attachment: 'bottom left',
                            targetAttachment: 'bottom right',
                        },
                    });
                }
            })
                .on('mouseout', 'ul.dropdown-menu li', function () {
                cleanUpDrop();
            });
            $scope.$on('$destroy', cleanUpDrop);
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);
function createFunctionDropDownMenu(funcDefs) {
    var categories = {};
    lodash__WEBPACK_IMPORTED_MODULE_1___default.a.forEach(funcDefs, function (funcDef) {
        if (!funcDef.category) {
            return;
        }
        if (!categories[funcDef.category]) {
            categories[funcDef.category] = [];
        }
        categories[funcDef.category].push({
            text: funcDef.name,
            click: "ctrl.addFunction('" + funcDef.name + "')",
        });
    });
    return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(categories, function (submenu, category) {
        return {
            text: category,
            submenu: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(submenu, 'text'),
        };
    }), 'text');
}


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/config_ctrl.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/config_ctrl.ts ***!
  \***************************************************************/
/*! exports provided: GraphiteConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphiteConfigCtrl", function() { return GraphiteConfigCtrl; });
var GraphiteConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function GraphiteConfigCtrl($scope, datasourceSrv) {
        this.graphiteVersions = [
            { name: '0.9.x', value: '0.9' },
            { name: '1.0.x', value: '1.0' },
            { name: '1.1.x', value: '1.1' },
        ];
        this.datasourceSrv = datasourceSrv;
        this.current.jsonData = this.current.jsonData || {};
        this.current.jsonData.graphiteVersion = this.current.jsonData.graphiteVersion || '0.9';
        this.autoDetectGraphiteVersion();
    }
    GraphiteConfigCtrl.prototype.autoDetectGraphiteVersion = function () {
        var _this = this;
        if (!this.current.id) {
            return;
        }
        this.datasourceSrv
            .loadDatasource(this.current.name)
            .then(function (ds) {
            return ds.getVersion();
        })
            .then(function (version) {
            _this.graphiteVersions.push({ name: version, value: version });
            _this.current.jsonData.graphiteVersion = version;
        });
    };
    GraphiteConfigCtrl.templateUrl = 'public/app/plugins/datasource/graphite/partials/config.html';
    return GraphiteConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/graphite/datasource.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/datasource.ts ***!
  \**************************************************************/
/*! exports provided: GraphiteDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphiteDatasource", function() { return GraphiteDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var app_core_utils_version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/version */ "./public/app/core/utils/version.ts");
/* harmony import */ var _gfunc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gfunc */ "./public/app/plugins/datasource/graphite/gfunc.ts");




/** @ngInject */
function GraphiteDatasource(instanceSettings, $q, backendSrv, templateSrv) {
    var _this = this;
    this.basicAuth = instanceSettings.basicAuth;
    this.url = instanceSettings.url;
    this.name = instanceSettings.name;
    this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';
    this.supportsTags = supportsTags(this.graphiteVersion);
    this.cacheTimeout = instanceSettings.cacheTimeout;
    this.withCredentials = instanceSettings.withCredentials;
    this.render_method = instanceSettings.render_method || 'POST';
    this.funcDefs = null;
    this.funcDefsPromise = null;
    this.getQueryOptionsInfo = function () {
        return {
            maxDataPoints: true,
            cacheTimeout: true,
            links: [
                {
                    text: 'Help',
                    url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',
                },
            ],
        };
    };
    this.query = function (options) {
        var graphOptions = {
            from: this.translateTime(options.rangeRaw.from, false),
            until: this.translateTime(options.rangeRaw.to, true),
            targets: options.targets,
            format: options.format,
            cacheTimeout: options.cacheTimeout || this.cacheTimeout,
            maxDataPoints: options.maxDataPoints,
        };
        var params = this.buildGraphiteParams(graphOptions, options.scopedVars);
        if (params.length === 0) {
            return $q.when({ data: [] });
        }
        var httpOptions = {
            method: 'POST',
            url: '/render',
            data: params.join('&'),
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        };
        this.addTracingHeaders(httpOptions, options);
        if (options.panelId) {
            httpOptions.requestId = this.name + '.panelId.' + options.panelId;
        }
        return this.doGraphiteRequest(httpOptions).then(this.convertDataPointsToMs);
    };
    this.addTracingHeaders = function (httpOptions, options) {
        var proxyMode = !this.url.match(/^http/);
        if (proxyMode) {
            httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;
            httpOptions.headers['X-Panel-Id'] = options.panelId;
        }
    };
    this.convertDataPointsToMs = function (result) {
        if (!result || !result.data) {
            return [];
        }
        for (var i = 0; i < result.data.length; i++) {
            var series = result.data[i];
            for (var y = 0; y < series.datapoints.length; y++) {
                series.datapoints[y][1] *= 1000;
            }
        }
        return result;
    };
    this.parseTags = function (tagString) {
        var tags = [];
        tags = tagString.split(',');
        if (tags.length === 1) {
            tags = tagString.split(' ');
            if (tags[0] === '') {
                tags = [];
            }
        }
        return tags;
    };
    this.annotationQuery = function (options) {
        var _this = this;
        // Graphite metric as annotation
        if (options.annotation.target) {
            var target = templateSrv.replace(options.annotation.target, {}, 'glob');
            var graphiteQuery = {
                rangeRaw: options.rangeRaw,
                targets: [{ target: target }],
                format: 'json',
                maxDataPoints: 100,
            };
            return this.query(graphiteQuery).then(function (result) {
                var list = [];
                for (var i = 0; i < result.data.length; i++) {
                    var target_1 = result.data[i];
                    for (var y = 0; y < target_1.datapoints.length; y++) {
                        var datapoint = target_1.datapoints[y];
                        if (!datapoint[0]) {
                            continue;
                        }
                        list.push({
                            annotation: options.annotation,
                            time: datapoint[1],
                            title: target_1.target,
                        });
                    }
                }
                return list;
            });
        }
        else {
            // Graphite event as annotation
            var tags = templateSrv.replace(options.annotation.tags);
            return this.events({ range: options.rangeRaw, tags: tags }).then(function (results) {
                var list = [];
                for (var i = 0; i < results.data.length; i++) {
                    var e = results.data[i];
                    var tags_1 = e.tags;
                    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(e.tags)) {
                        tags_1 = _this.parseTags(e.tags);
                    }
                    list.push({
                        annotation: options.annotation,
                        time: e.when * 1000,
                        title: e.what,
                        tags: tags_1,
                        text: e.data,
                    });
                }
                return list;
            });
        }
    };
    this.events = function (options) {
        try {
            var tags = '';
            if (options.tags) {
                tags = '&tags=' + options.tags;
            }
            return this.doGraphiteRequest({
                method: 'GET',
                url: '/events/get_data?from=' +
                    this.translateTime(options.range.from, false) +
                    '&until=' +
                    this.translateTime(options.range.to, true) +
                    tags,
            });
        }
        catch (err) {
            return $q.reject(err);
        }
    };
    this.targetContainsTemplate = function (target) {
        return templateSrv.variableExists(target.target);
    };
    this.translateTime = function (date, roundUp) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(date)) {
            if (date === 'now') {
                return 'now';
            }
            else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {
                date = date.substring(3);
                date = date.replace('m', 'min');
                date = date.replace('M', 'mon');
                return date;
            }
            date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__["parse"](date, roundUp);
        }
        // graphite' s from filter is exclusive
        // here we step back one minute in order
        // to guarantee that we get all the data that
        // exists for the specified range
        if (roundUp) {
            if (date.get('s')) {
                date.add(1, 'm');
            }
        }
        else if (roundUp === false) {
            if (date.get('s')) {
                date.subtract(1, 'm');
            }
        }
        return date.unix();
    };
    this.metricFindQuery = function (query, optionalOptions) {
        var options = optionalOptions || {};
        var interpolatedQuery = templateSrv.replace(query);
        // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables
        var matches = interpolatedQuery.match(/^tag_values\(([^,]+)((, *[^,]+)*)\)$/);
        if (matches) {
            var expressions = [];
            var exprRegex = /, *([^,]+)/g;
            var match = exprRegex.exec(matches[2]);
            while (match !== null) {
                expressions.push(match[1]);
                match = exprRegex.exec(matches[2]);
            }
            options.limit = 10000;
            return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);
        }
        // special handling for tags(<expression>[,<expression>]*), this is used for template variables
        matches = interpolatedQuery.match(/^tags\(([^,]*)((, *[^,]+)*)\)$/);
        if (matches) {
            var expressions = [];
            if (matches[1]) {
                expressions.push(matches[1]);
                var exprRegex = /, *([^,]+)/g;
                var match = exprRegex.exec(matches[2]);
                while (match !== null) {
                    expressions.push(match[1]);
                    match = exprRegex.exec(matches[2]);
                }
            }
            options.limit = 10000;
            return this.getTagsAutoComplete(expressions, undefined, options);
        }
        var httpOptions = {
            method: 'GET',
            url: '/metrics/find',
            params: {
                query: interpolatedQuery,
            },
            // for cancellations
            requestId: options.requestId,
        };
        if (options.range) {
            httpOptions.params.from = this.translateTime(options.range.from, false);
            httpOptions.params.until = this.translateTime(options.range.to, true);
        }
        return this.doGraphiteRequest(httpOptions).then(function (results) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results.data, function (metric) {
                return {
                    text: metric.text,
                    expandable: metric.expandable ? true : false,
                };
            });
        });
    };
    this.getTags = function (optionalOptions) {
        var options = optionalOptions || {};
        var httpOptions = {
            method: 'GET',
            url: '/tags',
            // for cancellations
            requestId: options.requestId,
        };
        if (options.range) {
            httpOptions.params.from = this.translateTime(options.range.from, false);
            httpOptions.params.until = this.translateTime(options.range.to, true);
        }
        return this.doGraphiteRequest(httpOptions).then(function (results) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results.data, function (tag) {
                return {
                    text: tag.tag,
                    id: tag.id,
                };
            });
        });
    };
    this.getTagValues = function (tag, optionalOptions) {
        var options = optionalOptions || {};
        var httpOptions = {
            method: 'GET',
            url: '/tags/' + templateSrv.replace(tag),
            // for cancellations
            requestId: options.requestId,
        };
        if (options.range) {
            httpOptions.params.from = this.translateTime(options.range.from, false);
            httpOptions.params.until = this.translateTime(options.range.to, true);
        }
        return this.doGraphiteRequest(httpOptions).then(function (results) {
            if (results.data && results.data.values) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results.data.values, function (value) {
                    return {
                        text: value.value,
                        id: value.id,
                    };
                });
            }
            else {
                return [];
            }
        });
    };
    this.getTagsAutoComplete = function (expressions, tagPrefix, optionalOptions) {
        var options = optionalOptions || {};
        var httpOptions = {
            method: 'GET',
            url: '/tags/autoComplete/tags',
            params: {
                expr: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(expressions, function (expression) { return templateSrv.replace((expression || '').trim()); }),
            },
            // for cancellations
            requestId: options.requestId,
        };
        if (tagPrefix) {
            httpOptions.params.tagPrefix = tagPrefix;
        }
        if (options.limit) {
            httpOptions.params.limit = options.limit;
        }
        if (options.range) {
            httpOptions.params.from = _this.translateTime(options.range.from, false);
            httpOptions.params.until = _this.translateTime(options.range.to, true);
        }
        return _this.doGraphiteRequest(httpOptions).then(function (results) {
            if (results.data) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results.data, function (tag) {
                    return { text: tag };
                });
            }
            else {
                return [];
            }
        });
    };
    this.getTagValuesAutoComplete = function (expressions, tag, valuePrefix, optionalOptions) {
        var options = optionalOptions || {};
        var httpOptions = {
            method: 'GET',
            url: '/tags/autoComplete/values',
            params: {
                expr: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(expressions, function (expression) { return templateSrv.replace((expression || '').trim()); }),
                tag: templateSrv.replace((tag || '').trim()),
            },
            // for cancellations
            requestId: options.requestId,
        };
        if (valuePrefix) {
            httpOptions.params.valuePrefix = valuePrefix;
        }
        if (options.limit) {
            httpOptions.params.limit = options.limit;
        }
        if (options.range) {
            httpOptions.params.from = _this.translateTime(options.range.from, false);
            httpOptions.params.until = _this.translateTime(options.range.to, true);
        }
        return _this.doGraphiteRequest(httpOptions).then(function (results) {
            if (results.data) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(results.data, function (value) {
                    return { text: value };
                });
            }
            else {
                return [];
            }
        });
    };
    this.getVersion = function (optionalOptions) {
        var options = optionalOptions || {};
        var httpOptions = {
            method: 'GET',
            url: '/version',
            requestId: options.requestId,
        };
        return this.doGraphiteRequest(httpOptions)
            .then(function (results) {
            if (results.data) {
                var semver = new app_core_utils_version__WEBPACK_IMPORTED_MODULE_2__["SemVersion"](results.data);
                return semver.isValid() ? results.data : '';
            }
            return '';
        })
            .catch(function () {
            return '';
        });
    };
    this.createFuncInstance = function (funcDef, options) {
        return _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].createFuncInstance(funcDef, options, this.funcDefs);
    };
    this.getFuncDef = function (name) {
        return _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].getFuncDef(name, this.funcDefs);
    };
    this.waitForFuncDefsLoaded = function () {
        return this.getFuncDefs();
    };
    this.getFuncDefs = function () {
        var _this = this;
        if (this.funcDefsPromise !== null) {
            return this.funcDefsPromise;
        }
        if (!supportsFunctionIndex(this.graphiteVersion)) {
            this.funcDefs = _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].getFuncDefs(this.graphiteVersion);
            this.funcDefsPromise = Promise.resolve(this.funcDefs);
            return this.funcDefsPromise;
        }
        var httpOptions = {
            method: 'GET',
            url: '/functions',
        };
        this.funcDefsPromise = this.doGraphiteRequest(httpOptions)
            .then(function (results) {
            if (results.status !== 200 || typeof results.data !== 'object') {
                _this.funcDefs = _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].getFuncDefs(_this.graphiteVersion);
            }
            else {
                _this.funcDefs = _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].parseFuncDefs(results.data);
            }
            return _this.funcDefs;
        })
            .catch(function (err) {
            console.log('Fetching graphite functions error', err);
            _this.funcDefs = _gfunc__WEBPACK_IMPORTED_MODULE_3__["default"].getFuncDefs(_this.graphiteVersion);
            return _this.funcDefs;
        });
        return this.funcDefsPromise;
    };
    this.testDatasource = function () {
        var query = {
            panelId: 3,
            rangeRaw: { from: 'now-1h', to: 'now' },
            targets: [{ target: 'constantLine(100)' }],
            maxDataPoints: 300,
        };
        return this.query(query).then(function () {
            return { status: 'success', message: 'Data source is working' };
        });
    };
    this.doGraphiteRequest = function (options) {
        if (this.basicAuth || this.withCredentials) {
            options.withCredentials = true;
        }
        if (this.basicAuth) {
            options.headers = options.headers || {};
            options.headers.Authorization = this.basicAuth;
        }
        options.url = this.url + options.url;
        options.inspect = { type: 'graphite' };
        return backendSrv.datasourceRequest(options);
    };
    this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    this.buildGraphiteParams = function (options, scopedVars) {
        var graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];
        var cleanOptions = [], targets = {};
        var target, targetValue, i;
        var regex = /\#([A-Z])/g;
        var intervalFormatFixRegex = /'(\d+)m'/gi;
        var hasTargets = false;
        options['format'] = 'json';
        function fixIntervalFormat(match) {
            return match.replace('m', 'min').replace('M', 'mon');
        }
        for (i = 0; i < options.targets.length; i++) {
            target = options.targets[i];
            if (!target.target) {
                continue;
            }
            if (!target.refId) {
                target.refId = this._seriesRefLetters[i];
            }
            targetValue = templateSrv.replace(target.target, scopedVars);
            targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);
            targets[target.refId] = targetValue;
        }
        function nestedSeriesRegexReplacer(match, g1) {
            return targets[g1] || match;
        }
        for (i = 0; i < options.targets.length; i++) {
            target = options.targets[i];
            if (!target.target) {
                continue;
            }
            targetValue = targets[target.refId];
            targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);
            targets[target.refId] = targetValue;
            if (!target.hide) {
                hasTargets = true;
                cleanOptions.push('target=' + encodeURIComponent(targetValue));
            }
        }
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(options, function (value, key) {
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(graphiteOptions, key) === -1) {
                return;
            }
            if (value) {
                cleanOptions.push(key + '=' + encodeURIComponent(value));
            }
        });
        if (!hasTargets) {
            return [];
        }
        return cleanOptions;
    };
}
function supportsTags(version) {
    return Object(app_core_utils_version__WEBPACK_IMPORTED_MODULE_2__["isVersionGtOrEq"])(version, '1.1');
}
function supportsFunctionIndex(version) {
    return Object(app_core_utils_version__WEBPACK_IMPORTED_MODULE_2__["isVersionGtOrEq"])(version, '1.1');
}


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/func_editor.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/func_editor.ts ***!
  \***************************************************************/
/*! exports provided: graphiteFuncEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "graphiteFuncEditor", function() { return graphiteFuncEditor; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rst2html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rst2html */ "./node_modules/rst2html/dist/rst2html.min.js");
/* harmony import */ var rst2html__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rst2html__WEBPACK_IMPORTED_MODULE_3__);




/** @ngInject */
function graphiteFuncEditor($compile, templateSrv, popoverSrv) {
    var funcSpanTemplate = '<a ng-click="">{{func.def.name}}</a><span>(</span>';
    var paramTemplate = '<input type="text" style="display:none"' + ' class="input-small tight-form-func-param"></input>';
    var funcControlsTemplate = "\n    <div class=\"tight-form-func-controls\">\n      <span class=\"pointer fa fa-arrow-left\"></span>\n      <span class=\"pointer fa fa-question-circle\"></span>\n      <span class=\"pointer fa fa-remove\" ></span>\n      <span class=\"pointer fa fa-arrow-right\"></span>\n    </div>";
    return {
        restrict: 'A',
        link: function postLink($scope, elem) {
            var $funcLink = jquery__WEBPACK_IMPORTED_MODULE_2___default()(funcSpanTemplate);
            var $funcControls = jquery__WEBPACK_IMPORTED_MODULE_2___default()(funcControlsTemplate);
            var ctrl = $scope.ctrl;
            var func = $scope.func;
            var scheduledRelink = false;
            var paramCountAtLink = 0;
            var cancelBlur = null;
            function clickFuncParam(paramIndex) {
                /*jshint validthis:true */
                var $link = jquery__WEBPACK_IMPORTED_MODULE_2___default()(this);
                var $comma = $link.prev('.comma');
                var $input = $link.next();
                $input.val(func.params[paramIndex]);
                $comma.removeClass('query-part__last');
                $link.hide();
                $input.show();
                $input.focus();
                $input.select();
                var typeahead = $input.data('typeahead');
                if (typeahead) {
                    $input.val('');
                    typeahead.lookup();
                }
            }
            function scheduledRelinkIfNeeded() {
                if (paramCountAtLink === func.params.length) {
                    return;
                }
                if (!scheduledRelink) {
                    scheduledRelink = true;
                    setTimeout(function () {
                        relink();
                        scheduledRelink = false;
                    }, 200);
                }
            }
            function paramDef(index) {
                if (index < func.def.params.length) {
                    return func.def.params[index];
                }
                if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.last(func.def.params).multiple) {
                    return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.assign({}, lodash__WEBPACK_IMPORTED_MODULE_1___default.a.last(func.def.params), { optional: true });
                }
                return {};
            }
            function switchToLink(inputElem, paramIndex) {
                /*jshint validthis:true */
                var $input = jquery__WEBPACK_IMPORTED_MODULE_2___default()(inputElem);
                clearTimeout(cancelBlur);
                cancelBlur = null;
                var $link = $input.prev();
                var $comma = $link.prev('.comma');
                var newValue = $input.val();
                // remove optional empty params
                if (newValue !== '' || paramDef(paramIndex).optional) {
                    func.updateParam(newValue, paramIndex);
                    $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');
                }
                scheduledRelinkIfNeeded();
                $scope.$apply(function () {
                    ctrl.targetChanged();
                });
                if ($link.hasClass('query-part__last') && newValue === '') {
                    $comma.addClass('query-part__last');
                }
                else {
                    $link.removeClass('query-part__last');
                }
                $input.hide();
                $link.show();
            }
            // this = input element
            function inputBlur(paramIndex) {
                /*jshint validthis:true */
                var inputElem = this;
                // happens long before the click event on the typeahead options
                // need to have long delay because the blur
                cancelBlur = setTimeout(function () {
                    switchToLink(inputElem, paramIndex);
                }, 200);
            }
            function inputKeyPress(paramIndex, e) {
                /*jshint validthis:true */
                if (e.which === 13) {
                    jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).blur();
                }
            }
            function inputKeyDown() {
                /*jshint validthis:true */
                this.style.width = (3 + this.value.length) * 8 + 'px';
            }
            function addTypeahead($input, paramIndex) {
                $input.attr('data-provide', 'typeahead');
                var options = paramDef(paramIndex).options;
                if (paramDef(paramIndex).type === 'int') {
                    options = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(options, function (val) {
                        return val.toString();
                    });
                }
                $input.typeahead({
                    source: options,
                    minLength: 0,
                    items: 20,
                    updater: function (value) {
                        $input.val(value);
                        switchToLink($input[0], paramIndex);
                        return value;
                    },
                });
                var typeahead = $input.data('typeahead');
                typeahead.lookup = function () {
                    this.query = this.$element.val() || '';
                    return this.process(this.source);
                };
            }
            function toggleFuncControls() {
                var targetDiv = elem.closest('.tight-form');
                if (elem.hasClass('show-function-controls')) {
                    elem.removeClass('show-function-controls');
                    targetDiv.removeClass('has-open-function');
                    $funcControls.hide();
                    return;
                }
                elem.addClass('show-function-controls');
                targetDiv.addClass('has-open-function');
                $funcControls.show();
            }
            function addElementsAndCompile() {
                $funcControls.appendTo(elem);
                $funcLink.appendTo(elem);
                var defParams = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.clone(func.def.params);
                var lastParam = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.last(func.def.params);
                while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {
                    defParams.push(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.assign({}, lastParam, { optional: true }));
                }
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(defParams, function (param, index) {
                    if (param.optional && func.params.length < index) {
                        return false;
                    }
                    var paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);
                    var last = index >= func.params.length - 1 && param.optional && !paramValue;
                    if (last && param.multiple) {
                        paramValue = '+';
                    }
                    if (index > 0) {
                        jquery__WEBPACK_IMPORTED_MODULE_2___default()('<span class="comma' + (last ? ' query-part__last' : '') + '">, </span>').appendTo(elem);
                    }
                    var $paramLink = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<a ng-click="" class="graphite-func-param-link' +
                        (last ? ' query-part__last' : '') +
                        '">' +
                        (paramValue || '&nbsp;') +
                        '</a>');
                    var $input = jquery__WEBPACK_IMPORTED_MODULE_2___default()(paramTemplate);
                    $input.attr('placeholder', param.name);
                    paramCountAtLink++;
                    $paramLink.appendTo(elem);
                    $input.appendTo(elem);
                    $input.blur(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.partial(inputBlur, index));
                    $input.keyup(inputKeyDown);
                    $input.keypress(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.partial(inputKeyPress, index));
                    $paramLink.click(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.partial(clickFuncParam, index));
                    if (param.options) {
                        addTypeahead($input, index);
                    }
                    return true;
                });
                jquery__WEBPACK_IMPORTED_MODULE_2___default()('<span>)</span>').appendTo(elem);
                $compile(elem.contents())($scope);
            }
            function ifJustAddedFocusFirstParam() {
                if ($scope.func.added) {
                    $scope.func.added = false;
                    setTimeout(function () {
                        elem
                            .find('.graphite-func-param-link')
                            .first()
                            .click();
                    }, 10);
                }
            }
            function registerFuncControlsToggle() {
                $funcLink.click(toggleFuncControls);
            }
            function registerFuncControlsActions() {
                $funcControls.click(function (e) {
                    var $target = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.target);
                    if ($target.hasClass('fa-remove')) {
                        toggleFuncControls();
                        $scope.$apply(function () {
                            ctrl.removeFunction($scope.func);
                        });
                        return;
                    }
                    if ($target.hasClass('fa-arrow-left')) {
                        $scope.$apply(function () {
                            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);
                            ctrl.targetChanged();
                        });
                        return;
                    }
                    if ($target.hasClass('fa-arrow-right')) {
                        $scope.$apply(function () {
                            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);
                            ctrl.targetChanged();
                        });
                        return;
                    }
                    if ($target.hasClass('fa-question-circle')) {
                        var funcDef = ctrl.datasource.getFuncDef(func.def.name);
                        if (funcDef && funcDef.description) {
                            popoverSrv.show({
                                element: e.target,
                                position: 'bottom left',
                                classNames: 'drop-popover drop-function-def',
                                template: "\n                  <div style=\"overflow:auto;max-height:30rem;\">\n                    <h4> " + funcDef.name + " </h4>\n                    " + rst2html__WEBPACK_IMPORTED_MODULE_3___default()(funcDef.description) + "\n                  </div>",
                                openOn: 'click',
                            });
                        }
                        else {
                            window.open('http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name, '_blank');
                        }
                        return;
                    }
                });
            }
            function relink() {
                elem.children().remove();
                addElementsAndCompile();
                ifJustAddedFocusFirstParam();
                registerFuncControlsToggle();
                registerFuncControlsActions();
            }
            relink();
        },
    };
}
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/gfunc.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/gfunc.ts ***!
  \*********************************************************/
/*! exports provided: FuncInstance, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FuncInstance", function() { return FuncInstance; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/version */ "./public/app/core/utils/version.ts");


var index = {};
function addFuncDef(funcDef) {
    funcDef.params = funcDef.params || [];
    funcDef.defaultParams = funcDef.defaultParams || [];
    index[funcDef.name] = funcDef;
    if (funcDef.shortName) {
        index[funcDef.shortName] = funcDef;
    }
}
var optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];
addFuncDef({
    name: 'scaleToSeconds',
    category: 'Transform',
    params: [{ name: 'seconds', type: 'int' }],
    defaultParams: [1],
});
addFuncDef({
    name: 'perSecond',
    category: 'Transform',
    params: [{ name: 'max value', type: 'int', optional: true }],
    defaultParams: [],
});
addFuncDef({
    name: 'holtWintersForecast',
    category: 'Calculate',
});
addFuncDef({
    name: 'holtWintersConfidenceBands',
    category: 'Calculate',
    params: [{ name: 'delta', type: 'int' }],
    defaultParams: [3],
});
addFuncDef({
    name: 'holtWintersAberration',
    category: 'Calculate',
    params: [{ name: 'delta', type: 'int' }],
    defaultParams: [3],
});
addFuncDef({
    name: 'nPercentile',
    category: 'Calculate',
    params: [{ name: 'Nth percentile', type: 'int' }],
    defaultParams: [95],
});
addFuncDef({
    name: 'diffSeries',
    params: optionalSeriesRefArgs,
    defaultParams: ['#A'],
    category: 'Combine',
});
addFuncDef({
    name: 'stddevSeries',
    params: optionalSeriesRefArgs,
    defaultParams: [''],
    category: 'Combine',
});
addFuncDef({
    name: 'divideSeries',
    params: optionalSeriesRefArgs,
    defaultParams: ['#A'],
    category: 'Combine',
});
addFuncDef({
    name: 'multiplySeries',
    params: optionalSeriesRefArgs,
    defaultParams: ['#A'],
    category: 'Combine',
});
addFuncDef({
    name: 'asPercent',
    params: optionalSeriesRefArgs,
    defaultParams: ['#A'],
    category: 'Combine',
});
addFuncDef({
    name: 'group',
    params: optionalSeriesRefArgs,
    defaultParams: ['#A', '#B'],
    category: 'Combine',
});
addFuncDef({
    name: 'sumSeries',
    shortName: 'sum',
    category: 'Combine',
    params: optionalSeriesRefArgs,
    defaultParams: [''],
});
addFuncDef({
    name: 'averageSeries',
    shortName: 'avg',
    category: 'Combine',
    params: optionalSeriesRefArgs,
    defaultParams: [''],
});
addFuncDef({
    name: 'rangeOfSeries',
    category: 'Combine',
});
addFuncDef({
    name: 'percentileOfSeries',
    category: 'Combine',
    params: [{ name: 'n', type: 'int' }, { name: 'interpolate', type: 'boolean', options: ['true', 'false'] }],
    defaultParams: [95, 'false'],
});
addFuncDef({
    name: 'sumSeriesWithWildcards',
    category: 'Combine',
    params: [{ name: 'node', type: 'int', multiple: true }],
    defaultParams: [3],
});
addFuncDef({
    name: 'maxSeries',
    shortName: 'max',
    category: 'Combine',
});
addFuncDef({
    name: 'minSeries',
    shortName: 'min',
    category: 'Combine',
});
addFuncDef({
    name: 'averageSeriesWithWildcards',
    category: 'Combine',
    params: [{ name: 'node', type: 'int', multiple: true }],
    defaultParams: [3],
});
addFuncDef({
    name: 'alias',
    category: 'Alias',
    params: [{ name: 'alias', type: 'string' }],
    defaultParams: ['alias'],
});
addFuncDef({
    name: 'aliasSub',
    category: 'Alias',
    params: [{ name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],
    defaultParams: ['', '\\1'],
});
addFuncDef({
    name: 'consolidateBy',
    category: 'Special',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['sum', 'average', 'min', 'max'],
        },
    ],
    defaultParams: ['max'],
});
addFuncDef({
    name: 'cumulative',
    category: 'Special',
    params: [],
    defaultParams: [],
});
addFuncDef({
    name: 'groupByNode',
    category: 'Combine',
    params: [
        {
            name: 'node',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
        },
        {
            name: 'function',
            type: 'string',
            options: ['sum', 'avg', 'maxSeries'],
        },
    ],
    defaultParams: [3, 'sum'],
});
addFuncDef({
    name: 'aliasByNode',
    category: 'Alias',
    params: [
        {
            name: 'node',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
            multiple: true,
        },
    ],
    defaultParams: [3],
});
addFuncDef({
    name: 'substr',
    category: 'Special',
    params: [
        {
            name: 'start',
            type: 'int',
            options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
        },
        {
            name: 'stop',
            type: 'int',
            options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
        },
    ],
    defaultParams: [0, 0],
});
addFuncDef({
    name: 'sortByName',
    category: 'Sorting',
    params: [
        {
            name: 'natural',
            type: 'boolean',
            options: ['true', 'false'],
            optional: true,
        },
    ],
    defaultParams: ['false'],
});
addFuncDef({
    name: 'sortByMaxima',
    category: 'Sorting',
});
addFuncDef({
    name: 'sortByMinima',
    category: 'Sorting',
});
addFuncDef({
    name: 'sortByTotal',
    category: 'Sorting',
});
addFuncDef({
    name: 'aliasByMetric',
    category: 'Alias',
});
addFuncDef({
    name: 'randomWalk',
    fake: true,
    category: 'Special',
    params: [{ name: 'name', type: 'string' }],
    defaultParams: ['randomWalk'],
});
addFuncDef({
    name: 'countSeries',
    category: 'Combine',
});
addFuncDef({
    name: 'constantLine',
    category: 'Special',
    params: [{ name: 'value', type: 'int' }],
    defaultParams: [10],
});
addFuncDef({
    name: 'cactiStyle',
    category: 'Special',
});
addFuncDef({
    name: 'keepLastValue',
    category: 'Transform',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [100],
});
addFuncDef({
    name: 'changed',
    category: 'Special',
    params: [],
    defaultParams: [],
});
addFuncDef({
    name: 'scale',
    category: 'Transform',
    params: [{ name: 'factor', type: 'int' }],
    defaultParams: [1],
});
addFuncDef({
    name: 'offset',
    category: 'Transform',
    params: [{ name: 'amount', type: 'int' }],
    defaultParams: [10],
});
addFuncDef({
    name: 'transformNull',
    category: 'Transform',
    params: [{ name: 'amount', type: 'int' }],
    defaultParams: [0],
});
addFuncDef({
    name: 'integral',
    category: 'Transform',
});
addFuncDef({
    name: 'derivative',
    category: 'Transform',
});
addFuncDef({
    name: 'nonNegativeDerivative',
    category: 'Transform',
    params: [{ name: 'max value or 0', type: 'int', optional: true }],
    defaultParams: [''],
});
addFuncDef({
    name: 'timeShift',
    category: 'Transform',
    params: [
        {
            name: 'amount',
            type: 'select',
            options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],
        },
    ],
    defaultParams: ['1d'],
});
addFuncDef({
    name: 'timeStack',
    category: 'Transform',
    params: [
        {
            name: 'timeShiftUnit',
            type: 'select',
            options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],
        },
        { name: 'timeShiftStart', type: 'int' },
        { name: 'timeShiftEnd', type: 'int' },
    ],
    defaultParams: ['1d', 0, 7],
});
addFuncDef({
    name: 'summarize',
    category: 'Transform',
    params: [
        { name: 'interval', type: 'string' },
        {
            name: 'func',
            type: 'select',
            options: ['sum', 'avg', 'min', 'max', 'last'],
        },
        {
            name: 'alignToFrom',
            type: 'boolean',
            optional: true,
            options: ['false', 'true'],
        },
    ],
    defaultParams: ['1h', 'sum', 'false'],
});
addFuncDef({
    name: 'smartSummarize',
    category: 'Transform',
    params: [
        { name: 'interval', type: 'string' },
        {
            name: 'func',
            type: 'select',
            options: ['sum', 'avg', 'min', 'max', 'last'],
        },
    ],
    defaultParams: ['1h', 'sum'],
});
addFuncDef({
    name: 'absolute',
    category: 'Transform',
});
addFuncDef({
    name: 'hitcount',
    category: 'Transform',
    params: [{ name: 'interval', type: 'string' }],
    defaultParams: ['10s'],
});
addFuncDef({
    name: 'log',
    category: 'Transform',
    params: [{ name: 'base', type: 'int' }],
    defaultParams: ['10'],
});
addFuncDef({
    name: 'averageAbove',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [25],
});
addFuncDef({
    name: 'averageBelow',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [25],
});
addFuncDef({
    name: 'currentAbove',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [25],
});
addFuncDef({
    name: 'currentBelow',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [25],
});
addFuncDef({
    name: 'maximumAbove',
    category: 'Filter Series',
    params: [{ name: 'value', type: 'int' }],
    defaultParams: [0],
});
addFuncDef({
    name: 'maximumBelow',
    category: 'Filter Series',
    params: [{ name: 'value', type: 'int' }],
    defaultParams: [0],
});
addFuncDef({
    name: 'minimumAbove',
    category: 'Filter Series',
    params: [{ name: 'value', type: 'int' }],
    defaultParams: [0],
});
addFuncDef({
    name: 'minimumBelow',
    category: 'Filter Series',
    params: [{ name: 'value', type: 'int' }],
    defaultParams: [0],
});
addFuncDef({
    name: 'limit',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'mostDeviant',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [10],
});
addFuncDef({
    name: 'exclude',
    category: 'Filter Series',
    params: [{ name: 'exclude', type: 'string' }],
    defaultParams: ['exclude'],
});
addFuncDef({
    name: 'highestCurrent',
    category: 'Filter Series',
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'highestMax',
    category: 'Filter Series',
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'lowestCurrent',
    category: 'Filter Series',
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'movingAverage',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: [10],
});
addFuncDef({
    name: 'movingMedian',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: ['5'],
});
addFuncDef({
    name: 'stdev',
    category: 'Calculate',
    params: [{ name: 'n', type: 'int' }, { name: 'tolerance', type: 'int' }],
    defaultParams: [5, 0.1],
});
addFuncDef({
    name: 'highestAverage',
    category: 'Filter Series',
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'lowestAverage',
    category: 'Filter Series',
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'removeAbovePercentile',
    category: 'Filter Data',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'removeAboveValue',
    category: 'Filter Data',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'removeBelowPercentile',
    category: 'Filter Data',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'removeBelowValue',
    category: 'Filter Data',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [5],
});
addFuncDef({
    name: 'useSeriesAbove',
    category: 'Filter Series',
    params: [{ name: 'value', type: 'int' }, { name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],
    defaultParams: [0, 'search', 'replace'],
});
////////////////////
// Graphite 1.0.x //
////////////////////
addFuncDef({
    name: 'aggregateLine',
    category: 'Calculate',
    params: [
        {
            name: 'func',
            type: 'select',
            options: ['sum', 'avg', 'min', 'max', 'last'],
        },
    ],
    defaultParams: ['avg'],
    version: '1.0',
});
addFuncDef({
    name: 'averageOutsidePercentile',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [95],
    version: '1.0',
});
addFuncDef({
    name: 'delay',
    category: 'Transform',
    params: [{ name: 'steps', type: 'int' }],
    defaultParams: [1],
    version: '1.0',
});
addFuncDef({
    name: 'exponentialMovingAverage',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: [10],
    version: '1.0',
});
addFuncDef({
    name: 'fallbackSeries',
    category: 'Special',
    params: [{ name: 'fallback', type: 'string' }],
    defaultParams: ['constantLine(0)'],
    version: '1.0',
});
addFuncDef({
    name: 'grep',
    category: 'Filter Series',
    params: [{ name: 'grep', type: 'string' }],
    defaultParams: ['grep'],
    version: '1.0',
});
addFuncDef({
    name: 'groupByNodes',
    category: 'Combine',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['sum', 'avg', 'maxSeries'],
        },
        {
            name: 'node',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
            multiple: true,
        },
    ],
    defaultParams: ['sum', 3],
    version: '1.0',
});
addFuncDef({
    name: 'integralByInterval',
    category: 'Transform',
    params: [
        {
            name: 'intervalUnit',
            type: 'select',
            options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],
        },
    ],
    defaultParams: ['1d'],
    version: '1.0',
});
addFuncDef({
    name: 'interpolate',
    category: 'Transform',
    params: [{ name: 'limit', type: 'int', optional: true }],
    defaultParams: [],
    version: '1.0',
});
addFuncDef({
    name: 'invert',
    category: 'Transform',
    version: '1.0',
});
addFuncDef({
    name: 'isNonNull',
    category: 'Combine',
    version: '1.0',
});
addFuncDef({
    name: 'linearRegression',
    category: 'Calculate',
    params: [
        {
            name: 'startSourceAt',
            type: 'select',
            options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],
            optional: true,
        },
        {
            name: 'endSourceAt',
            type: 'select',
            options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],
            optional: true,
        },
    ],
    defaultParams: [],
    version: '1.0',
});
addFuncDef({
    name: 'mapSeries',
    shortName: 'map',
    params: [{ name: 'node', type: 'int' }],
    defaultParams: [3],
    category: 'Combine',
    version: '1.0',
});
addFuncDef({
    name: 'movingMin',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: [10],
    version: '1.0',
});
addFuncDef({
    name: 'movingMax',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: [10],
    version: '1.0',
});
addFuncDef({
    name: 'movingSum',
    category: 'Calculate',
    params: [
        {
            name: 'windowSize',
            type: 'int_or_interval',
            options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],
        },
    ],
    defaultParams: [10],
    version: '1.0',
});
addFuncDef({
    name: 'multiplySeriesWithWildcards',
    category: 'Combine',
    params: [
        {
            name: 'position',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
            multiple: true,
        },
    ],
    defaultParams: [2],
    version: '1.0',
});
addFuncDef({
    name: 'offsetToZero',
    category: 'Transform',
    version: '1.0',
});
addFuncDef({
    name: 'pow',
    category: 'Transform',
    params: [{ name: 'factor', type: 'int' }],
    defaultParams: [10],
    version: '1.0',
});
addFuncDef({
    name: 'powSeries',
    category: 'Transform',
    params: optionalSeriesRefArgs,
    defaultParams: [''],
    version: '1.0',
});
addFuncDef({
    name: 'reduceSeries',
    shortName: 'reduce',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['asPercent', 'diffSeries', 'divideSeries'],
        },
        {
            name: 'reduceNode',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        },
        { name: 'reduceMatchers', type: 'string', multiple: true },
    ],
    defaultParams: ['asPercent', 2, 'used_bytes'],
    category: 'Combine',
    version: '1.0',
});
addFuncDef({
    name: 'removeBetweenPercentile',
    category: 'Filter Series',
    params: [{ name: 'n', type: 'int' }],
    defaultParams: [95],
    version: '1.0',
});
addFuncDef({
    name: 'removeEmptySeries',
    category: 'Filter Series',
    version: '1.0',
});
addFuncDef({
    name: 'squareRoot',
    category: 'Transform',
    version: '1.0',
});
addFuncDef({
    name: 'timeSlice',
    category: 'Transform',
    params: [
        {
            name: 'startSliceAt',
            type: 'select',
            options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],
        },
        {
            name: 'endSliceAt',
            type: 'select',
            options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],
            optional: true,
        },
    ],
    defaultParams: ['-1h'],
    version: '1.0',
});
addFuncDef({
    name: 'weightedAverage',
    category: 'Combine',
    params: [
        { name: 'other', type: 'value_or_series', optional: true },
        {
            name: 'node',
            type: 'int',
            options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],
        },
    ],
    defaultParams: ['#A', 4],
    version: '1.0',
});
addFuncDef({
    name: 'seriesByTag',
    category: 'Special',
    params: [{ name: 'tagExpression', type: 'string', multiple: true }],
    version: '1.1',
});
addFuncDef({
    name: 'groupByTags',
    category: 'Combine',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['sum', 'avg', 'maxSeries'],
        },
        { name: 'tag', type: 'string', multiple: true },
    ],
    defaultParams: ['sum', 'tag'],
    version: '1.1',
});
addFuncDef({
    name: 'aliasByTags',
    category: 'Alias',
    params: [{ name: 'tag', type: 'string', multiple: true }],
    defaultParams: ['tag'],
    version: '1.1',
});
function isVersionRelatedFunction(obj, graphiteVersion) {
    return !obj.version || Object(app_core_utils_version__WEBPACK_IMPORTED_MODULE_1__["isVersionGtOrEq"])(graphiteVersion, obj.version);
}
var FuncInstance = /** @class */ (function () {
    function FuncInstance(funcDef, options) {
        this.def = funcDef;
        this.params = [];
        if (options && options.withDefaultParams) {
            this.params = funcDef.defaultParams.slice(0);
        }
        this.updateText();
    }
    FuncInstance.prototype.render = function (metricExp) {
        var _this = this;
        var str = this.def.name + '(';
        var parameters = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.params, function (value, index) {
            var paramType;
            if (index < _this.def.params.length) {
                paramType = _this.def.params[index].type;
            }
            else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.last(_this.def.params), 'multiple')) {
                paramType = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.last(_this.def.params), 'type');
            }
            // param types that should never be quoted
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {
                return value;
            }
            // param types that might be quoted
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.includes(['int_or_interval', 'node_or_tag'], paramType) && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFinite(+value)) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toString(+value);
            }
            return "'" + value + "'";
        });
        // don't send any blank parameters to graphite
        while (parameters[parameters.length - 1] === '') {
            parameters.pop();
        }
        if (metricExp) {
            parameters.unshift(metricExp);
        }
        return str + parameters.join(', ') + ')';
    };
    FuncInstance.prototype._hasMultipleParamsInString = function (strValue, index) {
        if (strValue.indexOf(',') === -1) {
            return false;
        }
        if (this.def.params[index + 1] && this.def.params[index + 1].optional) {
            return true;
        }
        if (index + 1 >= this.def.params.length && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.last(this.def.params), 'multiple')) {
            return true;
        }
        return false;
    };
    FuncInstance.prototype.updateParam = function (strValue, index) {
        var _this = this;
        // handle optional parameters
        // if string contains ',' and next param is optional, split and update both
        if (this._hasMultipleParamsInString(strValue, index)) {
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(strValue.split(','), function (partVal, idx) {
                _this.updateParam(partVal.trim(), index + idx);
            });
            return;
        }
        if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {
            this.params.splice(index, 1);
        }
        else {
            this.params[index] = strValue;
        }
        this.updateText();
    };
    FuncInstance.prototype.updateText = function () {
        if (this.params.length === 0) {
            this.text = this.def.name + '()';
            return;
        }
        var text = this.def.name + '(';
        text += this.params.join(', ');
        text += ')';
        this.text = text;
    };
    return FuncInstance;
}());

function createFuncInstance(funcDef, options, idx) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(funcDef)) {
        funcDef = getFuncDef(funcDef, idx);
    }
    return new FuncInstance(funcDef, options);
}
function getFuncDef(name, idx) {
    if (!(idx || index)[name]) {
        throw { message: 'Method not found ' + name };
    }
    return (idx || index)[name];
}
function getFuncDefs(graphiteVersion, idx) {
    var funcs = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(idx || index, function (funcDef) {
        if (isVersionRelatedFunction(funcDef, graphiteVersion)) {
            funcs[funcDef.name] = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.assign({}, funcDef, {
                params: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(funcDef.params, function (param) {
                    return isVersionRelatedFunction(param, graphiteVersion);
                }),
            });
        }
    });
    return funcs;
}
// parse response from graphite /functions endpoint into internal format
function parseFuncDefs(rawDefs) {
    var funcDefs = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(rawDefs || {}, function (funcDef, funcName) {
        // skip graphite graph functions
        if (funcDef.group === 'Graph') {
            return;
        }
        var description = funcDef.description;
        if (description) {
            // tidy up some pydoc syntax that rst2html can't handle
            description = description
                .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')
                .replace(/.. seealso:: /g, 'See also: ')
                .replace(/.. code-block *:: *none/g, '.. code-block::');
        }
        var func = {
            name: funcDef.name,
            description: description,
            category: funcDef.group,
            params: [],
            defaultParams: [],
            fake: false,
        };
        // get rid of the first "seriesList" param
        if (/^seriesLists?$/.test(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(funcDef, 'params[0].type', ''))) {
            // handle functions that accept multiple seriesLists
            // we leave the param in place but mark it optional, so users can add more series if they wish
            if (funcDef.params[0].multiple) {
                funcDef.params[0].required = false;
                // otherwise chop off the first param, it'll be handled separately
            }
            else {
                funcDef.params.shift();
            }
            // tag function as fake
        }
        else {
            func.fake = true;
        }
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(funcDef.params, function (rawParam) {
            var param = {
                name: rawParam.name,
                type: 'string',
                optional: !rawParam.required,
                multiple: !!rawParam.multiple,
                options: undefined,
            };
            if (rawParam.default !== undefined) {
                func.defaultParams.push(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toString(rawParam.default));
            }
            else if (rawParam.suggestions) {
                func.defaultParams.push(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toString(rawParam.suggestions[0]));
            }
            else {
                func.defaultParams.push('');
            }
            if (rawParam.type === 'boolean') {
                param.type = 'boolean';
                param.options = ['true', 'false'];
            }
            else if (rawParam.type === 'integer') {
                param.type = 'int';
            }
            else if (rawParam.type === 'float') {
                param.type = 'float';
            }
            else if (rawParam.type === 'node') {
                param.type = 'node';
                param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
            }
            else if (rawParam.type === 'nodeOrTag') {
                param.type = 'node_or_tag';
                param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
            }
            else if (rawParam.type === 'intOrInterval') {
                param.type = 'int_or_interval';
            }
            else if (rawParam.type === 'seriesList') {
                param.type = 'value_or_series';
            }
            if (rawParam.options) {
                param.options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(rawParam.options, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toString);
            }
            else if (rawParam.suggestions) {
                param.options = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(rawParam.suggestions, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toString);
            }
            func.params.push(param);
        });
        funcDefs[funcName] = func;
    });
    return funcDefs;
}
/* harmony default export */ __webpack_exports__["default"] = ({
    createFuncInstance: createFuncInstance,
    getFuncDef: getFuncDef,
    getFuncDefs: getFuncDefs,
    parseFuncDefs: parseFuncDefs,
});


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/graphite_query.ts":
/*!******************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/graphite_query.ts ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./public/app/plugins/datasource/graphite/parser.ts");


var GraphiteQuery = /** @class */ (function () {
    /** @ngInject */
    function GraphiteQuery(datasource, target, templateSrv, scopedVars) {
        this.datasource = datasource;
        this.target = target;
        this.parseTarget();
        this.removeTagValue = '-- remove tag --';
    }
    GraphiteQuery.prototype.parseTarget = function () {
        this.functions = [];
        this.segments = [];
        this.tags = [];
        this.error = null;
        if (this.target.textEditor) {
            return;
        }
        var parser = new _parser__WEBPACK_IMPORTED_MODULE_1__["Parser"](this.target.target);
        var astNode = parser.getAst();
        if (astNode === null) {
            this.checkOtherSegmentsIndex = 0;
            return;
        }
        if (astNode.type === 'error') {
            this.error = astNode.message + ' at position: ' + astNode.pos;
            this.target.textEditor = true;
            return;
        }
        try {
            this.parseTargetRecursive(astNode, null);
        }
        catch (err) {
            console.log('error parsing target:', err.message);
            this.error = err.message;
            this.target.textEditor = true;
        }
        this.checkOtherSegmentsIndex = this.segments.length - 1;
        this.checkForSeriesByTag();
    };
    GraphiteQuery.prototype.checkForSeriesByTag = function () {
        var seriesByTagFunc = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.functions, function (func) { return func.def.name === 'seriesByTag'; });
        if (seriesByTagFunc) {
            this.seriesByTagUsed = true;
            seriesByTagFunc.hidden = true;
            var tags = this.splitSeriesByTagParams(seriesByTagFunc);
            this.tags = tags;
        }
    };
    GraphiteQuery.prototype.getSegmentPathUpTo = function (index) {
        var arr = this.segments.slice(0, index);
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reduce(arr, function (result, segment) {
            return result ? result + '.' + segment.value : segment.value;
        }, '');
    };
    GraphiteQuery.prototype.parseTargetRecursive = function (astNode, func) {
        var _this = this;
        if (astNode === null) {
            return null;
        }
        switch (astNode.type) {
            case 'function':
                var innerFunc_1 = this.datasource.createFuncInstance(astNode.name, {
                    withDefaultParams: false,
                });
                lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(astNode.params, function (param) {
                    _this.parseTargetRecursive(param, innerFunc_1);
                });
                innerFunc_1.updateText();
                this.functions.push(innerFunc_1);
                break;
            case 'series-ref':
                if (this.segments.length > 0) {
                    this.addFunctionParameter(func, astNode.value);
                }
                else {
                    this.segments.push(astNode);
                }
                break;
            case 'bool':
            case 'string':
            case 'number':
                this.addFunctionParameter(func, astNode.value);
                break;
            case 'metric':
                if (this.segments.length > 0) {
                    this.addFunctionParameter(func, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.join(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(astNode.segments, 'value'), '.'));
                }
                else {
                    this.segments = astNode.segments;
                }
                break;
        }
    };
    GraphiteQuery.prototype.updateSegmentValue = function (segment, index) {
        this.segments[index].value = segment.value;
    };
    GraphiteQuery.prototype.addSelectMetricSegment = function () {
        this.segments.push({ value: 'select metric' });
    };
    GraphiteQuery.prototype.addFunction = function (newFunc) {
        this.functions.push(newFunc);
        this.moveAliasFuncLast();
    };
    GraphiteQuery.prototype.moveAliasFuncLast = function () {
        var aliasFunc = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.functions, function (func) {
            return func.def.name.startsWith('alias');
        });
        if (aliasFunc) {
            this.functions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.without(this.functions, aliasFunc);
            this.functions.push(aliasFunc);
        }
    };
    GraphiteQuery.prototype.addFunctionParameter = function (func, value) {
        if (func.params.length >= func.def.params.length && !lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.last(func.def.params), 'multiple', false)) {
            throw { message: 'too many parameters for function ' + func.def.name };
        }
        func.params.push(value);
    };
    GraphiteQuery.prototype.removeFunction = function (func) {
        this.functions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.without(this.functions, func);
    };
    GraphiteQuery.prototype.updateModelTarget = function (targets) {
        // render query
        if (!this.target.textEditor) {
            var metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\.select metric$/, '');
            this.target.target = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reduce(this.functions, wrapFunction, metricPath);
        }
        this.updateRenderedTarget(this.target, targets);
        // loop through other queries and update targetFull as needed
        for (var _i = 0, _a = targets || []; _i < _a.length; _i++) {
            var target = _a[_i];
            if (target.refId !== this.target.refId) {
                this.updateRenderedTarget(target, targets);
            }
        }
    };
    GraphiteQuery.prototype.updateRenderedTarget = function (target, targets) {
        // render nested query
        var targetsByRefId = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keyBy(targets, 'refId');
        // no references to self
        delete targetsByRefId[target.refId];
        var nestedSeriesRefRegex = /\#([A-Z])/g;
        var targetWithNestedQueries = target.target;
        // Use ref count to track circular references
        function countTargetRefs(targetsByRefId, refId) {
            var refCount = 0;
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(targetsByRefId, function (t, id) {
                if (id !== refId) {
                    var match = nestedSeriesRefRegex.exec(t.target);
                    var count = match && match.length ? match.length - 1 : 0;
                    refCount += count;
                }
            });
            targetsByRefId[refId].refCount = refCount;
        }
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(targetsByRefId, function (t, id) {
            countTargetRefs(targetsByRefId, id);
        });
        // Keep interpolating until there are no query references
        // The reason for the loop is that the referenced query might contain another reference to another query
        while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {
            var updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, function (match, g1) {
                var t = targetsByRefId[g1];
                if (!t) {
                    return match;
                }
                // no circular references
                if (t.refCount === 0) {
                    delete targetsByRefId[g1];
                }
                t.refCount--;
                return t.target;
            });
            if (updated === targetWithNestedQueries) {
                break;
            }
            targetWithNestedQueries = updated;
        }
        delete target.targetFull;
        if (target.target !== targetWithNestedQueries) {
            target.targetFull = targetWithNestedQueries;
        }
    };
    GraphiteQuery.prototype.splitSeriesByTagParams = function (func) {
        var tagPattern = /([^\!=~]+)(\!?=~?)(.*)/;
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(func.params, function (param) {
            var matches = tagPattern.exec(param);
            if (matches) {
                var tag = matches.slice(1);
                if (tag.length === 3) {
                    return {
                        key: tag[0],
                        operator: tag[1],
                        value: tag[2],
                    };
                }
            }
            return [];
        }));
    };
    GraphiteQuery.prototype.getSeriesByTagFuncIndex = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.findIndex(this.functions, function (func) { return func.def.name === 'seriesByTag'; });
    };
    GraphiteQuery.prototype.getSeriesByTagFunc = function () {
        var seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();
        if (seriesByTagFuncIndex >= 0) {
            return this.functions[seriesByTagFuncIndex];
        }
        else {
            return undefined;
        }
    };
    GraphiteQuery.prototype.addTag = function (tag) {
        var newTagParam = renderTagString(tag);
        this.getSeriesByTagFunc().params.push(newTagParam);
        this.tags.push(tag);
    };
    GraphiteQuery.prototype.removeTag = function (index) {
        this.getSeriesByTagFunc().params.splice(index, 1);
        this.tags.splice(index, 1);
    };
    GraphiteQuery.prototype.updateTag = function (tag, tagIndex) {
        this.error = null;
        if (tag.key === this.removeTagValue) {
            this.removeTag(tagIndex);
            return;
        }
        var newTagParam = renderTagString(tag);
        this.getSeriesByTagFunc().params[tagIndex] = newTagParam;
        this.tags[tagIndex] = tag;
    };
    GraphiteQuery.prototype.renderTagExpressions = function (excludeIndex) {
        if (excludeIndex === void 0) { excludeIndex = -1; }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.compact(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.tags, function (tagExpr, index) {
            // Don't render tag that we want to lookup
            if (index !== excludeIndex) {
                return tagExpr.key + tagExpr.operator + tagExpr.value;
            }
        }));
    };
    return GraphiteQuery;
}());
/* harmony default export */ __webpack_exports__["default"] = (GraphiteQuery);
function wrapFunction(target, func) {
    return func.render(target);
}
function renderTagString(tag) {
    return tag.key + tag.operator + tag.value;
}


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/lexer.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/lexer.ts ***!
  \*********************************************************/
/*! exports provided: Lexer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lexer", function() { return Lexer; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

// This is auto generated from the unicode tables.
// The tables are at:
// http://www.fileformat.info/info/unicode/category/Lu/list.htm
// http://www.fileformat.info/info/unicode/category/Ll/list.htm
// http://www.fileformat.info/info/unicode/category/Lt/list.htm
// http://www.fileformat.info/info/unicode/category/Lm/list.htm
// http://www.fileformat.info/info/unicode/category/Lo/list.htm
// http://www.fileformat.info/info/unicode/category/Nl/list.htm
var unicodeLetterTable = [
    170,
    170,
    181,
    181,
    186,
    186,
    192,
    214,
    216,
    246,
    248,
    705,
    710,
    721,
    736,
    740,
    748,
    748,
    750,
    750,
    880,
    884,
    886,
    887,
    890,
    893,
    902,
    902,
    904,
    906,
    908,
    908,
    910,
    929,
    931,
    1013,
    1015,
    1153,
    1162,
    1319,
    1329,
    1366,
    1369,
    1369,
    1377,
    1415,
    1488,
    1514,
    1520,
    1522,
    1568,
    1610,
    1646,
    1647,
    1649,
    1747,
    1749,
    1749,
    1765,
    1766,
    1774,
    1775,
    1786,
    1788,
    1791,
    1791,
    1808,
    1808,
    1810,
    1839,
    1869,
    1957,
    1969,
    1969,
    1994,
    2026,
    2036,
    2037,
    2042,
    2042,
    2048,
    2069,
    2074,
    2074,
    2084,
    2084,
    2088,
    2088,
    2112,
    2136,
    2308,
    2361,
    2365,
    2365,
    2384,
    2384,
    2392,
    2401,
    2417,
    2423,
    2425,
    2431,
    2437,
    2444,
    2447,
    2448,
    2451,
    2472,
    2474,
    2480,
    2482,
    2482,
    2486,
    2489,
    2493,
    2493,
    2510,
    2510,
    2524,
    2525,
    2527,
    2529,
    2544,
    2545,
    2565,
    2570,
    2575,
    2576,
    2579,
    2600,
    2602,
    2608,
    2610,
    2611,
    2613,
    2614,
    2616,
    2617,
    2649,
    2652,
    2654,
    2654,
    2674,
    2676,
    2693,
    2701,
    2703,
    2705,
    2707,
    2728,
    2730,
    2736,
    2738,
    2739,
    2741,
    2745,
    2749,
    2749,
    2768,
    2768,
    2784,
    2785,
    2821,
    2828,
    2831,
    2832,
    2835,
    2856,
    2858,
    2864,
    2866,
    2867,
    2869,
    2873,
    2877,
    2877,
    2908,
    2909,
    2911,
    2913,
    2929,
    2929,
    2947,
    2947,
    2949,
    2954,
    2958,
    2960,
    2962,
    2965,
    2969,
    2970,
    2972,
    2972,
    2974,
    2975,
    2979,
    2980,
    2984,
    2986,
    2990,
    3001,
    3024,
    3024,
    3077,
    3084,
    3086,
    3088,
    3090,
    3112,
    3114,
    3123,
    3125,
    3129,
    3133,
    3133,
    3160,
    3161,
    3168,
    3169,
    3205,
    3212,
    3214,
    3216,
    3218,
    3240,
    3242,
    3251,
    3253,
    3257,
    3261,
    3261,
    3294,
    3294,
    3296,
    3297,
    3313,
    3314,
    3333,
    3340,
    3342,
    3344,
    3346,
    3386,
    3389,
    3389,
    3406,
    3406,
    3424,
    3425,
    3450,
    3455,
    3461,
    3478,
    3482,
    3505,
    3507,
    3515,
    3517,
    3517,
    3520,
    3526,
    3585,
    3632,
    3634,
    3635,
    3648,
    3654,
    3713,
    3714,
    3716,
    3716,
    3719,
    3720,
    3722,
    3722,
    3725,
    3725,
    3732,
    3735,
    3737,
    3743,
    3745,
    3747,
    3749,
    3749,
    3751,
    3751,
    3754,
    3755,
    3757,
    3760,
    3762,
    3763,
    3773,
    3773,
    3776,
    3780,
    3782,
    3782,
    3804,
    3805,
    3840,
    3840,
    3904,
    3911,
    3913,
    3948,
    3976,
    3980,
    4096,
    4138,
    4159,
    4159,
    4176,
    4181,
    4186,
    4189,
    4193,
    4193,
    4197,
    4198,
    4206,
    4208,
    4213,
    4225,
    4238,
    4238,
    4256,
    4293,
    4304,
    4346,
    4348,
    4348,
    4352,
    4680,
    4682,
    4685,
    4688,
    4694,
    4696,
    4696,
    4698,
    4701,
    4704,
    4744,
    4746,
    4749,
    4752,
    4784,
    4786,
    4789,
    4792,
    4798,
    4800,
    4800,
    4802,
    4805,
    4808,
    4822,
    4824,
    4880,
    4882,
    4885,
    4888,
    4954,
    4992,
    5007,
    5024,
    5108,
    5121,
    5740,
    5743,
    5759,
    5761,
    5786,
    5792,
    5866,
    5870,
    5872,
    5888,
    5900,
    5902,
    5905,
    5920,
    5937,
    5952,
    5969,
    5984,
    5996,
    5998,
    6000,
    6016,
    6067,
    6103,
    6103,
    6108,
    6108,
    6176,
    6263,
    6272,
    6312,
    6314,
    6314,
    6320,
    6389,
    6400,
    6428,
    6480,
    6509,
    6512,
    6516,
    6528,
    6571,
    6593,
    6599,
    6656,
    6678,
    6688,
    6740,
    6823,
    6823,
    6917,
    6963,
    6981,
    6987,
    7043,
    7072,
    7086,
    7087,
    7104,
    7141,
    7168,
    7203,
    7245,
    7247,
    7258,
    7293,
    7401,
    7404,
    7406,
    7409,
    7424,
    7615,
    7680,
    7957,
    7960,
    7965,
    7968,
    8005,
    8008,
    8013,
    8016,
    8023,
    8025,
    8025,
    8027,
    8027,
    8029,
    8029,
    8031,
    8061,
    8064,
    8116,
    8118,
    8124,
    8126,
    8126,
    8130,
    8132,
    8134,
    8140,
    8144,
    8147,
    8150,
    8155,
    8160,
    8172,
    8178,
    8180,
    8182,
    8188,
    8305,
    8305,
    8319,
    8319,
    8336,
    8348,
    8450,
    8450,
    8455,
    8455,
    8458,
    8467,
    8469,
    8469,
    8473,
    8477,
    8484,
    8484,
    8486,
    8486,
    8488,
    8488,
    8490,
    8493,
    8495,
    8505,
    8508,
    8511,
    8517,
    8521,
    8526,
    8526,
    8544,
    8584,
    11264,
    11310,
    11312,
    11358,
    11360,
    11492,
    11499,
    11502,
    11520,
    11557,
    11568,
    11621,
    11631,
    11631,
    11648,
    11670,
    11680,
    11686,
    11688,
    11694,
    11696,
    11702,
    11704,
    11710,
    11712,
    11718,
    11720,
    11726,
    11728,
    11734,
    11736,
    11742,
    11823,
    11823,
    12293,
    12295,
    12321,
    12329,
    12337,
    12341,
    12344,
    12348,
    12353,
    12438,
    12445,
    12447,
    12449,
    12538,
    12540,
    12543,
    12549,
    12589,
    12593,
    12686,
    12704,
    12730,
    12784,
    12799,
    13312,
    13312,
    19893,
    19893,
    19968,
    19968,
    40907,
    40907,
    40960,
    42124,
    42192,
    42237,
    42240,
    42508,
    42512,
    42527,
    42538,
    42539,
    42560,
    42606,
    42623,
    42647,
    42656,
    42735,
    42775,
    42783,
    42786,
    42888,
    42891,
    42894,
    42896,
    42897,
    42912,
    42921,
    43002,
    43009,
    43011,
    43013,
    43015,
    43018,
    43020,
    43042,
    43072,
    43123,
    43138,
    43187,
    43250,
    43255,
    43259,
    43259,
    43274,
    43301,
    43312,
    43334,
    43360,
    43388,
    43396,
    43442,
    43471,
    43471,
    43520,
    43560,
    43584,
    43586,
    43588,
    43595,
    43616,
    43638,
    43642,
    43642,
    43648,
    43695,
    43697,
    43697,
    43701,
    43702,
    43705,
    43709,
    43712,
    43712,
    43714,
    43714,
    43739,
    43741,
    43777,
    43782,
    43785,
    43790,
    43793,
    43798,
    43808,
    43814,
    43816,
    43822,
    43968,
    44002,
    44032,
    44032,
    55203,
    55203,
    55216,
    55238,
    55243,
    55291,
    63744,
    64045,
    64048,
    64109,
    64112,
    64217,
    64256,
    64262,
    64275,
    64279,
    64285,
    64285,
    64287,
    64296,
    64298,
    64310,
    64312,
    64316,
    64318,
    64318,
    64320,
    64321,
    64323,
    64324,
    64326,
    64433,
    64467,
    64829,
    64848,
    64911,
    64914,
    64967,
    65008,
    65019,
    65136,
    65140,
    65142,
    65276,
    65313,
    65338,
    65345,
    65370,
    65382,
    65470,
    65474,
    65479,
    65482,
    65487,
    65490,
    65495,
    65498,
    65500,
    65536,
    65547,
    65549,
    65574,
    65576,
    65594,
    65596,
    65597,
    65599,
    65613,
    65616,
    65629,
    65664,
    65786,
    65856,
    65908,
    66176,
    66204,
    66208,
    66256,
    66304,
    66334,
    66352,
    66378,
    66432,
    66461,
    66464,
    66499,
    66504,
    66511,
    66513,
    66517,
    66560,
    66717,
    67584,
    67589,
    67592,
    67592,
    67594,
    67637,
    67639,
    67640,
    67644,
    67644,
    67647,
    67669,
    67840,
    67861,
    67872,
    67897,
    68096,
    68096,
    68112,
    68115,
    68117,
    68119,
    68121,
    68147,
    68192,
    68220,
    68352,
    68405,
    68416,
    68437,
    68448,
    68466,
    68608,
    68680,
    69635,
    69687,
    69763,
    69807,
    73728,
    74606,
    74752,
    74850,
    77824,
    78894,
    92160,
    92728,
    110592,
    110593,
    119808,
    119892,
    119894,
    119964,
    119966,
    119967,
    119970,
    119970,
    119973,
    119974,
    119977,
    119980,
    119982,
    119993,
    119995,
    119995,
    119997,
    120003,
    120005,
    120069,
    120071,
    120074,
    120077,
    120084,
    120086,
    120092,
    120094,
    120121,
    120123,
    120126,
    120128,
    120132,
    120134,
    120134,
    120138,
    120144,
    120146,
    120485,
    120488,
    120512,
    120514,
    120538,
    120540,
    120570,
    120572,
    120596,
    120598,
    120628,
    120630,
    120654,
    120656,
    120686,
    120688,
    120712,
    120714,
    120744,
    120746,
    120770,
    120772,
    120779,
    131072,
    131072,
    173782,
    173782,
    173824,
    173824,
    177972,
    177972,
    177984,
    177984,
    178205,
    178205,
    194560,
    195101,
];
var identifierStartTable = [];
for (var i = 0; i < 128; i++) {
    identifierStartTable[i] =
        (i >= 48 && i <= 57) || // 0-9
            i === 36 || // $
            i === 126 || // ~
            i === 124 || // |
            (i >= 65 && i <= 90) || // A-Z
            i === 95 || // _
            i === 45 || // -
            i === 42 || // *
            i === 58 || // :
            i === 91 || // templateStart [
            i === 93 || // templateEnd ]
            i === 63 || // ?
            i === 37 || // %
            i === 35 || // #
            i === 61 || // =
            (i >= 97 && i <= 122); // a-z
}
var identifierPartTable = identifierStartTable;
function Lexer(expression) {
    this.input = expression;
    this.char = 1;
    this.from = 1;
}
Lexer.prototype = {
    peek: function (i) {
        return this.input.charAt(i || 0);
    },
    skip: function (i) {
        i = i || 1;
        this.char += i;
        this.input = this.input.slice(i);
    },
    tokenize: function () {
        var list = [];
        var token = this.next();
        while (token) {
            list.push(token);
            token = this.next();
        }
        return list;
    },
    next: function () {
        this.from = this.char;
        // Move to the next non-space character.
        if (/\s/.test(this.peek())) {
            while (/\s/.test(this.peek())) {
                this.from += 1;
                this.skip();
            }
            if (this.peek() === '') {
                // EOL
                return null;
            }
        }
        var match = this.scanStringLiteral();
        if (match) {
            return match;
        }
        match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();
        if (match) {
            this.skip(match.value.length);
            return match;
        }
        // No token could be matched, give up.
        return null;
    },
    scanTemplateSequence: function () {
        if (this.peek() === '[' && this.peek(1) === '[') {
            return {
                type: 'templateStart',
                value: '[[',
                pos: this.char,
            };
        }
        if (this.peek() === ']' && this.peek(1) === ']') {
            return {
                type: 'templateEnd',
                value: '[[',
                pos: this.char,
            };
        }
        return null;
    },
    /*
     * Extract a JavaScript identifier out of the next sequence of
     * characters or return 'null' if its not possible. In addition,
     * to Identifier this method can also produce BooleanLiteral
     * (true/false) and NullLiteral (null).
     */
    scanIdentifier: function () {
        var id = '';
        var index = 0;
        var type, char;
        // Detects any character in the Unicode categories "Uppercase
        // letter (Lu)", "Lowercase letter (Ll)", "Titlecase letter
        // (Lt)", "Modifier letter (Lm)", "Other letter (Lo)", or
        // "Letter number (Nl)".
        //
        // Both approach and unicodeLetterTable were borrowed from
        // Google's Traceur.
        function isUnicodeLetter(code) {
            for (var i = 0; i < unicodeLetterTable.length;) {
                if (code < unicodeLetterTable[i++]) {
                    return false;
                }
                if (code <= unicodeLetterTable[i++]) {
                    return true;
                }
            }
            return false;
        }
        function isHexDigit(str) {
            return /^[0-9a-fA-F]$/.test(str);
        }
        var readUnicodeEscapeSequence = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.bind(function () {
            /*jshint validthis:true */
            index += 1;
            if (this.peek(index) !== 'u') {
                return null;
            }
            var ch1 = this.peek(index + 1);
            var ch2 = this.peek(index + 2);
            var ch3 = this.peek(index + 3);
            var ch4 = this.peek(index + 4);
            var code;
            if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {
                code = parseInt(ch1 + ch2 + ch3 + ch4, 16);
                if (isUnicodeLetter(code)) {
                    index += 5;
                    return '\\u' + ch1 + ch2 + ch3 + ch4;
                }
                return null;
            }
            return null;
        }, this);
        var getIdentifierStart = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.bind(function () {
            /*jshint validthis:true */
            var chr = this.peek(index);
            var code = chr.charCodeAt(0);
            if (chr === '*') {
                index += 1;
                return chr;
            }
            if (code === 92) {
                return readUnicodeEscapeSequence();
            }
            if (code < 128) {
                if (identifierStartTable[code]) {
                    index += 1;
                    return chr;
                }
                return null;
            }
            if (isUnicodeLetter(code)) {
                index += 1;
                return chr;
            }
            return null;
        }, this);
        var getIdentifierPart = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.bind(function () {
            /*jshint validthis:true */
            var chr = this.peek(index);
            var code = chr.charCodeAt(0);
            if (code === 92) {
                return readUnicodeEscapeSequence();
            }
            if (code < 128) {
                if (identifierPartTable[code]) {
                    index += 1;
                    return chr;
                }
                return null;
            }
            if (isUnicodeLetter(code)) {
                index += 1;
                return chr;
            }
            return null;
        }, this);
        char = getIdentifierStart();
        if (char === null) {
            return null;
        }
        id = char;
        for (;;) {
            char = getIdentifierPart();
            if (char === null) {
                break;
            }
            id += char;
        }
        switch (id) {
            case 'true': {
                type = 'bool';
                break;
            }
            case 'false': {
                type = 'bool';
                break;
            }
            default:
                type = 'identifier';
        }
        return {
            type: type,
            value: id,
            pos: this.char,
        };
    },
    /*
     * Extract a numeric literal out of the next sequence of
     * characters or return 'null' if its not possible. This method
     * supports all numeric literals described in section 7.8.3
     * of the EcmaScript 5 specification.
     *
     * This method's implementation was heavily influenced by the
     * scanNumericLiteral function in the Esprima parser's source code.
     */
    scanNumericLiteral: function () {
        var index = 0;
        var value = '';
        var length = this.input.length;
        var char = this.peek(index);
        var bad;
        function isDecimalDigit(str) {
            return /^[0-9]$/.test(str);
        }
        function isOctalDigit(str) {
            return /^[0-7]$/.test(str);
        }
        function isHexDigit(str) {
            return /^[0-9a-fA-F]$/.test(str);
        }
        function isIdentifierStart(ch) {
            return ch === '$' || ch === '_' || ch === '\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
        }
        // handle negative num literals
        if (char === '-') {
            value += char;
            index += 1;
            char = this.peek(index);
        }
        // Numbers must start either with a decimal digit or a point.
        if (char !== '.' && !isDecimalDigit(char)) {
            return null;
        }
        if (char !== '.') {
            value += this.peek(index);
            index += 1;
            char = this.peek(index);
            if (value === '0') {
                // Base-16 numbers.
                if (char === 'x' || char === 'X') {
                    index += 1;
                    value += char;
                    while (index < length) {
                        char = this.peek(index);
                        if (!isHexDigit(char)) {
                            break;
                        }
                        value += char;
                        index += 1;
                    }
                    if (value.length <= 2) {
                        // 0x
                        return {
                            type: 'number',
                            value: value,
                            isMalformed: true,
                            pos: this.char,
                        };
                    }
                    if (index < length) {
                        char = this.peek(index);
                        if (isIdentifierStart(char)) {
                            return null;
                        }
                    }
                    return {
                        type: 'number',
                        value: value,
                        base: 16,
                        isMalformed: false,
                        pos: this.char,
                    };
                }
                // Base-8 numbers.
                if (isOctalDigit(char)) {
                    index += 1;
                    value += char;
                    bad = false;
                    while (index < length) {
                        char = this.peek(index);
                        // Numbers like '019' (note the 9) are not valid octals
                        // but we still parse them and mark as malformed.
                        if (isDecimalDigit(char)) {
                            bad = true;
                        }
                        if (!isOctalDigit(char)) {
                            // if the char is a non punctuator then its not a valid number
                            if (!this.isPunctuator(char)) {
                                return null;
                            }
                            break;
                        }
                        value += char;
                        index += 1;
                    }
                    if (index < length) {
                        char = this.peek(index);
                        if (isIdentifierStart(char)) {
                            return null;
                        }
                    }
                    return {
                        type: 'number',
                        value: value,
                        base: 8,
                        isMalformed: bad,
                    };
                }
                // Decimal numbers that start with '0' such as '09' are illegal
                // but we still parse them and return as malformed.
                if (isDecimalDigit(char)) {
                    index += 1;
                    value += char;
                }
            }
            while (index < length) {
                char = this.peek(index);
                if (!isDecimalDigit(char)) {
                    break;
                }
                value += char;
                index += 1;
            }
        }
        // Decimal digits.
        if (char === '.') {
            value += char;
            index += 1;
            while (index < length) {
                char = this.peek(index);
                if (!isDecimalDigit(char)) {
                    break;
                }
                value += char;
                index += 1;
            }
        }
        // Exponent part.
        if (char === 'e' || char === 'E') {
            value += char;
            index += 1;
            char = this.peek(index);
            if (char === '+' || char === '-') {
                value += this.peek(index);
                index += 1;
            }
            char = this.peek(index);
            if (isDecimalDigit(char)) {
                value += char;
                index += 1;
                while (index < length) {
                    char = this.peek(index);
                    if (!isDecimalDigit(char)) {
                        break;
                    }
                    value += char;
                    index += 1;
                }
            }
            else {
                return null;
            }
        }
        if (index < length) {
            char = this.peek(index);
            if (!this.isPunctuator(char)) {
                return null;
            }
        }
        return {
            type: 'number',
            value: value,
            base: 10,
            pos: this.char,
            isMalformed: !isFinite(+value),
        };
    },
    isPunctuator: function (ch1) {
        switch (ch1) {
            case '.':
            case '(':
            case ')':
            case ',':
            case '{':
            case '}':
                return true;
        }
        return false;
    },
    scanPunctuator: function () {
        var ch1 = this.peek();
        if (this.isPunctuator(ch1)) {
            return {
                type: ch1,
                value: ch1,
                pos: this.char,
            };
        }
        return null;
    },
    /*
     * Extract a string out of the next sequence of characters and/or
     * lines or return 'null' if its not possible. Since strings can
     * span across multiple lines this method has to move the char
     * pointer.
     *
     * This method recognizes pseudo-multiline JavaScript strings:
     *
     *   var str = "hello\
     *   world";
     */
    scanStringLiteral: function () {
        /*jshint loopfunc:true */
        var quote = this.peek();
        // String must start with a quote.
        if (quote !== '"' && quote !== "'") {
            return null;
        }
        var value = '';
        this.skip();
        while (this.peek() !== quote) {
            if (this.peek() === '') {
                // End Of Line
                return {
                    type: 'string',
                    value: value,
                    isUnclosed: true,
                    quote: quote,
                    pos: this.char,
                };
            }
            var char = this.peek();
            var jump = 1; // A length of a jump, after we're done
            // parsing this character.
            value += char;
            this.skip(jump);
        }
        this.skip();
        return {
            type: 'string',
            value: value,
            isUnclosed: false,
            quote: quote,
            pos: this.char,
        };
    },
};


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/module.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/module.ts ***!
  \**********************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return AnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/graphite/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["GraphiteDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/graphite/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["GraphiteQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/graphite/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["GraphiteConfigCtrl"]; });




var AnnotationsQueryCtrl = /** @class */ (function () {
    function AnnotationsQueryCtrl() {
    }
    AnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return AnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/graphite/parser.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/parser.ts ***!
  \**********************************************************/
/*! exports provided: Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Parser", function() { return Parser; });
/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lexer */ "./public/app/plugins/datasource/graphite/lexer.ts");

function Parser(expression) {
    this.expression = expression;
    this.lexer = new _lexer__WEBPACK_IMPORTED_MODULE_0__["Lexer"](expression);
    this.tokens = this.lexer.tokenize();
    this.index = 0;
}
Parser.prototype = {
    getAst: function () {
        return this.start();
    },
    start: function () {
        try {
            return this.functionCall() || this.metricExpression();
        }
        catch (e) {
            return {
                type: 'error',
                message: e.message,
                pos: e.pos,
            };
        }
    },
    curlyBraceSegment: function () {
        if (this.match('identifier', '{') || this.match('{')) {
            var curlySegment = '';
            while (!this.match('') && !this.match('}')) {
                curlySegment += this.consumeToken().value;
            }
            if (!this.match('}')) {
                this.errorMark("Expected closing '}'");
            }
            curlySegment += this.consumeToken().value;
            // if curly segment is directly followed by identifier
            // include it in the segment
            if (this.match('identifier')) {
                curlySegment += this.consumeToken().value;
            }
            return {
                type: 'segment',
                value: curlySegment,
            };
        }
        else {
            return null;
        }
    },
    metricSegment: function () {
        var curly = this.curlyBraceSegment();
        if (curly) {
            return curly;
        }
        if (this.match('identifier') || this.match('number')) {
            // hack to handle float numbers in metric segments
            var parts = this.consumeToken().value.split('.');
            if (parts.length === 2) {
                this.tokens.splice(this.index, 0, { type: '.' });
                this.tokens.splice(this.index + 1, 0, {
                    type: 'number',
                    value: parts[1],
                });
            }
            return {
                type: 'segment',
                value: parts[0],
            };
        }
        if (!this.match('templateStart')) {
            this.errorMark('Expected metric identifier');
        }
        this.consumeToken();
        if (!this.match('identifier')) {
            this.errorMark('Expected identifier after templateStart');
        }
        var node = {
            type: 'template',
            value: this.consumeToken().value,
        };
        if (!this.match('templateEnd')) {
            this.errorMark('Expected templateEnd');
        }
        this.consumeToken();
        return node;
    },
    metricExpression: function () {
        if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {
            return null;
        }
        var node = {
            type: 'metric',
            segments: [],
        };
        node.segments.push(this.metricSegment());
        while (this.match('.')) {
            this.consumeToken();
            var segment = this.metricSegment();
            if (!segment) {
                this.errorMark('Expected metric identifier');
            }
            node.segments.push(segment);
        }
        return node;
    },
    functionCall: function () {
        if (!this.match('identifier', '(')) {
            return null;
        }
        var node = {
            type: 'function',
            name: this.consumeToken().value,
        };
        // consume left parenthesis
        this.consumeToken();
        node.params = this.functionParameters();
        if (!this.match(')')) {
            this.errorMark('Expected closing parenthesis');
        }
        this.consumeToken();
        return node;
    },
    boolExpression: function () {
        if (!this.match('bool')) {
            return null;
        }
        return {
            type: 'bool',
            value: this.consumeToken().value === 'true',
        };
    },
    functionParameters: function () {
        if (this.match(')') || this.match('')) {
            return [];
        }
        var param = this.functionCall() ||
            this.numericLiteral() ||
            this.seriesRefExpression() ||
            this.boolExpression() ||
            this.metricExpression() ||
            this.stringLiteral();
        if (!this.match(',')) {
            return [param];
        }
        this.consumeToken();
        return [param].concat(this.functionParameters());
    },
    seriesRefExpression: function () {
        if (!this.match('identifier')) {
            return null;
        }
        var value = this.tokens[this.index].value;
        if (!value.match(/\#[A-Z]/)) {
            return null;
        }
        var token = this.consumeToken();
        return {
            type: 'series-ref',
            value: token.value,
        };
    },
    numericLiteral: function () {
        if (!this.match('number')) {
            return null;
        }
        return {
            type: 'number',
            value: parseFloat(this.consumeToken().value),
        };
    },
    stringLiteral: function () {
        if (!this.match('string')) {
            return null;
        }
        var token = this.consumeToken();
        if (token.isUnclosed) {
            throw { message: 'Unclosed string parameter', pos: token.pos };
        }
        return {
            type: 'string',
            value: token.value,
        };
    },
    errorMark: function (text) {
        var currentToken = this.tokens[this.index];
        var type = currentToken ? currentToken.type : 'end of string';
        throw {
            message: text + ' instead found ' + type,
            pos: currentToken ? currentToken.pos : this.lexer.char,
        };
    },
    // returns token value and incre
    consumeToken: function () {
        this.index++;
        return this.tokens[this.index - 1];
    },
    matchToken: function (type, index) {
        var token = this.tokens[this.index + index];
        return (token === undefined && type === '') || (token && token.type === type);
    },
    match: function (token1, token2) {
        return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));
    },
};


/***/ }),

/***/ "./public/app/plugins/datasource/graphite/query_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/graphite/query_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: GraphiteQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphiteQueryCtrl", function() { return GraphiteQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _add_graphite_func__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add_graphite_func */ "./public/app/plugins/datasource/graphite/add_graphite_func.ts");
/* harmony import */ var _func_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./func_editor */ "./public/app/plugins/datasource/graphite/func_editor.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _graphite_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./graphite_query */ "./public/app/plugins/datasource/graphite/graphite_query.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");







var GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];
var TAG_PREFIX = 'tag: ';
var GraphiteQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GraphiteQueryCtrl, _super);
    /** @ngInject */
    function GraphiteQueryCtrl($scope, $injector, uiSegmentSrv, templateSrv, $timeout) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.uiSegmentSrv = uiSegmentSrv;
        _this.templateSrv = templateSrv;
        _this.supportsTags = _this.datasource.supportsTags;
        _this.paused = false;
        _this.target.target = _this.target.target || '';
        _this.datasource.waitForFuncDefsLoaded().then(function () {
            _this.queryModel = new _graphite_query__WEBPACK_IMPORTED_MODULE_4__["default"](_this.datasource, _this.target, templateSrv);
            _this.buildSegments();
        });
        _this.removeTagValue = '-- remove tag --';
        return _this;
    }
    GraphiteQueryCtrl.prototype.parseTarget = function () {
        this.queryModel.parseTarget();
        this.buildSegments();
    };
    GraphiteQueryCtrl.prototype.toggleEditorMode = function () {
        this.target.textEditor = !this.target.textEditor;
        this.parseTarget();
    };
    GraphiteQueryCtrl.prototype.buildSegments = function () {
        var _this = this;
        this.segments = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(this.queryModel.segments, function (segment) {
            return _this.uiSegmentSrv.newSegment(segment);
        });
        var checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;
        this.checkOtherSegments(checkOtherSegmentsIndex);
        if (this.queryModel.seriesByTagUsed) {
            this.fixTagSegments();
        }
    };
    GraphiteQueryCtrl.prototype.addSelectMetricSegment = function () {
        this.queryModel.addSelectMetricSegment();
        this.segments.push(this.uiSegmentSrv.newSelectMetric());
    };
    GraphiteQueryCtrl.prototype.checkOtherSegments = function (fromIndex) {
        var _this = this;
        if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {
            return;
        }
        if (fromIndex === 0) {
            this.addSelectMetricSegment();
            return;
        }
        var path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);
        if (path === '') {
            return Promise.resolve();
        }
        return this.datasource
            .metricFindQuery(path)
            .then(function (segments) {
            if (segments.length === 0) {
                if (path !== '') {
                    _this.queryModel.segments = _this.queryModel.segments.splice(0, fromIndex);
                    _this.segments = _this.segments.splice(0, fromIndex);
                    _this.addSelectMetricSegment();
                }
            }
            else if (segments[0].expandable) {
                if (_this.segments.length === fromIndex) {
                    _this.addSelectMetricSegment();
                }
                else {
                    return _this.checkOtherSegments(fromIndex + 1);
                }
            }
        })
            .catch(function (err) {
            app_core_app_events__WEBPACK_IMPORTED_MODULE_6__["default"].emit('alert-error', ['Error', err]);
        });
    };
    GraphiteQueryCtrl.prototype.setSegmentFocus = function (segmentIndex) {
        lodash__WEBPACK_IMPORTED_MODULE_3___default.a.each(this.segments, function (segment, index) {
            segment.focus = segmentIndex === index;
        });
    };
    GraphiteQueryCtrl.prototype.getAltSegments = function (index, prefix) {
        var _this = this;
        var query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';
        if (index > 0) {
            query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;
        }
        var options = {
            range: this.panelCtrl.range,
            requestId: 'get-alt-segments',
        };
        return this.datasource
            .metricFindQuery(query, options)
            .then(function (segments) {
            var altSegments = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(segments, function (segment) {
                return _this.uiSegmentSrv.newSegment({
                    value: segment.text,
                    expandable: segment.expandable,
                });
            });
            if (index > 0 && altSegments.length === 0) {
                return altSegments;
            }
            // add query references
            if (index === 0) {
                lodash__WEBPACK_IMPORTED_MODULE_3___default.a.eachRight(_this.panelCtrl.panel.targets, function (target) {
                    if (target.refId === _this.queryModel.target.refId) {
                        return;
                    }
                    altSegments.unshift(_this.uiSegmentSrv.newSegment({
                        type: 'series-ref',
                        value: '#' + target.refId,
                        expandable: false,
                    }));
                });
            }
            // add template variables
            lodash__WEBPACK_IMPORTED_MODULE_3___default.a.eachRight(_this.templateSrv.variables, function (variable) {
                altSegments.unshift(_this.uiSegmentSrv.newSegment({
                    type: 'template',
                    value: '$' + variable.name,
                    expandable: true,
                }));
            });
            // add wildcard option
            altSegments.unshift(_this.uiSegmentSrv.newSegment('*'));
            if (_this.supportsTags && index === 0) {
                _this.removeTaggedEntry(altSegments);
                return _this.addAltTagSegments(prefix, altSegments);
            }
            else {
                return altSegments;
            }
        })
            .catch(function (err) {
            return [];
        });
    };
    GraphiteQueryCtrl.prototype.addAltTagSegments = function (prefix, altSegments) {
        return this.getTagsAsSegments(prefix).then(function (tagSegments) {
            tagSegments = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(tagSegments, function (segment) {
                segment.value = TAG_PREFIX + segment.value;
                return segment;
            });
            return altSegments.concat.apply(altSegments, tagSegments);
        });
    };
    GraphiteQueryCtrl.prototype.removeTaggedEntry = function (altSegments) {
        altSegments = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.remove(altSegments, function (s) { return s.value === '_tagged'; });
    };
    GraphiteQueryCtrl.prototype.segmentValueChanged = function (segment, segmentIndex) {
        var _this = this;
        this.error = null;
        this.queryModel.updateSegmentValue(segment, segmentIndex);
        if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {
            this.queryModel.functions = [];
        }
        if (segment.type === 'tag') {
            var tag = removeTagPrefix(segment.value);
            this.pause();
            this.addSeriesByTagFunc(tag);
            return;
        }
        if (segment.expandable) {
            return this.checkOtherSegments(segmentIndex + 1).then(function () {
                _this.setSegmentFocus(segmentIndex + 1);
                _this.targetChanged();
            });
        }
        else {
            this.spliceSegments(segmentIndex + 1);
        }
        this.setSegmentFocus(segmentIndex + 1);
        this.targetChanged();
    };
    GraphiteQueryCtrl.prototype.spliceSegments = function (index) {
        this.segments = this.segments.splice(0, index);
        this.queryModel.segments = this.queryModel.segments.splice(0, index);
    };
    GraphiteQueryCtrl.prototype.emptySegments = function () {
        this.queryModel.segments = [];
        this.segments = [];
    };
    GraphiteQueryCtrl.prototype.targetTextChanged = function () {
        this.updateModelTarget();
        this.refresh();
    };
    GraphiteQueryCtrl.prototype.updateModelTarget = function () {
        this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);
    };
    GraphiteQueryCtrl.prototype.targetChanged = function () {
        if (this.queryModel.error) {
            return;
        }
        var oldTarget = this.queryModel.target.target;
        this.updateModelTarget();
        if (this.queryModel.target !== oldTarget && !this.paused) {
            this.panelCtrl.refresh();
        }
    };
    GraphiteQueryCtrl.prototype.addFunction = function (funcDef) {
        var newFunc = this.datasource.createFuncInstance(funcDef, {
            withDefaultParams: true,
        });
        newFunc.added = true;
        this.queryModel.addFunction(newFunc);
        this.smartlyHandleNewAliasByNode(newFunc);
        if (this.segments.length === 1 && this.segments[0].fake) {
            this.emptySegments();
        }
        if (!newFunc.params.length && newFunc.added) {
            this.targetChanged();
        }
        if (newFunc.def.name === 'seriesByTag') {
            this.parseTarget();
        }
    };
    GraphiteQueryCtrl.prototype.removeFunction = function (func) {
        this.queryModel.removeFunction(func);
        this.targetChanged();
    };
    GraphiteQueryCtrl.prototype.addSeriesByTagFunc = function (tag) {
        var newFunc = this.datasource.createFuncInstance('seriesByTag', {
            withDefaultParams: false,
        });
        var tagParam = tag + "=";
        newFunc.params = [tagParam];
        this.queryModel.addFunction(newFunc);
        newFunc.added = true;
        this.emptySegments();
        this.targetChanged();
        this.parseTarget();
    };
    GraphiteQueryCtrl.prototype.smartlyHandleNewAliasByNode = function (func) {
        if (func.def.name !== 'aliasByNode') {
            return;
        }
        for (var i = 0; i < this.segments.length; i++) {
            if (this.segments[i].value.indexOf('*') >= 0) {
                func.params[0] = i;
                func.added = false;
                this.targetChanged();
                return;
            }
        }
    };
    GraphiteQueryCtrl.prototype.getAllTags = function () {
        var _this = this;
        return this.datasource.getTags().then(function (values) {
            var altTags = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(values, 'text');
            altTags.splice(0, 0, _this.removeTagValue);
            return mapToDropdownOptions(altTags);
        });
    };
    GraphiteQueryCtrl.prototype.getTags = function (index, tagPrefix) {
        var _this = this;
        var tagExpressions = this.queryModel.renderTagExpressions(index);
        return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(function (values) {
            var altTags = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(values, 'text');
            altTags.splice(0, 0, _this.removeTagValue);
            return mapToDropdownOptions(altTags);
        });
    };
    GraphiteQueryCtrl.prototype.getTagsAsSegments = function (tagPrefix) {
        var _this = this;
        var tagExpressions = this.queryModel.renderTagExpressions();
        return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(function (values) {
            return lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(values, function (val) {
                return _this.uiSegmentSrv.newSegment({
                    value: val.text,
                    type: 'tag',
                    expandable: false,
                });
            });
        });
    };
    GraphiteQueryCtrl.prototype.getTagOperators = function () {
        return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);
    };
    GraphiteQueryCtrl.prototype.getAllTagValues = function (tag) {
        var tagKey = tag.key;
        return this.datasource.getTagValues(tagKey).then(function (values) {
            var altValues = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(values, 'text');
            return mapToDropdownOptions(altValues);
        });
    };
    GraphiteQueryCtrl.prototype.getTagValues = function (tag, index, valuePrefix) {
        var _this = this;
        var tagExpressions = this.queryModel.renderTagExpressions(index);
        var tagKey = tag.key;
        return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then(function (values) {
            var altValues = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(values, 'text');
            // Add template variables as additional values
            lodash__WEBPACK_IMPORTED_MODULE_3___default.a.eachRight(_this.templateSrv.variables, function (variable) {
                altValues.push('${' + variable.name + ':regex}');
            });
            return mapToDropdownOptions(altValues);
        });
    };
    GraphiteQueryCtrl.prototype.tagChanged = function (tag, tagIndex) {
        this.queryModel.updateTag(tag, tagIndex);
        this.targetChanged();
    };
    GraphiteQueryCtrl.prototype.addNewTag = function (segment) {
        var newTagKey = segment.value;
        var newTag = { key: newTagKey, operator: '=', value: '' };
        this.queryModel.addTag(newTag);
        this.targetChanged();
        this.fixTagSegments();
    };
    GraphiteQueryCtrl.prototype.removeTag = function (index) {
        this.queryModel.removeTag(index);
        this.targetChanged();
    };
    GraphiteQueryCtrl.prototype.fixTagSegments = function () {
        // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)
        this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];
    };
    GraphiteQueryCtrl.prototype.showDelimiter = function (index) {
        return index !== this.queryModel.tags.length - 1;
    };
    GraphiteQueryCtrl.prototype.pause = function () {
        this.paused = true;
    };
    GraphiteQueryCtrl.prototype.unpause = function () {
        this.paused = false;
        this.panelCtrl.refresh();
    };
    GraphiteQueryCtrl.templateUrl = 'partials/query.editor.html';
    return GraphiteQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_5__["QueryCtrl"]));

function mapToDropdownOptions(results) {
    return lodash__WEBPACK_IMPORTED_MODULE_3___default.a.map(results, function (value) {
        return { text: value, value: value };
    });
}
function removeTagPrefix(value) {
    return value.replace(TAG_PREFIX, '');
}


/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/datasource.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/datasource.ts ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var _influx_series__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./influx_series */ "./public/app/plugins/datasource/influxdb/influx_series.ts");
/* harmony import */ var _influx_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./influx_query */ "./public/app/plugins/datasource/influxdb/influx_query.ts");
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./response_parser */ "./public/app/plugins/datasource/influxdb/response_parser.ts");
/* harmony import */ var _query_builder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_builder */ "./public/app/plugins/datasource/influxdb/query_builder.ts");






var InfluxDatasource = /** @class */ (function () {
    /** @ngInject */
    function InfluxDatasource(instanceSettings, $q, backendSrv, templateSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.type = 'influxdb';
        this.urls = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(instanceSettings.url.split(','), function (url) {
            return url.trim();
        });
        this.username = instanceSettings.username;
        this.password = instanceSettings.password;
        this.name = instanceSettings.name;
        this.database = instanceSettings.database;
        this.basicAuth = instanceSettings.basicAuth;
        this.withCredentials = instanceSettings.withCredentials;
        this.interval = (instanceSettings.jsonData || {}).timeInterval;
        this.responseParser = new _response_parser__WEBPACK_IMPORTED_MODULE_4__["default"]();
    }
    InfluxDatasource.prototype.query = function (options) {
        var _this = this;
        var timeFilter = this.getTimeFilter(options);
        var scopedVars = options.scopedVars;
        var targets = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(options.targets);
        var queryTargets = [];
        var queryModel;
        var i, y;
        var allQueries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(targets, function (target) {
            if (target.hide) {
                return '';
            }
            queryTargets.push(target);
            // backward compatibility
            scopedVars.interval = scopedVars.__interval;
            queryModel = new _influx_query__WEBPACK_IMPORTED_MODULE_3__["default"](target, _this.templateSrv, scopedVars);
            return queryModel.render(true);
        }).reduce(function (acc, current) {
            if (current !== '') {
                acc += ';' + current;
            }
            return acc;
        });
        if (allQueries === '') {
            return this.$q.when({ data: [] });
        }
        // add global adhoc filters to timeFilter
        var adhocFilters = this.templateSrv.getAdhocFilters(this.name);
        if (adhocFilters.length > 0) {
            timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);
        }
        // replace grafana variables
        scopedVars.timeFilter = { value: timeFilter };
        // replace templated variables
        allQueries = this.templateSrv.replace(allQueries, scopedVars);
        return this._seriesQuery(allQueries, options).then(function (data) {
            if (!data || !data.results) {
                return [];
            }
            var seriesList = [];
            for (i = 0; i < data.results.length; i++) {
                var result = data.results[i];
                if (!result || !result.series) {
                    continue;
                }
                var target = queryTargets[i];
                var alias = target.alias;
                if (alias) {
                    alias = _this.templateSrv.replace(target.alias, options.scopedVars);
                }
                var influxSeries = new _influx_series__WEBPACK_IMPORTED_MODULE_2__["default"]({
                    series: data.results[i].series,
                    alias: alias,
                });
                switch (target.resultFormat) {
                    case 'table': {
                        seriesList.push(influxSeries.getTable());
                        break;
                    }
                    default: {
                        var timeSeries = influxSeries.getTimeSeries();
                        for (y = 0; y < timeSeries.length; y++) {
                            seriesList.push(timeSeries[y]);
                        }
                        break;
                    }
                }
            }
            return { data: seriesList };
        });
    };
    InfluxDatasource.prototype.annotationQuery = function (options) {
        if (!options.annotation.query) {
            return this.$q.reject({
                message: 'Query missing in annotation definition',
            });
        }
        var timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });
        var query = options.annotation.query.replace('$timeFilter', timeFilter);
        query = this.templateSrv.replace(query, null, 'regex');
        return this._seriesQuery(query, options).then(function (data) {
            if (!data || !data.results || !data.results[0]) {
                throw { message: 'No results in response from InfluxDB' };
            }
            return new _influx_series__WEBPACK_IMPORTED_MODULE_2__["default"]({
                series: data.results[0].series,
                annotation: options.annotation,
            }).getAnnotations();
        });
    };
    InfluxDatasource.prototype.targetContainsTemplate = function (target) {
        for (var _i = 0, _a = target.groupBy; _i < _a.length; _i++) {
            var group = _a[_i];
            for (var _b = 0, _c = group.params; _b < _c.length; _b++) {
                var param = _c[_b];
                if (this.templateSrv.variableExists(param)) {
                    return true;
                }
            }
        }
        for (var i in target.tags) {
            if (this.templateSrv.variableExists(target.tags[i].value)) {
                return true;
            }
        }
        return false;
    };
    InfluxDatasource.prototype.metricFindQuery = function (query, options) {
        var interpolated = this.templateSrv.replace(query, null, 'regex');
        return this._seriesQuery(interpolated, options).then(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.curry(this.responseParser.parse)(query));
    };
    InfluxDatasource.prototype.getTagKeys = function (options) {
        var queryBuilder = new _query_builder__WEBPACK_IMPORTED_MODULE_5__["InfluxQueryBuilder"]({ measurement: '', tags: [] }, this.database);
        var query = queryBuilder.buildExploreQuery('TAG_KEYS');
        return this.metricFindQuery(query, options);
    };
    InfluxDatasource.prototype.getTagValues = function (options) {
        var queryBuilder = new _query_builder__WEBPACK_IMPORTED_MODULE_5__["InfluxQueryBuilder"]({ measurement: '', tags: [] }, this.database);
        var query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);
        return this.metricFindQuery(query, options);
    };
    InfluxDatasource.prototype._seriesQuery = function (query, options) {
        if (!query) {
            return this.$q.when({ results: [] });
        }
        if (options && options.range) {
            var timeFilter = this.getTimeFilter({ rangeRaw: options.range });
            query = query.replace('$timeFilter', timeFilter);
        }
        return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' }, options);
    };
    InfluxDatasource.prototype.serializeParams = function (params) {
        if (!params) {
            return '';
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reduce(params, function (memo, value, key) {
            if (value === null || value === undefined) {
                return memo;
            }
            memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            return memo;
        }, []).join('&');
    };
    InfluxDatasource.prototype.testDatasource = function () {
        var queryBuilder = new _query_builder__WEBPACK_IMPORTED_MODULE_5__["InfluxQueryBuilder"]({ measurement: '', tags: [] }, this.database);
        var query = queryBuilder.buildExploreQuery('RETENTION POLICIES');
        return this._seriesQuery(query)
            .then(function (res) {
            var error = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(res, 'results[0].error');
            if (error) {
                return { status: 'error', message: error };
            }
            return { status: 'success', message: 'Data source is working' };
        })
            .catch(function (err) {
            return { status: 'error', message: err.message };
        });
    };
    InfluxDatasource.prototype._influxRequest = function (method, url, data, options) {
        var currentUrl = this.urls.shift();
        this.urls.push(currentUrl);
        var params = {};
        if (this.username) {
            params.u = this.username;
            params.p = this.password;
        }
        if (options && options.database) {
            params.db = options.database;
        }
        else if (this.database) {
            params.db = this.database;
        }
        if (method === 'GET') {
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.extend(params, data);
            data = null;
        }
        var req = {
            method: method,
            url: currentUrl + url,
            params: params,
            data: data,
            precision: 'ms',
            inspect: { type: 'influxdb' },
            paramSerializer: this.serializeParams,
        };
        req.headers = req.headers || {};
        if (this.basicAuth || this.withCredentials) {
            req.withCredentials = true;
        }
        if (this.basicAuth) {
            req.headers.Authorization = this.basicAuth;
        }
        return this.backendSrv.datasourceRequest(req).then(function (result) {
            return result.data;
        }, function (err) {
            if (err.status !== 0 || err.status >= 300) {
                if (err.data && err.data.error) {
                    throw {
                        message: 'InfluxDB Error: ' + err.data.error,
                        data: err.data,
                        config: err.config,
                    };
                }
                else {
                    throw {
                        message: 'Network Error: ' + err.statusText + '(' + err.status + ')',
                        data: err.data,
                        config: err.config,
                    };
                }
            }
        });
    };
    InfluxDatasource.prototype.getTimeFilter = function (options) {
        var from = this.getInfluxTime(options.rangeRaw.from, false);
        var until = this.getInfluxTime(options.rangeRaw.to, true);
        var fromIsAbsolute = from[from.length - 1] === 'ms';
        if (until === 'now()' && !fromIsAbsolute) {
            return 'time >= ' + from;
        }
        return 'time >= ' + from + ' and time <= ' + until;
    };
    InfluxDatasource.prototype.getInfluxTime = function (date, roundUp) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(date)) {
            if (date === 'now') {
                return 'now()';
            }
            var parts = /^now-(\d+)([d|h|m|s])$/.exec(date);
            if (parts) {
                var amount = parseInt(parts[1], 10);
                var unit = parts[2];
                return 'now() - ' + amount + unit;
            }
            date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_1__["parse"](date, roundUp);
        }
        return date.valueOf() + 'ms';
    };
    return InfluxDatasource;
}());
/* harmony default export */ __webpack_exports__["default"] = (InfluxDatasource);


/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/influx_query.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/influx_query.ts ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _query_part__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_part */ "./public/app/plugins/datasource/influxdb/query_part.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");



var InfluxQuery = /** @class */ (function () {
    /** @ngInject */
    function InfluxQuery(target, templateSrv, scopedVars) {
        this.target = target;
        this.templateSrv = templateSrv;
        this.scopedVars = scopedVars;
        target.policy = target.policy || 'default';
        target.resultFormat = target.resultFormat || 'time_series';
        target.orderByTime = target.orderByTime || 'ASC';
        target.tags = target.tags || [];
        target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];
        target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'mean', params: [] }]];
        this.updateProjection();
    }
    InfluxQuery.prototype.updateProjection = function () {
        this.selectModels = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.target.select, function (parts) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(parts, _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].create);
        });
        this.groupByParts = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.target.groupBy, _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].create);
    };
    InfluxQuery.prototype.updatePersistedParts = function () {
        this.target.select = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.selectModels, function (selectParts) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(selectParts, function (part) {
                return { type: part.def.type, params: part.params };
            });
        });
    };
    InfluxQuery.prototype.hasGroupByTime = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.target.groupBy, function (g) { return g.type === 'time'; });
    };
    InfluxQuery.prototype.hasFill = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.target.groupBy, function (g) { return g.type === 'fill'; });
    };
    InfluxQuery.prototype.addGroupBy = function (value) {
        var stringParts = value.match(/^(\w+)\((.*)\)$/);
        var typePart = stringParts[1];
        var arg = stringParts[2];
        var partModel = _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].create({ type: typePart, params: [arg] });
        var partCount = this.target.groupBy.length;
        if (partCount === 0) {
            this.target.groupBy.push(partModel.part);
        }
        else if (typePart === 'time') {
            this.target.groupBy.splice(0, 0, partModel.part);
        }
        else if (typePart === 'tag') {
            if (this.target.groupBy[partCount - 1].type === 'fill') {
                this.target.groupBy.splice(partCount - 1, 0, partModel.part);
            }
            else {
                this.target.groupBy.push(partModel.part);
            }
        }
        else {
            this.target.groupBy.push(partModel.part);
        }
        this.updateProjection();
    };
    InfluxQuery.prototype.removeGroupByPart = function (part, index) {
        var categories = _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].getCategories();
        if (part.def.type === 'time') {
            // remove fill
            this.target.groupBy = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(this.target.groupBy, function (g) { return g.type !== 'fill'; });
            // remove aggregations
            this.target.select = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.target.select, function (s) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(s, function (part) {
                    var partModel = _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].create(part);
                    if (partModel.def.category === categories.Aggregations) {
                        return false;
                    }
                    if (partModel.def.category === categories.Selectors) {
                        return false;
                    }
                    return true;
                });
            });
        }
        this.target.groupBy.splice(index, 1);
        this.updateProjection();
    };
    InfluxQuery.prototype.removeSelect = function (index) {
        this.target.select.splice(index, 1);
        this.updateProjection();
    };
    InfluxQuery.prototype.removeSelectPart = function (selectParts, part) {
        // if we remove the field remove the whole statement
        if (part.def.type === 'field') {
            if (this.selectModels.length > 1) {
                var modelsIndex = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(this.selectModels, selectParts);
                this.selectModels.splice(modelsIndex, 1);
            }
        }
        else {
            var partIndex = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(selectParts, part);
            selectParts.splice(partIndex, 1);
        }
        this.updatePersistedParts();
    };
    InfluxQuery.prototype.addSelectPart = function (selectParts, type) {
        var partModel = _query_part__WEBPACK_IMPORTED_MODULE_1__["default"].create({ type: type });
        partModel.def.addStrategy(selectParts, partModel, this);
        this.updatePersistedParts();
    };
    InfluxQuery.prototype.renderTagCondition = function (tag, index, interpolate) {
        var str = '';
        var operator = tag.operator;
        var value = tag.value;
        if (index > 0) {
            str = (tag.condition || 'AND') + ' ';
        }
        if (!operator) {
            if (/^\/.*\/$/.test(value)) {
                operator = '=~';
            }
            else {
                operator = '=';
            }
        }
        // quote value unless regex
        if (operator !== '=~' && operator !== '!~') {
            if (interpolate) {
                value = this.templateSrv.replace(value, this.scopedVars);
            }
            if (operator !== '>' && operator !== '<') {
                value = "'" + value.replace(/\\/g, '\\\\') + "'";
            }
        }
        else if (interpolate) {
            value = this.templateSrv.replace(value, this.scopedVars, 'regex');
        }
        return str + '"' + tag.key + '" ' + operator + ' ' + value;
    };
    InfluxQuery.prototype.getMeasurementAndPolicy = function (interpolate) {
        var policy = this.target.policy;
        var measurement = this.target.measurement || 'measurement';
        if (!measurement.match('^/.*/$')) {
            measurement = '"' + measurement + '"';
        }
        else if (interpolate) {
            measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');
        }
        if (policy !== 'default') {
            policy = '"' + this.target.policy + '".';
        }
        else {
            policy = '';
        }
        return policy + measurement;
    };
    InfluxQuery.prototype.interpolateQueryStr = function (value, variable, defaultFormatFn) {
        // if no multi or include all do not regexEscape
        if (!variable.multi && !variable.includeAll) {
            return value;
        }
        if (typeof value === 'string') {
            return app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].regexEscape(value);
        }
        var escapedValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(value, app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].regexEscape);
        return '(' + escapedValues.join('|') + ')';
    };
    InfluxQuery.prototype.render = function (interpolate) {
        var _this = this;
        var target = this.target;
        if (target.rawQuery) {
            if (interpolate) {
                return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);
            }
            else {
                return target.query;
            }
        }
        var query = 'SELECT ';
        var i, y;
        for (i = 0; i < this.selectModels.length; i++) {
            var parts = this.selectModels[i];
            var selectText = '';
            for (y = 0; y < parts.length; y++) {
                var part = parts[y];
                selectText = part.render(selectText);
            }
            if (i > 0) {
                query += ', ';
            }
            query += selectText;
        }
        query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';
        var conditions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(target.tags, function (tag, index) {
            return _this.renderTagCondition(tag, index, interpolate);
        });
        if (conditions.length > 0) {
            query += '(' + conditions.join(' ') + ') AND ';
        }
        query += '$timeFilter';
        var groupBySection = '';
        for (i = 0; i < this.groupByParts.length; i++) {
            var part = this.groupByParts[i];
            if (i > 0) {
                // for some reason fill has no separator
                groupBySection += part.def.type === 'fill' ? ' ' : ', ';
            }
            groupBySection += part.render('');
        }
        if (groupBySection.length) {
            query += ' GROUP BY ' + groupBySection;
        }
        if (target.fill) {
            query += ' fill(' + target.fill + ')';
        }
        if (target.orderByTime === 'DESC') {
            query += ' ORDER BY time DESC';
        }
        if (target.limit) {
            query += ' LIMIT ' + target.limit;
        }
        if (target.slimit) {
            query += ' SLIMIT ' + target.slimit;
        }
        return query;
    };
    InfluxQuery.prototype.renderAdhocFilters = function (filters) {
        var _this = this;
        var conditions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(filters, function (tag, index) {
            return _this.renderTagCondition(tag, index, false);
        });
        return conditions.join(' ');
    };
    return InfluxQuery;
}());
/* harmony default export */ __webpack_exports__["default"] = (InfluxQuery);


/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/influx_series.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/influx_series.ts ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_table_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/table_model */ "./public/app/core/table_model.ts");


var InfluxSeries = /** @class */ (function () {
    function InfluxSeries(options) {
        this.series = options.series;
        this.alias = options.alias;
        this.annotation = options.annotation;
    }
    InfluxSeries.prototype.getTimeSeries = function () {
        var _this = this;
        var output = [];
        var i, j;
        if (this.series.length === 0) {
            return output;
        }
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.series, function (series) {
            var columns = series.columns.length;
            var tags = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(series.tags, function (value, key) {
                return key + ': ' + value;
            });
            for (j = 1; j < columns; j++) {
                var seriesName = series.name;
                var columnName = series.columns[j];
                if (columnName !== 'value') {
                    seriesName = seriesName + '.' + columnName;
                }
                if (_this.alias) {
                    seriesName = _this._getSeriesName(series, j);
                }
                else if (series.tags) {
                    seriesName = seriesName + ' {' + tags.join(', ') + '}';
                }
                var datapoints = [];
                if (series.values) {
                    for (i = 0; i < series.values.length; i++) {
                        datapoints[i] = [series.values[i][j], series.values[i][0]];
                    }
                }
                output.push({ target: seriesName, datapoints: datapoints });
            }
        });
        return output;
    };
    InfluxSeries.prototype._getSeriesName = function (series, index) {
        var regex = /\$(\w+)|\[\[([\s\S]+?)\]\]/g;
        var segments = series.name.split('.');
        return this.alias.replace(regex, function (match, g1, g2) {
            var group = g1 || g2;
            var segIndex = parseInt(group, 10);
            if (group === 'm' || group === 'measurement') {
                return series.name;
            }
            if (group === 'col') {
                return series.columns[index];
            }
            if (!isNaN(segIndex)) {
                return segments[segIndex];
            }
            if (group.indexOf('tag_') !== 0) {
                return match;
            }
            var tag = group.replace('tag_', '');
            if (!series.tags) {
                return match;
            }
            return series.tags[tag];
        });
    };
    InfluxSeries.prototype.getAnnotations = function () {
        var _this = this;
        var list = [];
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.series, function (series) {
            var titleCol = null;
            var timeCol = null;
            var tagsCol = [];
            var textCol = null;
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(series.columns, function (column, index) {
                if (column === 'time') {
                    timeCol = index;
                    return;
                }
                if (column === 'sequence_number') {
                    return;
                }
                if (!titleCol) {
                    titleCol = index;
                }
                if (column === _this.annotation.titleColumn) {
                    titleCol = index;
                    return;
                }
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.includes((_this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {
                    tagsCol.push(index);
                    return;
                }
                if (column === _this.annotation.textColumn) {
                    textCol = index;
                    return;
                }
            });
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(series.values, function (value) {
                var data = {
                    annotation: _this.annotation,
                    time: +new Date(value[timeCol]),
                    title: value[titleCol],
                    // Remove empty values, then split in different tags for comma separated values
                    tags: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(tagsCol
                        .filter(function (t) {
                        return value[t];
                    })
                        .map(function (t) {
                        return value[t].split(',');
                    })),
                    text: value[textCol],
                };
                list.push(data);
            });
        });
        return list;
    };
    InfluxSeries.prototype.getTable = function () {
        var table = new app_core_table_model__WEBPACK_IMPORTED_MODULE_1__["default"]();
        var i, j;
        if (this.series.length === 0) {
            return table;
        }
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.series, function (series, seriesIndex) {
            if (seriesIndex === 0) {
                j = 0;
                // Check that the first column is indeed 'time'
                if (series.columns[0] === 'time') {
                    // Push this now before the tags and with the right type
                    table.columns.push({ text: 'Time', type: 'time' });
                    j++;
                }
                lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keys(series.tags), function (key) {
                    table.columns.push({ text: key });
                });
                for (; j < series.columns.length; j++) {
                    table.columns.push({ text: series.columns[j] });
                }
            }
            if (series.values) {
                for (i = 0; i < series.values.length; i++) {
                    var values = series.values[i];
                    var reordered = [values[0]];
                    if (series.tags) {
                        for (var key in series.tags) {
                            if (series.tags.hasOwnProperty(key)) {
                                reordered.push(series.tags[key]);
                            }
                        }
                    }
                    for (j = 1; j < values.length; j++) {
                        reordered.push(values[j]);
                    }
                    table.rows.push(reordered);
                }
            }
        });
        return table;
    };
    return InfluxSeries;
}());
/* harmony default export */ __webpack_exports__["default"] = (InfluxSeries);


/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/module.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/module.ts ***!
  \**********************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return InfluxConfigCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return InfluxAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/influxdb/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/influxdb/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["InfluxQueryCtrl"]; });



var InfluxConfigCtrl = /** @class */ (function () {
    function InfluxConfigCtrl() {
    }
    InfluxConfigCtrl.templateUrl = 'partials/config.html';
    return InfluxConfigCtrl;
}());
var InfluxAnnotationsQueryCtrl = /** @class */ (function () {
    function InfluxAnnotationsQueryCtrl() {
    }
    InfluxAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return InfluxAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/query_builder.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/query_builder.ts ***!
  \*****************************************************************/
/*! exports provided: InfluxQueryBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfluxQueryBuilder", function() { return InfluxQueryBuilder; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

function renderTagCondition(tag, index) {
    var str = '';
    var operator = tag.operator;
    var value = tag.value;
    if (index > 0) {
        str = (tag.condition || 'AND') + ' ';
    }
    if (!operator) {
        if (/^\/.*\/$/.test(tag.value)) {
            operator = '=~';
        }
        else {
            operator = '=';
        }
    }
    // quote value unless regex or number
    if (operator !== '=~' && operator !== '!~' && isNaN(+value)) {
        value = "'" + value + "'";
    }
    return str + '"' + tag.key + '" ' + operator + ' ' + value;
}
var InfluxQueryBuilder = /** @class */ (function () {
    function InfluxQueryBuilder(target, database) {
        this.target = target;
        this.database = database;
    }
    InfluxQueryBuilder.prototype.buildExploreQuery = function (type, withKey, withMeasurementFilter) {
        var query;
        var measurement;
        var policy;
        if (type === 'TAG_KEYS') {
            query = 'SHOW TAG KEYS';
            measurement = this.target.measurement;
            policy = this.target.policy;
        }
        else if (type === 'TAG_VALUES') {
            query = 'SHOW TAG VALUES';
            measurement = this.target.measurement;
            policy = this.target.policy;
        }
        else if (type === 'MEASUREMENTS') {
            query = 'SHOW MEASUREMENTS';
            if (withMeasurementFilter) {
                query += ' WITH MEASUREMENT =~ /' + withMeasurementFilter + '/';
            }
        }
        else if (type === 'FIELDS') {
            measurement = this.target.measurement;
            policy = this.target.policy;
            if (!measurement.match('^/.*/')) {
                measurement = '"' + measurement + '"';
                if (policy && policy !== 'default') {
                    policy = '"' + policy + '"';
                    measurement = policy + '.' + measurement;
                }
            }
            return 'SHOW FIELD KEYS FROM ' + measurement;
        }
        else if (type === 'RETENTION POLICIES') {
            query = 'SHOW RETENTION POLICIES on "' + this.database + '"';
            return query;
        }
        if (measurement) {
            if (!measurement.match('^/.*/') && !measurement.match(/^merge\(.*\)/)) {
                measurement = '"' + measurement + '"';
            }
            if (policy && policy !== 'default') {
                policy = '"' + policy + '"';
                measurement = policy + '.' + measurement;
            }
            query += ' FROM ' + measurement;
        }
        if (withKey) {
            query += ' WITH KEY = "' + withKey + '"';
        }
        if (this.target.tags && this.target.tags.length > 0) {
            var whereConditions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.reduce(this.target.tags, function (memo, tag) {
                // do not add a condition for the key we want to explore for
                if (tag.key === withKey) {
                    return memo;
                }
                memo.push(renderTagCondition(tag, memo.length));
                return memo;
            }, []);
            if (whereConditions.length > 0) {
                query += ' WHERE ' + whereConditions.join(' ');
            }
        }
        if (type === 'MEASUREMENTS') {
            query += ' LIMIT 100';
            //Solve issue #2524 by limiting the number of measurements returned
            //LIMIT must be after WITH MEASUREMENT and WHERE clauses
            //This also could be used for TAG KEYS and TAG VALUES, if desired
        }
        return query;
    };
    return InfluxQueryBuilder;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/query_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/query_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: InfluxQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfluxQueryCtrl", function() { return InfluxQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _query_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query_builder */ "./public/app/plugins/datasource/influxdb/query_builder.ts");
/* harmony import */ var _influx_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./influx_query */ "./public/app/plugins/datasource/influxdb/influx_query.ts");
/* harmony import */ var _query_part__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_part */ "./public/app/plugins/datasource/influxdb/query_part.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");







var InfluxQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](InfluxQueryCtrl, _super);
    /** @ngInject */
    function InfluxQueryCtrl($scope, $injector, templateSrv, $q, uiSegmentSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.templateSrv = templateSrv;
        _this.$q = $q;
        _this.uiSegmentSrv = uiSegmentSrv;
        _this.target = _this.target;
        _this.queryModel = new _influx_query__WEBPACK_IMPORTED_MODULE_4__["default"](_this.target, templateSrv, _this.panel.scopedVars);
        _this.queryBuilder = new _query_builder__WEBPACK_IMPORTED_MODULE_3__["InfluxQueryBuilder"](_this.target, _this.datasource.database);
        _this.groupBySegment = _this.uiSegmentSrv.newPlusButton();
        _this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];
        _this.policySegment = uiSegmentSrv.newSegment(_this.target.policy);
        if (!_this.target.measurement) {
            _this.measurementSegment = uiSegmentSrv.newSelectMeasurement();
        }
        else {
            _this.measurementSegment = uiSegmentSrv.newSegment(_this.target.measurement);
        }
        _this.tagSegments = [];
        for (var _i = 0, _a = _this.target.tags; _i < _a.length; _i++) {
            var tag = _a[_i];
            if (!tag.operator) {
                if (/^\/.*\/$/.test(tag.value)) {
                    tag.operator = '=~';
                }
                else {
                    tag.operator = '=';
                }
            }
            if (tag.condition) {
                _this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));
            }
            _this.tagSegments.push(uiSegmentSrv.newKey(tag.key));
            _this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));
            _this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));
        }
        _this.fixTagSegments();
        _this.buildSelectMenu();
        _this.removeTagFilterSegment = uiSegmentSrv.newSegment({
            fake: true,
            value: '-- remove tag filter --',
        });
        return _this;
    }
    InfluxQueryCtrl.prototype.removeOrderByTime = function () {
        this.target.orderByTime = 'ASC';
    };
    InfluxQueryCtrl.prototype.buildSelectMenu = function () {
        var categories = _query_part__WEBPACK_IMPORTED_MODULE_5__["default"].getCategories();
        this.selectMenu = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.reduce(categories, function (memo, cat, key) {
            var menu = {
                text: key,
                submenu: cat.map(function (item) {
                    return { text: item.type, value: item.type };
                }),
            };
            memo.push(menu);
            return memo;
        }, []);
    };
    InfluxQueryCtrl.prototype.getGroupByOptions = function () {
        var _this = this;
        var query = this.queryBuilder.buildExploreQuery('TAG_KEYS');
        return this.datasource
            .metricFindQuery(query)
            .then(function (tags) {
            var options = [];
            if (!_this.queryModel.hasFill()) {
                options.push(_this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));
            }
            if (!_this.target.limit) {
                options.push(_this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));
            }
            if (!_this.target.slimit) {
                options.push(_this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));
            }
            if (_this.target.orderByTime === 'ASC') {
                options.push(_this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));
            }
            if (!_this.queryModel.hasGroupByTime()) {
                options.push(_this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));
            }
            for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
                var tag = tags_1[_i];
                options.push(_this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));
            }
            return options;
        })
            .catch(this.handleQueryError.bind(this));
    };
    InfluxQueryCtrl.prototype.groupByAction = function () {
        switch (this.groupBySegment.value) {
            case 'LIMIT': {
                this.target.limit = 10;
                break;
            }
            case 'SLIMIT': {
                this.target.slimit = 10;
                break;
            }
            case 'ORDER BY time DESC': {
                this.target.orderByTime = 'DESC';
                break;
            }
            default: {
                this.queryModel.addGroupBy(this.groupBySegment.value);
            }
        }
        var plusButton = this.uiSegmentSrv.newPlusButton();
        this.groupBySegment.value = plusButton.value;
        this.groupBySegment.html = plusButton.html;
        this.panelCtrl.refresh();
    };
    InfluxQueryCtrl.prototype.addSelectPart = function (selectParts, cat, subitem) {
        this.queryModel.addSelectPart(selectParts, subitem.value);
        this.panelCtrl.refresh();
    };
    InfluxQueryCtrl.prototype.handleSelectPartEvent = function (selectParts, part, evt) {
        switch (evt.name) {
            case 'get-param-options': {
                var fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');
                return this.datasource
                    .metricFindQuery(fieldsQuery)
                    .then(this.transformToSegments(true))
                    .catch(this.handleQueryError.bind(this));
            }
            case 'part-param-changed': {
                this.panelCtrl.refresh();
                break;
            }
            case 'action': {
                this.queryModel.removeSelectPart(selectParts, part);
                this.panelCtrl.refresh();
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);
            }
        }
    };
    InfluxQueryCtrl.prototype.handleGroupByPartEvent = function (part, index, evt) {
        switch (evt.name) {
            case 'get-param-options': {
                var tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');
                return this.datasource
                    .metricFindQuery(tagsQuery)
                    .then(this.transformToSegments(true))
                    .catch(this.handleQueryError.bind(this));
            }
            case 'part-param-changed': {
                this.panelCtrl.refresh();
                break;
            }
            case 'action': {
                this.queryModel.removeGroupByPart(part, index);
                this.panelCtrl.refresh();
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);
            }
        }
    };
    InfluxQueryCtrl.prototype.fixTagSegments = function () {
        var count = this.tagSegments.length;
        var lastSegment = this.tagSegments[Math.max(count - 1, 0)];
        if (!lastSegment || lastSegment.type !== 'plus-button') {
            this.tagSegments.push(this.uiSegmentSrv.newPlusButton());
        }
    };
    InfluxQueryCtrl.prototype.measurementChanged = function () {
        this.target.measurement = this.measurementSegment.value;
        this.panelCtrl.refresh();
    };
    InfluxQueryCtrl.prototype.getPolicySegments = function () {
        var policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');
        return this.datasource
            .metricFindQuery(policiesQuery)
            .then(this.transformToSegments(false))
            .catch(this.handleQueryError.bind(this));
    };
    InfluxQueryCtrl.prototype.policyChanged = function () {
        this.target.policy = this.policySegment.value;
        this.panelCtrl.refresh();
    };
    InfluxQueryCtrl.prototype.toggleEditorMode = function () {
        try {
            this.target.query = this.queryModel.render(false);
        }
        catch (err) {
            console.log('query render error');
        }
        this.target.rawQuery = !this.target.rawQuery;
    };
    InfluxQueryCtrl.prototype.getMeasurements = function (measurementFilter) {
        var query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);
        return this.datasource
            .metricFindQuery(query)
            .then(this.transformToSegments(true))
            .catch(this.handleQueryError.bind(this));
    };
    InfluxQueryCtrl.prototype.handleQueryError = function (err) {
        this.error = err.message || 'Failed to issue metric query';
        return [];
    };
    InfluxQueryCtrl.prototype.transformToSegments = function (addTemplateVars) {
        var _this = this;
        return function (results) {
            var segments = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(results, function (segment) {
                return _this.uiSegmentSrv.newSegment({
                    value: segment.text,
                    expandable: segment.expandable,
                });
            });
            if (addTemplateVars) {
                for (var _i = 0, _a = _this.templateSrv.variables; _i < _a.length; _i++) {
                    var variable = _a[_i];
                    segments.unshift(_this.uiSegmentSrv.newSegment({
                        type: 'value',
                        value: '/^$' + variable.name + '$/',
                        expandable: true,
                    }));
                }
            }
            return segments;
        };
    };
    InfluxQueryCtrl.prototype.getTagsOrValues = function (segment, index) {
        var _this = this;
        if (segment.type === 'condition') {
            return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);
        }
        if (segment.type === 'operator') {
            var nextValue = this.tagSegments[index + 1].value;
            if (/^\/.*\/$/.test(nextValue)) {
                return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));
            }
            else {
                return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));
            }
        }
        var query, addTemplateVars;
        if (segment.type === 'key' || segment.type === 'plus-button') {
            query = this.queryBuilder.buildExploreQuery('TAG_KEYS');
            addTemplateVars = false;
        }
        else if (segment.type === 'value') {
            query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);
            addTemplateVars = true;
        }
        return this.datasource
            .metricFindQuery(query)
            .then(this.transformToSegments(addTemplateVars))
            .then(function (results) {
            if (segment.type === 'key') {
                results.splice(0, 0, angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(_this.removeTagFilterSegment));
            }
            return results;
        })
            .catch(this.handleQueryError.bind(this));
    };
    InfluxQueryCtrl.prototype.getFieldSegments = function () {
        var fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');
        return this.datasource
            .metricFindQuery(fieldsQuery)
            .then(this.transformToSegments(false))
            .catch(this.handleQueryError);
    };
    InfluxQueryCtrl.prototype.tagSegmentUpdated = function (segment, index) {
        this.tagSegments[index] = segment;
        // handle remove tag condition
        if (segment.value === this.removeTagFilterSegment.value) {
            this.tagSegments.splice(index, 3);
            if (this.tagSegments.length === 0) {
                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());
            }
            else if (this.tagSegments.length > 2) {
                this.tagSegments.splice(Math.max(index - 1, 0), 1);
                if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {
                    this.tagSegments.push(this.uiSegmentSrv.newPlusButton());
                }
            }
        }
        else {
            if (segment.type === 'plus-button') {
                if (index > 2) {
                    this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));
                }
                this.tagSegments.push(this.uiSegmentSrv.newOperator('='));
                this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));
                segment.type = 'key';
                segment.cssClass = 'query-segment-key';
            }
            if (index + 1 === this.tagSegments.length) {
                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());
            }
        }
        this.rebuildTargetTagConditions();
    };
    InfluxQueryCtrl.prototype.rebuildTargetTagConditions = function () {
        var _this = this;
        var tags = [];
        var tagIndex = 0;
        var tagOperator = '';
        lodash__WEBPACK_IMPORTED_MODULE_2___default.a.each(this.tagSegments, function (segment2, index) {
            if (segment2.type === 'key') {
                if (tags.length === 0) {
                    tags.push({});
                }
                tags[tagIndex].key = segment2.value;
            }
            else if (segment2.type === 'value') {
                tagOperator = _this.getTagValueOperator(segment2.value, tags[tagIndex].operator);
                if (tagOperator) {
                    _this.tagSegments[index - 1] = _this.uiSegmentSrv.newOperator(tagOperator);
                    tags[tagIndex].operator = tagOperator;
                }
                tags[tagIndex].value = segment2.value;
            }
            else if (segment2.type === 'condition') {
                tags.push({ condition: segment2.value });
                tagIndex += 1;
            }
            else if (segment2.type === 'operator') {
                tags[tagIndex].operator = segment2.value;
            }
        });
        this.target.tags = tags;
        this.panelCtrl.refresh();
    };
    InfluxQueryCtrl.prototype.getTagValueOperator = function (tagValue, tagOperator) {
        if (tagOperator !== '=~' && tagOperator !== '!~' && /^\/.*\/$/.test(tagValue)) {
            return '=~';
        }
        else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\/.*\/$)/.test(tagValue)) {
            return '=';
        }
        return null;
    };
    InfluxQueryCtrl.prototype.getCollapsedText = function () {
        return this.queryModel.render(false);
    };
    InfluxQueryCtrl.templateUrl = 'partials/query.editor.html';
    return InfluxQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_6__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/query_part.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/query_part.ts ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/components/query_part/query_part */ "./public/app/core/components/query_part/query_part.ts");


var index = [];
var categories = {
    Aggregations: [],
    Selectors: [],
    Transformations: [],
    Predictors: [],
    Math: [],
    Aliasing: [],
    Fields: [],
};
function createPart(part) {
    var def = index[part.type];
    if (!def) {
        throw { message: 'Could not find query part ' + part.type };
    }
    return new app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["QueryPart"](part, def);
}
function register(options) {
    index[options.type] = new app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["QueryPartDef"](options);
    options.category.push(index[options.type]);
}
var groupByTimeFunctions = [];
function aliasRenderer(part, innerExpr) {
    return innerExpr + ' AS ' + '"' + part.params[0] + '"';
}
function fieldRenderer(part, innerExpr) {
    if (part.params[0] === '*') {
        return '*';
    }
    return '"' + part.params[0] + '"';
}
function replaceAggregationAddStrategy(selectParts, partModel) {
    // look for existing aggregation
    for (var i = 0; i < selectParts.length; i++) {
        var part = selectParts[i];
        if (part.def.category === categories.Aggregations) {
            if (part.def.type === partModel.def.type) {
                return;
            }
            // count distinct is allowed
            if (part.def.type === 'count' && partModel.def.type === 'distinct') {
                break;
            }
            // remove next aggregation if distinct was replaced
            if (part.def.type === 'distinct') {
                var morePartsAvailable = selectParts.length >= i + 2;
                if (partModel.def.type !== 'count' && morePartsAvailable) {
                    var nextPart = selectParts[i + 1];
                    if (nextPart.def.category === categories.Aggregations) {
                        selectParts.splice(i + 1, 1);
                    }
                }
                else if (partModel.def.type === 'count') {
                    if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {
                        selectParts.splice(i + 1, 0, partModel);
                    }
                    return;
                }
            }
            selectParts[i] = partModel;
            return;
        }
        if (part.def.category === categories.Selectors) {
            selectParts[i] = partModel;
            return;
        }
    }
    selectParts.splice(1, 0, partModel);
}
function addTransformationStrategy(selectParts, partModel) {
    var i;
    // look for index to add transformation
    for (i = 0; i < selectParts.length; i++) {
        var part = selectParts[i];
        if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {
            break;
        }
    }
    selectParts.splice(i, 0, partModel);
}
function addMathStrategy(selectParts, partModel) {
    var partCount = selectParts.length;
    if (partCount > 0) {
        // if last is math, replace it
        if (selectParts[partCount - 1].def.type === 'math') {
            selectParts[partCount - 1] = partModel;
            return;
        }
        // if next to last is math, replace it
        if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {
            selectParts[partCount - 2] = partModel;
            return;
        }
        else if (selectParts[partCount - 1].def.type === 'alias') {
            // if last is alias add it before
            selectParts.splice(partCount - 1, 0, partModel);
            return;
        }
    }
    selectParts.push(partModel);
}
function addAliasStrategy(selectParts, partModel) {
    var partCount = selectParts.length;
    if (partCount > 0) {
        // if last is alias, replace it
        if (selectParts[partCount - 1].def.type === 'alias') {
            selectParts[partCount - 1] = partModel;
            return;
        }
    }
    selectParts.push(partModel);
}
function addFieldStrategy(selectParts, partModel, query) {
    // copy all parts
    var parts = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(selectParts, function (part) {
        return createPart({ type: part.def.type, params: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(part.params) });
    });
    query.selectModels.push(parts);
}
register({
    type: 'field',
    addStrategy: addFieldStrategy,
    category: categories.Fields,
    params: [{ type: 'field', dynamicLookup: true }],
    defaultParams: ['value'],
    renderer: fieldRenderer,
});
// Aggregations
register({
    type: 'count',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'distinct',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'integral',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'mean',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'median',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'mode',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'sum',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Aggregations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
// transformations
register({
    type: 'derivative',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [
        {
            name: 'duration',
            type: 'interval',
            options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],
        },
    ],
    defaultParams: ['10s'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'spread',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'non_negative_derivative',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [
        {
            name: 'duration',
            type: 'interval',
            options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],
        },
    ],
    defaultParams: ['10s'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'difference',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'non_negative_difference',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'moving_average',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],
    defaultParams: [10],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'cumulative_sum',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'stddev',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'time',
    category: groupByTimeFunctions,
    params: [
        {
            name: 'interval',
            type: 'time',
            options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],
        },
    ],
    defaultParams: ['$__interval'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'fill',
    category: groupByTimeFunctions,
    params: [
        {
            name: 'fill',
            type: 'string',
            options: ['none', 'null', '0', 'previous', 'linear'],
        },
    ],
    defaultParams: ['null'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'elapsed',
    addStrategy: addTransformationStrategy,
    category: categories.Transformations,
    params: [
        {
            name: 'duration',
            type: 'interval',
            options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],
        },
    ],
    defaultParams: ['10s'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
// predictions
register({
    type: 'holt_winters',
    addStrategy: addTransformationStrategy,
    category: categories.Predictors,
    params: [
        { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },
        { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },
    ],
    defaultParams: [10, 2],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'holt_winters_with_fit',
    addStrategy: addTransformationStrategy,
    category: categories.Predictors,
    params: [
        { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },
        { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },
    ],
    defaultParams: [10, 2],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
// Selectors
register({
    type: 'bottom',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [3],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'first',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'last',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'max',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'min',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [],
    defaultParams: [],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'percentile',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [{ name: 'nth', type: 'int' }],
    defaultParams: [95],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'top',
    addStrategy: replaceAggregationAddStrategy,
    category: categories.Selectors,
    params: [{ name: 'count', type: 'int' }],
    defaultParams: [3],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["functionRenderer"],
});
register({
    type: 'tag',
    category: groupByTimeFunctions,
    params: [{ name: 'tag', type: 'string', dynamicLookup: true }],
    defaultParams: ['tag'],
    renderer: fieldRenderer,
});
register({
    type: 'math',
    addStrategy: addMathStrategy,
    category: categories.Math,
    params: [{ name: 'expr', type: 'string' }],
    defaultParams: [' / 100'],
    renderer: app_core_components_query_part_query_part__WEBPACK_IMPORTED_MODULE_1__["suffixRenderer"],
});
register({
    type: 'alias',
    addStrategy: addAliasStrategy,
    category: categories.Aliasing,
    params: [{ name: 'name', type: 'string', quote: 'double' }],
    defaultParams: ['alias'],
    renderMode: 'suffix',
    renderer: aliasRenderer,
});
/* harmony default export */ __webpack_exports__["default"] = ({
    create: createPart,
    getCategories: function () {
        return categories;
    },
    replaceAggregationAdd: replaceAggregationAddStrategy,
});


/***/ }),

/***/ "./public/app/plugins/datasource/influxdb/response_parser.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/influxdb/response_parser.ts ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var ResponseParser = /** @class */ (function () {
    function ResponseParser() {
    }
    ResponseParser.prototype.parse = function (query, results) {
        if (!results || results.results.length === 0) {
            return [];
        }
        var influxResults = results.results[0];
        if (!influxResults.series) {
            return [];
        }
        var normalizedQuery = query.toLowerCase();
        var isValueFirst = normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;
        var res = {};
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(influxResults.series, function (serie) {
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(serie.values, function (value) {
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(value)) {
                    // In general, there are 2 possible shapes for the returned value.
                    // The first one is a two-element array,
                    // where the first element is somewhat a metadata value:
                    // the tag name for SHOW TAG VALUES queries,
                    // the time field for SELECT queries, etc.
                    // The second shape is an one-element array,
                    // that is containing an immediate value.
                    // For example, SHOW FIELD KEYS queries return such shape.
                    // Note, pre-0.11 versions return
                    // the second shape for SHOW TAG VALUES queries
                    // (while the newer versions—first).
                    if (isValueFirst) {
                        addUnique(res, value[0]);
                    }
                    else if (value[1] !== undefined) {
                        addUnique(res, value[1]);
                    }
                    else {
                        addUnique(res, value[0]);
                    }
                }
                else {
                    addUnique(res, value);
                }
            });
        });
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(res, function (value) {
            return { text: value.toString() };
        });
    };
    return ResponseParser;
}());
/* harmony default export */ __webpack_exports__["default"] = (ResponseParser);
function addUnique(arr, value) {
    arr[value] = value;
}


/***/ }),

/***/ "./public/app/plugins/datasource/logging/datasource.ts":
/*!*************************************************************!*\
  !*** ./public/app/plugins/datasource/logging/datasource.ts ***!
  \*************************************************************/
/*! exports provided: parseQuery, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseQuery", function() { return parseQuery; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var _result_transformer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./result_transformer */ "./public/app/plugins/datasource/logging/result_transformer.ts");




var DEFAULT_LIMIT = 100;
var DEFAULT_QUERY_PARAMS = {
    direction: 'BACKWARD',
    limit: DEFAULT_LIMIT,
    regexp: '',
    query: '',
};
var QUERY_REGEXP = /({\w+="[^"]+"})?\s*(\w[^{]+)?\s*({\w+="[^"]+"})?/;
function parseQuery(input) {
    var match = input.match(QUERY_REGEXP);
    var query = '';
    var regexp = '';
    if (match) {
        if (match[1]) {
            query = match[1];
        }
        if (match[2]) {
            regexp = match[2].trim();
        }
        if (match[3]) {
            if (match[1]) {
                query = match[1].slice(0, -1) + "," + match[3].slice(1);
            }
            else {
                query = match[3];
            }
        }
    }
    return { query: query, regexp: regexp };
}
function serializeParams(data) {
    return Object.keys(data)
        .map(function (k) {
        var v = data[k];
        return encodeURIComponent(k) + '=' + encodeURIComponent(v);
    })
        .join('&');
}
var LoggingDatasource = /** @class */ (function () {
    /** @ngInject */
    function LoggingDatasource(instanceSettings, backendSrv, templateSrv) {
        this.instanceSettings = instanceSettings;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
    }
    LoggingDatasource.prototype._request = function (apiUrl, data, options) {
        var baseUrl = this.instanceSettings.url;
        var params = data ? serializeParams(data) : '';
        var url = "" + baseUrl + apiUrl + "?" + params;
        var req = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, options, { url: url });
        return this.backendSrv.datasourceRequest(req);
    };
    LoggingDatasource.prototype.prepareQueryTarget = function (target, options) {
        var interpolated = this.templateSrv.replace(target.expr);
        var start = this.getTime(options.range.from, false);
        var end = this.getTime(options.range.to, true);
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, DEFAULT_QUERY_PARAMS, parseQuery(interpolated), { start: start,
            end: end });
    };
    LoggingDatasource.prototype.query = function (options) {
        var _this = this;
        var queryTargets = options.targets
            .filter(function (target) { return target.expr; })
            .map(function (target) { return _this.prepareQueryTarget(target, options); });
        if (queryTargets.length === 0) {
            return Promise.resolve({ data: [] });
        }
        var queries = queryTargets.map(function (target) { return _this._request('/api/prom/query', target); });
        return Promise.all(queries).then(function (results) {
            // Flatten streams from multiple queries
            var allStreams = results.reduce(function (acc, response, i) {
                var streams = response.data.streams || [];
                // Inject search for match highlighting
                var search = queryTargets[i].regexp;
                streams.forEach(function (s) {
                    s.search = search;
                });
                return acc.concat(streams);
            }, []);
            var model = Object(_result_transformer__WEBPACK_IMPORTED_MODULE_3__["processStreams"])(allStreams, DEFAULT_LIMIT);
            return { data: model };
        });
    };
    LoggingDatasource.prototype.metadataRequest = function (url) {
        // HACK to get label values for {job=|}, will be replaced when implementing LoggingQueryField
        var apiUrl = url.replace('v1', 'prom');
        return this._request(apiUrl, { silent: true }).then(function (res) {
            var data = { data: { data: res.data.values || [] } };
            return data;
        });
    };
    LoggingDatasource.prototype.getTime = function (date, roundUp) {
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(date)) {
            date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__["parse"](date, roundUp);
        }
        return Math.ceil(date.valueOf() * 1e6);
    };
    LoggingDatasource.prototype.testDatasource = function () {
        return this._request('/api/prom/label')
            .then(function (res) {
            if (res && res.data && res.data.values && res.data.values.length > 0) {
                return { status: 'success', message: 'Data source connected and labels found.' };
            }
            return {
                status: 'error',
                message: 'Data source connected, but no labels received. Verify that logging is configured properly.',
            };
        })
            .catch(function (err) {
            return { status: 'error', message: err.message };
        });
    };
    return LoggingDatasource;
}());
/* harmony default export */ __webpack_exports__["default"] = (LoggingDatasource);


/***/ }),

/***/ "./public/app/plugins/datasource/logging/module.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/datasource/logging/module.ts ***!
  \*********************************************************/
/*! exports provided: LoggingConfigCtrl, Datasource, ConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoggingConfigCtrl", function() { return LoggingConfigCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return LoggingConfigCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/logging/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["default"]; });


var LoggingConfigCtrl = /** @class */ (function () {
    function LoggingConfigCtrl() {
    }
    LoggingConfigCtrl.templateUrl = 'partials/config.html';
    return LoggingConfigCtrl;
}());




/***/ }),

/***/ "./public/app/plugins/datasource/logging/result_transformer.ts":
/*!*********************************************************************!*\
  !*** ./public/app/plugins/datasource/logging/result_transformer.ts ***!
  \*********************************************************************/
/*! exports provided: getLogLevel, getSearchMatches, processEntry, processStreams */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLogLevel", function() { return getLogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSearchMatches", function() { return getSearchMatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processEntry", function() { return processEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processStreams", function() { return processStreams; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_logs_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/logs_model */ "./public/app/core/logs_model.ts");



function getLogLevel(line) {
    if (!line) {
        return undefined;
    }
    var level;
    Object.keys(app_core_logs_model__WEBPACK_IMPORTED_MODULE_2__["LogLevel"]).forEach(function (key) {
        if (!level) {
            var regexp = new RegExp("\\b" + key + "\\b", 'i');
            if (regexp.test(line)) {
                level = app_core_logs_model__WEBPACK_IMPORTED_MODULE_2__["LogLevel"][key];
            }
        }
    });
    return level;
}
function getSearchMatches(line, search) {
    // Empty search can send re.exec() into infinite loop, exit early
    if (!line || !search) {
        return [];
    }
    var regexp = new RegExp("(?:" + search + ")", 'g');
    var matches = [];
    var match = regexp.exec(line);
    while (match) {
        matches.push({
            text: match[0],
            start: match.index,
            length: match[0].length,
        });
        match = regexp.exec(line);
    }
    return matches;
}
function processEntry(entry, stream) {
    var line = entry.line, timestamp = entry.timestamp;
    var labels = stream.labels;
    var key = "EK" + timestamp + labels;
    var time = moment__WEBPACK_IMPORTED_MODULE_1___default()(timestamp);
    var timeFromNow = time.fromNow();
    var timeLocal = time.format('YYYY-MM-DD HH:mm:ss');
    var searchMatches = getSearchMatches(line, stream.search);
    var logLevel = getLogLevel(line);
    return {
        key: key,
        logLevel: logLevel,
        searchMatches: searchMatches,
        timeFromNow: timeFromNow,
        timeLocal: timeLocal,
        entry: line,
        timestamp: timestamp,
    };
}
function processStreams(streams, limit) {
    var combinedEntries = streams.reduce(function (acc, stream) {
        return acc.concat(stream.entries.map(function (entry) { return processEntry(entry, stream); }));
    }, []);
    var sortedEntries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.chain(combinedEntries)
        .sortBy('timestamp')
        .reverse()
        .slice(0, limit || combinedEntries.length)
        .value();
    return { rows: sortedEntries };
}


/***/ }),

/***/ "./public/app/plugins/datasource/mixed/datasource.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/datasource/mixed/datasource.ts ***!
  \***********************************************************/
/*! exports provided: MixedDatasource, Datasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MixedDatasource", function() { return MixedDatasource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return MixedDatasource; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);


var MixedDatasource = /** @class */ (function () {
    /** @ngInject */
    function MixedDatasource($q, datasourceSrv) {
        this.$q = $q;
        this.datasourceSrv = datasourceSrv;
    }
    MixedDatasource.prototype.query = function (options) {
        var _this = this;
        var sets = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.groupBy(options.targets, 'datasource');
        var promises = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(sets, function (targets) {
            var dsName = targets[0].datasource;
            if (dsName === '-- Mixed --') {
                return _this.$q([]);
            }
            return _this.datasourceSrv.get(dsName).then(function (ds) {
                var opt = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(options);
                opt.targets = targets;
                return ds.query(opt);
            });
        });
        return this.$q.all(promises).then(function (results) {
            return { data: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.flatten(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(results, 'data')) };
        });
    };
    return MixedDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/mixed/module.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/datasource/mixed/module.ts ***!
  \*******************************************************/
/*! exports provided: MixedDatasource, Datasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/mixed/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MixedDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MixedDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MixedDatasource"]; });





/***/ }),

/***/ "./public/app/plugins/datasource/mssql/datasource.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/datasource/mssql/datasource.ts ***!
  \***********************************************************/
/*! exports provided: MssqlDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MssqlDatasource", function() { return MssqlDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./response_parser */ "./public/app/plugins/datasource/mssql/response_parser.ts");


var MssqlDatasource = /** @class */ (function () {
    /** @ngInject */
    function MssqlDatasource(instanceSettings, backendSrv, $q, templateSrv) {
        this.backendSrv = backendSrv;
        this.$q = $q;
        this.templateSrv = templateSrv;
        this.name = instanceSettings.name;
        this.id = instanceSettings.id;
        this.responseParser = new _response_parser__WEBPACK_IMPORTED_MODULE_1__["default"](this.$q);
        this.interval = (instanceSettings.jsonData || {}).timeInterval;
    }
    MssqlDatasource.prototype.interpolateVariable = function (value, variable) {
        if (typeof value === 'string') {
            if (variable.multi || variable.includeAll) {
                return "'" + value.replace(/'/g, "''") + "'";
            }
            else {
                return value;
            }
        }
        if (typeof value === 'number') {
            return value;
        }
        var quotedValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(value, function (val) {
            if (typeof value === 'number') {
                return value;
            }
            return "'" + val.replace(/'/g, "''") + "'";
        });
        return quotedValues.join(',');
    };
    MssqlDatasource.prototype.query = function (options) {
        var _this = this;
        var queries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(options.targets, function (item) {
            return item.hide !== true;
        }).map(function (item) {
            return {
                refId: item.refId,
                intervalMs: options.intervalMs,
                maxDataPoints: options.maxDataPoints,
                datasourceId: _this.id,
                rawSql: _this.templateSrv.replace(item.rawSql, options.scopedVars, _this.interpolateVariable),
                format: item.format,
            };
        });
        if (queries.length === 0) {
            return this.$q.when({ data: [] });
        }
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: queries,
            },
        })
            .then(this.responseParser.processQueryResult);
    };
    MssqlDatasource.prototype.annotationQuery = function (options) {
        var _this = this;
        if (!options.annotation.rawQuery) {
            return this.$q.reject({ message: 'Query missing in annotation definition' });
        }
        var query = {
            refId: options.annotation.name,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),
            format: 'table',
        };
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: [query],
            },
        })
            .then(function (data) { return _this.responseParser.transformAnnotationResponse(options, data); });
    };
    MssqlDatasource.prototype.metricFindQuery = function (query, optionalOptions) {
        var _this = this;
        var refId = 'tempvar';
        if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {
            refId = optionalOptions.variable.name;
        }
        var interpolatedQuery = {
            refId: refId,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),
            format: 'table',
        };
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                queries: [interpolatedQuery],
            },
        })
            .then(function (data) { return _this.responseParser.parseMetricFindQueryResult(refId, data); });
    };
    MssqlDatasource.prototype.testDatasource = function () {
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: '5m',
                to: 'now',
                queries: [
                    {
                        refId: 'A',
                        intervalMs: 1,
                        maxDataPoints: 1,
                        datasourceId: this.id,
                        rawSql: 'SELECT 1',
                        format: 'table',
                    },
                ],
            },
        })
            .then(function (res) {
            return { status: 'success', message: 'Database Connection OK' };
        })
            .catch(function (err) {
            console.log(err);
            if (err.data && err.data.message) {
                return { status: 'error', message: err.data.message };
            }
            else {
                return { status: 'error', message: err.status };
            }
        });
    };
    return MssqlDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/mssql/module.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/datasource/mssql/module.ts ***!
  \*******************************************************/
/*! exports provided: MssqlDatasource, Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return MssqlConfigCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return MssqlAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/mssql/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MssqlDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MssqlDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MssqlDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/mssql/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["MssqlQueryCtrl"]; });



var MssqlConfigCtrl = /** @class */ (function () {
    function MssqlConfigCtrl() {
    }
    MssqlConfigCtrl.templateUrl = 'partials/config.html';
    return MssqlConfigCtrl;
}());
var defaultQuery = "SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC";
var MssqlAnnotationsQueryCtrl = /** @class */ (function () {
    /** @ngInject */
    function MssqlAnnotationsQueryCtrl() {
        this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;
    }
    MssqlAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return MssqlAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/mssql/query_ctrl.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/datasource/mssql/query_ctrl.ts ***!
  \***********************************************************/
/*! exports provided: MssqlQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MssqlQueryCtrl", function() { return MssqlQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");



var defaultQuery = "SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC";
var MssqlQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MssqlQueryCtrl, _super);
    /** @ngInject */
    function MssqlQueryCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.target.format = _this.target.format || 'time_series';
        _this.target.alias = '';
        _this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];
        if (!_this.target.rawSql) {
            // special handling when in table panel
            if (_this.panelCtrl.panel.type === 'table') {
                _this.target.format = 'table';
                _this.target.rawSql = 'SELECT 1';
            }
            else {
                _this.target.rawSql = defaultQuery;
            }
        }
        _this.panelCtrl.events.on('data-received', _this.onDataReceived.bind(_this), $scope);
        _this.panelCtrl.events.on('data-error', _this.onDataError.bind(_this), $scope);
        return _this;
    }
    MssqlQueryCtrl.prototype.onDataReceived = function (dataList) {
        this.lastQueryMeta = null;
        this.lastQueryError = null;
        var anySeriesFromQuery = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(dataList, { refId: this.target.refId });
        if (anySeriesFromQuery) {
            this.lastQueryMeta = anySeriesFromQuery.meta;
        }
    };
    MssqlQueryCtrl.prototype.onDataError = function (err) {
        if (err.data && err.data.results) {
            var queryRes = err.data.results[this.target.refId];
            if (queryRes) {
                this.lastQueryMeta = queryRes.meta;
                this.lastQueryError = queryRes.error;
            }
        }
    };
    MssqlQueryCtrl.templateUrl = 'partials/query.editor.html';
    return MssqlQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/mssql/response_parser.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/mssql/response_parser.ts ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var ResponseParser = /** @class */ (function () {
    function ResponseParser($q) {
        this.$q = $q;
    }
    ResponseParser.prototype.processQueryResult = function (res) {
        var data = [];
        if (!res.data.results) {
            return { data: data };
        }
        for (var key in res.data.results) {
            var queryRes = res.data.results[key];
            if (queryRes.series) {
                for (var _i = 0, _a = queryRes.series; _i < _a.length; _i++) {
                    var series = _a[_i];
                    data.push({
                        target: series.name,
                        datapoints: series.points,
                        refId: queryRes.refId,
                        meta: queryRes.meta,
                    });
                }
            }
            if (queryRes.tables) {
                for (var _b = 0, _c = queryRes.tables; _b < _c.length; _b++) {
                    var table = _c[_b];
                    table.type = 'table';
                    table.refId = queryRes.refId;
                    table.meta = queryRes.meta;
                    data.push(table);
                }
            }
        }
        return { data: data };
    };
    ResponseParser.prototype.parseMetricFindQueryResult = function (refId, results) {
        if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {
            return [];
        }
        var columns = results.data.results[refId].tables[0].columns;
        var rows = results.data.results[refId].tables[0].rows;
        var textColIndex = this.findColIndex(columns, '__text');
        var valueColIndex = this.findColIndex(columns, '__value');
        if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {
            return this.transformToKeyValueList(rows, textColIndex, valueColIndex);
        }
        return this.transformToSimpleList(rows);
    };
    ResponseParser.prototype.transformToKeyValueList = function (rows, textColIndex, valueColIndex) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            if (!this.containsKey(res, rows[i][textColIndex])) {
                res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });
            }
        }
        return res;
    };
    ResponseParser.prototype.transformToSimpleList = function (rows) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            for (var j = 0; j < rows[i].length; j++) {
                var value = rows[i][j];
                if (res.indexOf(value) === -1) {
                    res.push(value);
                }
            }
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(res, function (value) {
            return { text: value };
        });
    };
    ResponseParser.prototype.findColIndex = function (columns, colName) {
        for (var i = 0; i < columns.length; i++) {
            if (columns[i].text === colName) {
                return i;
            }
        }
        return -1;
    };
    ResponseParser.prototype.containsKey = function (res, key) {
        for (var i = 0; i < res.length; i++) {
            if (res[i].text === key) {
                return true;
            }
        }
        return false;
    };
    ResponseParser.prototype.transformAnnotationResponse = function (options, data) {
        var table = data.data.results[options.annotation.name].tables[0];
        var timeColumnIndex = -1;
        var textColumnIndex = -1;
        var tagsColumnIndex = -1;
        for (var i = 0; i < table.columns.length; i++) {
            if (table.columns[i].text === 'time') {
                timeColumnIndex = i;
            }
            else if (table.columns[i].text === 'text') {
                textColumnIndex = i;
            }
            else if (table.columns[i].text === 'tags') {
                tagsColumnIndex = i;
            }
        }
        if (timeColumnIndex === -1) {
            return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });
        }
        var list = [];
        for (var i = 0; i < table.rows.length; i++) {
            var row = table.rows[i];
            list.push({
                annotation: options.annotation,
                time: Math.floor(row[timeColumnIndex]),
                text: row[textColumnIndex],
                tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\s*,\s*/) : [],
            });
        }
        return list;
    };
    return ResponseParser;
}());
/* harmony default export */ __webpack_exports__["default"] = (ResponseParser);


/***/ }),

/***/ "./public/app/plugins/datasource/mysql/datasource.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/datasource/mysql/datasource.ts ***!
  \***********************************************************/
/*! exports provided: MysqlDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MysqlDatasource", function() { return MysqlDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./response_parser */ "./public/app/plugins/datasource/mysql/response_parser.ts");


var MysqlDatasource = /** @class */ (function () {
    /** @ngInject */
    function MysqlDatasource(instanceSettings, backendSrv, $q, templateSrv) {
        this.backendSrv = backendSrv;
        this.$q = $q;
        this.templateSrv = templateSrv;
        this.name = instanceSettings.name;
        this.id = instanceSettings.id;
        this.responseParser = new _response_parser__WEBPACK_IMPORTED_MODULE_1__["default"](this.$q);
        this.interval = (instanceSettings.jsonData || {}).timeInterval;
    }
    MysqlDatasource.prototype.interpolateVariable = function (value, variable) {
        if (typeof value === 'string') {
            if (variable.multi || variable.includeAll) {
                return "'" + value.replace(/'/g, "''") + "'";
            }
            else {
                return value;
            }
        }
        if (typeof value === 'number') {
            return value;
        }
        var quotedValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(value, function (val) {
            if (typeof value === 'number') {
                return value;
            }
            return "'" + val.replace(/'/g, "''") + "'";
        });
        return quotedValues.join(',');
    };
    MysqlDatasource.prototype.query = function (options) {
        var _this = this;
        var queries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(options.targets, function (item) {
            return item.hide !== true;
        }).map(function (item) {
            return {
                refId: item.refId,
                intervalMs: options.intervalMs,
                maxDataPoints: options.maxDataPoints,
                datasourceId: _this.id,
                rawSql: _this.templateSrv.replace(item.rawSql, options.scopedVars, _this.interpolateVariable),
                format: item.format,
            };
        });
        if (queries.length === 0) {
            return this.$q.when({ data: [] });
        }
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: queries,
            },
        })
            .then(this.responseParser.processQueryResult);
    };
    MysqlDatasource.prototype.annotationQuery = function (options) {
        var _this = this;
        if (!options.annotation.rawQuery) {
            return this.$q.reject({
                message: 'Query missing in annotation definition',
            });
        }
        var query = {
            refId: options.annotation.name,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),
            format: 'table',
        };
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: [query],
            },
        })
            .then(function (data) { return _this.responseParser.transformAnnotationResponse(options, data); });
    };
    MysqlDatasource.prototype.metricFindQuery = function (query, optionalOptions) {
        var _this = this;
        var refId = 'tempvar';
        if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {
            refId = optionalOptions.variable.name;
        }
        var interpolatedQuery = {
            refId: refId,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),
            format: 'table',
        };
        var data = {
            queries: [interpolatedQuery],
        };
        if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {
            data['from'] = optionalOptions.range.from.valueOf().toString();
        }
        if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {
            data['to'] = optionalOptions.range.to.valueOf().toString();
        }
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: data,
        })
            .then(function (data) { return _this.responseParser.parseMetricFindQueryResult(refId, data); });
    };
    MysqlDatasource.prototype.testDatasource = function () {
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: '5m',
                to: 'now',
                queries: [
                    {
                        refId: 'A',
                        intervalMs: 1,
                        maxDataPoints: 1,
                        datasourceId: this.id,
                        rawSql: 'SELECT 1',
                        format: 'table',
                    },
                ],
            },
        })
            .then(function (res) {
            return { status: 'success', message: 'Database Connection OK' };
        })
            .catch(function (err) {
            console.log(err);
            if (err.data && err.data.message) {
                return { status: 'error', message: err.data.message };
            }
            else {
                return { status: 'error', message: err.status };
            }
        });
    };
    return MysqlDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/mysql/module.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/datasource/mysql/module.ts ***!
  \*******************************************************/
/*! exports provided: MysqlDatasource, Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return MysqlConfigCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return MysqlAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/mysql/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MysqlDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MysqlDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["MysqlDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/mysql/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["MysqlQueryCtrl"]; });



var MysqlConfigCtrl = /** @class */ (function () {
    function MysqlConfigCtrl() {
    }
    MysqlConfigCtrl.templateUrl = 'partials/config.html';
    return MysqlConfigCtrl;
}());
var defaultQuery = "SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  ";
var MysqlAnnotationsQueryCtrl = /** @class */ (function () {
    /** @ngInject */
    function MysqlAnnotationsQueryCtrl() {
        this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;
    }
    MysqlAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return MysqlAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/mysql/query_ctrl.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/datasource/mysql/query_ctrl.ts ***!
  \***********************************************************/
/*! exports provided: MysqlQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MysqlQueryCtrl", function() { return MysqlQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");



var defaultQuery = "SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n";
var MysqlQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MysqlQueryCtrl, _super);
    /** @ngInject */
    function MysqlQueryCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.target.format = _this.target.format || 'time_series';
        _this.target.alias = '';
        _this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];
        if (!_this.target.rawSql) {
            // special handling when in table panel
            if (_this.panelCtrl.panel.type === 'table') {
                _this.target.format = 'table';
                _this.target.rawSql = 'SELECT 1';
            }
            else {
                _this.target.rawSql = defaultQuery;
            }
        }
        _this.panelCtrl.events.on('data-received', _this.onDataReceived.bind(_this), $scope);
        _this.panelCtrl.events.on('data-error', _this.onDataError.bind(_this), $scope);
        return _this;
    }
    MysqlQueryCtrl.prototype.onDataReceived = function (dataList) {
        this.lastQueryMeta = null;
        this.lastQueryError = null;
        var anySeriesFromQuery = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(dataList, { refId: this.target.refId });
        if (anySeriesFromQuery) {
            this.lastQueryMeta = anySeriesFromQuery.meta;
        }
    };
    MysqlQueryCtrl.prototype.onDataError = function (err) {
        if (err.data && err.data.results) {
            var queryRes = err.data.results[this.target.refId];
            if (queryRes) {
                this.lastQueryMeta = queryRes.meta;
                this.lastQueryError = queryRes.error;
            }
        }
    };
    MysqlQueryCtrl.templateUrl = 'partials/query.editor.html';
    return MysqlQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/mysql/response_parser.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/mysql/response_parser.ts ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var ResponseParser = /** @class */ (function () {
    function ResponseParser($q) {
        this.$q = $q;
    }
    ResponseParser.prototype.processQueryResult = function (res) {
        var data = [];
        if (!res.data.results) {
            return { data: data };
        }
        for (var key in res.data.results) {
            var queryRes = res.data.results[key];
            if (queryRes.series) {
                for (var _i = 0, _a = queryRes.series; _i < _a.length; _i++) {
                    var series = _a[_i];
                    data.push({
                        target: series.name,
                        datapoints: series.points,
                        refId: queryRes.refId,
                        meta: queryRes.meta,
                    });
                }
            }
            if (queryRes.tables) {
                for (var _b = 0, _c = queryRes.tables; _b < _c.length; _b++) {
                    var table = _c[_b];
                    table.type = 'table';
                    table.refId = queryRes.refId;
                    table.meta = queryRes.meta;
                    data.push(table);
                }
            }
        }
        return { data: data };
    };
    ResponseParser.prototype.parseMetricFindQueryResult = function (refId, results) {
        if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {
            return [];
        }
        var columns = results.data.results[refId].tables[0].columns;
        var rows = results.data.results[refId].tables[0].rows;
        var textColIndex = this.findColIndex(columns, '__text');
        var valueColIndex = this.findColIndex(columns, '__value');
        if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {
            return this.transformToKeyValueList(rows, textColIndex, valueColIndex);
        }
        return this.transformToSimpleList(rows);
    };
    ResponseParser.prototype.transformToKeyValueList = function (rows, textColIndex, valueColIndex) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            if (!this.containsKey(res, rows[i][textColIndex])) {
                res.push({
                    text: rows[i][textColIndex],
                    value: rows[i][valueColIndex],
                });
            }
        }
        return res;
    };
    ResponseParser.prototype.transformToSimpleList = function (rows) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            for (var j = 0; j < rows[i].length; j++) {
                var value = rows[i][j];
                if (res.indexOf(value) === -1) {
                    res.push(value);
                }
            }
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(res, function (value) {
            return { text: value };
        });
    };
    ResponseParser.prototype.findColIndex = function (columns, colName) {
        for (var i = 0; i < columns.length; i++) {
            if (columns[i].text === colName) {
                return i;
            }
        }
        return -1;
    };
    ResponseParser.prototype.containsKey = function (res, key) {
        for (var i = 0; i < res.length; i++) {
            if (res[i].text === key) {
                return true;
            }
        }
        return false;
    };
    ResponseParser.prototype.transformAnnotationResponse = function (options, data) {
        var table = data.data.results[options.annotation.name].tables[0];
        var timeColumnIndex = -1;
        var textColumnIndex = -1;
        var tagsColumnIndex = -1;
        for (var i = 0; i < table.columns.length; i++) {
            if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {
                timeColumnIndex = i;
            }
            else if (table.columns[i].text === 'title') {
                return this.$q.reject({
                    message: 'The title column for annotations is deprecated, now only a column named text is returned',
                });
            }
            else if (table.columns[i].text === 'text') {
                textColumnIndex = i;
            }
            else if (table.columns[i].text === 'tags') {
                tagsColumnIndex = i;
            }
        }
        if (timeColumnIndex === -1) {
            return this.$q.reject({
                message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',
            });
        }
        var list = [];
        for (var i = 0; i < table.rows.length; i++) {
            var row = table.rows[i];
            list.push({
                annotation: options.annotation,
                time: Math.floor(row[timeColumnIndex]),
                text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',
                tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\s*,\s*/) : [],
            });
        }
        return list;
    };
    return ResponseParser;
}());
/* harmony default export */ __webpack_exports__["default"] = (ResponseParser);


/***/ }),

/***/ "./public/app/plugins/datasource/opentsdb/config_ctrl.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/opentsdb/config_ctrl.ts ***!
  \***************************************************************/
/*! exports provided: OpenTsConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenTsConfigCtrl", function() { return OpenTsConfigCtrl; });
var OpenTsConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function OpenTsConfigCtrl($scope) {
        this.tsdbVersions = [{ name: '<=2.1', value: 1 }, { name: '==2.2', value: 2 }, { name: '==2.3', value: 3 }];
        this.tsdbResolutions = [{ name: 'second', value: 1 }, { name: 'millisecond', value: 2 }];
        this.current.jsonData = this.current.jsonData || {};
        this.current.jsonData.tsdbVersion = this.current.jsonData.tsdbVersion || 1;
        this.current.jsonData.tsdbResolution = this.current.jsonData.tsdbResolution || 1;
    }
    OpenTsConfigCtrl.templateUrl = 'public/app/plugins/datasource/opentsdb/partials/config.html';
    return OpenTsConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/opentsdb/datasource.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/opentsdb/datasource.ts ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");



var OpenTsDatasource = /** @class */ (function () {
    /** @ngInject */
    function OpenTsDatasource(instanceSettings, $q, backendSrv, templateSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.type = 'opentsdb';
        this.url = instanceSettings.url;
        this.name = instanceSettings.name;
        this.withCredentials = instanceSettings.withCredentials;
        this.basicAuth = instanceSettings.basicAuth;
        instanceSettings.jsonData = instanceSettings.jsonData || {};
        this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;
        this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;
        this.tagKeys = {};
        this.aggregatorsPromise = null;
        this.filterTypesPromise = null;
    }
    // Called once per panel (graph)
    OpenTsDatasource.prototype.query = function (options) {
        var _this = this;
        var start = this.convertToTSDBTime(options.rangeRaw.from, false);
        var end = this.convertToTSDBTime(options.rangeRaw.to, true);
        var qs = [];
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(options.targets, function (target) {
            if (!target.metric) {
                return;
            }
            qs.push(_this.convertTargetToQuery(target, options, _this.tsdbVersion));
        });
        var queries = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.compact(qs);
        // No valid targets, return the empty result to save a round trip.
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(queries)) {
            var d = this.$q.defer();
            d.resolve({ data: [] });
            return d.promise;
        }
        var groupByTags = {};
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(queries, function (query) {
            if (query.filters && query.filters.length > 0) {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(query.filters, function (val) {
                    groupByTags[val.tagk] = true;
                });
            }
            else {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(query.tags, function (val, key) {
                    groupByTags[key] = true;
                });
            }
        });
        options.targets = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(options.targets, function (query) {
            return query.hide !== true;
        });
        return this.performTimeSeriesQuery(queries, start, end).then(function (response) {
            var metricToTargetMapping = _this.mapMetricsToTargets(response.data, options, _this.tsdbVersion);
            var result = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(response.data, function (metricData, index) {
                index = metricToTargetMapping[index];
                if (index === -1) {
                    index = 0;
                }
                _this._saveTagKeys(metricData);
                return _this.transformMetricData(metricData, groupByTags, options.targets[index], options, _this.tsdbResolution);
            });
            return { data: result };
        });
    };
    OpenTsDatasource.prototype.annotationQuery = function (options) {
        var start = this.convertToTSDBTime(options.rangeRaw.from, false);
        var end = this.convertToTSDBTime(options.rangeRaw.to, true);
        var qs = [];
        var eventList = [];
        qs.push({ aggregator: 'sum', metric: options.annotation.target });
        var queries = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.compact(qs);
        return this.performTimeSeriesQuery(queries, start, end).then(function (results) {
            if (results.data[0]) {
                var annotationObject = results.data[0].annotations;
                if (options.annotation.isGlobal) {
                    annotationObject = results.data[0].globalAnnotations;
                }
                if (annotationObject) {
                    lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(annotationObject, function (annotation) {
                        var event = {
                            text: annotation.description,
                            time: Math.floor(annotation.startTime) * 1000,
                            annotation: options.annotation,
                        };
                        eventList.push(event);
                    });
                }
            }
            return eventList;
        });
    };
    OpenTsDatasource.prototype.targetContainsTemplate = function (target) {
        if (target.filters && target.filters.length > 0) {
            for (var i = 0; i < target.filters.length; i++) {
                if (this.templateSrv.variableExists(target.filters[i].filter)) {
                    return true;
                }
            }
        }
        if (target.tags && Object.keys(target.tags).length > 0) {
            for (var tagKey in target.tags) {
                if (this.templateSrv.variableExists(target.tags[tagKey])) {
                    return true;
                }
            }
        }
        return false;
    };
    OpenTsDatasource.prototype.performTimeSeriesQuery = function (queries, start, end) {
        var msResolution = false;
        if (this.tsdbResolution === 2) {
            msResolution = true;
        }
        var reqBody = {
            start: start,
            queries: queries,
            msResolution: msResolution,
            globalAnnotations: true,
        };
        if (this.tsdbVersion === 3) {
            reqBody.showQuery = true;
        }
        // Relative queries (e.g. last hour) don't include an end time
        if (end) {
            reqBody.end = end;
        }
        var options = {
            method: 'POST',
            url: this.url + '/api/query',
            data: reqBody,
        };
        this._addCredentialOptions(options);
        return this.backendSrv.datasourceRequest(options);
    };
    OpenTsDatasource.prototype.suggestTagKeys = function (metric) {
        return this.$q.when(this.tagKeys[metric] || []);
    };
    OpenTsDatasource.prototype._saveTagKeys = function (metricData) {
        var tagKeys = Object.keys(metricData.tags);
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(metricData.aggregateTags, function (tag) {
            tagKeys.push(tag);
        });
        this.tagKeys[metricData.metric] = tagKeys;
    };
    OpenTsDatasource.prototype._performSuggestQuery = function (query, type) {
        return this._get('/api/suggest', { type: type, q: query, max: 1000 }).then(function (result) {
            return result.data;
        });
    };
    OpenTsDatasource.prototype._performMetricKeyValueLookup = function (metric, keys) {
        if (!metric || !keys) {
            return this.$q.when([]);
        }
        var keysArray = keys.split(',').map(function (key) {
            return key.trim();
        });
        var key = keysArray[0];
        var keysQuery = key + '=*';
        if (keysArray.length > 1) {
            keysQuery += ',' + keysArray.splice(1).join(',');
        }
        var m = metric + '{' + keysQuery + '}';
        return this._get('/api/search/lookup', { m: m, limit: 3000 }).then(function (result) {
            result = result.data.results;
            var tagvs = [];
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(result, function (r) {
                if (tagvs.indexOf(r.tags[key]) === -1) {
                    tagvs.push(r.tags[key]);
                }
            });
            return tagvs;
        });
    };
    OpenTsDatasource.prototype._performMetricKeyLookup = function (metric) {
        if (!metric) {
            return this.$q.when([]);
        }
        return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then(function (result) {
            result = result.data.results;
            var tagks = [];
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(result, function (r) {
                lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(r.tags, function (tagv, tagk) {
                    if (tagks.indexOf(tagk) === -1) {
                        tagks.push(tagk);
                    }
                });
            });
            return tagks;
        });
    };
    OpenTsDatasource.prototype._get = function (relativeUrl, params) {
        var options = {
            method: 'GET',
            url: this.url + relativeUrl,
            params: params,
        };
        this._addCredentialOptions(options);
        return this.backendSrv.datasourceRequest(options);
    };
    OpenTsDatasource.prototype._addCredentialOptions = function (options) {
        if (this.basicAuth || this.withCredentials) {
            options.withCredentials = true;
        }
        if (this.basicAuth) {
            options.headers = { Authorization: this.basicAuth };
        }
    };
    OpenTsDatasource.prototype.metricFindQuery = function (query) {
        if (!query) {
            return this.$q.when([]);
        }
        var interpolated;
        try {
            interpolated = this.templateSrv.replace(query, {}, 'distributed');
        }
        catch (err) {
            return this.$q.reject(err);
        }
        var responseTransform = function (result) {
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(result, function (value) {
                return { text: value };
            });
        };
        var metricsRegex = /metrics\((.*)\)/;
        var tagNamesRegex = /tag_names\((.*)\)/;
        var tagValuesRegex = /tag_values\((.*?),\s?(.*)\)/;
        var tagNamesSuggestRegex = /suggest_tagk\((.*)\)/;
        var tagValuesSuggestRegex = /suggest_tagv\((.*)\)/;
        var metricsQuery = interpolated.match(metricsRegex);
        if (metricsQuery) {
            return this._performSuggestQuery(metricsQuery[1], 'metrics').then(responseTransform);
        }
        var tagNamesQuery = interpolated.match(tagNamesRegex);
        if (tagNamesQuery) {
            return this._performMetricKeyLookup(tagNamesQuery[1]).then(responseTransform);
        }
        var tagValuesQuery = interpolated.match(tagValuesRegex);
        if (tagValuesQuery) {
            return this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).then(responseTransform);
        }
        var tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);
        if (tagNamesSuggestQuery) {
            return this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').then(responseTransform);
        }
        var tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);
        if (tagValuesSuggestQuery) {
            return this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').then(responseTransform);
        }
        return this.$q.when([]);
    };
    OpenTsDatasource.prototype.testDatasource = function () {
        return this._performSuggestQuery('cpu', 'metrics').then(function () {
            return { status: 'success', message: 'Data source is working' };
        });
    };
    OpenTsDatasource.prototype.getAggregators = function () {
        if (this.aggregatorsPromise) {
            return this.aggregatorsPromise;
        }
        this.aggregatorsPromise = this._get('/api/aggregators').then(function (result) {
            if (result.data && lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(result.data)) {
                return result.data.sort();
            }
            return [];
        });
        return this.aggregatorsPromise;
    };
    OpenTsDatasource.prototype.getFilterTypes = function () {
        if (this.filterTypesPromise) {
            return this.filterTypesPromise;
        }
        this.filterTypesPromise = this._get('/api/config/filters').then(function (result) {
            if (result.data) {
                return Object.keys(result.data).sort();
            }
            return [];
        });
        return this.filterTypesPromise;
    };
    OpenTsDatasource.prototype.transformMetricData = function (md, groupByTags, target, options, tsdbResolution) {
        var metricLabel = this.createMetricLabel(md, target, groupByTags, options);
        var dps = [];
        // TSDB returns datapoints has a hash of ts => value.
        // Can't use _.pairs(invert()) because it stringifies keys/values
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(md.dps, function (v, k) {
            if (tsdbResolution === 2) {
                dps.push([v, k * 1]);
            }
            else {
                dps.push([v, k * 1000]);
            }
        });
        return { target: metricLabel, datapoints: dps };
    };
    OpenTsDatasource.prototype.createMetricLabel = function (md, target, groupByTags, options) {
        if (target.alias) {
            var scopedVars_1 = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.clone(options.scopedVars || {});
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(md.tags, function (value, key) {
                scopedVars_1['tag_' + key] = { value: value };
            });
            return this.templateSrv.replace(target.alias, scopedVars_1);
        }
        var label = md.metric;
        var tagData = [];
        if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(md.tags)) {
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.toPairs(md.tags), function (tag) {
                if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.has(groupByTags, tag[0])) {
                    tagData.push(tag[0] + '=' + tag[1]);
                }
            });
        }
        if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(tagData)) {
            label += '{' + tagData.join(', ') + '}';
        }
        return label;
    };
    OpenTsDatasource.prototype.convertTargetToQuery = function (target, options, tsdbVersion) {
        if (!target.metric || target.hide) {
            return null;
        }
        var query = {
            metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),
            aggregator: 'avg',
        };
        if (target.aggregator) {
            query.aggregator = this.templateSrv.replace(target.aggregator);
        }
        if (target.shouldComputeRate) {
            query.rate = true;
            query.rateOptions = {
                counter: !!target.isCounter,
            };
            if (target.counterMax && target.counterMax.length) {
                query.rateOptions.counterMax = parseInt(target.counterMax, 10);
            }
            if (target.counterResetValue && target.counterResetValue.length) {
                query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);
            }
            if (tsdbVersion >= 2) {
                query.rateOptions.dropResets =
                    !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);
            }
        }
        if (!target.disableDownsampling) {
            var interval = this.templateSrv.replace(target.downsampleInterval || options.interval);
            if (interval.match(/\.[0-9]+s/)) {
                interval = parseFloat(interval) * 1000 + 'ms';
            }
            query.downsample = interval + '-' + target.downsampleAggregator;
            if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {
                query.downsample += '-' + target.downsampleFillPolicy;
            }
        }
        if (target.filters && target.filters.length > 0) {
            query.filters = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(target.filters);
            if (query.filters) {
                for (var filterKey in query.filters) {
                    query.filters[filterKey].filter = this.templateSrv.replace(query.filters[filterKey].filter, options.scopedVars, 'pipe');
                }
            }
        }
        else {
            query.tags = angular__WEBPACK_IMPORTED_MODULE_0___default.a.copy(target.tags);
            if (query.tags) {
                for (var tagKey in query.tags) {
                    query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');
                }
            }
        }
        if (target.explicitTags) {
            query.explicitTags = true;
        }
        return query;
    };
    OpenTsDatasource.prototype.mapMetricsToTargets = function (metrics, options, tsdbVersion) {
        var _this = this;
        var interpolatedTagValue, arrTagV;
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(metrics, function (metricData) {
            if (tsdbVersion === 3) {
                return metricData.query.index;
            }
            else {
                return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.findIndex(options.targets, function (target) {
                    if (target.filters && target.filters.length > 0) {
                        return target.metric === metricData.metric;
                    }
                    else {
                        return (target.metric === metricData.metric &&
                            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.every(target.tags, function (tagV, tagK) {
                                interpolatedTagValue = _this.templateSrv.replace(tagV, options.scopedVars, 'pipe');
                                arrTagV = interpolatedTagValue.split('|');
                                return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';
                            }));
                    }
                });
            }
        });
    };
    OpenTsDatasource.prototype.convertToTSDBTime = function (date, roundUp) {
        if (date === 'now') {
            return null;
        }
        date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_2__["parse"](date, roundUp);
        return date.valueOf();
    };
    return OpenTsDatasource;
}());
/* harmony default export */ __webpack_exports__["default"] = (OpenTsDatasource);


/***/ }),

/***/ "./public/app/plugins/datasource/opentsdb/module.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/opentsdb/module.ts ***!
  \**********************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return AnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/opentsdb/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/opentsdb/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["OpenTsQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/opentsdb/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["OpenTsConfigCtrl"]; });




var AnnotationsQueryCtrl = /** @class */ (function () {
    function AnnotationsQueryCtrl() {
    }
    AnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return AnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/opentsdb/query_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/opentsdb/query_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: OpenTsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenTsQueryCtrl", function() { return OpenTsQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");




var OpenTsQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](OpenTsQueryCtrl, _super);
    /** @ngInject */
    function OpenTsQueryCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.errors = _this.validateTarget();
        _this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];
        _this.fillPolicies = ['none', 'nan', 'null', 'zero'];
        _this.filterTypes = [
            'wildcard',
            'iliteral_or',
            'not_iliteral_or',
            'not_literal_or',
            'iwildcard',
            'literal_or',
            'regexp',
        ];
        _this.tsdbVersion = _this.datasource.tsdbVersion;
        if (!_this.target.aggregator) {
            _this.target.aggregator = 'sum';
        }
        if (!_this.target.downsampleAggregator) {
            _this.target.downsampleAggregator = 'avg';
        }
        if (!_this.target.downsampleFillPolicy) {
            _this.target.downsampleFillPolicy = 'none';
        }
        _this.datasource.getAggregators().then(function (aggs) {
            if (aggs.length !== 0) {
                _this.aggregators = aggs;
            }
        });
        _this.datasource.getFilterTypes().then(function (filterTypes) {
            if (filterTypes.length !== 0) {
                _this.filterTypes = filterTypes;
            }
        });
        // needs to be defined here as it is called from typeahead
        _this.suggestMetrics = function (query, callback) {
            _this.datasource
                .metricFindQuery('metrics(' + query + ')')
                .then(_this.getTextValues)
                .then(callback);
        };
        _this.suggestTagKeys = function (query, callback) {
            _this.datasource.suggestTagKeys(_this.target.metric).then(callback);
        };
        _this.suggestTagValues = function (query, callback) {
            _this.datasource
                .metricFindQuery('suggest_tagv(' + query + ')')
                .then(_this.getTextValues)
                .then(callback);
        };
        return _this;
    }
    OpenTsQueryCtrl.prototype.targetBlur = function () {
        this.errors = this.validateTarget();
        this.refresh();
    };
    OpenTsQueryCtrl.prototype.getTextValues = function (metricFindResult) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(metricFindResult, function (value) {
            return value.text;
        });
    };
    OpenTsQueryCtrl.prototype.addTag = function () {
        if (this.target.filters && this.target.filters.length > 0) {
            this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';
        }
        if (!this.addTagMode) {
            this.addTagMode = true;
            return;
        }
        if (!this.target.tags) {
            this.target.tags = {};
        }
        this.errors = this.validateTarget();
        if (!this.errors.tags) {
            this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;
            this.target.currentTagKey = '';
            this.target.currentTagValue = '';
            this.targetBlur();
        }
        this.addTagMode = false;
    };
    OpenTsQueryCtrl.prototype.removeTag = function (key) {
        delete this.target.tags[key];
        this.targetBlur();
    };
    OpenTsQueryCtrl.prototype.editTag = function (key, value) {
        this.removeTag(key);
        this.target.currentTagKey = key;
        this.target.currentTagValue = value;
        this.addTag();
    };
    OpenTsQueryCtrl.prototype.closeAddTagMode = function () {
        this.addTagMode = false;
        return;
    };
    OpenTsQueryCtrl.prototype.addFilter = function () {
        if (this.target.tags && lodash__WEBPACK_IMPORTED_MODULE_1___default.a.size(this.target.tags) > 0) {
            this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';
        }
        if (!this.addFilterMode) {
            this.addFilterMode = true;
            return;
        }
        if (!this.target.filters) {
            this.target.filters = [];
        }
        if (!this.target.currentFilterType) {
            this.target.currentFilterType = 'iliteral_or';
        }
        if (!this.target.currentFilterGroupBy) {
            this.target.currentFilterGroupBy = false;
        }
        this.errors = this.validateTarget();
        if (!this.errors.filters) {
            var currentFilter = {
                type: this.target.currentFilterType,
                tagk: this.target.currentFilterKey,
                filter: this.target.currentFilterValue,
                groupBy: this.target.currentFilterGroupBy,
            };
            this.target.filters.push(currentFilter);
            this.target.currentFilterType = 'literal_or';
            this.target.currentFilterKey = '';
            this.target.currentFilterValue = '';
            this.target.currentFilterGroupBy = false;
            this.targetBlur();
        }
        this.addFilterMode = false;
    };
    OpenTsQueryCtrl.prototype.removeFilter = function (index) {
        this.target.filters.splice(index, 1);
        this.targetBlur();
    };
    OpenTsQueryCtrl.prototype.editFilter = function (fil, index) {
        this.removeFilter(index);
        this.target.currentFilterKey = fil.tagk;
        this.target.currentFilterValue = fil.filter;
        this.target.currentFilterType = fil.type;
        this.target.currentFilterGroupBy = fil.groupBy;
        this.addFilter();
    };
    OpenTsQueryCtrl.prototype.closeAddFilterMode = function () {
        this.addFilterMode = false;
        return;
    };
    OpenTsQueryCtrl.prototype.validateTarget = function () {
        var errs = {};
        if (this.target.shouldDownsample) {
            try {
                if (this.target.downsampleInterval) {
                    app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].describe_interval(this.target.downsampleInterval);
                }
                else {
                    errs.downsampleInterval = "You must supply a downsample interval (e.g. '1m' or '1h').";
                }
            }
            catch (err) {
                errs.downsampleInterval = err.message;
            }
        }
        if (this.target.tags && lodash__WEBPACK_IMPORTED_MODULE_1___default.a.has(this.target.tags, this.target.currentTagKey)) {
            errs.tags = "Duplicate tag key '" + this.target.currentTagKey + "'.";
        }
        return errs;
    };
    OpenTsQueryCtrl.templateUrl = 'partials/query.editor.html';
    return OpenTsQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/config_ctrl.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/config_ctrl.ts ***!
  \***************************************************************/
/*! exports provided: PostgresConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostgresConfigCtrl", function() { return PostgresConfigCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var PostgresConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function PostgresConfigCtrl($scope, datasourceSrv) {
        // the value portion is derived from postgres server_version_num/100
        this.postgresVersions = [
            { name: '9.3', value: 903 },
            { name: '9.4', value: 904 },
            { name: '9.5', value: 905 },
            { name: '9.6', value: 906 },
            { name: '10', value: 1000 },
        ];
        this.datasourceSrv = datasourceSrv;
        this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';
        this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;
        this.showTimescaleDBHelp = false;
        this.autoDetectFeatures();
    }
    PostgresConfigCtrl.prototype.autoDetectFeatures = function () {
        var _this = this;
        if (!this.current.id) {
            return;
        }
        this.datasourceSrv.loadDatasource(this.current.name).then(function (ds) {
            return ds.getVersion().then(function (version) {
                version = Number(version[0].text);
                // timescaledb is only available for 9.6+
                if (version >= 906) {
                    ds.getTimescaleDBVersion().then(function (version) {
                        if (version.length === 1) {
                            _this.current.jsonData.timescaledb = true;
                        }
                    });
                }
                var major = Math.trunc(version / 100);
                var minor = version % 100;
                var name = String(major);
                if (version < 1000) {
                    name = String(major) + '.' + String(minor);
                }
                if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(_this.postgresVersions, function (p) { return p.value === version; })) {
                    _this.postgresVersions.push({ name: name, value: version });
                }
                _this.current.jsonData.postgresVersion = version;
            });
        });
    };
    PostgresConfigCtrl.prototype.toggleTimescaleDBHelp = function () {
        this.showTimescaleDBHelp = !this.showTimescaleDBHelp;
    };
    PostgresConfigCtrl.templateUrl = 'partials/config.html';
    return PostgresConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/datasource.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/datasource.ts ***!
  \**************************************************************/
/*! exports provided: PostgresDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostgresDatasource", function() { return PostgresDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./response_parser */ "./public/app/plugins/datasource/postgres/response_parser.ts");
/* harmony import */ var app_plugins_datasource_postgres_postgres_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/datasource/postgres/postgres_query */ "./public/app/plugins/datasource/postgres/postgres_query.ts");



var PostgresDatasource = /** @class */ (function () {
    /** @ngInject */
    function PostgresDatasource(instanceSettings, backendSrv, $q, templateSrv, timeSrv) {
        this.backendSrv = backendSrv;
        this.$q = $q;
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
        this.name = instanceSettings.name;
        this.id = instanceSettings.id;
        this.jsonData = instanceSettings.jsonData;
        this.responseParser = new _response_parser__WEBPACK_IMPORTED_MODULE_1__["default"](this.$q);
        this.queryModel = new app_plugins_datasource_postgres_postgres_query__WEBPACK_IMPORTED_MODULE_2__["default"]({});
        this.interval = (instanceSettings.jsonData || {}).timeInterval;
    }
    PostgresDatasource.prototype.interpolateVariable = function (value, variable) {
        var _this = this;
        if (typeof value === 'string') {
            if (variable.multi || variable.includeAll) {
                return this.queryModel.quoteLiteral(value);
            }
            else {
                return value;
            }
        }
        if (typeof value === 'number') {
            return value;
        }
        var quotedValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(value, function (v) {
            return _this.queryModel.quoteLiteral(v);
        });
        return quotedValues.join(',');
    };
    PostgresDatasource.prototype.query = function (options) {
        var _this = this;
        var queries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(options.targets, function (target) {
            return target.hide !== true;
        }).map(function (target) {
            var queryModel = new app_plugins_datasource_postgres_postgres_query__WEBPACK_IMPORTED_MODULE_2__["default"](target, _this.templateSrv, options.scopedVars);
            return {
                refId: target.refId,
                intervalMs: options.intervalMs,
                maxDataPoints: options.maxDataPoints,
                datasourceId: _this.id,
                rawSql: queryModel.render(_this.interpolateVariable),
                format: target.format,
            };
        });
        if (queries.length === 0) {
            return this.$q.when({ data: [] });
        }
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: queries,
            },
        })
            .then(this.responseParser.processQueryResult);
    };
    PostgresDatasource.prototype.annotationQuery = function (options) {
        var _this = this;
        if (!options.annotation.rawQuery) {
            return this.$q.reject({
                message: 'Query missing in annotation definition',
            });
        }
        var query = {
            refId: options.annotation.name,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),
            format: 'table',
        };
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: {
                from: options.range.from.valueOf().toString(),
                to: options.range.to.valueOf().toString(),
                queries: [query],
            },
        })
            .then(function (data) { return _this.responseParser.transformAnnotationResponse(options, data); });
    };
    PostgresDatasource.prototype.metricFindQuery = function (query, optionalOptions) {
        var _this = this;
        var refId = 'tempvar';
        if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {
            refId = optionalOptions.variable.name;
        }
        var interpolatedQuery = {
            refId: refId,
            datasourceId: this.id,
            rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),
            format: 'table',
        };
        var range = this.timeSrv.timeRange();
        var data = {
            queries: [interpolatedQuery],
            from: range.from.valueOf().toString(),
            to: range.to.valueOf().toString(),
        };
        return this.backendSrv
            .datasourceRequest({
            url: '/api/tsdb/query',
            method: 'POST',
            data: data,
        })
            .then(function (data) { return _this.responseParser.parseMetricFindQueryResult(refId, data); });
    };
    PostgresDatasource.prototype.getVersion = function () {
        return this.metricFindQuery("SELECT current_setting('server_version_num')::int/100", {});
    };
    PostgresDatasource.prototype.getTimescaleDBVersion = function () {
        return this.metricFindQuery("SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'", {});
    };
    PostgresDatasource.prototype.testDatasource = function () {
        return this.metricFindQuery('SELECT 1', {})
            .then(function (res) {
            return { status: 'success', message: 'Database Connection OK' };
        })
            .catch(function (err) {
            console.log(err);
            if (err.data && err.data.message) {
                return { status: 'error', message: err.data.message };
            }
            else {
                return { status: 'error', message: err.status };
            }
        });
    };
    return PostgresDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/meta_query.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/meta_query.ts ***!
  \**************************************************************/
/*! exports provided: PostgresMetaQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostgresMetaQuery", function() { return PostgresMetaQuery; });
var PostgresMetaQuery = /** @class */ (function () {
    function PostgresMetaQuery(target, queryModel) {
        this.target = target;
        this.queryModel = queryModel;
    }
    PostgresMetaQuery.prototype.getOperators = function (datatype) {
        switch (datatype) {
            case 'float4':
            case 'float8': {
                return ['=', '!=', '<', '<=', '>', '>='];
            }
            case 'text':
            case 'varchar':
            case 'char': {
                return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];
            }
            default: {
                return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];
            }
        }
    };
    // quote identifier as literal to use in metadata queries
    PostgresMetaQuery.prototype.quoteIdentAsLiteral = function (value) {
        return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));
    };
    PostgresMetaQuery.prototype.findMetricTable = function () {
        // query that returns first table found that has a timestamp(tz) column and a float column
        var query = "\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE ";
        query += this.buildSchemaConstraint();
        query += " AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;";
        return query;
    };
    PostgresMetaQuery.prototype.buildSchemaConstraint = function () {
        var query = "\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)";
        return query;
    };
    PostgresMetaQuery.prototype.buildTableConstraint = function (table) {
        var query = '';
        // check for schema qualified table
        if (table.includes('.')) {
            var parts = table.split('.');
            query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);
            query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);
            return query;
        }
        else {
            query = this.buildSchemaConstraint();
            query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);
            return query;
        }
    };
    PostgresMetaQuery.prototype.buildTableQuery = function () {
        var query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';
        query += this.buildSchemaConstraint();
        query += ' ORDER BY table_name';
        return query;
    };
    PostgresMetaQuery.prototype.buildColumnQuery = function (type) {
        var query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';
        query += this.buildTableConstraint(this.target.table);
        switch (type) {
            case 'time': {
                query +=
                    " AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')";
                break;
            }
            case 'metric': {
                query += " AND data_type IN ('text','character','character varying')";
                break;
            }
            case 'value': {
                query += " AND data_type IN ('bigint','integer','double precision','real')";
                query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);
                break;
            }
            case 'group': {
                query += " AND data_type IN ('text','character','character varying')";
                break;
            }
        }
        query += ' ORDER BY column_name';
        return query;
    };
    PostgresMetaQuery.prototype.buildValueQuery = function (column) {
        var query = 'SELECT DISTINCT quote_literal(' + column + ')';
        query += ' FROM ' + this.target.table;
        query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';
        query += ' AND ' + column + ' IS NOT NULL';
        query += ' ORDER BY 1 LIMIT 100';
        return query;
    };
    PostgresMetaQuery.prototype.buildDatatypeQuery = function (column) {
        var query = 'SELECT udt_name FROM information_schema.columns WHERE ';
        query += this.buildSchemaConstraint();
        query += ' AND table_name = ' + this.quoteIdentAsLiteral(this.target.table);
        query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);
        return query;
    };
    PostgresMetaQuery.prototype.buildAggregateQuery = function () {
        var query = 'SELECT DISTINCT proname FROM pg_aggregate ';
        query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';
        query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';
        query += "WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1";
        return query;
    };
    return PostgresMetaQuery;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/module.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/module.ts ***!
  \**********************************************************/
/*! exports provided: PostgresDatasource, Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return PostgresAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/postgres/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PostgresDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["PostgresDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["PostgresDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/postgres/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["PostgresQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/postgres/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["PostgresConfigCtrl"]; });




var defaultQuery = "SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n";
var PostgresAnnotationsQueryCtrl = /** @class */ (function () {
    /** @ngInject */
    function PostgresAnnotationsQueryCtrl() {
        this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;
    }
    PostgresAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return PostgresAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/postgres_query.ts":
/*!******************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/postgres_query.ts ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var PostgresQuery = /** @class */ (function () {
    /** @ngInject */
    function PostgresQuery(target, templateSrv, scopedVars) {
        this.target = target;
        this.templateSrv = templateSrv;
        this.scopedVars = scopedVars;
        target.format = target.format || 'time_series';
        target.timeColumn = target.timeColumn || 'time';
        target.metricColumn = target.metricColumn || 'none';
        target.group = target.group || [];
        target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];
        target.select = target.select || [[{ type: 'column', params: ['value'] }]];
        // handle pre query gui panels gracefully
        if (!('rawQuery' in this.target)) {
            if ('rawSql' in target) {
                // pre query gui panel
                target.rawQuery = true;
            }
            else {
                // new panel
                target.rawQuery = false;
            }
        }
        // give interpolateQueryStr access to this
        this.interpolateQueryStr = this.interpolateQueryStr.bind(this);
    }
    // remove identifier quoting from identifier to use in metadata queries
    PostgresQuery.prototype.unquoteIdentifier = function (value) {
        if (value[0] === '"' && value[value.length - 1] === '"') {
            return value.substring(1, value.length - 1).replace(/""/g, '"');
        }
        else {
            return value;
        }
    };
    PostgresQuery.prototype.quoteIdentifier = function (value) {
        return '"' + String(value).replace(/"/g, '""') + '"';
    };
    PostgresQuery.prototype.quoteLiteral = function (value) {
        return "'" + String(value).replace(/'/g, "''") + "'";
    };
    PostgresQuery.prototype.escapeLiteral = function (value) {
        return String(value).replace(/'/g, "''");
    };
    PostgresQuery.prototype.hasTimeGroup = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.target.group, function (g) { return g.type === 'time'; });
    };
    PostgresQuery.prototype.hasMetricColumn = function () {
        return this.target.metricColumn !== 'none';
    };
    PostgresQuery.prototype.interpolateQueryStr = function (value, variable, defaultFormatFn) {
        // if no multi or include all do not regexEscape
        if (!variable.multi && !variable.includeAll) {
            return this.escapeLiteral(value);
        }
        if (typeof value === 'string') {
            return this.quoteLiteral(value);
        }
        var escapedValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(value, this.quoteLiteral);
        return escapedValues.join(',');
    };
    PostgresQuery.prototype.render = function (interpolate) {
        var target = this.target;
        // new query with no table set yet
        if (!this.target.rawQuery && !('table' in this.target)) {
            return '';
        }
        if (!target.rawQuery) {
            target.rawSql = this.buildQuery();
        }
        if (interpolate) {
            return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);
        }
        else {
            return target.rawSql;
        }
    };
    PostgresQuery.prototype.hasUnixEpochTimecolumn = function () {
        return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;
    };
    PostgresQuery.prototype.buildTimeColumn = function (alias) {
        if (alias === void 0) { alias = true; }
        var timeGroup = this.hasTimeGroup();
        var query;
        var macro = '$__timeGroup';
        if (timeGroup) {
            var args = void 0;
            if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {
                args = timeGroup.params.join(',');
            }
            else {
                args = timeGroup.params[0];
            }
            if (this.hasUnixEpochTimecolumn()) {
                macro = '$__unixEpochGroup';
            }
            if (alias) {
                macro += 'Alias';
            }
            query = macro + '(' + this.target.timeColumn + ',' + args + ')';
        }
        else {
            query = this.target.timeColumn;
            if (alias) {
                query += ' AS "time"';
            }
        }
        return query;
    };
    PostgresQuery.prototype.buildMetricColumn = function () {
        if (this.hasMetricColumn()) {
            return this.target.metricColumn + ' AS metric';
        }
        return '';
    };
    PostgresQuery.prototype.buildValueColumns = function () {
        var query = '';
        for (var _i = 0, _a = this.target.select; _i < _a.length; _i++) {
            var column = _a[_i];
            query += ',\n  ' + this.buildValueColumn(column);
        }
        return query;
    };
    PostgresQuery.prototype.buildValueColumn = function (column) {
        var query = '';
        var columnName = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(column, function (g) { return g.type === 'column'; });
        query = columnName.params[0];
        var aggregate = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(column, function (g) { return g.type === 'aggregate' || g.type === 'percentile'; });
        var windows = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(column, function (g) { return g.type === 'window' || g.type === 'moving_window'; });
        if (aggregate) {
            var func = aggregate.params[0];
            switch (aggregate.type) {
                case 'aggregate':
                    if (func === 'first' || func === 'last') {
                        query = func + '(' + query + ',' + this.target.timeColumn + ')';
                    }
                    else {
                        query = func + '(' + query + ')';
                    }
                    break;
                case 'percentile':
                    query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';
                    break;
            }
        }
        if (windows) {
            var overParts = [];
            if (this.hasMetricColumn()) {
                overParts.push('PARTITION BY ' + this.target.metricColumn);
            }
            overParts.push('ORDER BY ' + this.buildTimeColumn(false));
            var over = overParts.join(' ');
            var curr = void 0;
            var prev = void 0;
            switch (windows.type) {
                case 'window':
                    switch (windows.params[0]) {
                        case 'increase':
                            curr = query;
                            prev = 'lag(' + curr + ') OVER (' + over + ')';
                            query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;
                            query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';
                            break;
                        case 'rate':
                            var timeColumn = this.target.timeColumn;
                            if (aggregate) {
                                timeColumn = 'min(' + timeColumn + ')';
                            }
                            curr = query;
                            prev = 'lag(' + curr + ') OVER (' + over + ')';
                            query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;
                            query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';
                            query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';
                            break;
                        default:
                            query = windows.params[0] + '(' + query + ') OVER (' + over + ')';
                            break;
                    }
                    break;
                case 'moving_window':
                    query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';
                    break;
            }
        }
        var alias = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(column, function (g) { return g.type === 'alias'; });
        if (alias) {
            query += ' AS ' + this.quoteIdentifier(alias.params[0]);
        }
        return query;
    };
    PostgresQuery.prototype.buildWhereClause = function () {
        var _this = this;
        var query = '';
        var conditions = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(this.target.where, function (tag, index) {
            switch (tag.type) {
                case 'macro':
                    return tag.name + '(' + _this.target.timeColumn + ')';
                    break;
                case 'expression':
                    return tag.params.join(' ');
                    break;
            }
        });
        if (conditions.length > 0) {
            query = '\nWHERE\n  ' + conditions.join(' AND\n  ');
        }
        return query;
    };
    PostgresQuery.prototype.buildGroupClause = function () {
        var query = '';
        var groupSection = '';
        for (var i = 0; i < this.target.group.length; i++) {
            var part = this.target.group[i];
            if (i > 0) {
                groupSection += ', ';
            }
            if (part.type === 'time') {
                groupSection += '1';
            }
            else {
                groupSection += part.params[0];
            }
        }
        if (groupSection.length) {
            query = '\nGROUP BY ' + groupSection;
            if (this.hasMetricColumn()) {
                query += ',2';
            }
        }
        return query;
    };
    PostgresQuery.prototype.buildQuery = function () {
        var query = 'SELECT';
        query += '\n  ' + this.buildTimeColumn();
        if (this.hasMetricColumn()) {
            query += ',\n  ' + this.buildMetricColumn();
        }
        query += this.buildValueColumns();
        query += '\nFROM ' + this.target.table;
        query += this.buildWhereClause();
        query += this.buildGroupClause();
        query += '\nORDER BY 1';
        if (this.hasMetricColumn()) {
            query += ',2';
        }
        return query;
    };
    return PostgresQuery;
}());
/* harmony default export */ __webpack_exports__["default"] = (PostgresQuery);


/***/ }),

/***/ "./public/app/plugins/datasource/postgres/query_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/query_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: PostgresQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostgresQueryCtrl", function() { return PostgresQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");
/* harmony import */ var _meta_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./meta_query */ "./public/app/plugins/datasource/postgres/meta_query.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var _postgres_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./postgres_query */ "./public/app/plugins/datasource/postgres/postgres_query.ts");
/* harmony import */ var _sql_part__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sql_part */ "./public/app/plugins/datasource/postgres/sql_part.ts");







var defaultQuery = "SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n";
var PostgresQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PostgresQueryCtrl, _super);
    /** @ngInject */
    function PostgresQueryCtrl($scope, $injector, templateSrv, $q, uiSegmentSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.templateSrv = templateSrv;
        _this.$q = $q;
        _this.uiSegmentSrv = uiSegmentSrv;
        _this.target = _this.target;
        _this.queryModel = new _postgres_query__WEBPACK_IMPORTED_MODULE_5__["default"](_this.target, templateSrv, _this.panel.scopedVars);
        _this.metaBuilder = new _meta_query__WEBPACK_IMPORTED_MODULE_3__["PostgresMetaQuery"](_this.target, _this.queryModel);
        _this.updateProjection();
        _this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];
        if (!_this.target.rawSql) {
            // special handling when in table panel
            if (_this.panelCtrl.panel.type === 'table') {
                _this.target.format = 'table';
                _this.target.rawSql = 'SELECT 1';
                _this.target.rawQuery = true;
            }
            else {
                _this.target.rawSql = defaultQuery;
                _this.datasource.metricFindQuery(_this.metaBuilder.findMetricTable()).then(function (result) {
                    if (result.length > 0) {
                        _this.target.table = result[0].text;
                        var segment = _this.uiSegmentSrv.newSegment(_this.target.table);
                        _this.tableSegment.html = segment.html;
                        _this.tableSegment.value = segment.value;
                        _this.target.timeColumn = result[1].text;
                        segment = _this.uiSegmentSrv.newSegment(_this.target.timeColumn);
                        _this.timeColumnSegment.html = segment.html;
                        _this.timeColumnSegment.value = segment.value;
                        _this.target.timeColumnType = 'timestamp';
                        _this.target.select = [[{ type: 'column', params: [result[2].text] }]];
                        _this.updateProjection();
                        _this.panelCtrl.refresh();
                    }
                });
            }
        }
        if (!_this.target.table) {
            _this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });
        }
        else {
            _this.tableSegment = uiSegmentSrv.newSegment(_this.target.table);
        }
        _this.timeColumnSegment = uiSegmentSrv.newSegment(_this.target.timeColumn);
        _this.metricColumnSegment = uiSegmentSrv.newSegment(_this.target.metricColumn);
        _this.buildSelectMenu();
        _this.whereAdd = _this.uiSegmentSrv.newPlusButton();
        _this.groupAdd = _this.uiSegmentSrv.newPlusButton();
        _this.panelCtrl.events.on('data-received', _this.onDataReceived.bind(_this), $scope);
        _this.panelCtrl.events.on('data-error', _this.onDataError.bind(_this), $scope);
        return _this;
    }
    PostgresQueryCtrl.prototype.updateProjection = function () {
        this.selectParts = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.target.select, function (parts) {
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(parts, _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create).filter(function (n) { return n; });
        });
        this.whereParts = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.target.where, _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create).filter(function (n) { return n; });
        this.groupParts = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.target.group, _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create).filter(function (n) { return n; });
    };
    PostgresQueryCtrl.prototype.updatePersistedParts = function () {
        this.target.select = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.selectParts, function (selectParts) {
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(selectParts, function (part) {
                return { type: part.def.type, datatype: part.datatype, params: part.params };
            });
        });
        this.target.where = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.whereParts, function (part) {
            return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };
        });
        this.target.group = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.groupParts, function (part) {
            return { type: part.def.type, datatype: part.datatype, params: part.params };
        });
    };
    PostgresQueryCtrl.prototype.buildSelectMenu = function () {
        this.selectMenu = [];
        var aggregates = {
            text: 'Aggregate Functions',
            value: 'aggregate',
            submenu: [
                { text: 'Average', value: 'avg' },
                { text: 'Count', value: 'count' },
                { text: 'Maximum', value: 'max' },
                { text: 'Minimum', value: 'min' },
                { text: 'Sum', value: 'sum' },
                { text: 'Standard deviation', value: 'stddev' },
                { text: 'Variance', value: 'variance' },
            ],
        };
        // first and last aggregate are timescaledb specific
        if (this.datasource.jsonData.timescaledb === true) {
            aggregates.submenu.push({ text: 'First', value: 'first' });
            aggregates.submenu.push({ text: 'Last', value: 'last' });
        }
        this.selectMenu.push(aggregates);
        // ordered set aggregates require postgres 9.4+
        if (this.datasource.jsonData.postgresVersion >= 904) {
            var aggregates2 = {
                text: 'Ordered-Set Aggregate Functions',
                value: 'percentile',
                submenu: [
                    { text: 'Percentile (continuous)', value: 'percentile_cont' },
                    { text: 'Percentile (discrete)', value: 'percentile_disc' },
                ],
            };
            this.selectMenu.push(aggregates2);
        }
        var windows = {
            text: 'Window Functions',
            value: 'window',
            submenu: [
                { text: 'Increase', value: 'increase' },
                { text: 'Rate', value: 'rate' },
                { text: 'Sum', value: 'sum' },
                { text: 'Moving Average', value: 'avg', type: 'moving_window' },
            ],
        };
        this.selectMenu.push(windows);
        this.selectMenu.push({ text: 'Alias', value: 'alias' });
        this.selectMenu.push({ text: 'Column', value: 'column' });
    };
    PostgresQueryCtrl.prototype.toggleEditorMode = function () {
        var _this = this;
        if (this.target.rawQuery) {
            app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('confirm-modal', {
                title: 'Warning',
                text2: 'Switching to query builder may overwrite your raw SQL.',
                icon: 'fa-exclamation',
                yesText: 'Switch',
                onConfirm: function () {
                    _this.target.rawQuery = !_this.target.rawQuery;
                },
            });
        }
        else {
            this.target.rawQuery = !this.target.rawQuery;
        }
    };
    PostgresQueryCtrl.prototype.resetPlusButton = function (button) {
        var plusButton = this.uiSegmentSrv.newPlusButton();
        button.html = plusButton.html;
        button.value = plusButton.value;
    };
    PostgresQueryCtrl.prototype.getTableSegments = function () {
        return this.datasource
            .metricFindQuery(this.metaBuilder.buildTableQuery())
            .then(this.transformToSegments({}))
            .catch(this.handleQueryError.bind(this));
    };
    PostgresQueryCtrl.prototype.tableChanged = function () {
        var _this = this;
        this.target.table = this.tableSegment.value;
        this.target.where = [];
        this.target.group = [];
        this.updateProjection();
        var segment = this.uiSegmentSrv.newSegment('none');
        this.metricColumnSegment.html = segment.html;
        this.metricColumnSegment.value = segment.value;
        this.target.metricColumn = 'none';
        var task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then(function (result) {
            // check if time column is still valid
            if (result.length > 0 && !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(result, function (r) { return r.text === _this.target.timeColumn; })) {
                var segment_1 = _this.uiSegmentSrv.newSegment(result[0].text);
                _this.timeColumnSegment.html = segment_1.html;
                _this.timeColumnSegment.value = segment_1.value;
            }
            return _this.timeColumnChanged(false);
        });
        var task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then(function (result) {
            if (result.length > 0) {
                _this.target.select = [[{ type: 'column', params: [result[0].text] }]];
                _this.updateProjection();
            }
        });
        this.$q.all([task1, task2]).then(function () {
            _this.panelCtrl.refresh();
        });
    };
    PostgresQueryCtrl.prototype.getTimeColumnSegments = function () {
        return this.datasource
            .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))
            .then(this.transformToSegments({}))
            .catch(this.handleQueryError.bind(this));
    };
    PostgresQueryCtrl.prototype.timeColumnChanged = function (refresh) {
        var _this = this;
        this.target.timeColumn = this.timeColumnSegment.value;
        return this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn)).then(function (result) {
            if (result.length === 1) {
                if (_this.target.timeColumnType !== result[0].text) {
                    _this.target.timeColumnType = result[0].text;
                }
                var partModel = void 0;
                if (_this.queryModel.hasUnixEpochTimecolumn()) {
                    partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'macro', name: '$__unixEpochFilter', params: [] });
                }
                else {
                    partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'macro', name: '$__timeFilter', params: [] });
                }
                if (_this.whereParts.length >= 1 && _this.whereParts[0].def.type === 'macro') {
                    // replace current macro
                    _this.whereParts[0] = partModel;
                }
                else {
                    _this.whereParts.splice(0, 0, partModel);
                }
            }
            _this.updatePersistedParts();
            if (refresh !== false) {
                _this.panelCtrl.refresh();
            }
        });
    };
    PostgresQueryCtrl.prototype.getMetricColumnSegments = function () {
        return this.datasource
            .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))
            .then(this.transformToSegments({ addNone: true }))
            .catch(this.handleQueryError.bind(this));
    };
    PostgresQueryCtrl.prototype.metricColumnChanged = function () {
        this.target.metricColumn = this.metricColumnSegment.value;
        this.panelCtrl.refresh();
    };
    PostgresQueryCtrl.prototype.onDataReceived = function (dataList) {
        this.lastQueryMeta = null;
        this.lastQueryError = null;
        var anySeriesFromQuery = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(dataList, { refId: this.target.refId });
        if (anySeriesFromQuery) {
            this.lastQueryMeta = anySeriesFromQuery.meta;
        }
    };
    PostgresQueryCtrl.prototype.onDataError = function (err) {
        if (err.data && err.data.results) {
            var queryRes = err.data.results[this.target.refId];
            if (queryRes) {
                this.lastQueryMeta = queryRes.meta;
                this.lastQueryError = queryRes.error;
            }
        }
    };
    PostgresQueryCtrl.prototype.transformToSegments = function (config) {
        var _this = this;
        return function (results) {
            var segments = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(results, function (segment) {
                return _this.uiSegmentSrv.newSegment({
                    value: segment.text,
                    expandable: segment.expandable,
                });
            });
            if (config.addTemplateVars) {
                for (var _i = 0, _a = _this.templateSrv.variables; _i < _a.length; _i++) {
                    var variable = _a[_i];
                    var value = void 0;
                    value = '$' + variable.name;
                    if (config.templateQuoter && variable.multi === false) {
                        value = config.templateQuoter(value);
                    }
                    segments.unshift(_this.uiSegmentSrv.newSegment({
                        type: 'template',
                        value: value,
                        expandable: true,
                    }));
                }
            }
            if (config.addNone) {
                segments.unshift(_this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));
            }
            return segments;
        };
    };
    PostgresQueryCtrl.prototype.findAggregateIndex = function (selectParts) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.findIndex(selectParts, function (p) { return p.def.type === 'aggregate' || p.def.type === 'percentile'; });
    };
    PostgresQueryCtrl.prototype.findWindowIndex = function (selectParts) {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.findIndex(selectParts, function (p) { return p.def.type === 'window' || p.def.type === 'moving_window'; });
    };
    PostgresQueryCtrl.prototype.addSelectPart = function (selectParts, item, subItem) {
        var partType = item.value;
        if (subItem && subItem.type) {
            partType = subItem.type;
        }
        var partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: partType });
        if (subItem) {
            partModel.params[0] = subItem.value;
        }
        var addAlias = false;
        switch (partType) {
            case 'column':
                var parts = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(selectParts, function (part) {
                    return _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: part.def.type, params: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.clone(part.params) });
                });
                this.selectParts.push(parts);
                break;
            case 'percentile':
            case 'aggregate':
                // add group by if no group by yet
                if (this.target.group.length === 0) {
                    this.addGroup('time', '$__interval');
                }
                var aggIndex = this.findAggregateIndex(selectParts);
                if (aggIndex !== -1) {
                    // replace current aggregation
                    selectParts[aggIndex] = partModel;
                }
                else {
                    selectParts.splice(1, 0, partModel);
                }
                if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(selectParts, function (p) { return p.def.type === 'alias'; })) {
                    addAlias = true;
                }
                break;
            case 'moving_window':
            case 'window':
                var windowIndex = this.findWindowIndex(selectParts);
                if (windowIndex !== -1) {
                    // replace current window function
                    selectParts[windowIndex] = partModel;
                }
                else {
                    var aggIndex_1 = this.findAggregateIndex(selectParts);
                    if (aggIndex_1 !== -1) {
                        selectParts.splice(aggIndex_1 + 1, 0, partModel);
                    }
                    else {
                        selectParts.splice(1, 0, partModel);
                    }
                }
                if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(selectParts, function (p) { return p.def.type === 'alias'; })) {
                    addAlias = true;
                }
                break;
            case 'alias':
                addAlias = true;
                break;
        }
        if (addAlias) {
            // set initial alias name to column name
            partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'alias', params: [selectParts[0].params[0].replace(/"/g, '')] });
            if (selectParts[selectParts.length - 1].def.type === 'alias') {
                selectParts[selectParts.length - 1] = partModel;
            }
            else {
                selectParts.push(partModel);
            }
        }
        this.updatePersistedParts();
        this.panelCtrl.refresh();
    };
    PostgresQueryCtrl.prototype.removeSelectPart = function (selectParts, part) {
        if (part.def.type === 'column') {
            // remove all parts of column unless its last column
            if (this.selectParts.length > 1) {
                var modelsIndex = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(this.selectParts, selectParts);
                this.selectParts.splice(modelsIndex, 1);
            }
        }
        else {
            var partIndex = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(selectParts, part);
            selectParts.splice(partIndex, 1);
        }
        this.updatePersistedParts();
    };
    PostgresQueryCtrl.prototype.handleSelectPartEvent = function (selectParts, part, evt) {
        switch (evt.name) {
            case 'get-param-options': {
                switch (part.def.type) {
                    case 'aggregate':
                        return this.datasource
                            .metricFindQuery(this.metaBuilder.buildAggregateQuery())
                            .then(this.transformToSegments({}))
                            .catch(this.handleQueryError.bind(this));
                    case 'column':
                        return this.datasource
                            .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))
                            .then(this.transformToSegments({}))
                            .catch(this.handleQueryError.bind(this));
                }
            }
            case 'part-param-changed': {
                this.updatePersistedParts();
                this.panelCtrl.refresh();
                break;
            }
            case 'action': {
                this.removeSelectPart(selectParts, part);
                this.panelCtrl.refresh();
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);
            }
        }
    };
    PostgresQueryCtrl.prototype.handleGroupPartEvent = function (part, index, evt) {
        switch (evt.name) {
            case 'get-param-options': {
                return this.datasource
                    .metricFindQuery(this.metaBuilder.buildColumnQuery())
                    .then(this.transformToSegments({}))
                    .catch(this.handleQueryError.bind(this));
            }
            case 'part-param-changed': {
                this.updatePersistedParts();
                this.panelCtrl.refresh();
                break;
            }
            case 'action': {
                this.removeGroup(part, index);
                this.panelCtrl.refresh();
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);
            }
        }
    };
    PostgresQueryCtrl.prototype.addGroup = function (partType, value) {
        var params = [value];
        if (partType === 'time') {
            params = ['$__interval', 'none'];
        }
        var partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: partType, params: params });
        if (partType === 'time') {
            // put timeGroup at start
            this.groupParts.splice(0, 0, partModel);
        }
        else {
            this.groupParts.push(partModel);
        }
        // add aggregates when adding group by
        for (var _i = 0, _a = this.selectParts; _i < _a.length; _i++) {
            var selectParts = _a[_i];
            if (!selectParts.some(function (part) { return part.def.type === 'aggregate'; })) {
                var aggregate = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'aggregate', params: ['avg'] });
                selectParts.splice(1, 0, aggregate);
                if (!selectParts.some(function (part) { return part.def.type === 'alias'; })) {
                    var alias = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'alias', params: [selectParts[0].part.params[0]] });
                    selectParts.push(alias);
                }
            }
        }
        this.updatePersistedParts();
    };
    PostgresQueryCtrl.prototype.removeGroup = function (part, index) {
        if (part.def.type === 'time') {
            // remove aggregations
            this.selectParts = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.selectParts, function (s) {
                return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(s, function (part) {
                    if (part.def.type === 'aggregate' || part.def.type === 'percentile') {
                        return false;
                    }
                    return true;
                });
            });
        }
        this.groupParts.splice(index, 1);
        this.updatePersistedParts();
    };
    PostgresQueryCtrl.prototype.handleWherePartEvent = function (whereParts, part, evt, index) {
        var _this = this;
        switch (evt.name) {
            case 'get-param-options': {
                switch (evt.param.name) {
                    case 'left':
                        return this.datasource
                            .metricFindQuery(this.metaBuilder.buildColumnQuery())
                            .then(this.transformToSegments({}))
                            .catch(this.handleQueryError.bind(this));
                    case 'right':
                        if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {
                            // don't do value lookups for numerical fields
                            return this.$q.when([]);
                        }
                        else {
                            return this.datasource
                                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))
                                .then(this.transformToSegments({
                                addTemplateVars: true,
                                templateQuoter: function (v) {
                                    return _this.queryModel.quoteLiteral(v);
                                },
                            }))
                                .catch(this.handleQueryError.bind(this));
                        }
                    case 'op':
                        return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));
                    default:
                        return this.$q.when([]);
                }
            }
            case 'part-param-changed': {
                this.updatePersistedParts();
                this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then(function (d) {
                    if (d.length === 1) {
                        part.datatype = d[0].text;
                    }
                });
                this.panelCtrl.refresh();
                break;
            }
            case 'action': {
                // remove element
                whereParts.splice(index, 1);
                this.updatePersistedParts();
                this.panelCtrl.refresh();
                break;
            }
            case 'get-part-actions': {
                return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);
            }
        }
    };
    PostgresQueryCtrl.prototype.getWhereOptions = function () {
        var options = [];
        if (this.queryModel.hasUnixEpochTimecolumn()) {
            options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));
        }
        else {
            options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));
        }
        options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));
        return this.$q.when(options);
    };
    PostgresQueryCtrl.prototype.addWhereAction = function (part, index) {
        switch (this.whereAdd.type) {
            case 'macro': {
                var partModel = _sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'macro', name: this.whereAdd.value, params: [] });
                if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {
                    // replace current macro
                    this.whereParts[0] = partModel;
                }
                else {
                    this.whereParts.splice(0, 0, partModel);
                }
                break;
            }
            default: {
                this.whereParts.push(_sql_part__WEBPACK_IMPORTED_MODULE_6__["default"].create({ type: 'expression', params: ['value', '=', 'value'] }));
            }
        }
        this.updatePersistedParts();
        this.resetPlusButton(this.whereAdd);
        this.panelCtrl.refresh();
    };
    PostgresQueryCtrl.prototype.getGroupOptions = function () {
        var _this = this;
        return this.datasource
            .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))
            .then(function (tags) {
            var options = [];
            if (!_this.queryModel.hasTimeGroup()) {
                options.push(_this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));
            }
            for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
                var tag = tags_1[_i];
                options.push(_this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));
            }
            return options;
        })
            .catch(this.handleQueryError.bind(this));
    };
    PostgresQueryCtrl.prototype.addGroupAction = function () {
        switch (this.groupAdd.value) {
            default: {
                this.addGroup(this.groupAdd.type, this.groupAdd.value);
            }
        }
        this.resetPlusButton(this.groupAdd);
        this.panelCtrl.refresh();
    };
    PostgresQueryCtrl.prototype.handleQueryError = function (err) {
        this.error = err.message || 'Failed to issue metric query';
        return [];
    };
    PostgresQueryCtrl.templateUrl = 'partials/query.editor.html';
    return PostgresQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_4__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/postgres/response_parser.ts":
/*!*******************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/response_parser.ts ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var ResponseParser = /** @class */ (function () {
    function ResponseParser($q) {
        this.$q = $q;
    }
    ResponseParser.prototype.processQueryResult = function (res) {
        var data = [];
        if (!res.data.results) {
            return { data: data };
        }
        for (var key in res.data.results) {
            var queryRes = res.data.results[key];
            if (queryRes.series) {
                for (var _i = 0, _a = queryRes.series; _i < _a.length; _i++) {
                    var series = _a[_i];
                    data.push({
                        target: series.name,
                        datapoints: series.points,
                        refId: queryRes.refId,
                        meta: queryRes.meta,
                    });
                }
            }
            if (queryRes.tables) {
                for (var _b = 0, _c = queryRes.tables; _b < _c.length; _b++) {
                    var table = _c[_b];
                    table.type = 'table';
                    table.refId = queryRes.refId;
                    table.meta = queryRes.meta;
                    data.push(table);
                }
            }
        }
        return { data: data };
    };
    ResponseParser.prototype.parseMetricFindQueryResult = function (refId, results) {
        if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {
            return [];
        }
        var columns = results.data.results[refId].tables[0].columns;
        var rows = results.data.results[refId].tables[0].rows;
        var textColIndex = this.findColIndex(columns, '__text');
        var valueColIndex = this.findColIndex(columns, '__value');
        if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {
            return this.transformToKeyValueList(rows, textColIndex, valueColIndex);
        }
        return this.transformToSimpleList(rows);
    };
    ResponseParser.prototype.transformToKeyValueList = function (rows, textColIndex, valueColIndex) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            if (!this.containsKey(res, rows[i][textColIndex])) {
                res.push({
                    text: rows[i][textColIndex],
                    value: rows[i][valueColIndex],
                });
            }
        }
        return res;
    };
    ResponseParser.prototype.transformToSimpleList = function (rows) {
        var res = [];
        for (var i = 0; i < rows.length; i++) {
            for (var j = 0; j < rows[i].length; j++) {
                var value = rows[i][j];
                if (res.indexOf(value) === -1) {
                    res.push(value);
                }
            }
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(res, function (value) {
            return { text: value };
        });
    };
    ResponseParser.prototype.findColIndex = function (columns, colName) {
        for (var i = 0; i < columns.length; i++) {
            if (columns[i].text === colName) {
                return i;
            }
        }
        return -1;
    };
    ResponseParser.prototype.containsKey = function (res, key) {
        for (var i = 0; i < res.length; i++) {
            if (res[i].text === key) {
                return true;
            }
        }
        return false;
    };
    ResponseParser.prototype.transformAnnotationResponse = function (options, data) {
        var table = data.data.results[options.annotation.name].tables[0];
        var timeColumnIndex = -1;
        var titleColumnIndex = -1;
        var textColumnIndex = -1;
        var tagsColumnIndex = -1;
        for (var i = 0; i < table.columns.length; i++) {
            if (table.columns[i].text === 'time') {
                timeColumnIndex = i;
            }
            else if (table.columns[i].text === 'text') {
                textColumnIndex = i;
            }
            else if (table.columns[i].text === 'tags') {
                tagsColumnIndex = i;
            }
        }
        if (timeColumnIndex === -1) {
            return this.$q.reject({
                message: 'Missing mandatory time column in annotation query.',
            });
        }
        var list = [];
        for (var i = 0; i < table.rows.length; i++) {
            var row = table.rows[i];
            list.push({
                annotation: options.annotation,
                time: Math.floor(row[timeColumnIndex]),
                title: row[titleColumnIndex],
                text: row[textColumnIndex],
                tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\s*,\s*/) : [],
            });
        }
        return list;
    };
    return ResponseParser;
}());
/* harmony default export */ __webpack_exports__["default"] = (ResponseParser);


/***/ }),

/***/ "./public/app/plugins/datasource/postgres/sql_part.ts":
/*!************************************************************!*\
  !*** ./public/app/plugins/datasource/postgres/sql_part.ts ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_core_components_sql_part_sql_part__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/components/sql_part/sql_part */ "./public/app/core/components/sql_part/sql_part.ts");

var index = [];
function createPart(part) {
    var def = index[part.type];
    if (!def) {
        return null;
    }
    return new app_core_components_sql_part_sql_part__WEBPACK_IMPORTED_MODULE_0__["SqlPart"](part, def);
}
function register(options) {
    index[options.type] = new app_core_components_sql_part_sql_part__WEBPACK_IMPORTED_MODULE_0__["SqlPartDef"](options);
}
register({
    type: 'column',
    style: 'label',
    params: [{ type: 'column', dynamicLookup: true }],
    defaultParams: ['value'],
});
register({
    type: 'expression',
    style: 'expression',
    label: 'Expr:',
    params: [
        { name: 'left', type: 'string', dynamicLookup: true },
        { name: 'op', type: 'string', dynamicLookup: true },
        { name: 'right', type: 'string', dynamicLookup: true },
    ],
    defaultParams: ['value', '=', 'value'],
});
register({
    type: 'macro',
    style: 'label',
    label: 'Macro:',
    params: [],
    defaultParams: [],
});
register({
    type: 'aggregate',
    style: 'label',
    params: [
        {
            name: 'name',
            type: 'string',
            options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],
        },
    ],
    defaultParams: ['avg'],
});
register({
    type: 'percentile',
    label: 'Aggregate:',
    style: 'label',
    params: [
        {
            name: 'name',
            type: 'string',
            options: ['percentile_cont', 'percentile_disc'],
        },
        {
            name: 'fraction',
            type: 'number',
            options: ['0.5', '0.75', '0.9', '0.95', '0.99'],
        },
    ],
    defaultParams: ['percentile_cont', '0.95'],
});
register({
    type: 'alias',
    style: 'label',
    params: [{ name: 'name', type: 'string', quote: 'double' }],
    defaultParams: ['alias'],
});
register({
    type: 'time',
    style: 'function',
    label: 'time',
    params: [
        {
            name: 'interval',
            type: 'interval',
            options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],
        },
        {
            name: 'fill',
            type: 'string',
            options: ['none', 'NULL', 'previous', '0'],
        },
    ],
    defaultParams: ['$__interval', 'none'],
});
register({
    type: 'window',
    style: 'label',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['increase', 'rate', 'sum'],
        },
    ],
    defaultParams: ['increase'],
});
register({
    type: 'moving_window',
    style: 'label',
    label: 'Moving Window:',
    params: [
        {
            name: 'function',
            type: 'string',
            options: ['avg'],
        },
        {
            name: 'window_size',
            type: 'number',
            options: ['3', '5', '7', '10', '20'],
        },
    ],
    defaultParams: ['avg', '5'],
});
/* harmony default export */ __webpack_exports__["default"] = ({
    create: createPart,
});


/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/add_label_to_query.ts":
/*!************************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/add_label_to_query.ts ***!
  \************************************************************************/
/*! exports provided: addLabelToQuery, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addLabelToQuery", function() { return addLabelToQuery; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var keywords = 'by|without|on|ignoring|group_left|group_right';
// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.
var builtInWords = [
    keywords,
    'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',
    'true|false|null|__name__|job',
    'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',
    'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',
    'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',
    'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',
]
    .join('|')
    .split('|');
var metricNameRegexp = /([A-Za-z:][\w:]*)\b(?![\(\]{=!",])/g;
var selectorRegexp = /{([^{]*)}/g;
// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar="baz"}'
function addLabelToQuery(query, key, value, operator) {
    if (!key || !value) {
        throw new Error('Need label to add to query.');
    }
    // Add empty selectors to bare metric names
    var previousWord;
    query = query.replace(metricNameRegexp, function (match, word, offset) {
        var insideSelector = isPositionInsideChars(query, offset, '{', '}');
        // Handle "sum by (key) (metric)"
        var previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;
        previousWord = word;
        if (!insideSelector && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {
            return word + "{}";
        }
        return word;
    });
    // Adding label to existing selectors
    var match = selectorRegexp.exec(query);
    var parts = [];
    var lastIndex = 0;
    var suffix = '';
    while (match) {
        var prefix = query.slice(lastIndex, match.index);
        var selector = match[1];
        var selectorWithLabel = addLabelToSelector(selector, key, value, operator);
        lastIndex = match.index + match[1].length + 2;
        suffix = query.slice(match.index + match[0].length);
        parts.push(prefix, '{', selectorWithLabel, '}');
        match = selectorRegexp.exec(query);
    }
    parts.push(suffix);
    return parts.join('');
}
var labelRegexp = /(\w+)\s*(=|!=|=~|!~)\s*("[^"]*")/g;
function addLabelToSelector(selector, labelKey, labelValue, labelOperator) {
    var parsedLabels = [];
    // Split selector into labels
    if (selector) {
        var match = labelRegexp.exec(selector);
        while (match) {
            parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });
            match = labelRegexp.exec(selector);
        }
    }
    // Add new label
    var operatorForLabelKey = labelOperator || '=';
    parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: "\"" + labelValue + "\"" });
    // Sort labels by key and put them together
    return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.chain(parsedLabels)
        .compact()
        .sortBy('key')
        .map(function (_a) {
        var key = _a.key, operator = _a.operator, value = _a.value;
        return "" + key + operator + value;
    })
        .value()
        .join(',');
}
function isPositionInsideChars(text, position, openChar, closeChar) {
    var nextSelectorStart = text.slice(position).indexOf(openChar);
    var nextSelectorEnd = text.slice(position).indexOf(closeChar);
    return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);
}
/* harmony default export */ __webpack_exports__["default"] = (addLabelToQuery);


/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/completer.ts":
/*!***************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/completer.ts ***!
  \***************************************************************/
/*! exports provided: PromCompleter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromCompleter", function() { return PromCompleter; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var PromCompleter = /** @class */ (function () {
    function PromCompleter(datasource, templateSrv) {
        this.datasource = datasource;
        this.templateSrv = templateSrv;
        this.identifierRegexps = [/\[/, /[a-zA-Z0-9_:]/];
        this.labelQueryCache = {};
        this.labelNameCache = {};
        this.labelValueCache = {};
        this.templateVariableCompletions = this.templateSrv.variables.map(function (variable) {
            return {
                caption: '$' + variable.name,
                value: '$' + variable.name,
                meta: 'variable',
                score: Number.MAX_VALUE,
            };
        });
    }
    PromCompleter.prototype.getCompletions = function (editor, session, pos, prefix, callback) {
        var _this = this;
        var wrappedCallback = function (err, completions) {
            completions = completions.concat(_this.templateVariableCompletions);
            return callback(err, completions);
        };
        var token = session.getTokenAt(pos.row, pos.column);
        switch (token.type) {
            case 'entity.name.tag.label-matcher':
                this.getCompletionsForLabelMatcherName(session, pos).then(function (completions) {
                    wrappedCallback(null, completions);
                });
                return;
            case 'string.quoted.label-matcher':
                this.getCompletionsForLabelMatcherValue(session, pos).then(function (completions) {
                    wrappedCallback(null, completions);
                });
                return;
            case 'entity.name.tag.label-list-matcher':
                this.getCompletionsForBinaryOperator(session, pos).then(function (completions) {
                    wrappedCallback(null, completions);
                });
                return;
        }
        if (token.type === 'paren.lparen' && token.value === '[') {
            var vectors = [];
            for (var _i = 0, _a = ['s', 'm', 'h']; _i < _a.length; _i++) {
                var unit = _a[_i];
                for (var _b = 0, _c = [1, 5, 10, 30]; _b < _c.length; _b++) {
                    var value = _c[_b];
                    vectors.push({
                        caption: value + unit,
                        value: '[' + value + unit,
                        meta: 'range vector',
                    });
                }
            }
            vectors.unshift({
                caption: '$__interval_ms',
                value: '[$__interval_ms',
                meta: 'range vector',
            });
            vectors.unshift({
                caption: '$__interval',
                value: '[$__interval',
                meta: 'range vector',
            });
            wrappedCallback(null, vectors);
            return;
        }
        var query = prefix;
        return this.datasource.performSuggestQuery(query, true).then(function (metricNames) {
            wrappedCallback(null, metricNames.map(function (name) {
                var value = name;
                if (prefix === '(') {
                    value = '(' + name;
                }
                return {
                    caption: name,
                    value: value,
                    meta: 'metric',
                };
            }));
        });
    };
    PromCompleter.prototype.getCompletionsForLabelMatcherName = function (session, pos) {
        var _this = this;
        var metricName = this.findMetricName(session, pos.row, pos.column);
        if (!metricName) {
            return Promise.resolve(this.transformToCompletions(['__name__', 'instance', 'job'], 'label name'));
        }
        if (this.labelNameCache[metricName]) {
            return Promise.resolve(this.labelNameCache[metricName]);
        }
        return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(function (result) {
            var labelNames = _this.transformToCompletions(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(result.map(function (r) {
                return Object.keys(r);
            }))), 'label name');
            _this.labelNameCache[metricName] = labelNames;
            return Promise.resolve(labelNames);
        });
    };
    PromCompleter.prototype.getCompletionsForLabelMatcherValue = function (session, pos) {
        var _this = this;
        var metricName = this.findMetricName(session, pos.row, pos.column);
        if (!metricName) {
            return Promise.resolve([]);
        }
        var labelNameToken = this.findToken(session, pos.row, pos.column, 'entity.name.tag.label-matcher', null, 'paren.lparen.label-matcher');
        if (!labelNameToken) {
            return Promise.resolve([]);
        }
        var labelName = labelNameToken.value;
        if (this.labelValueCache[metricName] && this.labelValueCache[metricName][labelName]) {
            return Promise.resolve(this.labelValueCache[metricName][labelName]);
        }
        return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(function (result) {
            var labelValues = _this.transformToCompletions(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(result.map(function (r) {
                return r[labelName];
            })), 'label value');
            _this.labelValueCache[metricName] = _this.labelValueCache[metricName] || {};
            _this.labelValueCache[metricName][labelName] = labelValues;
            return Promise.resolve(labelValues);
        });
    };
    PromCompleter.prototype.getCompletionsForBinaryOperator = function (session, pos) {
        var _this = this;
        var keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.control', null, 'identifier');
        if (!keywordOperatorToken) {
            return Promise.resolve([]);
        }
        var rparenToken, expr;
        switch (keywordOperatorToken.value) {
            case 'by':
            case 'without':
                rparenToken = this.findToken(session, keywordOperatorToken.row, keywordOperatorToken.column, 'paren.rparen', null, 'identifier');
                if (!rparenToken) {
                    return Promise.resolve([]);
                }
                expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);
                if (expr === '') {
                    return Promise.resolve([]);
                }
                return this.getLabelNameAndValueForExpression(expr, 'expression').then(function (result) {
                    var labelNames = _this.transformToCompletions(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(result.map(function (r) {
                        return Object.keys(r);
                    }))), 'label name');
                    _this.labelNameCache[expr] = labelNames;
                    return labelNames;
                });
            case 'on':
            case 'ignoring':
            case 'group_left':
            case 'group_right':
                var binaryOperatorToken = this.findToken(session, keywordOperatorToken.row, keywordOperatorToken.column, 'keyword.operator.binary', null, 'identifier');
                if (!binaryOperatorToken) {
                    return Promise.resolve([]);
                }
                rparenToken = this.findToken(session, binaryOperatorToken.row, binaryOperatorToken.column, 'paren.rparen', null, 'identifier');
                if (rparenToken) {
                    expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);
                    if (expr === '') {
                        return Promise.resolve([]);
                    }
                    return this.getLabelNameAndValueForExpression(expr, 'expression').then(function (result) {
                        var labelNames = _this.transformToCompletions(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(result.map(function (r) {
                            return Object.keys(r);
                        }))), 'label name');
                        _this.labelNameCache[expr] = labelNames;
                        return labelNames;
                    });
                }
                else {
                    var metricName_1 = this.findMetricName(session, binaryOperatorToken.row, binaryOperatorToken.column);
                    return this.getLabelNameAndValueForExpression(metricName_1, 'metricName').then(function (result) {
                        var labelNames = _this.transformToCompletions(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(result.map(function (r) {
                            return Object.keys(r);
                        }))), 'label name');
                        _this.labelNameCache[metricName_1] = labelNames;
                        return Promise.resolve(labelNames);
                    });
                }
        }
        return Promise.resolve([]);
    };
    PromCompleter.prototype.getLabelNameAndValueForExpression = function (expr, type) {
        var _this = this;
        if (this.labelQueryCache[expr]) {
            return Promise.resolve(this.labelQueryCache[expr]);
        }
        var query = expr;
        if (type === 'metricName') {
            var op = '=~';
            if (/[a-zA-Z_:][a-zA-Z0-9_:]*/.test(expr)) {
                op = '=';
            }
            query = '{__name__' + op + '"' + expr + '"}';
        }
        var _a = this.datasource.getTimeRange(), start = _a.start, end = _a.end;
        var url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;
        return this.datasource.metadataRequest(url).then(function (response) {
            _this.labelQueryCache[expr] = response.data.data;
            return response.data.data;
        });
    };
    PromCompleter.prototype.transformToCompletions = function (words, meta) {
        return words.map(function (name) {
            return {
                caption: name,
                value: name,
                meta: meta,
                score: Number.MAX_VALUE,
            };
        });
    };
    PromCompleter.prototype.findMetricName = function (session, row, column) {
        var metricName = '';
        var tokens;
        var nameLabelNameToken = this.findToken(session, row, column, 'entity.name.tag.label-matcher', '__name__', 'paren.lparen.label-matcher');
        if (nameLabelNameToken) {
            tokens = session.getTokens(nameLabelNameToken.row);
            var nameLabelValueToken = tokens[nameLabelNameToken.index + 2];
            if (nameLabelValueToken && nameLabelValueToken.type === 'string.quoted.label-matcher') {
                metricName = nameLabelValueToken.value.slice(1, -1); // cut begin/end quotation
            }
        }
        else {
            var metricNameToken = this.findToken(session, row, column, 'identifier', null, null);
            if (metricNameToken) {
                tokens = session.getTokens(metricNameToken.row);
                metricName = metricNameToken.value;
            }
        }
        return metricName;
    };
    PromCompleter.prototype.findToken = function (session, row, column, target, value, guard) {
        var tokens, idx;
        // find index and get column of previous token
        for (var r = row; r >= 0; r--) {
            var c = void 0;
            tokens = session.getTokens(r);
            if (r === row) {
                // current row
                c = 0;
                for (idx = 0; idx < tokens.length; idx++) {
                    var nc = c + tokens[idx].value.length;
                    if (nc >= column) {
                        break;
                    }
                    c = nc;
                }
            }
            else {
                idx = tokens.length - 1;
                c =
                    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sum(tokens.map(function (t) {
                        return t.value.length;
                    })) - tokens[tokens.length - 1].value.length;
            }
            for (; idx >= 0; idx--) {
                if (tokens[idx].type === guard) {
                    return null;
                }
                if (tokens[idx].type === target && (!value || tokens[idx].value === value)) {
                    tokens[idx].row = r;
                    tokens[idx].column = c;
                    tokens[idx].index = idx;
                    return tokens[idx];
                }
                c -= tokens[idx].value.length;
            }
        }
        return null;
    };
    PromCompleter.prototype.findExpressionMatchedParen = function (session, row, column) {
        var tokens, idx;
        var deep = 1;
        var expression = ')';
        for (var r = row; r >= 0; r--) {
            tokens = session.getTokens(r);
            if (r === row) {
                // current row
                var c = 0;
                for (idx = 0; idx < tokens.length; idx++) {
                    c += tokens[idx].value.length;
                    if (c >= column) {
                        break;
                    }
                }
            }
            else {
                idx = tokens.length - 1;
            }
            for (; idx >= 0; idx--) {
                expression = tokens[idx].value + expression;
                if (tokens[idx].type === 'paren.rparen') {
                    deep++;
                }
                else if (tokens[idx].type === 'paren.lparen') {
                    deep--;
                    if (deep === 0) {
                        return expression;
                    }
                }
            }
        }
        return expression;
    };
    return PromCompleter;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/config_ctrl.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/config_ctrl.ts ***!
  \*****************************************************************/
/*! exports provided: PrometheusConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrometheusConfigCtrl", function() { return PrometheusConfigCtrl; });
var PrometheusConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function PrometheusConfigCtrl($scope) {
        this.current.jsonData.httpMethod = this.current.jsonData.httpMethod || 'GET';
    }
    PrometheusConfigCtrl.templateUrl = 'public/app/plugins/datasource/prometheus/partials/config.html';
    return PrometheusConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/datasource.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/datasource.ts ***!
  \****************************************************************/
/*! exports provided: alignRange, determineQueryHints, extractRuleMappingFromGroups, prometheusRegularEscape, prometheusSpecialRegexEscape, PrometheusDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignRange", function() { return alignRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determineQueryHints", function() { return determineQueryHints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractRuleMappingFromGroups", function() { return extractRuleMappingFromGroups; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prometheusRegularEscape", function() { return prometheusRegularEscape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prometheusSpecialRegexEscape", function() { return prometheusSpecialRegexEscape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrometheusDatasource", function() { return PrometheusDatasource; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");
/* harmony import */ var _metric_find_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./metric_find_query */ "./public/app/plugins/datasource/prometheus/metric_find_query.ts");
/* harmony import */ var _result_transformer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./result_transformer */ "./public/app/plugins/datasource/prometheus/result_transformer.ts");
/* harmony import */ var _add_label_to_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./add_label_to_query */ "./public/app/plugins/datasource/prometheus/add_label_to_query.ts");








function alignRange(start, end, step) {
    var alignedEnd = Math.ceil(end / step) * step;
    var alignedStart = Math.floor(start / step) * step;
    return {
        end: alignedEnd,
        start: alignedStart,
    };
}
function determineQueryHints(series, datasource) {
    var hints = series.map(function (s, i) {
        var query = s.query;
        var index = s.responseIndex;
        if (query === undefined || index === undefined) {
            return null;
        }
        // ..._bucket metric needs a histogram_quantile()
        var histogramMetric = query.trim().match(/^\w+_bucket$/);
        if (histogramMetric) {
            var label = 'Time series has buckets, you probably wanted a histogram.';
            return {
                index: index,
                label: label,
                fix: {
                    label: 'Fix by adding histogram_quantile().',
                    action: {
                        type: 'ADD_HISTOGRAM_QUANTILE',
                        query: query,
                        index: index,
                    },
                },
            };
        }
        // Check for monotony
        var datapoints = s.datapoints;
        if (query.indexOf('rate(') === -1 && datapoints.length > 1) {
            var increasing_1 = false;
            var monotonic = datapoints.filter(function (dp) { return dp[0] !== null; }).every(function (dp, index) {
                if (index === 0) {
                    return true;
                }
                increasing_1 = increasing_1 || dp[0] > datapoints[index - 1][0];
                // monotonic?
                return dp[0] >= datapoints[index - 1][0];
            });
            if (increasing_1 && monotonic) {
                var simpleMetric = query.trim().match(/^\w+$/);
                var label = 'Time series is monotonously increasing.';
                var fix = void 0;
                if (simpleMetric) {
                    fix = {
                        label: 'Fix by adding rate().',
                        action: {
                            type: 'ADD_RATE',
                            query: query,
                            index: index,
                        },
                    };
                }
                else {
                    label = label + " Try applying a rate() function.";
                }
                return {
                    label: label,
                    index: index,
                    fix: fix,
                };
            }
        }
        // Check for recording rules expansion
        if (datasource && datasource.ruleMappings) {
            var mapping_1 = datasource.ruleMappings;
            var mappingForQuery = Object.keys(mapping_1).reduce(function (acc, ruleName) {
                var _a;
                if (query.search(ruleName) > -1) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, acc, (_a = {}, _a[ruleName] = mapping_1[ruleName], _a));
                }
                return acc;
            }, {});
            if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.size(mappingForQuery) > 0) {
                var label = 'Query contains recording rules.';
                return {
                    label: label,
                    index: index,
                    fix: {
                        label: 'Expand rules',
                        action: {
                            type: 'EXPAND_RULES',
                            query: query,
                            index: index,
                            mapping: mappingForQuery,
                        },
                    },
                };
            }
        }
        // No hint found
        return null;
    });
    return hints;
}
function extractRuleMappingFromGroups(groups) {
    return groups.reduce(function (mapping, group) {
        return group.rules.filter(function (rule) { return rule.type === 'recording'; }).reduce(function (acc, rule) {
            var _a;
            return (tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, acc, (_a = {}, _a[rule.name] = rule.query, _a)));
        }, mapping);
    }, {});
}
function prometheusRegularEscape(value) {
    if (typeof value === 'string') {
        return value.replace(/'/g, "\\\\'");
    }
    return value;
}
function prometheusSpecialRegexEscape(value) {
    if (typeof value === 'string') {
        return prometheusRegularEscape(value.replace(/\\/g, '\\\\\\\\').replace(/[$^*{}\[\]+?.()]/g, '\\\\$&'));
    }
    return value;
}
var PrometheusDatasource = /** @class */ (function () {
    /** @ngInject */
    function PrometheusDatasource(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {
        this.$q = $q;
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
        this.type = 'prometheus';
        this.editorSrc = 'app/features/prometheus/partials/query.editor.html';
        this.name = instanceSettings.name;
        this.url = instanceSettings.url;
        this.directUrl = instanceSettings.directUrl;
        this.basicAuth = instanceSettings.basicAuth;
        this.withCredentials = instanceSettings.withCredentials;
        this.interval = instanceSettings.jsonData.timeInterval || '15s';
        this.queryTimeout = instanceSettings.jsonData.queryTimeout;
        this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';
        this.resultTransformer = new _result_transformer__WEBPACK_IMPORTED_MODULE_6__["ResultTransformer"](templateSrv);
        this.ruleMappings = {};
    }
    PrometheusDatasource.prototype.init = function () {
        this.loadRules();
    };
    PrometheusDatasource.prototype._request = function (url, data, options) {
        options = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(options || {}, {
            url: this.url + url,
            method: this.httpMethod,
        });
        if (options.method === 'GET') {
            if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(data)) {
                options.url =
                    options.url +
                        '?' +
                        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(data, function (v, k) {
                            return encodeURIComponent(k) + '=' + encodeURIComponent(v);
                        }).join('&');
            }
        }
        else {
            options.headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
            };
            options.transformRequest = function (data) {
                return jquery__WEBPACK_IMPORTED_MODULE_2___default.a.param(data);
            };
            options.data = data;
        }
        if (this.basicAuth || this.withCredentials) {
            options.withCredentials = true;
        }
        if (this.basicAuth) {
            options.headers = {
                Authorization: this.basicAuth,
            };
        }
        return this.backendSrv.datasourceRequest(options);
    };
    // Use this for tab completion features, wont publish response to other components
    PrometheusDatasource.prototype.metadataRequest = function (url) {
        return this._request(url, null, { method: 'GET', silent: true });
    };
    PrometheusDatasource.prototype.interpolateQueryExpr = function (value, variable, defaultFormatFn) {
        // if no multi or include all do not regexEscape
        if (!variable.multi && !variable.includeAll) {
            return prometheusRegularEscape(value);
        }
        if (typeof value === 'string') {
            return prometheusSpecialRegexEscape(value);
        }
        var escapedValues = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(value, prometheusSpecialRegexEscape);
        return escapedValues.join('|');
    };
    PrometheusDatasource.prototype.targetContainsTemplate = function (target) {
        return this.templateSrv.variableExists(target.expr);
    };
    PrometheusDatasource.prototype.query = function (options) {
        var _this = this;
        var start = this.getPrometheusTime(options.range.from, false);
        var end = this.getPrometheusTime(options.range.to, true);
        var queries = [];
        var activeTargets = [];
        options = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.clone(options);
        for (var _i = 0, _a = options.targets; _i < _a.length; _i++) {
            var target = _a[_i];
            if (!target.expr || target.hide) {
                continue;
            }
            activeTargets.push(target);
            queries.push(this.createQuery(target, options, start, end));
        }
        // No valid targets, return the empty result to save a round trip.
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(queries)) {
            return this.$q.when({ data: [] });
        }
        var allQueryPromise = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(queries, function (query) {
            if (!query.instant) {
                return _this.performTimeSeriesQuery(query, query.start, query.end);
            }
            else {
                return _this.performInstantQuery(query, end);
            }
        });
        return this.$q.all(allQueryPromise).then(function (responseList) {
            var result = [];
            var hints = [];
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(responseList, function (response, index) {
                if (response.status === 'error') {
                    var error = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({ index: index }, response.error);
                    throw error;
                }
                // Keeping original start/end for transformers
                var transformerOptions = {
                    format: activeTargets[index].format,
                    step: queries[index].step,
                    legendFormat: activeTargets[index].legendFormat,
                    start: queries[index].start,
                    end: queries[index].end,
                    query: queries[index].expr,
                    responseListLength: responseList.length,
                    responseIndex: index,
                    refId: activeTargets[index].refId,
                };
                var series = _this.resultTransformer.transform(response, transformerOptions);
                result = result.concat(series);
                if (queries[index].hinting) {
                    var queryHints = determineQueryHints(series, _this);
                    hints = hints.concat(queryHints);
                }
            });
            return { data: result, hints: hints };
        });
    };
    PrometheusDatasource.prototype.createQuery = function (target, options, start, end) {
        var query = {
            hinting: target.hinting,
            instant: target.instant,
        };
        var range = Math.ceil(end - start);
        var interval = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_seconds(options.interval);
        // Minimum interval ("Min step"), if specified for the query. or same as interval otherwise
        var minInterval = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_seconds(this.templateSrv.replace(target.interval, options.scopedVars) || options.interval);
        var intervalFactor = target.intervalFactor || 1;
        // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits
        var adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);
        var scopedVars = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, options.scopedVars, this.getRangeScopedVars());
        // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars
        if (interval !== adjustedInterval) {
            interval = adjustedInterval;
            scopedVars = Object.assign({}, options.scopedVars, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({ __interval: { text: interval + 's', value: interval + 's' }, __interval_ms: { text: interval * 1000, value: interval * 1000 } }, this.getRangeScopedVars()));
        }
        query.step = interval;
        var expr = target.expr;
        // Apply adhoc filters
        var adhocFilters = this.templateSrv.getAdhocFilters(this.name);
        expr = adhocFilters.reduce(function (acc, filter) {
            var key = filter.key, operator = filter.operator;
            var value = filter.value;
            if (operator === '=~' || operator === '!~') {
                value = prometheusSpecialRegexEscape(value);
            }
            return Object(_add_label_to_query__WEBPACK_IMPORTED_MODULE_7__["default"])(acc, key, value, operator);
        }, expr);
        // Only replace vars in expression after having (possibly) updated interval vars
        query.expr = this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr);
        query.requestId = options.panelId + target.refId;
        // Align query interval with step
        var adjusted = alignRange(start, end, query.step);
        query.start = adjusted.start;
        query.end = adjusted.end;
        return query;
    };
    PrometheusDatasource.prototype.adjustInterval = function (interval, minInterval, range, intervalFactor) {
        // Prometheus will drop queries that might return more than 11000 data points.
        // Calibrate interval if it is too small.
        if (interval !== 0 && range / intervalFactor / interval > 11000) {
            interval = Math.ceil(range / intervalFactor / 11000);
        }
        return Math.max(interval * intervalFactor, minInterval, 1);
    };
    PrometheusDatasource.prototype.performTimeSeriesQuery = function (query, start, end) {
        if (start > end) {
            throw { message: 'Invalid time range' };
        }
        var url = '/api/v1/query_range';
        var data = {
            query: query.expr,
            start: start,
            end: end,
            step: query.step,
        };
        if (this.queryTimeout) {
            data['timeout'] = this.queryTimeout;
        }
        return this._request(url, data, { requestId: query.requestId });
    };
    PrometheusDatasource.prototype.performInstantQuery = function (query, time) {
        var url = '/api/v1/query';
        var data = {
            query: query.expr,
            time: time,
        };
        if (this.queryTimeout) {
            data['timeout'] = this.queryTimeout;
        }
        return this._request(url, data, { requestId: query.requestId });
    };
    PrometheusDatasource.prototype.performSuggestQuery = function (query, cache) {
        var _this = this;
        if (cache === void 0) { cache = false; }
        var url = '/api/v1/label/__name__/values';
        if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {
            return this.$q.when(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(this.metricsNameCache.data, function (metricName) {
                return metricName.indexOf(query) !== 1;
            }));
        }
        return this.metadataRequest(url).then(function (result) {
            _this.metricsNameCache = {
                data: result.data.data,
                expire: Date.now() + 60 * 1000,
            };
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(result.data.data, function (metricName) {
                return metricName.indexOf(query) !== 1;
            });
        });
    };
    PrometheusDatasource.prototype.metricFindQuery = function (query) {
        if (!query) {
            return this.$q.when([]);
        }
        var scopedVars = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({ __interval: { text: this.interval, value: this.interval }, __interval_ms: { text: app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_ms(this.interval), value: app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_ms(this.interval) } }, this.getRangeScopedVars());
        var interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);
        var metricFindQuery = new _metric_find_query__WEBPACK_IMPORTED_MODULE_5__["default"](this, interpolated, this.timeSrv);
        return metricFindQuery.process();
    };
    PrometheusDatasource.prototype.getRangeScopedVars = function () {
        var range = this.timeSrv.timeRange();
        var msRange = range.to.diff(range.from);
        var sRange = Math.round(msRange / 1000);
        var regularRange = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].secondsToHms(msRange / 1000);
        return {
            __range_ms: { text: msRange, value: msRange },
            __range_s: { text: sRange, value: sRange },
            __range: { text: regularRange, value: regularRange },
        };
    };
    PrometheusDatasource.prototype.annotationQuery = function (options) {
        var annotation = options.annotation;
        var expr = annotation.expr || '';
        var tagKeys = annotation.tagKeys || '';
        var titleFormat = annotation.titleFormat || '';
        var textFormat = annotation.textFormat || '';
        if (!expr) {
            return this.$q.when([]);
        }
        var step = annotation.step || '60s';
        var start = this.getPrometheusTime(options.range.from, false);
        var end = this.getPrometheusTime(options.range.to, true);
        // Unsetting min interval
        var queryOptions = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, options, { interval: '0s' });
        var query = this.createQuery({ expr: expr, interval: step }, queryOptions, start, end);
        var self = this;
        return this.performTimeSeriesQuery(query, query.start, query.end).then(function (results) {
            var eventList = [];
            tagKeys = tagKeys.split(',');
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.each(results.data.data.result, function (series) {
                var tags = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.chain(series.metric)
                    .filter(function (v, k) {
                    return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.includes(tagKeys, k);
                })
                    .value();
                for (var _i = 0, _a = series.values; _i < _a.length; _i++) {
                    var value = _a[_i];
                    var valueIsTrue = value[1] === '1'; // e.g. ALERTS
                    if (valueIsTrue || annotation.useValueForTime) {
                        var event = {
                            annotation: annotation,
                            title: self.resultTransformer.renderTemplate(titleFormat, series.metric),
                            tags: tags,
                            text: self.resultTransformer.renderTemplate(textFormat, series.metric),
                        };
                        if (annotation.useValueForTime) {
                            event['time'] = Math.floor(parseFloat(value[1]));
                        }
                        else {
                            event['time'] = Math.floor(parseFloat(value[0])) * 1000;
                        }
                        eventList.push(event);
                    }
                }
            });
            return eventList;
        });
    };
    PrometheusDatasource.prototype.testDatasource = function () {
        var now = new Date().getTime();
        return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(function (response) {
            if (response.data.status === 'success') {
                return { status: 'success', message: 'Data source is working' };
            }
            else {
                return { status: 'error', message: response.error };
            }
        });
    };
    PrometheusDatasource.prototype.getExploreState = function (targets) {
        var _this = this;
        var state = {};
        if (targets && targets.length > 0) {
            var queries = targets.map(function (t) { return ({
                query: _this.templateSrv.replace(t.expr, {}, _this.interpolateQueryExpr),
                format: t.format,
            }); });
            state = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, state, { queries: queries, datasource: this.name });
        }
        return state;
    };
    PrometheusDatasource.prototype.loadRules = function () {
        var _this = this;
        this.metadataRequest('/api/v1/rules')
            .then(function (res) { return res.data || res.json(); })
            .then(function (body) {
            var groups = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.get(body, ['data', 'groups']);
            if (groups) {
                _this.ruleMappings = extractRuleMappingFromGroups(groups);
            }
        })
            .catch(function (e) {
            console.log('Rules API is experimental. Ignore next error.');
            console.error(e);
        });
    };
    PrometheusDatasource.prototype.modifyQuery = function (query, action) {
        switch (action.type) {
            case 'ADD_FILTER': {
                return Object(_add_label_to_query__WEBPACK_IMPORTED_MODULE_7__["default"])(query, action.key, action.value);
            }
            case 'ADD_HISTOGRAM_QUANTILE': {
                return "histogram_quantile(0.95, sum(rate(" + query + "[5m])) by (le))";
            }
            case 'ADD_RATE': {
                return "rate(" + query + "[5m])";
            }
            case 'EXPAND_RULES': {
                var mapping_2 = action.mapping;
                if (mapping_2) {
                    var ruleNames = Object.keys(mapping_2);
                    var rulesRegex = new RegExp("(\\s|^)(" + ruleNames.join('|') + ")(\\s|$|\\()", 'ig');
                    return query.replace(rulesRegex, function (match, pre, name, post) { return mapping_2[name]; });
                }
            }
            default:
                return query;
        }
    };
    PrometheusDatasource.prototype.getPrometheusTime = function (date, roundUp) {
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(date)) {
            date = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_4__["parse"](date, roundUp);
        }
        return Math.ceil(date.valueOf() / 1000);
    };
    PrometheusDatasource.prototype.getTimeRange = function () {
        var range = this.timeSrv.timeRange();
        return {
            start: this.getPrometheusTime(range.from, false),
            end: this.getPrometheusTime(range.to, true),
        };
    };
    PrometheusDatasource.prototype.getOriginalMetricName = function (labelData) {
        return this.resultTransformer.getOriginalMetricName(labelData);
    };
    return PrometheusDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/metric_find_query.ts":
/*!***********************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/metric_find_query.ts ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var PrometheusMetricFindQuery = /** @class */ (function () {
    function PrometheusMetricFindQuery(datasource, query, timeSrv) {
        this.datasource = datasource;
        this.query = query;
        this.range = timeSrv.timeRange();
    }
    PrometheusMetricFindQuery.prototype.process = function () {
        var labelValuesRegex = /^label_values\((?:(.+),\s*)?([a-zA-Z_][a-zA-Z0-9_]+)\)\s*$/;
        var metricNamesRegex = /^metrics\((.+)\)\s*$/;
        var queryResultRegex = /^query_result\((.+)\)\s*$/;
        var labelValuesQuery = this.query.match(labelValuesRegex);
        if (labelValuesQuery) {
            if (labelValuesQuery[1]) {
                return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);
            }
            else {
                return this.labelValuesQuery(labelValuesQuery[2], null);
            }
        }
        var metricNamesQuery = this.query.match(metricNamesRegex);
        if (metricNamesQuery) {
            return this.metricNameQuery(metricNamesQuery[1]);
        }
        var queryResultQuery = this.query.match(queryResultRegex);
        if (queryResultQuery) {
            return this.queryResultQuery(queryResultQuery[1]);
        }
        // if query contains full metric name, return metric name and label list
        return this.metricNameAndLabelsQuery(this.query);
    };
    PrometheusMetricFindQuery.prototype.labelValuesQuery = function (label, metric) {
        var url;
        if (!metric) {
            // return label values globally
            url = '/api/v1/label/' + label + '/values';
            return this.datasource.metadataRequest(url).then(function (result) {
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result.data.data, function (value) {
                    return { text: value };
                });
            });
        }
        else {
            var start = this.datasource.getPrometheusTime(this.range.from, false);
            var end = this.datasource.getPrometheusTime(this.range.to, true);
            url = '/api/v1/series?match[]=' + encodeURIComponent(metric) + '&start=' + start + '&end=' + end;
            return this.datasource.metadataRequest(url).then(function (result) {
                var _labels = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result.data.data, function (metric) {
                    return metric[label] || '';
                }).filter(function (label) {
                    return label !== '';
                });
                return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniq(_labels).map(function (metric) {
                    return {
                        text: metric,
                        expandable: true,
                    };
                });
            });
        }
    };
    PrometheusMetricFindQuery.prototype.metricNameQuery = function (metricFilterPattern) {
        var url = '/api/v1/label/__name__/values';
        return this.datasource.metadataRequest(url).then(function (result) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.chain(result.data.data)
                .filter(function (metricName) {
                var r = new RegExp(metricFilterPattern);
                return r.test(metricName);
            })
                .map(function (matchedMetricName) {
                return {
                    text: matchedMetricName,
                    expandable: true,
                };
            })
                .value();
        });
    };
    PrometheusMetricFindQuery.prototype.queryResultQuery = function (query) {
        var end = this.datasource.getPrometheusTime(this.range.to, true);
        return this.datasource.performInstantQuery({ expr: query }, end).then(function (result) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result.data.data.result, function (metricData) {
                var text = metricData.metric.__name__ || '';
                delete metricData.metric.__name__;
                text +=
                    '{' +
                        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(metricData.metric, function (v, k) {
                            return k + '="' + v + '"';
                        }).join(',') +
                        '}';
                text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;
                return {
                    text: text,
                    expandable: true,
                };
            });
        });
    };
    PrometheusMetricFindQuery.prototype.metricNameAndLabelsQuery = function (query) {
        var start = this.datasource.getPrometheusTime(this.range.from, false);
        var end = this.datasource.getPrometheusTime(this.range.to, true);
        var url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;
        var self = this;
        return this.datasource.metadataRequest(url).then(function (result) {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(result.data.data, function (metric) {
                return {
                    text: self.datasource.getOriginalMetricName(metric),
                    expandable: true,
                };
            });
        });
    };
    return PrometheusMetricFindQuery;
}());
/* harmony default export */ __webpack_exports__["default"] = (PrometheusMetricFindQuery);


/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/mode-prometheus.js":
/*!*********************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/mode-prometheus.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// jshint ignore: start
// jscs: disable
ace.define("ace/mode/prometheus_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var PrometheusHighlightRules = function() {
  var keywords = (
    "count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile"
  );

  var builtinConstants = (
    "true|false|null|__name__|job"
  );

  var builtinFunctions = (
    "abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv|" + "drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2|" +
    "log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time|" +
    "min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time"
  );

  var keywordMapper = this.createKeywordMapper({
    "support.function": builtinFunctions,
    "keyword": keywords,
    "constant.language": builtinConstants
  }, "identifier", true);

  this.$rules = {
    "start" : [ {
      token : "string", // single line
      regex : /"(?:[^"\\]|\\.)*?"/
    }, {
      token : "string", // string
      regex : "'.*?'"
    }, {
      token : "constant.numeric", // float
      regex : "[-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b"
    }, {
      token : "constant.language", // time
      regex : "\\d+[smhdwy]"
    }, {
      token : "keyword.operator.binary",
      regex : "\\+|\\-|\\*|\\/|%|\\^|==|!=|<=|>=|<|>|and|or|unless"
    }, {
      token : "keyword.other",
      regex : "keep_common|offset|bool"
    }, {
      token : "keyword.control",
      regex : "by|without|on|ignoring|group_left|group_right",
      next  : "start-label-list-matcher"
    }, {
      token : "variable",
      regex : "\\$[A-Za-z0-9_]+"
    }, {
      token : keywordMapper,
      regex : "[a-zA-Z_:][a-zA-Z0-9_:]*"
    }, {
      token : "paren.lparen",
      regex : "[[(]"
    }, {
      token : "paren.lparen.label-matcher",
      regex : "{",
      next  : "start-label-matcher"
    }, {
      token : "paren.rparen",
      regex : "[\\])]"
    }, {
      token : "paren.rparen.label-matcher",
      regex : "}"
    }, {
      token : "text",
      regex : "\\s+"
    } ],
    "start-label-matcher" : [ {
      token : "entity.name.tag.label-matcher",
      regex : '[a-zA-Z_][a-zA-Z0-9_]*'
    }, {
      token : "keyword.operator.label-matcher",
      regex : '=~|=|!~|!='
    }, {
      token : "string.quoted.label-matcher",
      regex : '"[^"]*"|\'[^\']*\''
    }, {
      token : "punctuation.operator.label-matcher",
      regex : ","
    }, {
      token : "paren.rparen.label-matcher",
      regex : "}",
      next  : "start"
    } ],
    "start-label-list-matcher" : [ {
      token : "paren.lparen.label-list-matcher",
      regex : "[(]"
    }, {
      token : "entity.name.tag.label-list-matcher",
      regex : '[a-zA-Z_][a-zA-Z0-9_]*'
    }, {
      token : "punctuation.operator.label-list-matcher",
      regex : ","
    }, {
      token : "paren.rparen.label-list-matcher",
      regex : "[)]",
      next  : "start"
    } ]
  };

  this.normalizeRules();
};

oop.inherits(PrometheusHighlightRules, TextHighlightRules);

exports.PrometheusHighlightRules = PrometheusHighlightRules;
});

ace.define("ace/mode/prometheus_completions",["require","exports","module","ace/token_iterator", "ace/lib/lang"], function(require, exports, module) {
"use strict";

var lang = require("../lib/lang");

var prometheusKeyWords = [
  "by", "without", "keep_common", "offset", "bool", "and", "or", "unless", "ignoring", "on", "group_left",
  "group_right", "count", "count_values", "min", "max", "avg", "sum", "stddev", "stdvar", "bottomk", "topk", "quantile"
];

var keyWordsCompletions = prometheusKeyWords.map(function(word) {
  return {
    caption: word,
    value: word,
    meta: "keyword",
    score: Number.MAX_VALUE
  }
});

var prometheusFunctions = [
  {
    name: 'abs()', value: 'abs',
    def: 'abs(v instant-vector)',
    docText: 'Returns the input vector with all sample values converted to their absolute value.'
  },
  {
    name: 'absent()', value: 'absent',
    def: 'absent(v instant-vector)',
    docText: 'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.'
  },
  {
    name: 'ceil()', value: 'ceil',
    def: 'ceil(v instant-vector)',
    docText: 'Rounds the sample values of all elements in `v` up to the nearest integer.'
  },
  {
    name: 'changes()', value: 'changes',
    def: 'changes(v range-vector)',
    docText: 'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.'
  },
  {
    name: 'clamp_max()', value: 'clamp_max',
    def: 'clamp_max(v instant-vector, max scalar)',
    docText: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.'
  },
  {
    name: 'clamp_min()', value: 'clamp_min',
    def: 'clamp_min(v instant-vector, min scalar)',
    docText: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.'
  },
  {
    name: 'count_scalar()', value: 'count_scalar',
    def: 'count_scalar(v instant-vector)',
    docText: 'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.'
  },
  {
    name: 'day_of_month()', value: 'day_of_month',
    def: 'day_of_month(v=vector(time()) instant-vector)',
    docText: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.'
  },
  {
    name: 'day_of_week()', value: 'day_of_week',
    def: 'day_of_week(v=vector(time()) instant-vector)',
    docText: 'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.'
  },
  {
    name: 'days_in_month()', value: 'days_in_month',
    def: 'days_in_month(v=vector(time()) instant-vector)',
    docText: 'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.'
  },
  {
    name: 'delta()', value: 'delta',
    def: 'delta(v range-vector)',
    docText: 'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.'
  },
  {
    name: 'deriv()', value: 'deriv',
    def: 'deriv(v range-vector)',
    docText: 'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.'
  },
  {
    name: 'drop_common_labels()', value: 'drop_common_labels',
    def: 'drop_common_labels(instant-vector)',
    docText: 'Drops all labels that have the same name and value across all series in the input vector.'
  },
  {
    name: 'exp()', value: 'exp',
    def: 'exp(v instant-vector)',
    docText: 'Calculates the exponential function for all elements in `v`.\nSpecial cases are:\n* `Exp(+Inf) = +Inf` \n* `Exp(NaN) = NaN`'
  },
  {
    name: 'floor()', value: 'floor',
    def: 'floor(v instant-vector)',
    docText: 'Rounds the sample values of all elements in `v` down to the nearest integer.'
  },
  {
    name: 'histogram_quantile()', value: 'histogram_quantile',
    def: 'histogram_quantile(φ float, b instant-vector)',
    docText: 'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.'
  },
  {
    name: 'holt_winters()', value: 'holt_winters',
    def: 'holt_winters(v range-vector, sf scalar, tf scalar)',
    docText: 'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.'
  },
  {
    name: 'hour()', value: 'hour',
    def: 'hour(v=vector(time()) instant-vector)',
    docText: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.'
  },
  {
    name: 'idelta()', value: 'idelta',
    def: 'idelta(v range-vector)',
    docText: 'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.'
  },
  {
    name: 'increase()', value: 'increase',
    def: 'increase(v range-vector)',
    docText: 'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.'
  },
  {
    name: 'irate()', value: 'irate',
    def: 'irate(v range-vector)',
    docText: 'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.'
  },
  {
    name: 'label_replace()', value: 'label_replace',
    def: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',
    docText: 'For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn\'t match then the timeseries is returned unchanged.'
  },
  {
    name: 'ln()', value: 'ln',
    def: 'ln(v instant-vector)',
    docText: 'calculates the natural logarithm for all elements in `v`.\nSpecial cases are:\n * `ln(+Inf) = +Inf`\n * `ln(0) = -Inf`\n * `ln(x < 0) = NaN`\n * `ln(NaN) = NaN`'
  },
  {
    name: 'log2()', value: 'log2',
    def: 'log2(v instant-vector)',
    docText: 'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'
  },
  {
    name: 'log10()', value: 'log10',
    def: 'log10(v instant-vector)',
    docText: 'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'
  },
  {
    name: 'minute()', value: 'minute',
    def: 'minute(v=vector(time()) instant-vector)',
    docText: 'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.'
  },
  {
    name: 'month()', value: 'month',
    def: 'month(v=vector(time()) instant-vector)',
    docText: 'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.'
  },
  {
    name: 'predict_linear()', value: 'predict_linear',
    def: 'predict_linear(v range-vector, t scalar)',
    docText: 'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.'
  },
  {
    name: 'rate()', value: 'rate',
    def: 'rate(v range-vector)',
    docText: "Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period."
  },
  {
    name: 'resets()', value: 'resets',
    def: 'resets(v range-vector)',
    docText: 'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.'
  },
  {
    name: 'round()', value: 'round',
    def: 'round(v instant-vector, to_nearest=1 scalar)',
    docText: 'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.'
  },
  {
    name: 'scalar()', value: 'scalar',
    def: 'scalar(v instant-vector)',
    docText: 'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.'
  },
  {
    name: 'sort()', value: 'sort',
    def: 'sort(v instant-vector)',
    docText: 'Returns vector elements sorted by their sample values, in ascending order.'
  },
  {
    name: 'sort_desc()', value: 'sort_desc',
    def: 'sort_desc(v instant-vector)',
    docText: 'Returns vector elements sorted by their sample values, in descending order.'
  },
  {
    name: 'sqrt()', value: 'sqrt',
    def: 'sqrt(v instant-vector)',
    docText: 'Calculates the square root of all elements in `v`.'
  },
  {
    name: 'time()', value: 'time',
    def: 'time()',
    docText: 'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.'
  },
  {
    name: 'vector()', value: 'vector',
    def: 'vector(s scalar)',
    docText: 'Returns the scalar `s` as a vector with no labels.'
  },
  {
    name: 'year()', value: 'year',
    def: 'year(v=vector(time()) instant-vector)',
    docText: 'Returns the year for each of the given times in UTC.'
  },
  {
    name: 'avg_over_time()', value: 'avg_over_time',
    def: 'avg_over_time(range-vector)',
    docText: 'The average value of all points in the specified interval.'
  },
  {
    name: 'min_over_time()', value: 'min_over_time',
    def: 'min_over_time(range-vector)',
    docText: 'The minimum value of all points in the specified interval.'
  },
  {
    name: 'max_over_time()', value: 'max_over_time',
    def: 'max_over_time(range-vector)',
    docText: 'The maximum value of all points in the specified interval.'
  },
  {
    name: 'sum_over_time()', value: 'sum_over_time',
    def: 'sum_over_time(range-vector)',
    docText: 'The sum of all values in the specified interval.'
  },
  {
    name: 'count_over_time()', value: 'count_over_time',
    def: 'count_over_time(range-vector)',
    docText: 'The count of all values in the specified interval.'
  },
  {
    name: 'quantile_over_time()', value: 'quantile_over_time',
    def: 'quantile_over_time(scalar, range-vector)',
    docText: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.'
  },
  {
    name: 'stddev_over_time()', value: 'stddev_over_time',
    def: 'stddev_over_time(range-vector)',
    docText: 'The population standard deviation of the values in the specified interval.'
  },
  {
    name: 'stdvar_over_time()', value: 'stdvar_over_time',
    def: 'stdvar_over_time(range-vector)',
    docText: 'The population standard variance of the values in the specified interval.'
  },
];

function wrapText(str, len) {
  len = len || 60;
  var lines = [];
  var space_index = 0;
  var line_start = 0;
  var next_line_end = len;
  var line = "";
  for (var i = 0; i < str.length; i++) {
    if (str[i] === ' ') {
      space_index = i;
    } else if (i >= next_line_end  && space_index != 0) {
      line = str.slice(line_start, space_index);
      lines.push(line);
      line_start = space_index + 1;
      next_line_end = i + len;
      space_index = 0;
    }
  }
  line = str.slice(line_start);
  lines.push(line);
  return lines.join("&nbsp<br>");
}

function convertMarkDownTags(text) {
  text = text.replace(/```(.+)```/, "<pre>$1</pre>");
  text = text.replace(/`([^`]+)`/, "<code>$1</code>");
  return text;
}

function convertToHTML(item) {
  var docText = lang.escapeHTML(item.docText);
  docText = convertMarkDownTags(wrapText(docText, 40));
  return [
    "<b>", lang.escapeHTML(item.def), "</b>", "<hr></hr>", docText, "<br>&nbsp"
  ].join("");
}

var functionsCompletions = prometheusFunctions.map(function(item) {
  return {
    caption: item.name,
    value: item.value,
    docHTML: convertToHTML(item),
    meta: "function",
    score: Number.MAX_VALUE
  };
});

var PrometheusCompletions = function() {};

(function() {
  this.getCompletions = function(state, session, pos, prefix, callback) {
    var token = session.getTokenAt(pos.row, pos.column);
    if (token.type === 'entity.name.tag.label-matcher'
      || token.type === 'string.quoted.label-matcher'
      || token.type === 'entity.name.tag.label-list-matcher') {
      return callback(null, []);
    }

    var completions = keyWordsCompletions.concat(functionsCompletions);
    callback(null, completions);
  };

}).call(PrometheusCompletions.prototype);

exports.PrometheusCompletions = PrometheusCompletions;
});

ace.define("ace/mode/behaviour/prometheus",["require","exports","module","ace/lib/oop","ace/mode/behaviour","ace/mode/behaviour/cstyle","ace/token_iterator"], function(require, exports, module) {
"use strict";

var oop = require("../../lib/oop");
var Behaviour = require("../behaviour").Behaviour;
var CstyleBehaviour = require("./cstyle").CstyleBehaviour;
var TokenIterator = require("../../token_iterator").TokenIterator;

function getWrapped(selection, selected, opening, closing) {
  var rowDiff = selection.end.row - selection.start.row;
  return {
    text: opening + selected + closing,
    selection: [
      0,
      selection.start.column + 1,
      rowDiff,
      selection.end.column + (rowDiff ? 0 : 1)
    ]
  };
};

var PrometheusBehaviour = function () {
  this.inherit(CstyleBehaviour);

  // Rewrite default CstyleBehaviour for {} braces
  this.add("braces", "insertion", function(state, action, editor, session, text) {
    if (text == '{') {
      var selection = editor.getSelectionRange();
      var selected = session.doc.getTextRange(selection);
      if (selected !== "" && editor.getWrapBehavioursEnabled()) {
        return getWrapped(selection, selected, '{', '}');
      } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {
        return {
          text: '{}',
          selection: [1, 1]
        };
      }
    } else if (text == '}') {
      var cursor = editor.getCursorPosition();
      var line = session.doc.getLine(cursor.row);
      var rightChar = line.substring(cursor.column, cursor.column + 1);
      if (rightChar == '}') {
        var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});
        if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {
          return {
            text: '',
            selection: [1, 1]
          };
        }
      }
    }
  });

  this.add("braces", "deletion", function(state, action, editor, session, range) {
    var selected = session.doc.getTextRange(range);
    if (!range.isMultiLine() && selected == '{') {
      var line = session.doc.getLine(range.start.row);
      var rightChar = line.substring(range.start.column + 1, range.start.column + 2);
      if (rightChar == '}') {
        range.end.column++;
        return range;
      }
    }
  });

}
oop.inherits(PrometheusBehaviour, CstyleBehaviour);

exports.PrometheusBehaviour = PrometheusBehaviour;
});

ace.define("ace/mode/prometheus",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/prometheus_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextMode = require("./text").Mode;
var PrometheusHighlightRules = require("./prometheus_highlight_rules").PrometheusHighlightRules;
var PrometheusCompletions = require("./prometheus_completions").PrometheusCompletions;
var PrometheusBehaviour = require("./behaviour/prometheus").PrometheusBehaviour;

var Mode = function() {
  this.HighlightRules = PrometheusHighlightRules;
  this.$behaviour = new PrometheusBehaviour();
  this.$completer = new PrometheusCompletions();
  // replace keyWordCompleter
  this.completer = this.$completer;
};
oop.inherits(Mode, TextMode);

(function() {

  this.$id = "ace/mode/prometheus";
}).call(Mode.prototype);

exports.Mode = Mode;

});


/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/module.ts":
/*!************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/module.ts ***!
  \************************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return PrometheusAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/prometheus/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["PrometheusDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/prometheus/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["PrometheusQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/prometheus/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["PrometheusConfigCtrl"]; });




var PrometheusAnnotationsQueryCtrl = /** @class */ (function () {
    function PrometheusAnnotationsQueryCtrl() {
    }
    PrometheusAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return PrometheusAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/query_ctrl.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/query_ctrl.ts ***!
  \****************************************************************/
/*! exports provided: PrometheusQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrometheusQueryCtrl", function() { return PrometheusQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var _completer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./completer */ "./public/app/plugins/datasource/prometheus/completer.ts");
/* harmony import */ var _mode_prometheus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mode-prometheus */ "./public/app/plugins/datasource/prometheus/mode-prometheus.js");
/* harmony import */ var _mode_prometheus__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_mode_prometheus__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _snippets_prometheus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./snippets/prometheus */ "./public/app/plugins/datasource/prometheus/snippets/prometheus.js");
/* harmony import */ var _snippets_prometheus__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_snippets_prometheus__WEBPACK_IMPORTED_MODULE_6__);







var PrometheusQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PrometheusQueryCtrl, _super);
    /** @ngInject */
    function PrometheusQueryCtrl($scope, $injector, templateSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.templateSrv = templateSrv;
        var target = _this.target;
        target.expr = target.expr || '';
        target.intervalFactor = target.intervalFactor || 1;
        target.format = target.format || _this.getDefaultFormat();
        _this.metric = '';
        _this.resolutions = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map([1, 2, 3, 4, 5, 10], function (f) {
            return { factor: f, label: '1/' + f };
        });
        _this.formats = [
            { text: 'Time series', value: 'time_series' },
            { text: 'Table', value: 'table' },
            { text: 'Heatmap', value: 'heatmap' },
        ];
        _this.instant = false;
        _this.updateLink();
        return _this;
    }
    PrometheusQueryCtrl.prototype.getCompleter = function (query) {
        return new _completer__WEBPACK_IMPORTED_MODULE_4__["PromCompleter"](this.datasource, this.templateSrv);
    };
    PrometheusQueryCtrl.prototype.getDefaultFormat = function () {
        if (this.panelCtrl.panel.type === 'table') {
            return 'table';
        }
        else if (this.panelCtrl.panel.type === 'heatmap') {
            return 'heatmap';
        }
        return 'time_series';
    };
    PrometheusQueryCtrl.prototype.refreshMetricData = function () {
        if (!lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isEqual(this.oldTarget, this.target)) {
            this.oldTarget = angular__WEBPACK_IMPORTED_MODULE_1___default.a.copy(this.target);
            this.panelCtrl.refresh();
            this.updateLink();
        }
    };
    PrometheusQueryCtrl.prototype.updateLink = function () {
        var range = this.panelCtrl.range;
        if (!range) {
            return;
        }
        var rangeDiff = Math.ceil((range.to.valueOf() - range.from.valueOf()) / 1000);
        var endTime = range.to.utc().format('YYYY-MM-DD HH:mm');
        var expr = {
            'g0.expr': this.templateSrv.replace(this.target.expr, this.panelCtrl.panel.scopedVars, this.datasource.interpolateQueryExpr),
            'g0.range_input': rangeDiff + 's',
            'g0.end_input': endTime,
            'g0.step_input': this.target.step,
            'g0.stacked': this.panelCtrl.panel.stack ? 1 : 0,
            'g0.tab': 0,
        };
        var args = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(expr, function (v, k) {
            return k + '=' + encodeURIComponent(v);
        }).join('&');
        this.linkToPrometheus = this.datasource.directUrl + '/graph?' + args;
    };
    PrometheusQueryCtrl.prototype.getCollapsedText = function () {
        return this.target.expr;
    };
    PrometheusQueryCtrl.templateUrl = 'partials/query.editor.html';
    return PrometheusQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/result_transformer.ts":
/*!************************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/result_transformer.ts ***!
  \************************************************************************/
/*! exports provided: ResultTransformer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResultTransformer", function() { return ResultTransformer; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_table_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/table_model */ "./public/app/core/table_model.ts");


var ResultTransformer = /** @class */ (function () {
    function ResultTransformer(templateSrv) {
        this.templateSrv = templateSrv;
    }
    ResultTransformer.prototype.transform = function (response, options) {
        var prometheusResult = response.data.data.result;
        if (options.format === 'table') {
            return [this.transformMetricDataToTable(prometheusResult, options.responseListLength, options.refId)];
        }
        else if (options.format === 'heatmap') {
            var seriesList = [];
            prometheusResult.sort(sortSeriesByLabel);
            for (var _i = 0, prometheusResult_1 = prometheusResult; _i < prometheusResult_1.length; _i++) {
                var metricData = prometheusResult_1[_i];
                seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));
            }
            seriesList = this.transformToHistogramOverTime(seriesList);
            return seriesList;
        }
        else {
            var seriesList = [];
            for (var _a = 0, prometheusResult_2 = prometheusResult; _a < prometheusResult_2.length; _a++) {
                var metricData = prometheusResult_2[_a];
                if (response.data.data.resultType === 'matrix') {
                    seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));
                }
                else if (response.data.data.resultType === 'vector') {
                    seriesList.push(this.transformInstantMetricData(metricData, options));
                }
            }
            return seriesList;
        }
        return [];
    };
    ResultTransformer.prototype.transformMetricData = function (metricData, options, start, end) {
        var dps = [];
        var metricLabel = null;
        metricLabel = this.createMetricLabel(metricData.metric, options);
        var stepMs = parseInt(options.step, 10) * 1000;
        var baseTimestamp = start * 1000;
        if (metricData.values === undefined) {
            throw new Error('Prometheus heatmap error: data should be a time series');
        }
        for (var _i = 0, _a = metricData.values; _i < _a.length; _i++) {
            var value = _a[_i];
            var dpValue = parseFloat(value[1]);
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNaN(dpValue)) {
                dpValue = null;
            }
            var timestamp = parseFloat(value[0]) * 1000;
            for (var t = baseTimestamp; t < timestamp; t += stepMs) {
                dps.push([null, t]);
            }
            baseTimestamp = timestamp + stepMs;
            dps.push([dpValue, timestamp]);
        }
        var endTimestamp = end * 1000;
        for (var t = baseTimestamp; t <= endTimestamp; t += stepMs) {
            dps.push([null, t]);
        }
        return {
            datapoints: dps,
            query: options.query,
            responseIndex: options.responseIndex,
            target: metricLabel,
        };
    };
    ResultTransformer.prototype.transformMetricDataToTable = function (md, resultCount, refId) {
        var table = new app_core_table_model__WEBPACK_IMPORTED_MODULE_1__["default"]();
        var i, j;
        var metricLabels = {};
        if (md.length === 0) {
            return table;
        }
        // Collect all labels across all metrics
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(md, function (series) {
            for (var label in series.metric) {
                if (!metricLabels.hasOwnProperty(label)) {
                    metricLabels[label] = 1;
                }
            }
        });
        // Sort metric labels, create columns for them and record their index
        var sortedLabels = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.keys(metricLabels).sort();
        table.columns.push({ text: 'Time', type: 'time' });
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(sortedLabels, function (label, labelIndex) {
            metricLabels[label] = labelIndex + 1;
            table.columns.push({ text: label, filterable: !label.startsWith('__') });
        });
        var valueText = resultCount > 1 ? "Value #" + refId : 'Value';
        table.columns.push({ text: valueText });
        // Populate rows, set value to empty string when label not present.
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each(md, function (series) {
            if (series.value) {
                series.values = [series.value];
            }
            if (series.values) {
                for (i = 0; i < series.values.length; i++) {
                    var values = series.values[i];
                    var reordered = [values[0] * 1000];
                    if (series.metric) {
                        for (j = 0; j < sortedLabels.length; j++) {
                            var label = sortedLabels[j];
                            if (series.metric.hasOwnProperty(label)) {
                                reordered.push(series.metric[label]);
                            }
                            else {
                                reordered.push('');
                            }
                        }
                    }
                    reordered.push(parseFloat(values[1]));
                    table.rows.push(reordered);
                }
            }
        });
        return table;
    };
    ResultTransformer.prototype.transformInstantMetricData = function (md, options) {
        var dps = [];
        var metricLabel = null;
        metricLabel = this.createMetricLabel(md.metric, options);
        dps.push([parseFloat(md.value[1]), md.value[0] * 1000]);
        return { target: metricLabel, datapoints: dps, labels: md.metric };
    };
    ResultTransformer.prototype.createMetricLabel = function (labelData, options) {
        var label = '';
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isUndefined(options) || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(options.legendFormat)) {
            label = this.getOriginalMetricName(labelData);
        }
        else {
            label = this.renderTemplate(this.templateSrv.replace(options.legendFormat), labelData);
        }
        if (!label || label === '{}') {
            label = options.query;
        }
        return label;
    };
    ResultTransformer.prototype.renderTemplate = function (aliasPattern, aliasData) {
        var aliasRegex = /\{\{\s*(.+?)\s*\}\}/g;
        return aliasPattern.replace(aliasRegex, function (match, g1) {
            if (aliasData[g1]) {
                return aliasData[g1];
            }
            return g1;
        });
    };
    ResultTransformer.prototype.getOriginalMetricName = function (labelData) {
        var metricName = labelData.__name__ || '';
        delete labelData.__name__;
        var labelPart = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toPairs(labelData), function (label) {
            return label[0] + '="' + label[1] + '"';
        }).join(',');
        return metricName + '{' + labelPart + '}';
    };
    ResultTransformer.prototype.transformToHistogramOverTime = function (seriesList) {
        /*      t1 = timestamp1, t2 = timestamp2 etc.
                t1  t2  t3          t1  t2  t3
        le10    10  10  0     =>    10  10  0
        le20    20  10  30    =>    10  0   30
        le30    30  10  35    =>    10  0   5
        */
        for (var i = seriesList.length - 1; i > 0; i--) {
            var topSeries = seriesList[i].datapoints;
            var bottomSeries = seriesList[i - 1].datapoints;
            if (!topSeries || !bottomSeries) {
                throw new Error('Prometheus heatmap transform error: data should be a time series');
            }
            for (var j = 0; j < topSeries.length; j++) {
                var bottomPoint = bottomSeries[j] || [0];
                topSeries[j][0] -= bottomPoint[0];
            }
        }
        return seriesList;
    };
    return ResultTransformer;
}());

function sortSeriesByLabel(s1, s2) {
    var le1, le2;
    try {
        // fail if not integer. might happen with bad queries
        le1 = parseHistogramLabel(s1.metric.le);
        le2 = parseHistogramLabel(s2.metric.le);
    }
    catch (err) {
        console.log(err);
        return 0;
    }
    if (le1 > le2) {
        return 1;
    }
    if (le1 < le2) {
        return -1;
    }
    return 0;
}
function parseHistogramLabel(le) {
    if (le === '+Inf') {
        return +Infinity;
    }
    return Number(le);
}


/***/ }),

/***/ "./public/app/plugins/datasource/prometheus/snippets/prometheus.js":
/*!*************************************************************************!*\
  !*** ./public/app/plugins/datasource/prometheus/snippets/prometheus.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// jshint ignore: start
// jscs: disable
ace.define("ace/snippets/prometheus",["require","exports","module"], function(require, exports, module) {
"use strict";

// exports.snippetText = "# rate\n\
// snippet r\n\
//   rate(${1:metric}[${2:range}])\n\
// ";

exports.snippets = [
  {
    "content": "rate(${1:metric}[${2:range}])",
    "name": "rate()",
    "scope": "prometheus",
    "tabTrigger": "r"
  }
];

exports.scope = "prometheus";
});


/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts":
/*!*****************************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts ***!
  \*****************************************************************************/
/*! exports provided: StackdriverAnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverAnnotationsQueryCtrl", function() { return StackdriverAnnotationsQueryCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _query_filter_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_filter_ctrl */ "./public/app/plugins/datasource/stackdriver/query_filter_ctrl.ts");


var StackdriverAnnotationsQueryCtrl = /** @class */ (function () {
    /** @ngInject */
    function StackdriverAnnotationsQueryCtrl() {
        this.defaultDropdownValue = 'Select Metric';
        this.defaultServiceValue = 'All Services';
        this.defaults = {
            project: {
                id: 'default',
                name: 'loading project...',
            },
            metricType: this.defaultDropdownValue,
            service: this.defaultServiceValue,
            metric: '',
            filters: [],
            metricKind: '',
            valueType: '',
        };
        this.annotation.target = this.annotation.target || {};
        this.annotation.target.refId = 'annotationQuery';
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.defaultsDeep(this.annotation.target, this.defaults);
    }
    StackdriverAnnotationsQueryCtrl.templateUrl = 'partials/annotations.editor.html';
    return StackdriverAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/config_ctrl.ts":
/*!******************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/config_ctrl.ts ***!
  \******************************************************************/
/*! exports provided: StackdriverConfigCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverConfigCtrl", function() { return StackdriverConfigCtrl; });
var StackdriverConfigCtrl = /** @class */ (function () {
    /** @ngInject */
    function StackdriverConfigCtrl(datasourceSrv) {
        this.validationErrors = [];
        this.datasourceSrv = datasourceSrv;
        this.current.jsonData = this.current.jsonData || {};
        this.current.secureJsonData = this.current.secureJsonData || {};
        this.current.secureJsonFields = this.current.secureJsonFields || {};
    }
    StackdriverConfigCtrl.prototype.save = function (jwt) {
        this.current.secureJsonData.privateKey = jwt.private_key;
        this.current.jsonData.tokenUri = jwt.token_uri;
        this.current.jsonData.clientEmail = jwt.client_email;
        this.current.jsonData.defaultProject = jwt.project_id;
    };
    StackdriverConfigCtrl.prototype.validateJwt = function (jwt) {
        this.resetValidationMessages();
        if (!jwt.private_key || jwt.private_key.length === 0) {
            this.validationErrors.push('Private key field missing in JWT file.');
        }
        if (!jwt.token_uri || jwt.token_uri.length === 0) {
            this.validationErrors.push('Token URI field missing in JWT file.');
        }
        if (!jwt.client_email || jwt.client_email.length === 0) {
            this.validationErrors.push('Client Email field missing in JWT file.');
        }
        if (this.validationErrors.length === 0) {
            this.inputDataValid = true;
            return true;
        }
        return false;
    };
    StackdriverConfigCtrl.prototype.onUpload = function (json) {
        this.jsonText = '';
        if (this.validateJwt(json)) {
            this.save(json);
        }
    };
    StackdriverConfigCtrl.prototype.onPasteJwt = function (e) {
        try {
            var json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);
            if (this.validateJwt(json)) {
                this.save(json);
            }
        }
        catch (error) {
            this.resetValidationMessages();
            this.validationErrors.push("Invalid json: " + error.message);
        }
    };
    StackdriverConfigCtrl.prototype.resetValidationMessages = function () {
        this.validationErrors = [];
        this.inputDataValid = false;
        this.jsonText = '';
        this.current.jsonData = {};
        this.current.secureJsonData = {};
        this.current.secureJsonFields = {};
    };
    StackdriverConfigCtrl.templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';
    return StackdriverConfigCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/constants.ts":
/*!****************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/constants.ts ***!
  \****************************************************************/
/*! exports provided: MetricKind, ValueTypes, alignOptions, aggOptions, alignmentPeriods, stackdriverUnitMappings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetricKind", function() { return MetricKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueTypes", function() { return ValueTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignOptions", function() { return alignOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aggOptions", function() { return aggOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignmentPeriods", function() { return alignmentPeriods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stackdriverUnitMappings", function() { return stackdriverUnitMappings; });
var MetricKind;
(function (MetricKind) {
    MetricKind["METRIC_KIND_UNSPECIFIED"] = "METRIC_KIND_UNSPECIFIED";
    MetricKind["GAUGE"] = "GAUGE";
    MetricKind["DELTA"] = "DELTA";
    MetricKind["CUMULATIVE"] = "CUMULATIVE";
})(MetricKind || (MetricKind = {}));
var ValueTypes;
(function (ValueTypes) {
    ValueTypes["VALUE_TYPE_UNSPECIFIED"] = "VALUE_TYPE_UNSPECIFIED";
    ValueTypes["BOOL"] = "BOOL";
    ValueTypes["INT64"] = "INT64";
    ValueTypes["DOUBLE"] = "DOUBLE";
    ValueTypes["STRING"] = "STRING";
    ValueTypes["DISTRIBUTION"] = "DISTRIBUTION";
    ValueTypes["MONEY"] = "MONEY";
})(ValueTypes || (ValueTypes = {}));
var alignOptions = [
    {
        text: 'delta',
        value: 'ALIGN_DELTA',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],
    },
    {
        text: 'rate',
        value: 'ALIGN_RATE',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],
    },
    {
        text: 'interpolate',
        value: 'ALIGN_INTERPOLATE',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE],
    },
    {
        text: 'next older',
        value: 'ALIGN_NEXT_OLDER',
        valueTypes: [
            ValueTypes.INT64,
            ValueTypes.DOUBLE,
            ValueTypes.MONEY,
            ValueTypes.DISTRIBUTION,
            ValueTypes.STRING,
            ValueTypes.VALUE_TYPE_UNSPECIFIED,
            ValueTypes.BOOL,
        ],
        metricKinds: [MetricKind.GAUGE],
    },
    {
        text: 'min',
        value: 'ALIGN_MIN',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'max',
        value: 'ALIGN_MAX',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'mean',
        value: 'ALIGN_MEAN',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'count',
        value: 'ALIGN_COUNT',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'sum',
        value: 'ALIGN_SUM',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'stddev',
        value: 'ALIGN_STDDEV',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'count true',
        value: 'ALIGN_COUNT_TRUE',
        valueTypes: [ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE],
    },
    {
        text: 'count false',
        value: 'ALIGN_COUNT_FALSE',
        valueTypes: [ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE],
    },
    {
        text: 'fraction true',
        value: 'ALIGN_FRACTION_TRUE',
        valueTypes: [ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE],
    },
    {
        text: 'percentile 99',
        value: 'ALIGN_PERCENTILE_99',
        valueTypes: [ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'percentile 95',
        value: 'ALIGN_PERCENTILE_95',
        valueTypes: [ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'percentile 50',
        value: 'ALIGN_PERCENTILE_50',
        valueTypes: [ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'percentile 05',
        value: 'ALIGN_PERCENTILE_05',
        valueTypes: [ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'percent change',
        value: 'ALIGN_PERCENT_CHANGE',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
];
var aggOptions = [
    {
        text: 'none',
        value: 'REDUCE_NONE',
        valueTypes: [
            ValueTypes.INT64,
            ValueTypes.DOUBLE,
            ValueTypes.MONEY,
            ValueTypes.DISTRIBUTION,
            ValueTypes.BOOL,
            ValueTypes.STRING,
        ],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],
    },
    {
        text: 'mean',
        value: 'REDUCE_MEAN',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'min',
        value: 'REDUCE_MIN',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'max',
        value: 'REDUCE_MAX',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'sum',
        value: 'REDUCE_SUM',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'std. dev.',
        value: 'REDUCE_STDDEV',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'count',
        value: 'REDUCE_COUNT',
        valueTypes: [
            ValueTypes.INT64,
            ValueTypes.DOUBLE,
            ValueTypes.MONEY,
            ValueTypes.DISTRIBUTION,
            ValueTypes.BOOL,
            ValueTypes.STRING,
        ],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'count true',
        value: 'REDUCE_COUNT_TRUE',
        valueTypes: [ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: 'count false',
        value: 'REDUCE_COUNT_FALSE',
        valueTypes: [ValueTypes.BOOL],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: '99th percentile',
        value: 'REDUCE_PERCENTILE_99',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: '95th percentile',
        value: 'REDUCE_PERCENTILE_95',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: '50th percentile',
        value: 'REDUCE_PERCENTILE_50',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
    {
        text: '5th percentile',
        value: 'REDUCE_PERCENTILE_05',
        valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],
        metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],
    },
];
var alignmentPeriods = [
    { text: 'grafana auto', value: 'grafana-auto' },
    { text: 'stackdriver auto', value: 'stackdriver-auto' },
    { text: '1m', value: '+60s' },
    { text: '5m', value: '+300s' },
    { text: '30m', value: '+1800s' },
    { text: '1h', value: '+3600s' },
    { text: '6h', value: '+21600s' },
    { text: '1d', value: '+86400s' },
    { text: '1w', value: '+604800s' },
];
var stackdriverUnitMappings = {
    bit: 'bits',
    By: 'bytes',
    s: 's',
    min: 'm',
    h: 'h',
    d: 'd',
    us: 'µs',
    ms: 'ms',
    ns: 'ns',
    percent: 'percent',
    MiBy: 'mbytes',
    'By/s': 'Bps',
    GBy: 'decgbytes',
};


/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/datasource.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/datasource.ts ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./public/app/plugins/datasource/stackdriver/constants.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");



var StackdriverDatasource = /** @class */ (function () {
    /** @ngInject */
    function StackdriverDatasource(instanceSettings, backendSrv, templateSrv, timeSrv) {
        this.backendSrv = backendSrv;
        this.templateSrv = templateSrv;
        this.timeSrv = timeSrv;
        this.baseUrl = "/stackdriver/";
        this.url = instanceSettings.url;
        this.doRequest = this.doRequest;
        this.id = instanceSettings.id;
        this.projectName = instanceSettings.jsonData.defaultProject || '';
    }
    StackdriverDatasource.prototype.getTimeSeries = function (options) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var queries, data;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queries = options.targets
                            .filter(function (target) {
                            return !target.hide && target.metricType;
                        })
                            .map(function (t) {
                            if (!t.hasOwnProperty('aggregation')) {
                                t.aggregation = {
                                    crossSeriesReducer: 'REDUCE_MEAN',
                                    groupBys: [],
                                };
                            }
                            return {
                                refId: t.refId,
                                intervalMs: options.intervalMs,
                                datasourceId: _this.id,
                                metricType: _this.templateSrv.replace(t.metricType, options.scopedVars || {}),
                                primaryAggregation: _this.templateSrv.replace(t.aggregation.crossSeriesReducer, options.scopedVars || {}),
                                perSeriesAligner: _this.templateSrv.replace(t.aggregation.perSeriesAligner, options.scopedVars || {}),
                                alignmentPeriod: _this.templateSrv.replace(t.aggregation.alignmentPeriod, options.scopedVars || {}),
                                groupBys: _this.interpolateGroupBys(t.aggregation.groupBys, options.scopedVars),
                                view: t.view || 'FULL',
                                filters: (t.filters || []).map(function (f) {
                                    return _this.templateSrv.replace(f, options.scopedVars || {});
                                }),
                                aliasBy: _this.templateSrv.replace(t.aliasBy, options.scopedVars || {}),
                                type: 'timeSeriesQuery',
                            };
                        });
                        return [4 /*yield*/, this.backendSrv.datasourceRequest({
                                url: '/api/tsdb/query',
                                method: 'POST',
                                data: {
                                    from: options.range.from.valueOf().toString(),
                                    to: options.range.to.valueOf().toString(),
                                    queries: queries,
                                },
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    StackdriverDatasource.prototype.getLabels = function (metricType, refId) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTimeSeries({
                            targets: [
                                {
                                    refId: refId,
                                    datasourceId: this.id,
                                    metricType: this.templateSrv.replace(metricType),
                                    aggregation: {
                                        crossSeriesReducer: 'REDUCE_NONE',
                                    },
                                    view: 'HEADERS',
                                },
                            ],
                            range: this.timeSrv.timeRange(),
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StackdriverDatasource.prototype.interpolateGroupBys = function (groupBys, scopedVars) {
        var _this = this;
        var interpolatedGroupBys = [];
        (groupBys || []).forEach(function (gb) {
            var interpolated = _this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');
            if (Array.isArray(interpolated)) {
                interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);
            }
            else {
                interpolatedGroupBys.push(interpolated);
            }
        });
        return interpolatedGroupBys;
    };
    StackdriverDatasource.prototype.resolvePanelUnitFromTargets = function (targets) {
        var unit = 'none';
        if (targets.length > 0 && targets.every(function (t) { return t.unit === targets[0].unit; })) {
            if (_constants__WEBPACK_IMPORTED_MODULE_1__["stackdriverUnitMappings"].hasOwnProperty(targets[0].unit)) {
                unit = _constants__WEBPACK_IMPORTED_MODULE_1__["stackdriverUnitMappings"][targets[0].unit];
            }
        }
        return unit;
    };
    StackdriverDatasource.prototype.query = function (options) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var result, data;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = [];
                        return [4 /*yield*/, this.getTimeSeries(options)];
                    case 1:
                        data = _a.sent();
                        if (data.results) {
                            Object['values'](data.results).forEach(function (queryRes) {
                                if (!queryRes.series) {
                                    return;
                                }
                                var unit = _this.resolvePanelUnitFromTargets(options.targets);
                                queryRes.series.forEach(function (series) {
                                    result.push({
                                        target: series.name,
                                        datapoints: series.points,
                                        refId: queryRes.refId,
                                        meta: queryRes.meta,
                                        unit: unit,
                                    });
                                });
                            });
                        }
                        return [2 /*return*/, { data: result }];
                }
            });
        });
    };
    StackdriverDatasource.prototype.annotationQuery = function (options) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var annotation, queries, data, results;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        annotation = options.annotation;
                        queries = [
                            {
                                refId: 'annotationQuery',
                                datasourceId: this.id,
                                metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),
                                primaryAggregation: 'REDUCE_NONE',
                                perSeriesAligner: 'ALIGN_NONE',
                                title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),
                                text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),
                                tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),
                                view: 'FULL',
                                filters: (annotation.target.filters || []).map(function (f) {
                                    return _this.templateSrv.replace(f, options.scopedVars || {});
                                }),
                                type: 'annotationQuery',
                            },
                        ];
                        return [4 /*yield*/, this.backendSrv.datasourceRequest({
                                url: '/api/tsdb/query',
                                method: 'POST',
                                data: {
                                    from: options.range.from.valueOf().toString(),
                                    to: options.range.to.valueOf().toString(),
                                    queries: queries,
                                },
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        results = data.results['annotationQuery'].tables[0].rows.map(function (v) {
                            return {
                                annotation: annotation,
                                time: Date.parse(v[0]),
                                title: v[1],
                                tags: [],
                                text: v[3],
                            };
                        });
                        return [2 /*return*/, results];
                }
            });
        });
    };
    StackdriverDatasource.prototype.metricFindQuery = function (query) {
        throw new Error('Template variables support is not yet imlemented');
    };
    StackdriverDatasource.prototype.testDatasource = function () {
        var path = "v3/projects/" + this.projectName + "/metricDescriptors";
        return this.doRequest("" + this.baseUrl + path)
            .then(function (response) {
            if (response.status === 200) {
                return {
                    status: 'success',
                    message: 'Successfully queried the Stackdriver API.',
                    title: 'Success',
                };
            }
            return {
                status: 'error',
                message: 'Returned http status code ' + response.status,
            };
        })
            .catch(function (error) {
            var message = 'Stackdriver: ';
            message += error.statusText ? error.statusText + ': ' : '';
            if (error.data && error.data.error && error.data.error.code) {
                // 400, 401
                message += error.data.error.code + '. ' + error.data.error.message;
            }
            else {
                message += 'Cannot connect to Stackdriver API';
            }
            return {
                status: 'error',
                message: message,
            };
        });
    };
    StackdriverDatasource.prototype.getProjects = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var response;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.doRequest("/cloudresourcemanager/v1/projects")];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data.projects.map(function (p) { return ({ id: p.projectId, name: p.name }); })];
                }
            });
        });
    };
    StackdriverDatasource.prototype.getDefaultProject = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var projects, test, error_1, message;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getProjects()];
                    case 1:
                        projects = _a.sent();
                        if (projects && projects.length > 0) {
                            test = projects.filter(function (p) { return p.id === _this.projectName; })[0];
                            return [2 /*return*/, test];
                        }
                        else {
                            throw new Error('No projects found');
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        message = 'Projects cannot be fetched: ';
                        message += error_1.statusText ? error_1.statusText + ': ' : '';
                        if (error_1 && error_1.data && error_1.data.error && error_1.data.error.message) {
                            if (error_1.data.error.code === 403) {
                                message += "\n            A list of projects could not be fetched from the Google Cloud Resource Manager API.\n            You might need to enable it first:\n            https://console.developers.google.com/apis/library/cloudresourcemanager.googleapis.com";
                            }
                            else {
                                message += error_1.data.error.code + '. ' + error_1.data.error.message;
                            }
                        }
                        else {
                            message += 'Cannot connect to Stackdriver API';
                        }
                        app_core_app_events__WEBPACK_IMPORTED_MODULE_2__["default"].emit('ds-request-error', message);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    StackdriverDatasource.prototype.getMetricTypes = function (projectId) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var metricsApiPath, data, error_2;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        metricsApiPath = "v3/projects/" + projectId + "/metricDescriptors";
                        return [4 /*yield*/, this.doRequest("" + this.baseUrl + metricsApiPath)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.metricDescriptors];
                    case 2:
                        error_2 = _a.sent();
                        console.log(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    StackdriverDatasource.prototype.doRequest = function (url, maxRetries) {
        if (maxRetries === void 0) { maxRetries = 1; }
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                return [2 /*return*/, this.backendSrv
                        .datasourceRequest({
                        url: this.url + url,
                        method: 'GET',
                    })
                        .catch(function (error) {
                        if (maxRetries > 0) {
                            return _this.doRequest(url, maxRetries - 1);
                        }
                        throw error;
                    })];
            });
        });
    };
    return StackdriverDatasource;
}());
/* harmony default export */ __webpack_exports__["default"] = (StackdriverDatasource);


/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/filter_segments.ts":
/*!**********************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/filter_segments.ts ***!
  \**********************************************************************/
/*! exports provided: DefaultRemoveFilterValue, DefaultFilterValue, FilterSegments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRemoveFilterValue", function() { return DefaultRemoveFilterValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFilterValue", function() { return DefaultFilterValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterSegments", function() { return FilterSegments; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

var DefaultRemoveFilterValue = '-- remove filter --';
var DefaultFilterValue = 'select value';
var FilterSegments = /** @class */ (function () {
    function FilterSegments(uiSegmentSrv, target, getFilterKeysFunc, getFilterValuesFunc) {
        this.uiSegmentSrv = uiSegmentSrv;
        this.target = target;
        this.getFilterKeysFunc = getFilterKeysFunc;
        this.getFilterValuesFunc = getFilterValuesFunc;
    }
    FilterSegments.prototype.buildSegmentModel = function () {
        var _this = this;
        this.removeSegment = this.uiSegmentSrv.newSegment({ fake: true, value: DefaultRemoveFilterValue });
        this.filterSegments = [];
        this.target.filters.forEach(function (f, index) {
            switch (index % 4) {
                case 0:
                    _this.filterSegments.push(_this.uiSegmentSrv.newKey(f));
                    break;
                case 1:
                    _this.filterSegments.push(_this.uiSegmentSrv.newOperator(f));
                    break;
                case 2:
                    _this.filterSegments.push(_this.uiSegmentSrv.newKeyValue(f));
                    break;
                case 3:
                    _this.filterSegments.push(_this.uiSegmentSrv.newCondition(f));
                    break;
            }
        });
        this.ensurePlusButton(this.filterSegments);
    };
    FilterSegments.prototype.getFilters = function (segment, index, hasNoFilterKeys) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var filterValues;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                if (segment.type === 'condition') {
                    return [2 /*return*/, [this.uiSegmentSrv.newSegment('AND')]];
                }
                if (segment.type === 'operator') {
                    return [2 /*return*/, this.uiSegmentSrv.newOperators(['=', '!=', '=~', '!=~'])];
                }
                if (segment.type === 'key' || segment.type === 'plus-button') {
                    if (hasNoFilterKeys && segment.value && segment.value !== DefaultRemoveFilterValue) {
                        this.removeSegment.value = DefaultRemoveFilterValue;
                        return [2 /*return*/, Promise.resolve([this.removeSegment])];
                    }
                    else {
                        return [2 /*return*/, this.getFilterKeysFunc()];
                    }
                }
                if (segment.type === 'value') {
                    filterValues = this.getFilterValuesFunc(index);
                    if (filterValues.length > 0) {
                        return [2 /*return*/, this.getValuesForFilterKey(filterValues)];
                    }
                }
                return [2 /*return*/, []];
            });
        });
    };
    FilterSegments.prototype.getValuesForFilterKey = function (labels) {
        var _this = this;
        var filterValues = labels.map(function (l) {
            return _this.uiSegmentSrv.newSegment({
                value: "" + l,
                expandable: false,
            });
        });
        return filterValues;
    };
    FilterSegments.prototype.addNewFilterSegments = function (segment, index) {
        if (index > 2) {
            this.filterSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));
        }
        segment.type = 'key';
        this.filterSegments.push(this.uiSegmentSrv.newOperator('='));
        this.filterSegments.push(this.uiSegmentSrv.newFake(DefaultFilterValue, 'value', 'query-segment-value'));
    };
    FilterSegments.prototype.removeFilterSegment = function (index) {
        this.filterSegments.splice(index, 3);
        // remove trailing condition
        if (index > 2 && this.filterSegments[index - 1].type === 'condition') {
            this.filterSegments.splice(index - 1, 1);
        }
        // remove condition if it is first segment
        if (index === 0 && this.filterSegments[0].type === 'condition') {
            this.filterSegments.splice(0, 1);
        }
    };
    FilterSegments.prototype.ensurePlusButton = function (segments) {
        var count = segments.length;
        var lastSegment = segments[Math.max(count - 1, 0)];
        if (!lastSegment || lastSegment.type !== 'plus-button') {
            segments.push(this.uiSegmentSrv.newPlusButton());
        }
    };
    FilterSegments.prototype.filterSegmentUpdated = function (segment, index) {
        if (segment.type === 'plus-button') {
            this.addNewFilterSegments(segment, index);
        }
        else if (segment.type === 'key' && segment.value === DefaultRemoveFilterValue) {
            this.removeFilterSegment(index);
            this.ensurePlusButton(this.filterSegments);
        }
        else if (segment.type === 'value' && segment.value !== DefaultFilterValue) {
            this.ensurePlusButton(this.filterSegments);
        }
        return this.filterSegments.filter(function (s) { return s.type !== 'plus-button'; }).map(function (seg) { return seg.value; });
    };
    return FilterSegments;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/module.ts":
/*!*************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/module.ts ***!
  \*************************************************************/
/*! exports provided: Datasource, QueryCtrl, ConfigCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/stackdriver/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/stackdriver/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["StackdriverQueryCtrl"]; });

/* harmony import */ var _config_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_ctrl */ "./public/app/plugins/datasource/stackdriver/config_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigCtrl", function() { return _config_ctrl__WEBPACK_IMPORTED_MODULE_2__["StackdriverConfigCtrl"]; });

/* harmony import */ var _annotations_query_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotations_query_ctrl */ "./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return _annotations_query_ctrl__WEBPACK_IMPORTED_MODULE_3__["StackdriverAnnotationsQueryCtrl"]; });








/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/query_aggregation_ctrl.ts":
/*!*****************************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/query_aggregation_ctrl.ts ***!
  \*****************************************************************************/
/*! exports provided: StackdriverAggregation, StackdriverAggregationCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverAggregation", function() { return StackdriverAggregation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverAggregationCtrl", function() { return StackdriverAggregationCtrl; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./public/app/plugins/datasource/stackdriver/constants.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");



var StackdriverAggregation = /** @class */ (function () {
    function StackdriverAggregation() {
        return {
            templateUrl: 'public/app/plugins/datasource/stackdriver/partials/query.aggregation.html',
            controller: 'StackdriverAggregationCtrl',
            restrict: 'E',
            scope: {
                target: '=',
                alignmentPeriod: '<',
                refresh: '&',
            },
        };
    }
    return StackdriverAggregation;
}());

var StackdriverAggregationCtrl = /** @class */ (function () {
    function StackdriverAggregationCtrl($scope) {
        this.$scope = $scope;
        this.$scope.ctrl = this;
        this.target = $scope.target;
        this.alignmentPeriods = _constants__WEBPACK_IMPORTED_MODULE_1__["alignmentPeriods"];
        this.aggOptions = _constants__WEBPACK_IMPORTED_MODULE_1__["aggOptions"];
        this.alignOptions = _constants__WEBPACK_IMPORTED_MODULE_1__["alignOptions"];
        this.setAggOptions();
        this.setAlignOptions();
        var self = this;
        $scope.$on('metricTypeChanged', function () {
            self.setAggOptions();
            self.setAlignOptions();
        });
    }
    StackdriverAggregationCtrl.prototype.setAlignOptions = function () {
        var _this = this;
        this.alignOptions = !this.target.valueType
            ? []
            : _constants__WEBPACK_IMPORTED_MODULE_1__["alignOptions"].filter(function (i) {
                return (i.valueTypes.indexOf(_this.target.valueType) !== -1 && i.metricKinds.indexOf(_this.target.metricKind) !== -1);
            });
        if (!this.alignOptions.find(function (o) { return o.value === _this.target.aggregation.perSeriesAligner; })) {
            this.target.aggregation.perSeriesAligner = this.alignOptions.length > 0 ? this.alignOptions[0].value : '';
        }
    };
    StackdriverAggregationCtrl.prototype.setAggOptions = function () {
        var _this = this;
        this.aggOptions = !this.target.metricKind
            ? []
            : _constants__WEBPACK_IMPORTED_MODULE_1__["aggOptions"].filter(function (i) {
                return (i.valueTypes.indexOf(_this.target.valueType) !== -1 && i.metricKinds.indexOf(_this.target.metricKind) !== -1);
            });
        if (!this.aggOptions.find(function (o) { return o.value === _this.target.aggregation.crossSeriesReducer; })) {
            this.deselectAggregationOption('REDUCE_NONE');
        }
        if (this.target.aggregation.groupBys.length > 0) {
            this.aggOptions = this.aggOptions.filter(function (o) { return o.value !== 'REDUCE_NONE'; });
            this.deselectAggregationOption('REDUCE_NONE');
        }
    };
    StackdriverAggregationCtrl.prototype.formatAlignmentText = function () {
        var _this = this;
        var selectedAlignment = this.alignOptions.find(function (ap) { return ap.value === _this.target.aggregation.perSeriesAligner; });
        return app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].secondsToHms(this.$scope.alignmentPeriod) + " interval (" + selectedAlignment.text + ")";
    };
    StackdriverAggregationCtrl.prototype.deselectAggregationOption = function (notValidOptionValue) {
        var newValue = this.aggOptions.find(function (o) { return o.value !== notValidOptionValue; });
        this.target.aggregation.crossSeriesReducer = newValue ? newValue.value : '';
    };
    return StackdriverAggregationCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').directive('stackdriverAggregation', StackdriverAggregation);
angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.controllers').controller('StackdriverAggregationCtrl', StackdriverAggregationCtrl);


/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/query_ctrl.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/query_ctrl.ts ***!
  \*****************************************************************/
/*! exports provided: StackdriverQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverQueryCtrl", function() { return StackdriverQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var _query_aggregation_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query_aggregation_ctrl */ "./public/app/plugins/datasource/stackdriver/query_aggregation_ctrl.ts");
/* harmony import */ var _query_filter_ctrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query_filter_ctrl */ "./public/app/plugins/datasource/stackdriver/query_filter_ctrl.ts");





var StackdriverQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](StackdriverQueryCtrl, _super);
    /** @ngInject */
    function StackdriverQueryCtrl($scope, $injector) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.defaultDropdownValue = 'Select Metric';
        _this.defaultServiceValue = 'All Services';
        _this.defaults = {
            project: {
                id: 'default',
                name: 'loading project...',
            },
            metricType: _this.defaultDropdownValue,
            service: _this.defaultServiceValue,
            metric: '',
            unit: '',
            aggregation: {
                crossSeriesReducer: 'REDUCE_MEAN',
                alignmentPeriod: 'stackdriver-auto',
                perSeriesAligner: 'ALIGN_MEAN',
                groupBys: [],
            },
            filters: [],
            showAggregationOptions: false,
            aliasBy: '',
            metricKind: '',
            valueType: '',
        };
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaultsDeep(_this.target, _this.defaults);
        _this.panelCtrl.events.on('data-received', _this.onDataReceived.bind(_this), $scope);
        _this.panelCtrl.events.on('data-error', _this.onDataError.bind(_this), $scope);
        return _this;
    }
    StackdriverQueryCtrl.prototype.onDataReceived = function (dataList) {
        this.lastQueryError = null;
        this.lastQueryMeta = null;
        var anySeriesFromQuery = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(dataList, { refId: this.target.refId });
        if (anySeriesFromQuery) {
            this.lastQueryMeta = anySeriesFromQuery.meta;
            this.lastQueryMeta.rawQueryString = decodeURIComponent(this.lastQueryMeta.rawQuery);
        }
    };
    StackdriverQueryCtrl.prototype.onDataError = function (err) {
        if (err.data && err.data.results) {
            var queryRes = err.data.results[this.target.refId];
            if (queryRes && queryRes.error) {
                this.lastQueryMeta = queryRes.meta;
                this.lastQueryMeta.rawQueryString = decodeURIComponent(this.lastQueryMeta.rawQuery);
                var jsonBody = void 0;
                try {
                    jsonBody = JSON.parse(queryRes.error);
                }
                catch (_a) {
                    this.lastQueryError = queryRes.error;
                }
                this.lastQueryError = jsonBody.error.message;
            }
        }
        console.error(err);
    };
    StackdriverQueryCtrl.templateUrl = 'partials/query.editor.html';
    return StackdriverQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/datasource/stackdriver/query_filter_ctrl.ts":
/*!************************************************************************!*\
  !*** ./public/app/plugins/datasource/stackdriver/query_filter_ctrl.ts ***!
  \************************************************************************/
/*! exports provided: StackdriverFilter, StackdriverFilterCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverFilter", function() { return StackdriverFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackdriverFilterCtrl", function() { return StackdriverFilterCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _filter_segments__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter_segments */ "./public/app/plugins/datasource/stackdriver/filter_segments.ts");
/* harmony import */ var app_core_app_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/app_events */ "./public/app/core/app_events.ts");





var StackdriverFilter = /** @class */ (function () {
    function StackdriverFilter() {
        return {
            templateUrl: 'public/app/plugins/datasource/stackdriver/partials/query.filter.html',
            controller: 'StackdriverFilterCtrl',
            controllerAs: 'ctrl',
            restrict: 'E',
            scope: {
                target: '=',
                datasource: '=',
                refresh: '&',
                defaultDropdownValue: '<',
                defaultServiceValue: '<',
                hideGroupBys: '<',
            },
        };
    }
    return StackdriverFilter;
}());

var StackdriverFilterCtrl = /** @class */ (function () {
    /** @ngInject */
    function StackdriverFilterCtrl($scope, uiSegmentSrv, templateSrv, $rootScope) {
        this.$scope = $scope;
        this.uiSegmentSrv = uiSegmentSrv;
        this.templateSrv = templateSrv;
        this.$rootScope = $rootScope;
        this.defaultRemoveGroupByValue = '-- remove group by --';
        this.datasource = $scope.datasource;
        this.target = $scope.target;
        this.metricType = $scope.defaultDropdownValue;
        this.service = $scope.defaultServiceValue;
        this.metricDescriptors = [];
        this.metrics = [];
        this.services = [];
        this.getCurrentProject()
            .then(this.loadMetricDescriptors.bind(this))
            .then(this.getLabels.bind(this));
        this.initSegments($scope.hideGroupBys);
    }
    StackdriverFilterCtrl.prototype.initSegments = function (hideGroupBys) {
        var _this = this;
        if (!hideGroupBys) {
            this.groupBySegments = this.target.aggregation.groupBys.map(function (groupBy) {
                return _this.uiSegmentSrv.getSegmentForValue(groupBy);
            });
            this.ensurePlusButton(this.groupBySegments);
        }
        this.removeSegment = this.uiSegmentSrv.newSegment({ fake: true, value: '-- remove group by --' });
        this.filterSegments = new _filter_segments__WEBPACK_IMPORTED_MODULE_3__["FilterSegments"](this.uiSegmentSrv, this.target, this.getGroupBys.bind(this, null, null, _filter_segments__WEBPACK_IMPORTED_MODULE_3__["DefaultRemoveFilterValue"], false), this.getFilterValues.bind(this));
        this.filterSegments.buildSegmentModel();
    };
    StackdriverFilterCtrl.prototype.getCurrentProject = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var _a;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.target;
                        return [4 /*yield*/, this.datasource.getDefaultProject()];
                    case 1:
                        _a.project = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    StackdriverFilterCtrl.prototype.loadMetricDescriptors = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var _a;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.target.project.id !== 'default')) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.datasource.getMetricTypes(this.target.project.id)];
                    case 1:
                        _a.metricDescriptors = _b.sent();
                        this.services = this.getServicesList();
                        this.metrics = this.getMetricsList();
                        return [2 /*return*/, this.metricDescriptors];
                    case 2: return [2 /*return*/, []];
                }
            });
        });
    };
    StackdriverFilterCtrl.prototype.getServicesList = function () {
        var _this = this;
        var defaultValue = { value: this.$scope.defaultServiceValue, text: this.$scope.defaultServiceValue };
        var services = this.metricDescriptors.map(function (m) {
            var service = m.type.split('/')[0];
            var serviceShortName = service.split('.')[0];
            return {
                value: service,
                text: serviceShortName,
            };
        });
        if (services.find(function (m) { return m.value === _this.target.service; })) {
            this.service = this.target.service;
        }
        return services.length > 0 ? [defaultValue].concat(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.uniqBy(services, 'value')) : [];
    };
    StackdriverFilterCtrl.prototype.getMetricsList = function () {
        var _this = this;
        var metrics = this.metricDescriptors.map(function (m) {
            var service = m.type.split('/')[0];
            var serviceShortName = service.split('.')[0];
            return {
                service: service,
                value: m.type,
                serviceShortName: serviceShortName,
                text: m.displayName,
                title: m.description,
            };
        });
        var result;
        if (this.target.service === this.$scope.defaultServiceValue) {
            result = metrics.map(function (m) { return (tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, m, { text: m.service + " - " + m.text })); });
        }
        else {
            result = metrics.filter(function (m) { return m.service === _this.target.service; });
        }
        if (result.find(function (m) { return m.value === _this.target.metricType; })) {
            this.metricType = this.target.metricType;
        }
        else if (result.length > 0) {
            this.metricType = this.target.metricType = result[0].value;
        }
        return result;
    };
    StackdriverFilterCtrl.prototype.getLabels = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                this.loadLabelsPromise = new Promise(function (resolve) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                    var data, error_1;
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.datasource.getLabels(this.target.metricType, this.target.refId)];
                            case 1:
                                data = _a.sent();
                                this.metricLabels = data.results[this.target.refId].meta.metricLabels;
                                this.resourceLabels = data.results[this.target.refId].meta.resourceLabels;
                                resolve();
                                return [3 /*break*/, 3];
                            case 2:
                                error_1 = _a.sent();
                                if (error_1.data && error_1.data.message) {
                                    console.log(error_1.data.message);
                                }
                                else {
                                    console.log(error_1);
                                }
                                app_core_app_events__WEBPACK_IMPORTED_MODULE_4__["default"].emit('alert-error', ['Error', 'Error loading metric labels for ' + this.target.metricType]);
                                resolve();
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        });
    };
    StackdriverFilterCtrl.prototype.onServiceChange = function () {
        var _this = this;
        this.target.service = this.service;
        this.metrics = this.getMetricsList();
        this.setMetricType();
        this.getLabels();
        if (!this.metrics.find(function (m) { return m.value === _this.target.metricType; })) {
            this.target.metricType = this.$scope.defaultDropdownValue;
        }
        else {
            this.$scope.refresh();
        }
    };
    StackdriverFilterCtrl.prototype.onMetricTypeChange = function () {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                this.setMetricType();
                this.$scope.refresh();
                this.getLabels();
                return [2 /*return*/];
            });
        });
    };
    StackdriverFilterCtrl.prototype.setMetricType = function () {
        var _this = this;
        this.target.metricType = this.metricType;
        var _a = this.metricDescriptors.find(function (m) { return m.type === _this.target.metricType; }), valueType = _a.valueType, metricKind = _a.metricKind, unit = _a.unit;
        this.target.unit = unit;
        this.target.valueType = valueType;
        this.target.metricKind = metricKind;
        this.$rootScope.$broadcast('metricTypeChanged');
    };
    StackdriverFilterCtrl.prototype.getGroupBys = function (segment, index, removeText, removeUsed) {
        if (removeUsed === void 0) { removeUsed = true; }
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var metricLabels, resourceLabels, noValueOrPlusButton;
            var _this = this;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadLabelsPromise];
                    case 1:
                        _a.sent();
                        metricLabels = Object.keys(this.metricLabels || {})
                            .filter(function (ml) {
                            if (!removeUsed) {
                                return true;
                            }
                            return _this.target.aggregation.groupBys.indexOf('metric.label.' + ml) === -1;
                        })
                            .map(function (l) {
                            return _this.uiSegmentSrv.newSegment({
                                value: "metric.label." + l,
                                expandable: false,
                            });
                        });
                        resourceLabels = Object.keys(this.resourceLabels || {})
                            .filter(function (ml) {
                            if (!removeUsed) {
                                return true;
                            }
                            return _this.target.aggregation.groupBys.indexOf('resource.label.' + ml) === -1;
                        })
                            .map(function (l) {
                            return _this.uiSegmentSrv.newSegment({
                                value: "resource.label." + l,
                                expandable: false,
                            });
                        });
                        noValueOrPlusButton = !segment || segment.type === 'plus-button';
                        if (noValueOrPlusButton && metricLabels.length === 0 && resourceLabels.length === 0) {
                            return [2 /*return*/, Promise.resolve([])];
                        }
                        this.removeSegment.value = removeText || this.defaultRemoveGroupByValue;
                        return [2 /*return*/, Promise.resolve(metricLabels.concat(resourceLabels, [this.removeSegment]))];
                }
            });
        });
    };
    StackdriverFilterCtrl.prototype.groupByChanged = function (segment, index) {
        if (segment.value === this.removeSegment.value) {
            this.groupBySegments.splice(index, 1);
        }
        else {
            segment.type = 'value';
        }
        var reducer = function (memo, seg) {
            if (!seg.fake) {
                memo.push(seg.value);
            }
            return memo;
        };
        this.target.aggregation.groupBys = this.groupBySegments.reduce(reducer, []);
        this.ensurePlusButton(this.groupBySegments);
        this.$rootScope.$broadcast('metricTypeChanged');
        this.$scope.refresh();
    };
    StackdriverFilterCtrl.prototype.getFilters = function (segment, index) {
        return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
            var hasNoFilterKeys;
            return tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"](this, function (_a) {
                hasNoFilterKeys = this.metricLabels && Object.keys(this.metricLabels).length === 0;
                return [2 /*return*/, this.filterSegments.getFilters(segment, index, hasNoFilterKeys)];
            });
        });
    };
    StackdriverFilterCtrl.prototype.getFilterValues = function (index) {
        var filterKey = this.templateSrv.replace(this.filterSegments.filterSegments[index - 2].value);
        if (!filterKey || !this.metricLabels || Object.keys(this.metricLabels).length === 0) {
            return [];
        }
        var shortKey = filterKey.substring(filterKey.indexOf('.label.') + 7);
        if (filterKey.startsWith('metric.label.') && this.metricLabels.hasOwnProperty(shortKey)) {
            return this.metricLabels[shortKey];
        }
        if (filterKey.startsWith('resource.label.') && this.resourceLabels.hasOwnProperty(shortKey)) {
            return this.resourceLabels[shortKey];
        }
        return [];
    };
    StackdriverFilterCtrl.prototype.filterSegmentUpdated = function (segment, index) {
        this.target.filters = this.filterSegments.filterSegmentUpdated(segment, index);
        this.$scope.refresh();
    };
    StackdriverFilterCtrl.prototype.ensurePlusButton = function (segments) {
        var count = segments.length;
        var lastSegment = segments[Math.max(count - 1, 0)];
        if (!lastSegment || lastSegment.type !== 'plus-button') {
            segments.push(this.uiSegmentSrv.newPlusButton());
        }
    };
    return StackdriverFilterCtrl;
}());

angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.controllers').directive('stackdriverFilter', StackdriverFilter);
angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.controllers').controller('StackdriverFilterCtrl', StackdriverFilterCtrl);


/***/ }),

/***/ "./public/app/plugins/datasource/testdata/datasource.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/testdata/datasource.ts ***!
  \**************************************************************/
/*! exports provided: TestDataDatasource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestDataDatasource", function() { return TestDataDatasource; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var TestDataDatasource = /** @class */ (function () {
    /** @ngInject */
    function TestDataDatasource(instanceSettings, backendSrv, $q) {
        this.backendSrv = backendSrv;
        this.$q = $q;
        this.id = instanceSettings.id;
    }
    TestDataDatasource.prototype.query = function (options) {
        var _this = this;
        var queries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.filter(options.targets, function (item) {
            return item.hide !== true;
        }).map(function (item) {
            return {
                refId: item.refId,
                scenarioId: item.scenarioId,
                intervalMs: options.intervalMs,
                maxDataPoints: options.maxDataPoints,
                stringInput: item.stringInput,
                points: item.points,
                alias: item.alias,
                datasourceId: _this.id,
            };
        });
        if (queries.length === 0) {
            return this.$q.when({ data: [] });
        }
        return this.backendSrv
            .post('/api/tsdb/query', {
            from: options.range.from.valueOf().toString(),
            to: options.range.to.valueOf().toString(),
            queries: queries,
        })
            .then(function (res) {
            var data = [];
            if (res.results) {
                lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(res.results, function (queryRes) {
                    for (var _i = 0, _a = queryRes.series; _i < _a.length; _i++) {
                        var series = _a[_i];
                        data.push({
                            target: series.name,
                            datapoints: series.points,
                        });
                    }
                });
            }
            return { data: data };
        });
    };
    TestDataDatasource.prototype.annotationQuery = function (options) {
        return this.backendSrv.get('/api/annotations', {
            from: options.range.from.valueOf(),
            to: options.range.to.valueOf(),
            limit: options.limit,
            type: options.type,
        });
    };
    return TestDataDatasource;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/testdata/module.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/datasource/testdata/module.ts ***!
  \**********************************************************/
/*! exports provided: TestDataDatasource, Datasource, QueryCtrl, AnnotationsQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnnotationsQueryCtrl", function() { return TestDataAnnotationsQueryCtrl; });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource */ "./public/app/plugins/datasource/testdata/datasource.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TestDataDatasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["TestDataDatasource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datasource", function() { return _datasource__WEBPACK_IMPORTED_MODULE_0__["TestDataDatasource"]; });

/* harmony import */ var _query_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query_ctrl */ "./public/app/plugins/datasource/testdata/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return _query_ctrl__WEBPACK_IMPORTED_MODULE_1__["TestDataQueryCtrl"]; });



var TestDataAnnotationsQueryCtrl = /** @class */ (function () {
    function TestDataAnnotationsQueryCtrl() {
    }
    TestDataAnnotationsQueryCtrl.template = '<h2>test data</h2>';
    return TestDataAnnotationsQueryCtrl;
}());



/***/ }),

/***/ "./public/app/plugins/datasource/testdata/query_ctrl.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/datasource/testdata/query_ctrl.ts ***!
  \**************************************************************/
/*! exports provided: TestDataQueryCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestDataQueryCtrl", function() { return TestDataQueryCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);




var TestDataQueryCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TestDataQueryCtrl, _super);
    /** @ngInject */
    function TestDataQueryCtrl($scope, $injector, backendSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.backendSrv = backendSrv;
        _this.target.scenarioId = _this.target.scenarioId || 'random_walk';
        _this.scenarioList = [];
        _this.newPointTime = moment__WEBPACK_IMPORTED_MODULE_3___default()();
        _this.selectedPoint = { text: 'Select point', value: null };
        return _this;
    }
    TestDataQueryCtrl.prototype.getPoints = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(this.target.points, function (point, index) {
            return {
                text: moment__WEBPACK_IMPORTED_MODULE_3___default()(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],
                value: index,
            };
        });
    };
    TestDataQueryCtrl.prototype.pointSelected = function (option) {
        this.selectedPoint = option;
    };
    TestDataQueryCtrl.prototype.deletePoint = function () {
        this.target.points.splice(this.selectedPoint.value, 1);
        this.selectedPoint = { text: 'Select point', value: null };
        this.refresh();
    };
    TestDataQueryCtrl.prototype.addPoint = function () {
        this.target.points = this.target.points || [];
        this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);
        this.target.points = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(this.target.points, function (p) { return p[1]; });
        this.refresh();
    };
    TestDataQueryCtrl.prototype.$onInit = function () {
        var _this = this;
        return this.backendSrv.get('/api/tsdb/testdata/scenarios').then(function (res) {
            _this.scenarioList = res;
            _this.scenario = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(_this.scenarioList, { id: _this.target.scenarioId });
        });
    };
    TestDataQueryCtrl.prototype.scenarioChanged = function () {
        this.scenario = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(this.scenarioList, { id: this.target.scenarioId });
        this.target.stringInput = this.scenario.stringInput;
        if (this.target.scenarioId === 'manual_entry') {
            this.target.points = this.target.points || [];
        }
        else {
            delete this.target.points;
        }
        this.refresh();
    };
    TestDataQueryCtrl.templateUrl = 'partials/query.editor.html';
    return TestDataQueryCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/alertlist/module.ts":
/*!******************************************************!*\
  !*** ./public/app/plugins/panel/alertlist/module.ts ***!
  \******************************************************/
/*! exports provided: AlertListPanel, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertListPanel", function() { return AlertListPanel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return AlertListPanel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _features_alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../features/alerting/state/alertDef */ "./public/app/features/alerting/state/alertDef.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/utils/datemath */ "./public/app/core/utils/datemath.ts");






var AlertListPanel = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](AlertListPanel, _super);
    /** @ngInject */
    function AlertListPanel($scope, $injector, backendSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.backendSrv = backendSrv;
        _this.showOptions = [{ text: 'Current state', value: 'current' }, { text: 'Recent state changes', value: 'changes' }];
        _this.sortOrderOptions = [
            { text: 'Alphabetical (asc)', value: 1 },
            { text: 'Alphabetical (desc)', value: 2 },
            { text: 'Importance', value: 3 },
        ];
        _this.stateFilter = {};
        _this.currentAlerts = [];
        _this.alertHistory = [];
        // Set and populate defaults
        _this.panelDefaults = {
            show: 'current',
            limit: 10,
            stateFilter: [],
            onlyAlertsOnDashboard: false,
            sortOrder: 1,
            dashboardFilter: '',
            nameFilter: '',
            folderId: null,
        };
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.events.on('refresh', _this.onRefresh.bind(_this));
        for (var key in _this.panel.stateFilter) {
            _this.stateFilter[_this.panel.stateFilter[key]] = true;
        }
        return _this;
    }
    AlertListPanel.prototype.sortResult = function (alerts) {
        if (this.panel.sortOrder === 3) {
            return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(alerts, function (a) {
                return _features_alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].alertStateSortScore[a.state];
            });
        }
        var result = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(alerts, function (a) {
            return a.name.toLowerCase();
        });
        if (this.panel.sortOrder === 2) {
            result.reverse();
        }
        return result;
    };
    AlertListPanel.prototype.updateStateFilter = function () {
        var result = [];
        for (var key in this.stateFilter) {
            if (this.stateFilter[key]) {
                result.push(key);
            }
        }
        this.panel.stateFilter = result;
        this.onRefresh();
    };
    AlertListPanel.prototype.onRefresh = function () {
        var _this = this;
        var getAlertsPromise;
        if (this.panel.show === 'current') {
            getAlertsPromise = this.getCurrentAlertState();
        }
        if (this.panel.show === 'changes') {
            getAlertsPromise = this.getStateChanges();
        }
        getAlertsPromise.then(function () {
            _this.renderingCompleted();
        });
    };
    AlertListPanel.prototype.onFolderChange = function (folder) {
        this.panel.folderId = folder.id;
        this.refresh();
    };
    AlertListPanel.prototype.getStateChanges = function () {
        var _this = this;
        var params = {
            limit: this.panel.limit,
            type: 'alert',
            newState: this.panel.stateFilter,
        };
        if (this.panel.onlyAlertsOnDashboard) {
            params.dashboardId = this.dashboard.id;
        }
        params.from = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_5__["parse"](this.dashboard.time.from).unix() * 1000;
        params.to = app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_5__["parse"](this.dashboard.time.to).unix() * 1000;
        return this.backendSrv.get("/api/annotations", params).then(function (res) {
            _this.alertHistory = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(res, function (al) {
                al.time = _this.dashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss');
                al.stateModel = _features_alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getStateDisplayModel(al.newState);
                al.info = _features_alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getAlertAnnotationInfo(al);
                return al;
            });
            _this.noAlertsMessage = _this.alertHistory.length === 0 ? 'No alerts in current time range' : '';
            return _this.alertHistory;
        });
    };
    AlertListPanel.prototype.getCurrentAlertState = function () {
        var _this = this;
        var params = {
            state: this.panel.stateFilter,
        };
        if (this.panel.nameFilter) {
            params.query = this.panel.nameFilter;
        }
        if (this.panel.folderId >= 0) {
            params.folderId = this.panel.folderId;
        }
        if (this.panel.dashboardFilter) {
            params.dashboardQuery = this.panel.dashboardFilter;
        }
        if (this.panel.onlyAlertsOnDashboard) {
            params.dashboardId = this.dashboard.id;
        }
        if (this.panel.dashboardTags) {
            params.dashboardTag = this.panel.dashboardTags;
        }
        return this.backendSrv.get("/api/alerts", params).then(function (res) {
            _this.currentAlerts = _this.sortResult(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.map(res, function (al) {
                al.stateModel = _features_alerting_state_alertDef__WEBPACK_IMPORTED_MODULE_3__["default"].getStateDisplayModel(al.state);
                al.newStateDateAgo = moment__WEBPACK_IMPORTED_MODULE_2___default()(al.newStateDate)
                    .locale('en')
                    .fromNow(true);
                return al;
            }));
            if (_this.currentAlerts.length > _this.panel.limit) {
                _this.currentAlerts = _this.currentAlerts.slice(0, _this.panel.limit);
            }
            _this.noAlertsMessage = _this.currentAlerts.length === 0 ? 'No alerts' : '';
            return _this.currentAlerts;
        });
    };
    AlertListPanel.prototype.onInitEditMode = function () {
        this.addEditorTab('Options', 'public/app/plugins/panel/alertlist/editor.html');
    };
    AlertListPanel.templateUrl = 'module.html';
    AlertListPanel.scrollable = true;
    return AlertListPanel;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_4__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/dashlist/module.ts":
/*!*****************************************************!*\
  !*** ./public/app/plugins/panel/dashlist/module.ts ***!
  \*****************************************************/
/*! exports provided: DashListCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashListCtrl", function() { return DashListCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return DashListCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/services/impression_srv */ "./public/app/core/services/impression_srv.ts");




var DashListCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DashListCtrl, _super);
    /** @ngInject */
    function DashListCtrl($scope, $injector, backendSrv, dashboardSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.backendSrv = backendSrv;
        _this.dashboardSrv = dashboardSrv;
        _this.panelDefaults = {
            query: '',
            limit: 10,
            tags: [],
            recent: false,
            search: false,
            starred: true,
            headings: true,
            folderId: null,
        };
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        if (_this.panel.tag) {
            _this.panel.tags = [_this.panel.tag];
            delete _this.panel.tag;
        }
        _this.events.on('refresh', _this.onRefresh.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.groups = [
            { list: [], show: false, header: 'Starred dashboards' },
            { list: [], show: false, header: 'Recently viewed dashboards' },
            { list: [], show: false, header: 'Search' },
        ];
        // update capability
        if (_this.panel.mode) {
            if (_this.panel.mode === 'starred') {
                _this.panel.starred = true;
                _this.panel.headings = false;
            }
            if (_this.panel.mode === 'recently viewed') {
                _this.panel.recent = true;
                _this.panel.starred = false;
                _this.panel.headings = false;
            }
            if (_this.panel.mode === 'search') {
                _this.panel.search = true;
                _this.panel.starred = false;
                _this.panel.headings = false;
            }
            delete _this.panel.mode;
        }
        return _this;
    }
    DashListCtrl.prototype.onInitEditMode = function () {
        this.editorTabIndex = 1;
        this.modes = ['starred', 'search', 'recently viewed'];
        this.addEditorTab('Options', 'public/app/plugins/panel/dashlist/editor.html');
    };
    DashListCtrl.prototype.onRefresh = function () {
        var promises = [];
        promises.push(this.getRecentDashboards());
        promises.push(this.getStarred());
        promises.push(this.getSearch());
        return Promise.all(promises).then(this.renderingCompleted.bind(this));
    };
    DashListCtrl.prototype.getSearch = function () {
        var _this = this;
        this.groups[2].show = this.panel.search;
        if (!this.panel.search) {
            return Promise.resolve();
        }
        var params = {
            limit: this.panel.limit,
            query: this.panel.query,
            tag: this.panel.tags,
            folderIds: this.panel.folderId,
            type: 'dash-db',
        };
        return this.backendSrv.search(params).then(function (result) {
            _this.groups[2].list = result;
        });
    };
    DashListCtrl.prototype.getStarred = function () {
        var _this = this;
        this.groups[0].show = this.panel.starred;
        if (!this.panel.starred) {
            return Promise.resolve();
        }
        var params = { limit: this.panel.limit, starred: 'true' };
        return this.backendSrv.search(params).then(function (result) {
            _this.groups[0].list = result;
        });
    };
    DashListCtrl.prototype.starDashboard = function (dash, evt) {
        this.dashboardSrv.starDashboard(dash.id, dash.isStarred).then(function (newState) {
            dash.isStarred = newState;
        });
        if (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        }
    };
    DashListCtrl.prototype.getRecentDashboards = function () {
        var _this = this;
        this.groups[1].show = this.panel.recent;
        if (!this.panel.recent) {
            return Promise.resolve();
        }
        var dashIds = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.take(app_core_services_impression_srv__WEBPACK_IMPORTED_MODULE_3__["default"].getDashboardOpened(), this.panel.limit);
        return this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then(function (result) {
            _this.groups[1].list = dashIds
                .map(function (orderId) {
                return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(result, function (dashboard) {
                    return dashboard.id === orderId;
                });
            })
                .filter(function (el) {
                return el !== undefined;
            });
        });
    };
    DashListCtrl.prototype.onFolderChange = function (folder) {
        this.panel.folderId = folder.id;
        this.refresh();
    };
    DashListCtrl.templateUrl = 'module.html';
    DashListCtrl.scrollable = true;
    return DashListCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/gettingstarted/module.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/panel/gettingstarted/module.ts ***!
  \***********************************************************/
/*! exports provided: GettingStartedPanelCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GettingStartedPanelCtrl", function() { return GettingStartedPanelCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return GettingStartedPanelCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");



var GettingStartedPanelCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GettingStartedPanelCtrl, _super);
    /** @ngInject */
    function GettingStartedPanelCtrl($scope, $injector, backendSrv, datasourceSrv, $q) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.backendSrv = backendSrv;
        _this.$q = $q;
        _this.stepIndex = 0;
        _this.steps = [];
        _this.steps.push({
            title: 'Install Grafana',
            icon: 'icon-gf icon-gf-check',
            href: 'http://docs.grafana.org/',
            target: '_blank',
            note: 'Review the installation docs',
            check: function () { return $q.when(true); },
        });
        _this.steps.push({
            title: 'Create your first data source',
            cta: 'Add data source',
            icon: 'icon-gf icon-gf-datasources',
            href: 'datasources/new?gettingstarted',
            check: function () {
                return $q.when(datasourceSrv.getMetricSources().filter(function (item) {
                    return item.meta.builtIn !== true;
                }).length > 0);
            },
        });
        _this.steps.push({
            title: 'Create your first dashboard',
            cta: 'New dashboard',
            icon: 'icon-gf icon-gf-dashboard',
            href: 'dashboard/new?gettingstarted',
            check: function () {
                return _this.backendSrv.search({ limit: 1 }).then(function (result) {
                    return result.length > 0;
                });
            },
        });
        _this.steps.push({
            title: 'Invite your team',
            cta: 'Add Users',
            icon: 'icon-gf icon-gf-users',
            href: 'org/users?gettingstarted',
            check: function () {
                return _this.backendSrv.get('/api/org/users').then(function (res) {
                    return res.length > 1;
                });
            },
        });
        _this.steps.push({
            title: 'Install apps & plugins',
            cta: 'Explore plugin repository',
            icon: 'icon-gf icon-gf-apps',
            href: 'https://grafana.com/plugins?utm_source=grafana_getting_started',
            check: function () {
                return _this.backendSrv.get('/api/plugins', { embedded: 0, core: 0 }).then(function (plugins) {
                    return plugins.length > 0;
                });
            },
        });
        return _this;
    }
    GettingStartedPanelCtrl.prototype.$onInit = function () {
        var _this = this;
        this.stepIndex = -1;
        return this.nextStep().then(function (res) {
            _this.checksDone = true;
        });
    };
    GettingStartedPanelCtrl.prototype.nextStep = function () {
        var _this = this;
        if (this.stepIndex === this.steps.length - 1) {
            return this.$q.when();
        }
        this.stepIndex += 1;
        var currentStep = this.steps[this.stepIndex];
        return currentStep.check().then(function (passed) {
            if (passed) {
                currentStep.cssClass = 'completed';
                return _this.nextStep();
            }
            currentStep.cssClass = 'active';
            return _this.$q.when();
        });
    };
    GettingStartedPanelCtrl.prototype.dismiss = function () {
        this.dashboard.removePanel(this.panel, false);
        this.backendSrv
            .request({
            method: 'PUT',
            url: '/api/user/helpflags/1',
            showSuccessAlert: false,
        })
            .then(function (res) {
            app_core_core__WEBPACK_IMPORTED_MODULE_2__["contextSrv"].user.helpFlags1 = res.helpFlags1;
        });
    };
    GettingStartedPanelCtrl.templateUrl = 'public/app/plugins/panel/gettingstarted/module.html';
    return GettingStartedPanelCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/graph/align_yaxes.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/panel/graph/align_yaxes.ts ***!
  \*******************************************************/
/*! exports provided: alignYLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alignYLevel", function() { return alignYLevel; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * To align two Y axes by Y level
 * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]
 * @param level Y level
 */
function alignYLevel(yAxes, level) {
    if (isNaN(level) || !checkCorrectAxis(yAxes)) {
        return;
    }
    var yLeft = yAxes[0], yRight = yAxes[1];
    moveLevelToZero(yLeft, yRight, level);
    expandStuckValues(yLeft, yRight);
    // one of graphs on zero
    var zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;
    var oneSide = checkOneSide(yLeft, yRight);
    if (zero && oneSide) {
        yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;
        yLeft.max = yLeft.max > 0 ? yLeft.max : 0;
        yRight.min = yRight.max > 0 ? 0 : yRight.min;
        yRight.max = yRight.max > 0 ? yRight.max : 0;
    }
    else {
        if (checkOppositeSides(yLeft, yRight)) {
            if (yLeft.min >= 0) {
                yLeft.min = -yLeft.max;
                yRight.max = -yRight.min;
            }
            else {
                yLeft.max = -yLeft.min;
                yRight.min = -yRight.max;
            }
        }
        else {
            var rate = getRate(yLeft, yRight);
            if (oneSide) {
                // all graphs above the Y level
                if (yLeft.min > 0) {
                    yLeft.min = yLeft.max / rate;
                    yRight.min = yRight.max / rate;
                }
                else {
                    yLeft.max = yLeft.min / rate;
                    yRight.max = yRight.min / rate;
                }
            }
            else {
                if (checkTwoCross(yLeft, yRight)) {
                    yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;
                    yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;
                    yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;
                    yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;
                }
                else {
                    yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;
                    yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;
                    yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;
                    yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;
                }
            }
        }
    }
    restoreLevelFromZero(yLeft, yRight, level);
}
function expandStuckValues(yLeft, yRight) {
    // wide Y min and max using increased wideFactor
    var wideFactor = 0.25;
    if (yLeft.max === yLeft.min) {
        yLeft.min -= wideFactor;
        yLeft.max += wideFactor;
    }
    if (yRight.max === yRight.min) {
        yRight.min -= wideFactor;
        yRight.max += wideFactor;
    }
}
function moveLevelToZero(yLeft, yRight, level) {
    if (level !== 0) {
        yLeft.min -= level;
        yLeft.max -= level;
        yRight.min -= level;
        yRight.max -= level;
    }
}
function restoreLevelFromZero(yLeft, yRight, level) {
    if (level !== 0) {
        yLeft.min += level;
        yLeft.max += level;
        yRight.min += level;
        yRight.max += level;
    }
}
function checkCorrectAxis(axis) {
    return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);
}
function checkCorrectAxes(axes) {
    return 'min' in axes && 'max' in axes;
}
function checkOneSide(yLeft, yRight) {
    // on the one hand with respect to zero
    return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);
}
function checkTwoCross(yLeft, yRight) {
    // both across zero
    return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;
}
function checkOppositeSides(yLeft, yRight) {
    // on the opposite sides with respect to zero
    return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);
}
function getRate(yLeft, yRight) {
    var rateLeft, rateRight, rate;
    if (checkTwoCross(yLeft, yRight)) {
        rateLeft = yRight.min ? yLeft.min / yRight.min : 0;
        rateRight = yRight.max ? yLeft.max / yRight.max : 0;
    }
    else {
        if (checkOneSide(yLeft, yRight)) {
            var absLeftMin = Math.abs(yLeft.min);
            var absLeftMax = Math.abs(yLeft.max);
            var absRightMin = Math.abs(yRight.min);
            var absRightMax = Math.abs(yRight.max);
            var upLeft = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.max([absLeftMin, absLeftMax]);
            var downLeft = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.min([absLeftMin, absLeftMax]);
            var upRight = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.max([absRightMin, absRightMax]);
            var downRight = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.min([absRightMin, absRightMax]);
            rateLeft = downLeft ? upLeft / downLeft : upLeft;
            rateRight = downRight ? upRight / downRight : upRight;
        }
        else {
            if (yLeft.min > 0 || yRight.min > 0) {
                rateLeft = yLeft.max / yRight.max;
                rateRight = 0;
            }
            else {
                rateLeft = 0;
                rateRight = yLeft.min / yRight.min;
            }
        }
    }
    rate = rateLeft > rateRight ? rateLeft : rateRight;
    return rate;
}


/***/ }),

/***/ "./public/app/plugins/panel/graph/axes_editor.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/panel/graph/axes_editor.ts ***!
  \*******************************************************/
/*! exports provided: AxesEditorCtrl, axesEditorComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxesEditorCtrl", function() { return AxesEditorCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "axesEditorComponent", function() { return axesEditorComponent; });
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");

var AxesEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function AxesEditorCtrl($scope, $q) {
        this.$scope = $scope;
        this.$q = $q;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.$scope.ctrl = this;
        this.unitFormats = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].getUnitFormats();
        this.logScales = {
            linear: 1,
            'log (base 2)': 2,
            'log (base 10)': 10,
            'log (base 32)': 32,
            'log (base 1024)': 1024,
        };
        this.xAxisModes = {
            Time: 'time',
            Series: 'series',
            Histogram: 'histogram',
        };
        this.xAxisStatOptions = [
            { text: 'Avg', value: 'avg' },
            { text: 'Min', value: 'min' },
            { text: 'Max', value: 'max' },
            { text: 'Total', value: 'total' },
            { text: 'Count', value: 'count' },
            { text: 'Current', value: 'current' },
        ];
        if (this.panel.xaxis.mode === 'custom') {
            if (!this.panel.xaxis.name) {
                this.panel.xaxis.name = 'specify field';
            }
        }
    }
    AxesEditorCtrl.prototype.setUnitFormat = function (axis, subItem) {
        axis.format = subItem.value;
        this.panelCtrl.render();
    };
    AxesEditorCtrl.prototype.render = function () {
        this.panelCtrl.render();
    };
    AxesEditorCtrl.prototype.xAxisModeChanged = function () {
        this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();
        this.panelCtrl.onDataReceived(this.panelCtrl.dataList);
    };
    AxesEditorCtrl.prototype.xAxisValueChanged = function () {
        this.panelCtrl.onDataReceived(this.panelCtrl.dataList);
    };
    AxesEditorCtrl.prototype.getDataFieldNames = function (onlyNumbers) {
        var props = this.panelCtrl.processor.getDataFieldNames(this.panelCtrl.dataList, onlyNumbers);
        var items = props.map(function (prop) {
            return { text: prop, value: prop };
        });
        return this.$q.when(items);
    };
    return AxesEditorCtrl;
}());

/** @ngInject */
function axesEditorComponent() {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',
        controller: AxesEditorCtrl,
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/graph/data_processor.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/panel/graph/data_processor.ts ***!
  \**********************************************************/
/*! exports provided: DataProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataProcessor", function() { return DataProcessor; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_time_series2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/time_series2 */ "./public/app/core/time_series2.ts");
/* harmony import */ var app_core_utils_colors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/colors */ "./public/app/core/utils/colors.ts");



var DataProcessor = /** @class */ (function () {
    function DataProcessor(panel) {
        this.panel = panel;
    }
    DataProcessor.prototype.getSeriesList = function (options) {
        var _this = this;
        if (!options.dataList || options.dataList.length === 0) {
            return [];
        }
        // auto detect xaxis mode
        var firstItem;
        if (options.dataList && options.dataList.length > 0) {
            firstItem = options.dataList[0];
            var autoDetectMode = this.getAutoDetectXAxisMode(firstItem);
            if (this.panel.xaxis.mode !== autoDetectMode) {
                this.panel.xaxis.mode = autoDetectMode;
                this.setPanelDefaultsForNewXAxisMode();
            }
        }
        switch (this.panel.xaxis.mode) {
            case 'series':
            case 'time': {
                return options.dataList.map(function (item, index) {
                    return _this.timeSeriesHandler(item, index, options);
                });
            }
            case 'histogram': {
                var histogramDataList = void 0;
                if (this.panel.stack) {
                    histogramDataList = options.dataList;
                }
                else {
                    histogramDataList = [
                        {
                            target: 'count',
                            datapoints: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.concat([], lodash__WEBPACK_IMPORTED_MODULE_0___default.a.flatten(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(options.dataList, 'datapoints'))),
                        },
                    ];
                }
                return histogramDataList.map(function (item, index) {
                    return _this.timeSeriesHandler(item, index, options);
                });
            }
            case 'field': {
                return this.customHandler(firstItem);
            }
        }
    };
    DataProcessor.prototype.getAutoDetectXAxisMode = function (firstItem) {
        switch (firstItem.type) {
            case 'docs':
                return 'field';
            case 'table':
                return 'field';
            default: {
                if (this.panel.xaxis.mode === 'series') {
                    return 'series';
                }
                if (this.panel.xaxis.mode === 'histogram') {
                    return 'histogram';
                }
                return 'time';
            }
        }
    };
    DataProcessor.prototype.setPanelDefaultsForNewXAxisMode = function () {
        switch (this.panel.xaxis.mode) {
            case 'time': {
                this.panel.bars = false;
                this.panel.lines = true;
                this.panel.points = false;
                this.panel.legend.show = true;
                this.panel.tooltip.shared = true;
                this.panel.xaxis.values = [];
                break;
            }
            case 'series': {
                this.panel.bars = true;
                this.panel.lines = false;
                this.panel.points = false;
                this.panel.stack = false;
                this.panel.legend.show = false;
                this.panel.tooltip.shared = false;
                this.panel.xaxis.values = ['total'];
                break;
            }
            case 'histogram': {
                this.panel.bars = true;
                this.panel.lines = false;
                this.panel.points = false;
                this.panel.stack = false;
                this.panel.legend.show = false;
                this.panel.tooltip.shared = false;
                break;
            }
        }
    };
    DataProcessor.prototype.timeSeriesHandler = function (seriesData, index, options) {
        var datapoints = seriesData.datapoints || [];
        var alias = seriesData.target;
        var colorIndex = index % app_core_utils_colors__WEBPACK_IMPORTED_MODULE_2__["default"].length;
        var color = this.panel.aliasColors[alias] || app_core_utils_colors__WEBPACK_IMPORTED_MODULE_2__["default"][colorIndex];
        var series = new app_core_time_series2__WEBPACK_IMPORTED_MODULE_1__["default"]({
            datapoints: datapoints,
            alias: alias,
            color: color,
            unit: seriesData.unit,
        });
        if (datapoints && datapoints.length > 0) {
            var last = datapoints[datapoints.length - 1][1];
            var from = options.range.from;
            if (last - from < -10000) {
                series.isOutsideRange = true;
            }
        }
        return series;
    };
    DataProcessor.prototype.customHandler = function (dataItem) {
        var nameField = this.panel.xaxis.name;
        if (!nameField) {
            throw {
                message: 'No field name specified to use for x-axis, check your axes settings',
            };
        }
        return [];
    };
    DataProcessor.prototype.validateXAxisSeriesValue = function () {
        switch (this.panel.xaxis.mode) {
            case 'series': {
                if (this.panel.xaxis.values.length === 0) {
                    this.panel.xaxis.values = ['total'];
                    return;
                }
                var validOptions = this.getXAxisValueOptions({});
                var found = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(validOptions, { value: this.panel.xaxis.values[0] });
                if (!found) {
                    this.panel.xaxis.values = ['total'];
                }
                return;
            }
        }
    };
    DataProcessor.prototype.getDataFieldNames = function (dataList, onlyNumbers) {
        if (dataList.length === 0) {
            return [];
        }
        var fields = [];
        var firstItem = dataList[0];
        var fieldParts = [];
        function getPropertiesRecursive(obj) {
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(obj, function (value, key) {
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(value)) {
                    fieldParts.push(key);
                    getPropertiesRecursive(value);
                }
                else {
                    if (!onlyNumbers || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(value)) {
                        var field = fieldParts.concat(key).join('.');
                        fields.push(field);
                    }
                }
            });
            fieldParts.pop();
        }
        if (firstItem.type === 'docs') {
            if (firstItem.datapoints.length === 0) {
                return [];
            }
            getPropertiesRecursive(firstItem.datapoints[0]);
        }
        return fields;
    };
    DataProcessor.prototype.getXAxisValueOptions = function (options) {
        switch (this.panel.xaxis.mode) {
            case 'series': {
                return [
                    { text: 'Avg', value: 'avg' },
                    { text: 'Min', value: 'min' },
                    { text: 'Max', value: 'max' },
                    { text: 'Total', value: 'total' },
                    { text: 'Count', value: 'count' },
                ];
            }
        }
        return [];
    };
    DataProcessor.prototype.pluckDeep = function (obj, property) {
        var propertyParts = property.split('.');
        var value = obj;
        for (var i = 0; i < propertyParts.length; ++i) {
            if (value[propertyParts[i]]) {
                value = value[propertyParts[i]];
            }
            else {
                return undefined;
            }
        }
        return value;
    };
    return DataProcessor;
}());



/***/ }),

/***/ "./public/app/plugins/panel/graph/graph.ts":
/*!*************************************************!*\
  !*** ./public/app/plugins/panel/graph/graph.ts ***!
  \*************************************************/
/*! exports provided: GraphElement, graphDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphElement", function() { return GraphElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "graphDirective", function() { return graphDirective; });
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vendor/flot/jquery.flot */ "./public/vendor/flot/jquery.flot.js");
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vendor/flot/jquery.flot.selection */ "./public/vendor/flot/jquery.flot.selection.js");
/* harmony import */ var vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_selection__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vendor/flot/jquery.flot.time */ "./public/vendor/flot/jquery.flot.time.js");
/* harmony import */ var vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_time__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vendor/flot/jquery.flot.stack */ "./public/vendor/flot/jquery.flot.stack.js");
/* harmony import */ var vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_stack__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vendor/flot/jquery.flot.stackpercent */ "./public/vendor/flot/jquery.flot.stackpercent.js");
/* harmony import */ var vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_stackpercent__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vendor/flot/jquery.flot.fillbelow */ "./public/vendor/flot/jquery.flot.fillbelow.js");
/* harmony import */ var vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_fillbelow__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vendor/flot/jquery.flot.crosshair */ "./public/vendor/flot/jquery.flot.crosshair.js");
/* harmony import */ var vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_crosshair__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vendor/flot/jquery.flot.dashes */ "./public/vendor/flot/jquery.flot.dashes.js");
/* harmony import */ var vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_dashes__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _jquery_flot_events__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jquery.flot.events */ "./public/app/plugins/panel/graph/jquery.flot.events.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! app/core/utils/ticks */ "./public/app/core/utils/ticks.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var _graph_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./graph_tooltip */ "./public/app/plugins/panel/graph/graph_tooltip.ts");
/* harmony import */ var _threshold_manager__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./threshold_manager */ "./public/app/plugins/panel/graph/threshold_manager.ts");
/* harmony import */ var app_features_annotations_all__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! app/features/annotations/all */ "./public/app/features/annotations/all.ts");
/* harmony import */ var _histogram__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./histogram */ "./public/app/plugins/panel/graph/histogram.ts");
/* harmony import */ var _align_yaxes__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./align_yaxes */ "./public/app/plugins/panel/graph/align_yaxes.ts");
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");





















var GraphElement = /** @class */ (function () {
    function GraphElement(scope, elem, timeSrv) {
        var _this = this;
        this.scope = scope;
        this.elem = elem;
        this.timeSrv = timeSrv;
        this.ctrl = scope.ctrl;
        this.dashboard = this.ctrl.dashboard;
        this.panel = this.ctrl.panel;
        this.annotations = [];
        this.panelWidth = 0;
        this.eventManager = new app_features_annotations_all__WEBPACK_IMPORTED_MODULE_17__["EventManager"](this.ctrl);
        this.thresholdManager = new _threshold_manager__WEBPACK_IMPORTED_MODULE_16__["ThresholdManager"](this.ctrl);
        this.tooltip = new _graph_tooltip__WEBPACK_IMPORTED_MODULE_15__["default"](this.elem, this.ctrl.dashboard, this.scope, function () {
            return _this.sortedSeries;
        });
        // panel events
        this.ctrl.events.on('panel-teardown', this.onPanelteardown.bind(this));
        /**
         * Split graph rendering into two parts.
         * First, calculate series stats in buildFlotPairs() function. Then legend rendering started
         * (see ctrl.events.on('render') in legend.ts).
         * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.
         */
        this.ctrl.events.on('render', this.onRender.bind(this));
        this.ctrl.events.on('legend-rendering-complete', this.onLegendRenderingComplete.bind(this));
        // global events
        app_core_core__WEBPACK_IMPORTED_MODULE_14__["appEvents"].on('graph-hover', this.onGraphHover.bind(this), scope);
        app_core_core__WEBPACK_IMPORTED_MODULE_14__["appEvents"].on('graph-hover-clear', this.onGraphHoverClear.bind(this), scope);
        this.elem.bind('plotselected', this.onPlotSelected.bind(this));
        this.elem.bind('plotclick', this.onPlotClick.bind(this));
        scope.$on('$destroy', this.onScopeDestroy.bind(this));
    }
    GraphElement.prototype.onRender = function (renderData) {
        this.data = renderData || this.data;
        if (!this.data) {
            return;
        }
        this.annotations = this.ctrl.annotations || [];
        this.buildFlotPairs(this.data);
        var graphHeight = this.elem.height();
        Object(app_core_core__WEBPACK_IMPORTED_MODULE_14__["updateLegendValues"])(this.data, this.panel, graphHeight);
        this.ctrl.events.emit('render-legend');
    };
    GraphElement.prototype.onGraphHover = function (evt) {
        // ignore other graph hover events if shared tooltip is disabled
        if (!this.dashboard.sharedTooltipModeEnabled()) {
            return;
        }
        // ignore if we are the emitter
        if (!this.plot || evt.panel.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {
            return;
        }
        this.tooltip.show(evt.pos);
    };
    GraphElement.prototype.onPanelteardown = function () {
        this.thresholdManager = null;
        if (this.plot) {
            this.plot.destroy();
            this.plot = null;
        }
    };
    GraphElement.prototype.onLegendRenderingComplete = function () {
        this.render_panel();
    };
    GraphElement.prototype.onGraphHoverClear = function (event, info) {
        if (this.plot) {
            this.tooltip.clear(this.plot);
        }
    };
    GraphElement.prototype.onPlotSelected = function (event, ranges) {
        var _this = this;
        if (this.panel.xaxis.mode !== 'time') {
            // Skip if panel in histogram or series mode
            this.plot.clearSelection();
            return;
        }
        if ((ranges.ctrlKey || ranges.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {
            // Add annotation
            setTimeout(function () {
                _this.eventManager.updateTime(ranges.xaxis);
            }, 100);
        }
        else {
            this.scope.$apply(function () {
                _this.timeSrv.setTime({
                    from: moment__WEBPACK_IMPORTED_MODULE_11___default.a.utc(ranges.xaxis.from),
                    to: moment__WEBPACK_IMPORTED_MODULE_11___default.a.utc(ranges.xaxis.to),
                });
            });
        }
    };
    GraphElement.prototype.onPlotClick = function (event, pos, item) {
        var _this = this;
        if (this.panel.xaxis.mode !== 'time') {
            // Skip if panel in histogram or series mode
            return;
        }
        if ((pos.ctrlKey || pos.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {
            // Skip if range selected (added in "plotselected" event handler)
            var isRangeSelection = pos.x !== pos.x1;
            if (!isRangeSelection) {
                setTimeout(function () {
                    _this.eventManager.updateTime({ from: pos.x, to: null });
                }, 100);
            }
        }
    };
    GraphElement.prototype.onScopeDestroy = function () {
        this.tooltip.destroy();
        this.elem.off();
        this.elem.remove();
    };
    GraphElement.prototype.shouldAbortRender = function () {
        if (!this.data) {
            return true;
        }
        if (this.panelWidth === 0) {
            return true;
        }
        return false;
    };
    GraphElement.prototype.drawHook = function (plot) {
        // add left axis labels
        if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {
            jquery__WEBPACK_IMPORTED_MODULE_9___default()("<div class='axisLabel left-yaxis-label flot-temp-elem'></div>")
                .text(this.panel.yaxes[0].label)
                .appendTo(this.elem);
        }
        // add right axis labels
        if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {
            jquery__WEBPACK_IMPORTED_MODULE_9___default()("<div class='axisLabel right-yaxis-label flot-temp-elem'></div>")
                .text(this.panel.yaxes[1].label)
                .appendTo(this.elem);
        }
        if (this.ctrl.dataWarning) {
            jquery__WEBPACK_IMPORTED_MODULE_9___default()("<div class=\"datapoints-warning flot-temp-elem\">" + this.ctrl.dataWarning.title + "</div>").appendTo(this.elem);
        }
        this.thresholdManager.draw(plot);
    };
    GraphElement.prototype.processOffsetHook = function (plot, gridMargin) {
        var left = this.panel.yaxes[0];
        var right = this.panel.yaxes[1];
        if (left.show && left.label) {
            gridMargin.left = 20;
        }
        if (right.show && right.label) {
            gridMargin.right = 20;
        }
        // apply y-axis min/max options
        var yaxis = plot.getYAxes();
        for (var i = 0; i < yaxis.length; i++) {
            var axis = yaxis[i];
            var panelOptions = this.panel.yaxes[i];
            axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;
            axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;
        }
    };
    GraphElement.prototype.processRangeHook = function (plot) {
        var yAxes = plot.getYAxes();
        var align = this.panel.yaxis.align || false;
        if (yAxes.length > 1 && align === true) {
            var level = this.panel.yaxis.alignLevel || 0;
            Object(_align_yaxes__WEBPACK_IMPORTED_MODULE_19__["alignYLevel"])(yAxes, parseFloat(level));
        }
    };
    // Series could have different timeSteps,
    // let's find the smallest one so that bars are correctly rendered.
    // In addition, only take series which are rendered as bars for this.
    GraphElement.prototype.getMinTimeStepOfSeries = function (data) {
        var min = Number.MAX_VALUE;
        for (var i = 0; i < data.length; i++) {
            if (!data[i].stats.timeStep) {
                continue;
            }
            if (this.panel.bars) {
                if (data[i].bars && data[i].bars.show === false) {
                    continue;
                }
            }
            else {
                if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {
                    continue;
                }
            }
            if (data[i].stats.timeStep < min) {
                min = data[i].stats.timeStep;
            }
        }
        return min;
    };
    // Function for rendering panel
    GraphElement.prototype.render_panel = function () {
        this.panelWidth = this.elem.width();
        if (this.shouldAbortRender()) {
            return;
        }
        // give space to alert editing
        this.thresholdManager.prepare(this.elem, this.data);
        // un-check dashes if lines are unchecked
        this.panel.dashes = this.panel.lines ? this.panel.dashes : false;
        // Populate element
        var options = this.buildFlotOptions(this.panel);
        this.prepareXAxis(options, this.panel);
        this.configureYAxisOptions(this.data, options);
        this.thresholdManager.addFlotOptions(options, this.panel);
        this.eventManager.addFlotEvents(this.annotations, options);
        this.sortedSeries = this.sortSeries(this.data, this.panel);
        this.callPlot(options, true);
    };
    GraphElement.prototype.buildFlotPairs = function (data) {
        for (var i = 0; i < data.length; i++) {
            var series = data[i];
            series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);
            // if hidden remove points and disable stack
            if (this.ctrl.hiddenSeries[series.alias]) {
                series.data = [];
                series.stack = false;
            }
        }
    };
    GraphElement.prototype.prepareXAxis = function (options, panel) {
        switch (panel.xaxis.mode) {
            case 'series': {
                options.series.bars.barWidth = 0.7;
                options.series.bars.align = 'center';
                for (var i = 0; i < this.data.length; i++) {
                    var series = this.data[i];
                    series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];
                }
                this.addXSeriesAxis(options);
                break;
            }
            case 'histogram': {
                var bucketSize = void 0;
                if (this.data.length) {
                    var histMin = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.min(lodash__WEBPACK_IMPORTED_MODULE_10___default.a.map(this.data, function (s) { return s.stats.min; }));
                    var histMax = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.max(lodash__WEBPACK_IMPORTED_MODULE_10___default.a.map(this.data, function (s) { return s.stats.max; }));
                    var ticks = panel.xaxis.buckets || this.panelWidth / 50;
                    bucketSize = Object(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_13__["tickStep"])(histMin, histMax, ticks);
                    options.series.bars.barWidth = bucketSize * 0.8;
                    this.data = Object(_histogram__WEBPACK_IMPORTED_MODULE_18__["convertToHistogramData"])(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);
                }
                else {
                    bucketSize = 0;
                }
                this.addXHistogramAxis(options, bucketSize);
                break;
            }
            case 'table': {
                options.series.bars.barWidth = 0.7;
                options.series.bars.align = 'center';
                this.addXTableAxis(options);
                break;
            }
            default: {
                options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;
                this.addTimeAxis(options);
                break;
            }
        }
    };
    GraphElement.prototype.callPlot = function (options, incrementRenderCounter) {
        try {
            this.plot = jquery__WEBPACK_IMPORTED_MODULE_9___default.a.plot(this.elem, this.sortedSeries, options);
            if (this.ctrl.renderError) {
                delete this.ctrl.error;
                delete this.ctrl.inspector;
            }
        }
        catch (e) {
            console.log('flotcharts error', e);
            this.ctrl.error = e.message || 'Render Error';
            this.ctrl.renderError = true;
            this.ctrl.inspector = { error: e };
        }
        if (incrementRenderCounter) {
            this.ctrl.renderingCompleted();
        }
    };
    GraphElement.prototype.buildFlotOptions = function (panel) {
        var gridColor = '#c8c8c8';
        if (app_core_config__WEBPACK_IMPORTED_MODULE_20__["default"].bootData.user.lightTheme === true) {
            gridColor = '#a1a1a1';
        }
        var stack = panel.stack ? true : null;
        var options = {
            hooks: {
                draw: [this.drawHook.bind(this)],
                processOffset: [this.processOffsetHook.bind(this)],
                processRange: [this.processRangeHook.bind(this)],
            },
            legend: { show: false },
            series: {
                stackpercent: panel.stack ? panel.percentage : false,
                stack: panel.percentage ? null : stack,
                lines: {
                    show: panel.lines,
                    zero: false,
                    fill: this.translateFillOption(panel.fill),
                    lineWidth: panel.dashes ? 0 : panel.linewidth,
                    steps: panel.steppedLine,
                },
                dashes: {
                    show: panel.dashes,
                    lineWidth: panel.linewidth,
                    dashLength: [panel.dashLength, panel.spaceLength],
                },
                bars: {
                    show: panel.bars,
                    fill: 1,
                    barWidth: 1,
                    zero: false,
                    lineWidth: 0,
                },
                points: {
                    show: panel.points,
                    fill: 1,
                    fillColor: false,
                    radius: panel.points ? panel.pointradius : 2,
                },
                shadowSize: 0,
            },
            yaxes: [],
            xaxis: {},
            grid: {
                minBorderMargin: 0,
                markings: [],
                backgroundColor: null,
                borderWidth: 0,
                hoverable: true,
                clickable: true,
                color: gridColor,
                margin: { left: 0, right: 0 },
                labelMarginX: 0,
            },
            selection: {
                mode: 'x',
                color: '#666',
            },
            crosshair: {
                mode: 'x',
            },
        };
        return options;
    };
    GraphElement.prototype.sortSeries = function (series, panel) {
        var sortBy = panel.legend.sort;
        var sortOrder = panel.legend.sortDesc;
        var haveSortBy = sortBy !== null && sortBy !== undefined;
        var haveSortOrder = sortOrder !== null && sortOrder !== undefined;
        var shouldSortBy = panel.stack && haveSortBy && haveSortOrder;
        var sortDesc = panel.legend.sortDesc === true ? -1 : 1;
        if (shouldSortBy) {
            return lodash__WEBPACK_IMPORTED_MODULE_10___default.a.sortBy(series, function (s) { return s.stats[sortBy] * sortDesc; });
        }
        else {
            return lodash__WEBPACK_IMPORTED_MODULE_10___default.a.sortBy(series, function (s) { return s.zindex; });
        }
    };
    GraphElement.prototype.translateFillOption = function (fill) {
        if (this.panel.percentage && this.panel.stack) {
            return fill === 0 ? 0.001 : fill / 10;
        }
        else {
            return fill / 10;
        }
    };
    GraphElement.prototype.addTimeAxis = function (options) {
        var ticks = this.panelWidth / 100;
        var min = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.isUndefined(this.ctrl.range.from) ? null : this.ctrl.range.from.valueOf();
        var max = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.isUndefined(this.ctrl.range.to) ? null : this.ctrl.range.to.valueOf();
        options.xaxis = {
            timezone: this.dashboard.getTimezone(),
            show: this.panel.xaxis.show,
            mode: 'time',
            min: min,
            max: max,
            label: 'Datetime',
            ticks: ticks,
            timeformat: this.time_format(ticks, min, max),
        };
    };
    GraphElement.prototype.addXSeriesAxis = function (options) {
        var ticks = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.map(this.data, function (series, index) {
            return [index + 1, series.alias];
        });
        options.xaxis = {
            timezone: this.dashboard.getTimezone(),
            show: this.panel.xaxis.show,
            mode: null,
            min: 0,
            max: ticks.length + 1,
            label: 'Datetime',
            ticks: ticks,
        };
    };
    GraphElement.prototype.addXHistogramAxis = function (options, bucketSize) {
        var ticks, min, max;
        var defaultTicks = this.panelWidth / 50;
        if (this.data.length && bucketSize) {
            var tickValues = [];
            for (var _i = 0, _a = this.data; _i < _a.length; _i++) {
                var d = _a[_i];
                for (var _b = 0, _c = d.data; _b < _c.length; _b++) {
                    var point = _c[_b];
                    tickValues[point[0]] = true;
                }
            }
            ticks = Object.keys(tickValues).map(function (v) { return Number(v); });
            min = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.min(ticks);
            max = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.max(ticks);
            // Adjust tick step
            var tickStep_1 = bucketSize;
            var ticksNum = Math.floor((max - min) / tickStep_1);
            while (ticksNum > defaultTicks) {
                tickStep_1 = tickStep_1 * 2;
                ticksNum = Math.ceil((max - min) / tickStep_1);
            }
            // Expand ticks for pretty view
            min = Math.floor(min / tickStep_1) * tickStep_1;
            // 1.01 is 101% - ensure we have enough space for last bar
            max = Math.ceil(max * 1.01 / tickStep_1) * tickStep_1;
            ticks = [];
            for (var i = min; i <= max; i += tickStep_1) {
                ticks.push(i);
            }
        }
        else {
            // Set defaults if no data
            ticks = defaultTicks / 2;
            min = 0;
            max = 1;
        }
        options.xaxis = {
            timezone: this.dashboard.getTimezone(),
            show: this.panel.xaxis.show,
            mode: null,
            min: min,
            max: max,
            label: 'Histogram',
            ticks: ticks,
        };
        // Use 'short' format for histogram values
        this.configureAxisMode(options.xaxis, 'short');
    };
    GraphElement.prototype.addXTableAxis = function (options) {
        var ticks = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.map(this.data, function (series, seriesIndex) {
            return lodash__WEBPACK_IMPORTED_MODULE_10___default.a.map(series.datapoints, function (point, pointIndex) {
                var tickIndex = seriesIndex * series.datapoints.length + pointIndex;
                return [tickIndex + 1, point[1]];
            });
        });
        ticks = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.flatten(ticks, true);
        options.xaxis = {
            timezone: this.dashboard.getTimezone(),
            show: this.panel.xaxis.show,
            mode: null,
            min: 0,
            max: ticks.length + 1,
            label: 'Datetime',
            ticks: ticks,
        };
    };
    GraphElement.prototype.configureYAxisOptions = function (data, options) {
        var defaults = {
            position: 'left',
            show: this.panel.yaxes[0].show,
            index: 1,
            logBase: this.panel.yaxes[0].logBase || 1,
            min: this.parseNumber(this.panel.yaxes[0].min),
            max: this.parseNumber(this.panel.yaxes[0].max),
            tickDecimals: this.panel.yaxes[0].decimals,
        };
        options.yaxes.push(defaults);
        if (lodash__WEBPACK_IMPORTED_MODULE_10___default.a.find(data, { yaxis: 2 })) {
            var secondY = lodash__WEBPACK_IMPORTED_MODULE_10___default.a.clone(defaults);
            secondY.index = 2;
            secondY.show = this.panel.yaxes[1].show;
            secondY.logBase = this.panel.yaxes[1].logBase || 1;
            secondY.position = 'right';
            secondY.min = this.parseNumber(this.panel.yaxes[1].min);
            secondY.max = this.parseNumber(this.panel.yaxes[1].max);
            secondY.tickDecimals = this.panel.yaxes[1].decimals;
            options.yaxes.push(secondY);
            this.applyLogScale(options.yaxes[1], data);
            this.configureAxisMode(options.yaxes[1], this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format);
        }
        this.applyLogScale(options.yaxes[0], data);
        this.configureAxisMode(options.yaxes[0], this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format);
    };
    GraphElement.prototype.parseNumber = function (value) {
        if (value === null || typeof value === 'undefined') {
            return null;
        }
        return lodash__WEBPACK_IMPORTED_MODULE_10___default.a.toNumber(value);
    };
    GraphElement.prototype.applyLogScale = function (axis, data) {
        if (axis.logBase === 1) {
            return;
        }
        var minSetToZero = axis.min === 0;
        if (axis.min < Number.MIN_VALUE) {
            axis.min = null;
        }
        if (axis.max < Number.MIN_VALUE) {
            axis.max = null;
        }
        var series, i;
        var max = axis.max, min = axis.min;
        for (i = 0; i < data.length; i++) {
            series = data[i];
            if (series.yaxis === axis.index) {
                if (!max || max < series.stats.max) {
                    max = series.stats.max;
                }
                if (!min || min > series.stats.logmin) {
                    min = series.stats.logmin;
                }
            }
        }
        axis.transform = function (v) {
            return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);
        };
        axis.inverseTransform = function (v) {
            return Math.pow(axis.logBase, v);
        };
        if (!max && !min) {
            max = axis.inverseTransform(+2);
            min = axis.inverseTransform(-2);
        }
        else if (!max) {
            max = min * axis.inverseTransform(+4);
        }
        else if (!min) {
            min = max * axis.inverseTransform(-4);
        }
        if (axis.min) {
            min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));
        }
        else {
            min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));
        }
        if (axis.max) {
            max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));
        }
        else {
            max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));
        }
        if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {
            return;
        }
        if (Number.isFinite(min) && Number.isFinite(max)) {
            if (minSetToZero) {
                axis.min = 0.1;
                min = 1;
            }
            axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);
            if (minSetToZero) {
                axis.ticks.unshift(0.1);
            }
            if (axis.ticks[axis.ticks.length - 1] > axis.max) {
                axis.max = axis.ticks[axis.ticks.length - 1];
            }
        }
        else {
            axis.ticks = [1, 2];
            delete axis.min;
            delete axis.max;
        }
    };
    GraphElement.prototype.generateTicksForLogScaleYAxis = function (min, max, logBase) {
        var ticks = [];
        var nextTick;
        for (nextTick = min; nextTick <= max; nextTick *= logBase) {
            ticks.push(nextTick);
        }
        var maxNumTicks = Math.ceil(this.ctrl.height / 25);
        var numTicks = ticks.length;
        if (numTicks > maxNumTicks) {
            var factor = Math.ceil(numTicks / maxNumTicks) * logBase;
            ticks = [];
            for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {
                ticks.push(nextTick);
            }
        }
        return ticks;
    };
    GraphElement.prototype.configureAxisMode = function (axis, format) {
        axis.tickFormatter = function (val, axis) {
            if (!app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_12__["default"].valueFormats[format]) {
                throw new Error("Unit '" + format + "' is not supported");
            }
            return app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_12__["default"].valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);
        };
    };
    GraphElement.prototype.time_format = function (ticks, min, max) {
        if (min && max && ticks) {
            var range = max - min;
            var secPerTick = range / ticks / 1000;
            var oneDay = 86400000;
            var oneYear = 31536000000;
            if (secPerTick <= 45) {
                return '%H:%M:%S';
            }
            if (secPerTick <= 7200 || range <= oneDay) {
                return '%H:%M';
            }
            if (secPerTick <= 80000) {
                return '%m/%d %H:%M';
            }
            if (secPerTick <= 2419200 || range <= oneYear) {
                return '%m/%d';
            }
            return '%Y-%m';
        }
        return '%H:%M';
    };
    return GraphElement;
}());
/** @ngInject */
function graphDirective(timeSrv, popoverSrv, contextSrv) {
    return {
        restrict: 'A',
        template: '',
        link: function (scope, elem) {
            return new GraphElement(scope, elem, timeSrv);
        },
    };
}
app_core_core__WEBPACK_IMPORTED_MODULE_14__["coreModule"].directive('grafanaGraph', graphDirective);



/***/ }),

/***/ "./public/app/plugins/panel/graph/graph_tooltip.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/panel/graph/graph_tooltip.ts ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GraphTooltip; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");


function GraphTooltip(elem, dashboard, scope, getSeriesFn) {
    var self = this;
    var ctrl = scope.ctrl;
    var panel = ctrl.panel;
    var $tooltip = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div class="graph-tooltip">');
    this.destroy = function () {
        $tooltip.remove();
    };
    this.findHoverIndexFromDataPoints = function (posX, series, last) {
        var ps = series.datapoints.pointsize;
        var initial = last * ps;
        var len = series.datapoints.points.length;
        var j;
        for (j = initial; j < len; j += ps) {
            // Special case of a non stepped line, highlight the very last point just before a null point
            if ((!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||
                //normal case
                series.datapoints.points[j] > posX) {
                return Math.max(j - ps, 0) / ps;
            }
        }
        return j / ps - 1;
    };
    this.findHoverIndexFromData = function (posX, series) {
        var lower = 0;
        var upper = series.data.length - 1;
        var middle;
        while (true) {
            if (lower > upper) {
                return Math.max(upper, 0);
            }
            middle = Math.floor((lower + upper) / 2);
            if (series.data[middle][0] === posX) {
                return middle;
            }
            else if (series.data[middle][0] < posX) {
                lower = middle + 1;
            }
            else {
                upper = middle - 1;
            }
        }
    };
    this.renderAndShow = function (absoluteTime, innerHtml, pos, xMode) {
        if (xMode === 'time') {
            innerHtml = '<div class="graph-tooltip-time">' + absoluteTime + '</div>' + innerHtml;
        }
        $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);
    };
    this.getMultiSeriesPlotHoverInfo = function (seriesList, pos) {
        var value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;
        // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.
        var results = [[], [], []];
        //now we know the current X (j) position for X and Y values
        var lastValue = 0; //needed for stacked values
        var minDistance, minTime;
        for (i = 0; i < seriesList.length; i++) {
            series = seriesList[i];
            if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {
                // Init value so that it does not brake series sorting
                results[0].push({ hidden: true, value: 0 });
                continue;
            }
            if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {
                // Init value so that it does not brake series sorting
                results[0].push({ hidden: true, value: 0 });
                continue;
            }
            if (series.hideTooltip) {
                results[0].push({ hidden: true, value: 0 });
                continue;
            }
            hoverIndex = this.findHoverIndexFromData(pos.x, series);
            hoverDistance = pos.x - series.data[hoverIndex][0];
            pointTime = series.data[hoverIndex][0];
            // Take the closest point before the cursor, or if it does not exist, the closest after
            if (!minDistance ||
                (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||
                (hoverDistance < 0 && hoverDistance > minDistance)) {
                minDistance = hoverDistance;
                minTime = pointTime;
            }
            if (series.stack) {
                if (panel.tooltip.value_type === 'individual') {
                    value = series.data[hoverIndex][1];
                }
                else if (!series.stack) {
                    value = series.data[hoverIndex][1];
                }
                else {
                    lastValue += series.data[hoverIndex][1];
                    value = lastValue;
                }
            }
            else {
                value = series.data[hoverIndex][1];
            }
            // Highlighting multiple Points depending on the plot type
            if (series.lines.steps || series.stack) {
                // stacked and steppedLine plots can have series with different length.
                // Stacked series can increase its length on each new stacked serie if null points found,
                // to speed the index search we begin always on the last found hoverIndex.
                hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);
            }
            // Be sure we have a yaxis so that it does not brake series sorting
            yaxis = 0;
            if (series.yaxis) {
                yaxis = series.yaxis.n;
            }
            results[yaxis].push({
                value: value,
                hoverIndex: hoverIndex,
                color: series.color,
                label: series.aliasEscaped,
                time: pointTime,
                distance: hoverDistance,
                index: i,
            });
        }
        // Contat the 3 sub-arrays
        results = results[0].concat(results[1], results[2]);
        // Time of the point closer to pointer
        results.time = minTime;
        return results;
    };
    elem.mouseleave(function () {
        if (panel.tooltip.shared) {
            var plot = elem.data().plot;
            if (plot) {
                $tooltip.detach();
                plot.unhighlight();
            }
        }
        app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('graph-hover-clear');
    });
    elem.bind('plothover', function (event, pos, item) {
        self.show(pos, item);
        // broadcast to other graph panels that we are hovering!
        pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();
        app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('graph-hover', { pos: pos, panel: panel });
    });
    elem.bind('plotclick', function (event, pos, item) {
        app_core_core__WEBPACK_IMPORTED_MODULE_1__["appEvents"].emit('graph-click', { pos: pos, panel: panel, item: item });
    });
    this.clear = function (plot) {
        $tooltip.detach();
        plot.clearCrosshair();
        plot.unhighlight();
    };
    this.show = function (pos, item) {
        var plot = elem.data().plot;
        var plotData = plot.getData();
        var xAxes = plot.getXAxes();
        var xMode = xAxes[0].options.mode;
        var seriesList = getSeriesFn();
        var allSeriesMode = panel.tooltip.shared;
        var group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;
        // if panelRelY is defined another panel wants us to show a tooltip
        // get pageX from position on x axis and pageY from relative position in original panel
        if (pos.panelRelY) {
            var pointOffset = plot.pointOffset({ x: pos.x });
            if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {
                self.clear(plot);
                return;
            }
            pos.pageX = elem.offset().left + pointOffset.left;
            pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;
            var isVisible = pos.pageY >= jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).scrollTop() && pos.pageY <= jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).innerHeight() + jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).scrollTop();
            if (!isVisible) {
                self.clear(plot);
                return;
            }
            plot.setCrosshair(pos);
            allSeriesMode = true;
            if (dashboard.sharedCrosshairModeOnly()) {
                // if only crosshair mode we are done
                return;
            }
        }
        if (seriesList.length === 0) {
            return;
        }
        if (seriesList[0].hasMsResolution) {
            tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';
        }
        else {
            tooltipFormat = 'YYYY-MM-DD HH:mm:ss';
        }
        if (allSeriesMode) {
            plot.unhighlight();
            var seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);
            seriesHtml = '';
            absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);
            // Dynamically reorder the hovercard for the current time point if the
            // option is enabled.
            if (panel.tooltip.sort === 2) {
                seriesHoverInfo.sort(function (a, b) {
                    return b.value - a.value;
                });
            }
            else if (panel.tooltip.sort === 1) {
                seriesHoverInfo.sort(function (a, b) {
                    return a.value - b.value;
                });
            }
            for (i = 0; i < seriesHoverInfo.length; i++) {
                hoverInfo = seriesHoverInfo[i];
                if (hoverInfo.hidden) {
                    continue;
                }
                var highlightClass = '';
                if (item && hoverInfo.index === item.seriesIndex) {
                    highlightClass = 'graph-tooltip-list-item--highlight';
                }
                series = seriesList[hoverInfo.index];
                value = series.formatValue(hoverInfo.value);
                seriesHtml +=
                    '<div class="graph-tooltip-list-item ' + highlightClass + '"><div class="graph-tooltip-series-name">';
                seriesHtml +=
                    '<i class="fa fa-minus" style="color:' + hoverInfo.color + ';"></i> ' + hoverInfo.label + ':</div>';
                seriesHtml += '<div class="graph-tooltip-value">' + value + '</div></div>';
                plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);
            }
            self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);
        }
        else if (item) {
            // single series tooltip
            series = seriesList[item.seriesIndex];
            group = '<div class="graph-tooltip-list-item"><div class="graph-tooltip-series-name">';
            group +=
                '<i class="fa fa-minus" style="color:' + item.series.color + ';"></i> ' + series.aliasEscaped + ':</div>';
            if (panel.stack && panel.tooltip.value_type === 'individual') {
                value = item.datapoint[1] - item.datapoint[2];
            }
            else {
                value = item.datapoint[1];
            }
            value = series.formatValue(value);
            absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);
            group += '<div class="graph-tooltip-value">' + value + '</div>';
            self.renderAndShow(absoluteTime, group, pos, xMode);
        }
        else {
            // no hit
            $tooltip.detach();
        }
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/graph/histogram.ts":
/*!*****************************************************!*\
  !*** ./public/app/plugins/panel/graph/histogram.ts ***!
  \*****************************************************/
/*! exports provided: getSeriesValues, convertValuesToHistogram, convertToHistogramData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSeriesValues", function() { return getSeriesValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertValuesToHistogram", function() { return convertValuesToHistogram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToHistogramData", function() { return convertToHistogramData; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Convert series into array of series values.
 * @param data Array of series
 */
function getSeriesValues(dataList) {
    var VALUE_INDEX = 0;
    var values = [];
    // Count histogam stats
    for (var i = 0; i < dataList.length; i++) {
        var series = dataList[i];
        var datapoints = series.datapoints;
        for (var j = 0; j < datapoints.length; j++) {
            if (datapoints[j][VALUE_INDEX] !== null) {
                values.push(datapoints[j][VALUE_INDEX]);
            }
        }
    }
    return values;
}
/**
 * Convert array of values into timeseries-like histogram:
 * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]
 * @param values
 * @param bucketSize
 */
function convertValuesToHistogram(values, bucketSize, min, max) {
    var histogram = {};
    var minBound = getBucketBound(min, bucketSize);
    var maxBound = getBucketBound(max, bucketSize);
    var bound = minBound;
    var n = 0;
    while (bound <= maxBound) {
        histogram[bound] = 0;
        bound = minBound + bucketSize * n;
        n++;
    }
    for (var i = 0; i < values.length; i++) {
        var bound_1 = getBucketBound(values[i], bucketSize);
        histogram[bound_1] = histogram[bound_1] + 1;
    }
    var histogamSeries = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(histogram, function (count, bound) {
        return [Number(bound), count];
    });
    // Sort by Y axis values
    return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(histogamSeries, function (point) { return point[0]; });
}
/**
 * Convert series into array of histogram data.
 * @param data Array of series
 * @param bucketSize
 */
function convertToHistogramData(data, bucketSize, hiddenSeries, min, max) {
    return data.map(function (series) {
        var values = getSeriesValues([series]);
        series.histogram = true;
        if (!hiddenSeries[series.alias]) {
            var histogram = convertValuesToHistogram(values, bucketSize, min, max);
            series.data = histogram;
        }
        else {
            series.data = [];
        }
        return series;
    });
}
function getBucketBound(value, bucketSize) {
    return Math.floor(value / bucketSize) * bucketSize;
}


/***/ }),

/***/ "./public/app/plugins/panel/graph/jquery.flot.events.ts":
/*!**************************************************************!*\
  !*** ./public/app/plugins/panel/graph/jquery.flot.events.ts ***!
  \**************************************************************/
/*! exports provided: createAnnotationToolip, createEditPopover, DrawableEvent, VisualEvent, EventMarkers, init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAnnotationToolip", function() { return createAnnotationToolip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEditPopover", function() { return createEditPopover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawableEvent", function() { return DrawableEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisualEvent", function() { return VisualEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventMarkers", function() { return EventMarkers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tether-drop */ "./node_modules/tether-drop/dist/js/drop.js");
/* harmony import */ var tether_drop__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(tether_drop__WEBPACK_IMPORTED_MODULE_3__);




/** @ngInject */
function createAnnotationToolip(element, event, plot) {
    var injector = angular__WEBPACK_IMPORTED_MODULE_0___default.a.element(document).injector();
    var content = document.createElement('div');
    content.innerHTML = '<annotation-tooltip event="event" on-edit="onEdit()"></annotation-tooltip>';
    injector.invoke([
        '$compile',
        '$rootScope',
        function ($compile, $rootScope) {
            var eventManager = plot.getOptions().events.manager;
            var tmpScope = $rootScope.$new(true);
            tmpScope.event = event;
            tmpScope.onEdit = function () {
                eventManager.editEvent(event);
            };
            $compile(content)(tmpScope);
            tmpScope.$digest();
            tmpScope.$destroy();
            var drop = new tether_drop__WEBPACK_IMPORTED_MODULE_3___default.a({
                target: element[0],
                content: content,
                position: 'bottom center',
                classes: 'drop-popover drop-popover--annotation',
                openOn: 'hover',
                hoverCloseDelay: 200,
                tetherOptions: {
                    constraints: [{ to: 'window', pin: true, attachment: 'both' }],
                },
            });
            drop.open();
            drop.on('close', function () {
                setTimeout(function () {
                    drop.destroy();
                });
            });
        },
    ]);
}
var markerElementToAttachTo = null;
/** @ngInject */
function createEditPopover(element, event, plot) {
    var eventManager = plot.getOptions().events.manager;
    if (eventManager.editorOpen) {
        // update marker element to attach to (needed in case of legend on the right
        // when there is a double render pass and the inital marker element is removed)
        markerElementToAttachTo = element;
        return;
    }
    // mark as openend
    eventManager.editorOpened();
    // set marker elment to attache to
    markerElementToAttachTo = element;
    // wait for element to be attached and positioned
    setTimeout(function () {
        var injector = angular__WEBPACK_IMPORTED_MODULE_0___default.a.element(document).injector();
        var content = document.createElement('div');
        content.innerHTML = '<event-editor panel-ctrl="panelCtrl" event="event" close="close()"></event-editor>';
        injector.invoke([
            '$compile',
            '$rootScope',
            function ($compile, $rootScope) {
                var scope = $rootScope.$new(true);
                var drop;
                scope.event = event;
                scope.panelCtrl = eventManager.panelCtrl;
                scope.close = function () {
                    drop.close();
                };
                $compile(content)(scope);
                scope.$digest();
                drop = new tether_drop__WEBPACK_IMPORTED_MODULE_3___default.a({
                    target: markerElementToAttachTo[0],
                    content: content,
                    position: 'bottom center',
                    classes: 'drop-popover drop-popover--form',
                    openOn: 'click',
                    tetherOptions: {
                        constraints: [{ to: 'window', pin: true, attachment: 'both' }],
                    },
                });
                drop.open();
                eventManager.editorOpened();
                drop.on('close', function () {
                    // need timeout here in order call drop.destroy
                    setTimeout(function () {
                        eventManager.editorClosed();
                        scope.$destroy();
                        drop.destroy();
                    });
                });
            },
        ]);
    }, 100);
}
/*
 * jquery.flot.events
 *
 * description: Flot plugin for adding events/markers to the plot
 * version: 0.2.5
 * authors:
 *    Alexander Wunschik <alex@wunschik.net>
 *    Joel Oughton <joeloughton@gmail.com>
 *    Nicolas Joseph <www.nicolasjoseph.com>
 *
 * website: https://github.com/mojoaxel/flot-events
 *
 * released under MIT License and GPLv2+
 */
/**
 * A class that allows for the drawing an remove of some object
 */
var DrawableEvent = /** @class */ (function () {
    /** @ngInject */
    function DrawableEvent(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {
        this._object = object;
        this._drawFunc = drawFunc;
        this._clearFunc = clearFunc;
        this._moveFunc = moveFunc;
        this._position = { left: left, top: top };
        this._width = width;
        this._height = height;
    }
    DrawableEvent.prototype.width = function () {
        return this._width;
    };
    DrawableEvent.prototype.height = function () {
        return this._height;
    };
    DrawableEvent.prototype.position = function () {
        return this._position;
    };
    DrawableEvent.prototype.draw = function () {
        this._drawFunc(this._object);
    };
    DrawableEvent.prototype.clear = function () {
        this._clearFunc(this._object);
    };
    DrawableEvent.prototype.getObject = function () {
        return this._object;
    };
    DrawableEvent.prototype.moveTo = function (position) {
        this._position = position;
        this._moveFunc(this._object, this._position);
    };
    return DrawableEvent;
}());

/**
 * Event class that stores options (eventType, min, max, title, description) and the object to draw.
 */
var VisualEvent = /** @class */ (function () {
    /** @ngInject */
    function VisualEvent(options, drawableEvent) {
        this._options = options;
        this._drawableEvent = drawableEvent;
        this._hidden = false;
    }
    VisualEvent.prototype.visual = function () {
        return this._drawableEvent;
    };
    VisualEvent.prototype.getOptions = function () {
        return this._options;
    };
    VisualEvent.prototype.getParent = function () {
        return this._parent;
    };
    VisualEvent.prototype.isHidden = function () {
        return this._hidden;
    };
    VisualEvent.prototype.hide = function () {
        this._hidden = true;
    };
    VisualEvent.prototype.unhide = function () {
        this._hidden = false;
    };
    return VisualEvent;
}());

/**
 * A Class that handles the event-markers inside the given plot
 */
var EventMarkers = /** @class */ (function () {
    /** @ngInject */
    function EventMarkers(plot) {
        this._events = [];
        this._types = [];
        this._plot = plot;
        this.eventsEnabled = false;
    }
    EventMarkers.prototype.getEvents = function () {
        return this._events;
    };
    EventMarkers.prototype.setTypes = function (types) {
        return (this._types = types);
    };
    /**
     * create internal objects for the given events
     */
    EventMarkers.prototype.setupEvents = function (events) {
        var _this = this;
        var parts = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.partition(events, 'isRegion');
        var regions = parts[0];
        events = parts[1];
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(events, function (index, event) {
            var ve = new VisualEvent(event, _this._buildDiv(event));
            _this._events.push(ve);
        });
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(regions, function (index, event) {
            var vre = new VisualEvent(event, _this._buildRegDiv(event));
            _this._events.push(vre);
        });
        this._events.sort(function (a, b) {
            var ao = a.getOptions(), bo = b.getOptions();
            if (ao.min > bo.min) {
                return 1;
            }
            if (ao.min < bo.min) {
                return -1;
            }
            return 0;
        });
    };
    /**
     * draw the events to the plot
     */
    EventMarkers.prototype.drawEvents = function () {
        // var o = this._plot.getPlotOffset();
        var _this = this;
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(this._events, function (index, event) {
            // check event is inside the graph range
            if (_this._insidePlot(event.getOptions().min) && !event.isHidden()) {
                event.visual().draw();
            }
            else {
                event
                    .visual()
                    .getObject()
                    .hide();
            }
        });
    };
    /**
     * update the position of the event-markers (e.g. after scrolling or zooming)
     */
    EventMarkers.prototype.updateEvents = function () {
        var _this = this;
        var o = this._plot.getPlotOffset();
        var left;
        var top;
        var xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(this._events, function (index, event) {
            top = o.top + _this._plot.height() - event.visual().height();
            left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;
            event.visual().moveTo({ top: top, left: left });
        });
    };
    /**
     * remove all events from the plot
     */
    EventMarkers.prototype._clearEvents = function () {
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(this._events, function (index, val) {
            val.visual().clear();
        });
        this._events = [];
    };
    /**
     * create a DOM element for the given event
     */
    EventMarkers.prototype._buildDiv = function (event) {
        var that = this;
        var container = this._plot.getPlaceholder();
        var o = this._plot.getPlotOffset();
        var xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];
        var top, left, color, markerSize, markerShow, lineStyle, lineWidth;
        var markerTooltip;
        // map the eventType to a types object
        var eventTypeId = event.eventType;
        if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {
            color = '#666';
        }
        else {
            color = this._types[eventTypeId].color;
        }
        if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {
            markerSize = 8; //default marker size
        }
        else {
            markerSize = this._types[eventTypeId].markerSize;
        }
        if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {
            markerShow = true;
        }
        else {
            markerShow = this._types[eventTypeId].markerShow;
        }
        if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {
            markerTooltip = true;
        }
        else {
            markerTooltip = this._types[eventTypeId].markerTooltip;
        }
        if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {
            lineStyle = 'dashed'; //default line style
        }
        else {
            lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();
        }
        if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {
            lineWidth = 1; //default line width
        }
        else {
            lineWidth = this._types[eventTypeId].lineWidth;
        }
        var topOffset = xaxis.options.eventSectionHeight || 0;
        topOffset = topOffset / 3;
        top = o.top + this._plot.height() + topOffset;
        left = xaxis.p2c(event.min) + o.left;
        var line = jquery__WEBPACK_IMPORTED_MODULE_1___default()('<div class="events_line flot-temp-elem"></div>')
            .css({
            position: 'absolute',
            opacity: 0.8,
            left: left + 'px',
            top: 8,
            width: lineWidth + 'px',
            height: this._plot.height() + topOffset * 0.8,
            'border-left-width': lineWidth + 'px',
            'border-left-style': lineStyle,
            'border-left-color': color,
            color: color,
        })
            .appendTo(container);
        if (markerShow) {
            var marker_1 = jquery__WEBPACK_IMPORTED_MODULE_1___default()('<div class="events_marker"></div>').css({
                position: 'absolute',
                left: -markerSize - Math.round(lineWidth / 2) + 'px',
                'font-size': 0,
                'line-height': 0,
                width: 0,
                height: 0,
                'border-left': markerSize + 'px solid transparent',
                'border-right': markerSize + 'px solid transparent',
            });
            marker_1.appendTo(line);
            if (this._types[eventTypeId] &&
                this._types[eventTypeId].position &&
                this._types[eventTypeId].position.toUpperCase() === 'BOTTOM') {
                marker_1.css({
                    top: top - markerSize - 8 + 'px',
                    'border-top': 'none',
                    'border-bottom': markerSize + 'px solid ' + color,
                });
            }
            else {
                marker_1.css({
                    top: '0px',
                    'border-top': markerSize + 'px solid ' + color,
                    'border-bottom': 'none',
                });
            }
            marker_1.data({
                event: event,
            });
            var mouseenter = function () {
                createAnnotationToolip(marker_1, jquery__WEBPACK_IMPORTED_MODULE_1___default()(this).data('event'), that._plot);
            };
            if (event.editModel) {
                createEditPopover(marker_1, event.editModel, that._plot);
            }
            var mouseleave = function () {
                that._plot.clearSelection();
            };
            if (markerTooltip) {
                marker_1.css({ cursor: 'help' });
                marker_1.hover(mouseenter, mouseleave);
            }
        }
        var drawableEvent = new DrawableEvent(line, function drawFunc(obj) {
            obj.show();
        }, function (obj) {
            obj.remove();
        }, function (obj, position) {
            obj.css({
                top: position.top,
                left: position.left,
            });
        }, left, top, line.width(), line.height());
        return drawableEvent;
    };
    /**
     * create a DOM element for the given region
     */
    EventMarkers.prototype._buildRegDiv = function (event) {
        var _this = this;
        var that = this;
        var container = this._plot.getPlaceholder();
        var o = this._plot.getPlotOffset();
        var xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];
        var top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;
        // map the eventType to a types object
        var eventTypeId = event.eventType;
        if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {
            color = '#666';
        }
        else {
            color = this._types[eventTypeId].color;
        }
        if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {
            markerTooltip = true;
        }
        else {
            markerTooltip = this._types[eventTypeId].markerTooltip;
        }
        if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {
            lineWidth = 1; //default line width
        }
        else {
            lineWidth = this._types[eventTypeId].lineWidth;
        }
        if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {
            lineStyle = 'dashed'; //default line style
        }
        else {
            lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();
        }
        var topOffset = 2;
        top = o.top + this._plot.height() + topOffset;
        var timeFrom = Math.min(event.min, event.timeEnd);
        var timeTo = Math.max(event.min, event.timeEnd);
        left = xaxis.p2c(timeFrom) + o.left;
        var right = xaxis.p2c(timeTo) + o.left;
        regionWidth = right - left;
        lodash__WEBPACK_IMPORTED_MODULE_2___default.a.each([left, right], function (position) {
            var line = jquery__WEBPACK_IMPORTED_MODULE_1___default()('<div class="events_line flot-temp-elem"></div>').css({
                position: 'absolute',
                opacity: 0.8,
                left: position + 'px',
                top: 8,
                width: lineWidth + 'px',
                height: _this._plot.height() + topOffset,
                'border-left-width': lineWidth + 'px',
                'border-left-style': lineStyle,
                'border-left-color': color,
                color: color,
            });
            line.appendTo(container);
        });
        var region = jquery__WEBPACK_IMPORTED_MODULE_1___default()('<div class="events_marker region_marker flot-temp-elem"></div>').css({
            position: 'absolute',
            opacity: 0.5,
            left: left + 'px',
            top: top,
            width: Math.round(regionWidth + lineWidth) + 'px',
            height: '0.5rem',
            'border-left-color': color,
            color: color,
            'background-color': color,
        });
        region.appendTo(container);
        region.data({
            event: event,
        });
        var mouseenter = function () {
            createAnnotationToolip(region, jquery__WEBPACK_IMPORTED_MODULE_1___default()(this).data('event'), that._plot);
        };
        if (event.editModel) {
            createEditPopover(region, event.editModel, that._plot);
        }
        var mouseleave = function () {
            that._plot.clearSelection();
        };
        if (markerTooltip) {
            region.css({ cursor: 'help' });
            region.hover(mouseenter, mouseleave);
        }
        var drawableEvent = new DrawableEvent(region, function drawFunc(obj) {
            obj.show();
        }, function (obj) {
            obj.remove();
        }, function (obj, position) {
            obj.css({
                top: position.top,
                left: position.left,
            });
        }, left, top, region.width(), region.height());
        return drawableEvent;
    };
    /**
     * check if the event is inside visible range
     */
    EventMarkers.prototype._insidePlot = function (x) {
        var xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];
        var xc = xaxis.p2c(x);
        return xc > 0 && xc < xaxis.p2c(xaxis.max);
    };
    return EventMarkers;
}());

/**
 * initialize the plugin for the given plot
 */
/** @ngInject */
function init(plot) {
    /*jshint validthis:true */
    var that = this;
    var eventMarkers = new EventMarkers(plot);
    plot.getEvents = function () {
        return eventMarkers._events;
    };
    plot.hideEvents = function () {
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(eventMarkers._events, function (index, event) {
            event
                .visual()
                .getObject()
                .hide();
        });
    };
    plot.showEvents = function () {
        plot.hideEvents();
        jquery__WEBPACK_IMPORTED_MODULE_1___default.a.each(eventMarkers._events, function (index, event) {
            event.hide();
        });
        that.eventMarkers.drawEvents();
    };
    // change events on an existing plot
    plot.setEvents = function (events) {
        if (eventMarkers.eventsEnabled) {
            eventMarkers.setupEvents(events);
        }
    };
    plot.hooks.processOptions.push(function (plot, options) {
        // enable the plugin
        if (options.events.data != null) {
            eventMarkers.eventsEnabled = true;
        }
    });
    plot.hooks.draw.push(function (plot) {
        var options = plot.getOptions();
        if (eventMarkers.eventsEnabled) {
            // check for first run
            if (eventMarkers.getEvents().length < 1) {
                eventMarkers.setTypes(options.events.types);
                eventMarkers.setupEvents(options.events.data);
            }
            else {
                eventMarkers.updateEvents();
            }
        }
        eventMarkers.drawEvents();
    });
}
var defaultOptions = {
    events: {
        data: null,
        types: null,
        xaxis: 1,
        position: 'BOTTOM',
    },
};
jquery__WEBPACK_IMPORTED_MODULE_1___default.a.plot.plugins.push({
    init: init,
    options: defaultOptions,
    name: 'events',
    version: '0.2.5',
});


/***/ }),

/***/ "./public/app/plugins/panel/graph/legend.ts":
/*!**************************************************!*\
  !*** ./public/app/plugins/panel/graph/legend.ts ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! baron */ "./node_modules/baron/src/core.js");
/* harmony import */ var baron__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(baron__WEBPACK_IMPORTED_MODULE_3__);




var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
module.directive('graphLegend', function (popoverSrv, $timeout) {
    return {
        link: function (scope, elem) {
            var firstRender = true;
            var ctrl = scope.ctrl;
            var panel = ctrl.panel;
            var data;
            var seriesList;
            var i;
            var legendScrollbar;
            var legendRightDefaultWidth = 10;
            var legendElem = elem.parent();
            scope.$on('$destroy', function () {
                destroyScrollbar();
            });
            ctrl.events.on('render-legend', function () {
                data = ctrl.seriesList;
                if (data) {
                    render();
                }
                ctrl.events.emit('legend-rendering-complete');
            });
            function getSeriesIndexForElement(el) {
                return el.parents('[data-series-index]').data('series-index');
            }
            function openColorSelector(e) {
                // if we clicked inside poup container ignore click
                if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.target).parents('.popover').length) {
                    return;
                }
                var el = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.currentTarget).find('.fa-minus');
                var index = getSeriesIndexForElement(el);
                var series = seriesList[index];
                $timeout(function () {
                    popoverSrv.show({
                        element: el[0],
                        position: 'bottom left',
                        targetAttachment: 'top left',
                        template: '<series-color-picker series="series" onToggleAxis="toggleAxis" onColorChange="colorSelected">' +
                            '</series-color-picker>',
                        openOn: 'hover',
                        model: {
                            series: series,
                            toggleAxis: function () {
                                ctrl.toggleAxis(series);
                            },
                            colorSelected: function (color) {
                                ctrl.changeSeriesColor(series, color);
                            },
                        },
                    });
                });
            }
            function toggleSeries(e) {
                var el = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.currentTarget);
                var index = getSeriesIndexForElement(el);
                var seriesInfo = seriesList[index];
                var scrollPosition = legendScrollbar.scroller.scrollTop;
                ctrl.toggleSeries(seriesInfo, e);
                legendScrollbar.scroller.scrollTop = scrollPosition;
            }
            function sortLegend(e) {
                var el = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.currentTarget);
                var stat = el.data('stat');
                if (stat !== panel.legend.sort) {
                    panel.legend.sortDesc = null;
                }
                // if already sort ascending, disable sorting
                if (panel.legend.sortDesc === false) {
                    panel.legend.sort = null;
                    panel.legend.sortDesc = null;
                    ctrl.render();
                    return;
                }
                panel.legend.sortDesc = !panel.legend.sortDesc;
                panel.legend.sort = stat;
                ctrl.render();
            }
            function getTableHeaderHtml(statName) {
                if (!panel.legend[statName]) {
                    return '';
                }
                var html = '<th class="pointer" data-stat="' + statName + '">' + statName;
                if (panel.legend.sort === statName) {
                    var cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';
                    html += ' <span class="' + cssClass + '"></span>';
                }
                return html + '</th>';
            }
            function render() {
                var legendWidth = legendElem.width();
                if (!ctrl.panel.legend.show) {
                    elem.empty();
                    firstRender = true;
                    return;
                }
                if (firstRender) {
                    elem.on('click', '.graph-legend-icon', openColorSelector);
                    elem.on('click', '.graph-legend-alias', toggleSeries);
                    elem.on('click', 'th', sortLegend);
                    firstRender = false;
                }
                seriesList = data;
                elem.empty();
                // Set min-width if side style and there is a value, otherwise remove the CSS property
                // Set width so it works with IE11
                var width = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';
                var ieWidth = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';
                legendElem.css('min-width', width);
                legendElem.css('width', ieWidth);
                elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);
                var tableHeaderElem;
                if (panel.legend.alignAsTable) {
                    var header = '<tr>';
                    header += '<th colspan="2" style="text-align:left"></th>';
                    if (panel.legend.values) {
                        header += getTableHeaderHtml('min');
                        header += getTableHeaderHtml('max');
                        header += getTableHeaderHtml('avg');
                        header += getTableHeaderHtml('current');
                        header += getTableHeaderHtml('total');
                    }
                    header += '</tr>';
                    tableHeaderElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(header);
                }
                if (panel.legend.sort) {
                    seriesList = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(seriesList, function (series) {
                        var sort = series.stats[panel.legend.sort];
                        if (sort === null) {
                            sort = -Infinity;
                        }
                        return sort;
                    });
                    if (panel.legend.sortDesc) {
                        seriesList = seriesList.reverse();
                    }
                }
                // render first time for getting proper legend height
                if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {
                    renderLegendElement(tableHeaderElem);
                    elem.empty();
                }
                renderLegendElement(tableHeaderElem);
            }
            function renderSeriesLegendElements() {
                var seriesElements = [];
                for (i = 0; i < seriesList.length; i++) {
                    var series = seriesList[i];
                    if (series.hideFromLegend(panel.legend)) {
                        continue;
                    }
                    var html = '<div class="graph-legend-series';
                    if (series.yaxis === 2) {
                        html += ' graph-legend-series--right-y';
                    }
                    if (ctrl.hiddenSeries[series.alias]) {
                        html += ' graph-legend-series-hidden';
                    }
                    html += '" data-series-index="' + i + '">';
                    html += '<div class="graph-legend-icon">';
                    html += '<i class="fa fa-minus pointer" style="color:' + series.color + '"></i>';
                    html += '</div>';
                    html +=
                        '<a class="graph-legend-alias pointer" title="' + series.aliasEscaped + '">' + series.aliasEscaped + '</a>';
                    if (panel.legend.values) {
                        var avg = series.formatValue(series.stats.avg);
                        var current = series.formatValue(series.stats.current);
                        var min = series.formatValue(series.stats.min);
                        var max = series.formatValue(series.stats.max);
                        var total = series.formatValue(series.stats.total);
                        if (panel.legend.min) {
                            html += '<div class="graph-legend-value min">' + min + '</div>';
                        }
                        if (panel.legend.max) {
                            html += '<div class="graph-legend-value max">' + max + '</div>';
                        }
                        if (panel.legend.avg) {
                            html += '<div class="graph-legend-value avg">' + avg + '</div>';
                        }
                        if (panel.legend.current) {
                            html += '<div class="graph-legend-value current">' + current + '</div>';
                        }
                        if (panel.legend.total) {
                            html += '<div class="graph-legend-value total">' + total + '</div>';
                        }
                    }
                    html += '</div>';
                    seriesElements.push(jquery__WEBPACK_IMPORTED_MODULE_2___default()(html));
                }
                return seriesElements;
            }
            function renderLegendElement(tableHeaderElem) {
                var legendWidth = elem.width();
                var seriesElements = renderSeriesLegendElements();
                if (panel.legend.alignAsTable) {
                    var tbodyElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<tbody></tbody>');
                    tbodyElem.append(tableHeaderElem);
                    tbodyElem.append(seriesElements);
                    elem.append(tbodyElem);
                    tbodyElem.wrap('<div class="graph-legend-scroll"></div>');
                }
                else {
                    elem.append('<div class="graph-legend-scroll"></div>');
                    elem.find('.graph-legend-scroll').append(seriesElements);
                }
                if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {
                    addScrollbar();
                }
                else {
                    destroyScrollbar();
                }
            }
            function addScrollbar() {
                var scrollRootClass = 'baron baron__root';
                var scrollerClass = 'baron__scroller';
                var scrollBarHTML = "\n          <div class=\"baron__track\">\n            <div class=\"baron__bar\"></div>\n          </div>\n        ";
                var scrollRoot = elem;
                var scroller = elem.find('.graph-legend-scroll');
                // clear existing scroll bar track to prevent duplication
                scrollRoot.find('.baron__track').remove();
                scrollRoot.addClass(scrollRootClass);
                jquery__WEBPACK_IMPORTED_MODULE_2___default()(scrollBarHTML).appendTo(scrollRoot);
                scroller.addClass(scrollerClass);
                var scrollbarParams = {
                    root: scrollRoot[0],
                    scroller: scroller[0],
                    bar: '.baron__bar',
                    track: '.baron__track',
                    barOnCls: '_scrollbar',
                    scrollingCls: '_scrolling',
                };
                if (!legendScrollbar) {
                    legendScrollbar = baron__WEBPACK_IMPORTED_MODULE_3___default()(scrollbarParams);
                }
                else {
                    destroyScrollbar();
                    legendScrollbar = baron__WEBPACK_IMPORTED_MODULE_3___default()(scrollbarParams);
                }
                // #11830 - compensates for Firefox scrollbar calculation error in the baron framework
                scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';
                legendScrollbar.scroll();
            }
            function destroyScrollbar() {
                if (legendScrollbar) {
                    legendScrollbar.dispose();
                    legendScrollbar = undefined;
                }
            }
        },
    };
});


/***/ }),

/***/ "./public/app/plugins/panel/graph/module.ts":
/*!**************************************************!*\
  !*** ./public/app/plugins/panel/graph/module.ts ***!
  \**************************************************/
/*! exports provided: GraphCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphCtrl", function() { return GraphCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return GraphCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graph */ "./public/app/plugins/panel/graph/graph.ts");
/* harmony import */ var _legend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legend */ "./public/app/plugins/panel/graph/legend.ts");
/* harmony import */ var _series_overrides_ctrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./series_overrides_ctrl */ "./public/app/plugins/panel/graph/series_overrides_ctrl.ts");
/* harmony import */ var _thresholds_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thresholds_form */ "./public/app/plugins/panel/graph/thresholds_form.ts");
/* harmony import */ var _template__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./template */ "./public/app/plugins/panel/graph/template.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var _data_processor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./data_processor */ "./public/app/plugins/panel/graph/data_processor.ts");
/* harmony import */ var _axes_editor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./axes_editor */ "./public/app/plugins/panel/graph/axes_editor.ts");











var GraphCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](GraphCtrl, _super);
    /** @ngInject */
    function GraphCtrl($scope, $injector, annotationsSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.annotationsSrv = annotationsSrv;
        _this.hiddenSeries = {};
        _this.seriesList = [];
        _this.dataList = [];
        _this.annotations = [];
        _this.colors = [];
        _this.panelDefaults = {
            // datasource name, null = default datasource
            datasource: null,
            // sets client side (flot) or native graphite png renderer (png)
            renderer: 'flot',
            yaxes: [
                {
                    label: null,
                    show: true,
                    logBase: 1,
                    min: null,
                    max: null,
                    format: 'short',
                },
                {
                    label: null,
                    show: true,
                    logBase: 1,
                    min: null,
                    max: null,
                    format: 'short',
                },
            ],
            xaxis: {
                show: true,
                mode: 'time',
                name: null,
                values: [],
                buckets: null,
            },
            yaxis: {
                align: false,
                alignLevel: null,
            },
            // show/hide lines
            lines: true,
            // fill factor
            fill: 1,
            // line width in pixels
            linewidth: 1,
            // show/hide dashed line
            dashes: false,
            // length of a dash
            dashLength: 10,
            // length of space between two dashes
            spaceLength: 10,
            // show hide points
            points: false,
            // point radius in pixels
            pointradius: 5,
            // show hide bars
            bars: false,
            // enable/disable stacking
            stack: false,
            // stack percentage mode
            percentage: false,
            // legend options
            legend: {
                show: true,
                values: false,
                min: false,
                max: false,
                current: false,
                total: false,
                avg: false,
            },
            // how null points should be handled
            nullPointMode: 'null',
            // staircase line mode
            steppedLine: false,
            // tooltip options
            tooltip: {
                value_type: 'individual',
                shared: true,
                sort: 0,
            },
            // time overrides
            timeFrom: null,
            timeShift: null,
            // metric queries
            targets: [{}],
            // series color overrides
            aliasColors: {},
            // other style overrides
            seriesOverrides: [],
            thresholds: [],
        };
        lodash__WEBPACK_IMPORTED_MODULE_6___default.a.defaults(_this.panel, _this.panelDefaults);
        lodash__WEBPACK_IMPORTED_MODULE_6___default.a.defaults(_this.panel.tooltip, _this.panelDefaults.tooltip);
        lodash__WEBPACK_IMPORTED_MODULE_6___default.a.defaults(_this.panel.legend, _this.panelDefaults.legend);
        lodash__WEBPACK_IMPORTED_MODULE_6___default.a.defaults(_this.panel.xaxis, _this.panelDefaults.xaxis);
        _this.processor = new _data_processor__WEBPACK_IMPORTED_MODULE_9__["DataProcessor"](_this.panel);
        _this.events.on('render', _this.onRender.bind(_this));
        _this.events.on('data-received', _this.onDataReceived.bind(_this));
        _this.events.on('data-error', _this.onDataError.bind(_this));
        _this.events.on('data-snapshot-load', _this.onDataSnapshotLoad.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.events.on('init-panel-actions', _this.onInitPanelActions.bind(_this));
        return _this;
    }
    GraphCtrl.prototype.onInitEditMode = function () {
        this.addEditorTab('Axes', _axes_editor__WEBPACK_IMPORTED_MODULE_10__["axesEditorComponent"], 2);
        this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 3);
        this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html', 4);
        if (app_core_config__WEBPACK_IMPORTED_MODULE_7__["default"].alertingEnabled) {
            this.addEditorTab('Alert', app_plugins_sdk__WEBPACK_IMPORTED_MODULE_8__["alertTab"], 5);
        }
        this.subTabIndex = 0;
    };
    GraphCtrl.prototype.onInitPanelActions = function (actions) {
        actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });
        actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()' });
    };
    GraphCtrl.prototype.issueQueries = function (datasource) {
        this.annotationsPromise = this.annotationsSrv.getAnnotations({
            dashboard: this.dashboard,
            panel: this.panel,
            range: this.range,
        });
        return _super.prototype.issueQueries.call(this, datasource);
    };
    GraphCtrl.prototype.zoomOut = function (evt) {
        this.publishAppEvent('zoom-out', 2);
    };
    GraphCtrl.prototype.onDataSnapshotLoad = function (snapshotData) {
        this.annotationsPromise = this.annotationsSrv.getAnnotations({
            dashboard: this.dashboard,
            panel: this.panel,
            range: this.range,
        });
        this.onDataReceived(snapshotData);
    };
    GraphCtrl.prototype.onDataError = function (err) {
        this.seriesList = [];
        this.annotations = [];
        this.render([]);
    };
    GraphCtrl.prototype.onDataReceived = function (dataList) {
        var _this = this;
        this.dataList = dataList;
        this.seriesList = this.processor.getSeriesList({
            dataList: dataList,
            range: this.range,
        });
        this.dataWarning = null;
        var datapointsCount = this.seriesList.reduce(function (prev, series) {
            return prev + series.datapoints.length;
        }, 0);
        if (datapointsCount === 0) {
            this.dataWarning = {
                title: 'No data points',
                tip: 'No datapoints returned from data query',
            };
        }
        else {
            for (var _i = 0, _a = this.seriesList; _i < _a.length; _i++) {
                var series = _a[_i];
                if (series.isOutsideRange) {
                    this.dataWarning = {
                        title: 'Data points outside time range',
                        tip: 'Can be caused by timezone mismatch or missing time filter in query',
                    };
                    break;
                }
            }
        }
        this.annotationsPromise.then(function (result) {
            _this.loading = false;
            _this.alertState = result.alertState;
            _this.annotations = result.annotations;
            _this.render(_this.seriesList);
        }, function () {
            _this.loading = false;
            _this.render(_this.seriesList);
        });
    };
    GraphCtrl.prototype.onRender = function () {
        if (!this.seriesList) {
            return;
        }
        for (var _i = 0, _a = this.seriesList; _i < _a.length; _i++) {
            var series = _a[_i];
            series.applySeriesOverrides(this.panel.seriesOverrides);
            if (series.unit) {
                this.panel.yaxes[series.yaxis - 1].format = series.unit;
            }
        }
    };
    GraphCtrl.prototype.changeSeriesColor = function (series, color) {
        series.setColor(color);
        this.panel.aliasColors[series.alias] = series.color;
        this.render();
    };
    GraphCtrl.prototype.toggleSeries = function (serie, event) {
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (this.hiddenSeries[serie.alias]) {
                delete this.hiddenSeries[serie.alias];
            }
            else {
                this.hiddenSeries[serie.alias] = true;
            }
        }
        else {
            this.toggleSeriesExclusiveMode(serie);
        }
        this.render();
    };
    GraphCtrl.prototype.toggleSeriesExclusiveMode = function (serie) {
        var _this = this;
        var hidden = this.hiddenSeries;
        if (hidden[serie.alias]) {
            delete hidden[serie.alias];
        }
        // check if every other series is hidden
        var alreadyExclusive = lodash__WEBPACK_IMPORTED_MODULE_6___default.a.every(this.seriesList, function (value) {
            if (value.alias === serie.alias) {
                return true;
            }
            return hidden[value.alias];
        });
        if (alreadyExclusive) {
            // remove all hidden series
            lodash__WEBPACK_IMPORTED_MODULE_6___default.a.each(this.seriesList, function (value) {
                delete _this.hiddenSeries[value.alias];
            });
        }
        else {
            // hide all but this serie
            lodash__WEBPACK_IMPORTED_MODULE_6___default.a.each(this.seriesList, function (value) {
                if (value.alias === serie.alias) {
                    return;
                }
                _this.hiddenSeries[value.alias] = true;
            });
        }
    };
    GraphCtrl.prototype.toggleAxis = function (info) {
        var override = lodash__WEBPACK_IMPORTED_MODULE_6___default.a.find(this.panel.seriesOverrides, { alias: info.alias });
        if (!override) {
            override = { alias: info.alias };
            this.panel.seriesOverrides.push(override);
        }
        info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;
        this.render();
    };
    GraphCtrl.prototype.addSeriesOverride = function (override) {
        this.panel.seriesOverrides.push(override || {});
    };
    GraphCtrl.prototype.removeSeriesOverride = function (override) {
        this.panel.seriesOverrides = lodash__WEBPACK_IMPORTED_MODULE_6___default.a.without(this.panel.seriesOverrides, override);
        this.render();
    };
    GraphCtrl.prototype.toggleLegend = function () {
        this.panel.legend.show = !this.panel.legend.show;
        this.refresh();
    };
    GraphCtrl.prototype.legendValuesOptionChanged = function () {
        var legend = this.panel.legend;
        legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;
        this.render();
    };
    GraphCtrl.prototype.exportCsv = function () {
        var scope = this.$scope.$new(true);
        scope.seriesList = this.seriesList;
        this.publishAppEvent('show-modal', {
            templateHtml: '<export-data-modal data="seriesList"></export-data-modal>',
            scope: scope,
            modalClass: 'modal--narrow',
        });
    };
    GraphCtrl.template = _template__WEBPACK_IMPORTED_MODULE_5__["default"];
    return GraphCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_8__["MetricsPanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/graph/series_overrides_ctrl.ts":
/*!*****************************************************************!*\
  !*** ./public/app/plugins/panel/graph/series_overrides_ctrl.ts ***!
  \*****************************************************************/
/*! exports provided: SeriesOverridesCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SeriesOverridesCtrl", function() { return SeriesOverridesCtrl; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_1__);


/** @ngInject */
function SeriesOverridesCtrl($scope, $element, popoverSrv) {
    $scope.overrideMenu = [];
    $scope.currentOverrides = [];
    $scope.override = $scope.override || {};
    $scope.addOverrideOption = function (name, propertyName, values) {
        var option = {
            text: name,
            propertyName: propertyName,
            index: $scope.overrideMenu.lenght,
            values: values,
            submenu: lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(values, function (value) {
                return { text: String(value), value: value };
            }),
        };
        $scope.overrideMenu.push(option);
    };
    $scope.setOverride = function (item, subItem) {
        // handle color overrides
        if (item.propertyName === 'color') {
            $scope.openColorSelector($scope.override['color']);
            return;
        }
        $scope.override[item.propertyName] = subItem.value;
        // automatically disable lines for this series and the fill below to series
        // can be removed by the user if they still want lines
        if (item.propertyName === 'fillBelowTo') {
            $scope.override['lines'] = false;
            $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });
        }
        $scope.updateCurrentOverrides();
        $scope.ctrl.render();
    };
    $scope.colorSelected = function (color) {
        $scope.override['color'] = color;
        $scope.updateCurrentOverrides();
        $scope.ctrl.render();
    };
    $scope.openColorSelector = function (color) {
        var fakeSeries = { color: color };
        popoverSrv.show({
            element: $element.find('.dropdown')[0],
            position: 'top center',
            openOn: 'click',
            template: '<series-color-picker series="series" onColorChange="colorSelected" />',
            model: {
                autoClose: true,
                colorSelected: $scope.colorSelected,
                series: fakeSeries,
            },
            onClose: function () {
                $scope.ctrl.render();
            },
        });
    };
    $scope.removeOverride = function (option) {
        delete $scope.override[option.propertyName];
        $scope.updateCurrentOverrides();
        $scope.ctrl.refresh();
    };
    $scope.getSeriesNames = function () {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map($scope.ctrl.seriesList, function (series) {
            return series.alias;
        });
    };
    $scope.updateCurrentOverrides = function () {
        $scope.currentOverrides = [];
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.each($scope.overrideMenu, function (option) {
            var value = $scope.override[option.propertyName];
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isUndefined(value)) {
                return;
            }
            $scope.currentOverrides.push({
                name: option.text,
                propertyName: option.propertyName,
                value: String(value),
            });
        });
    };
    $scope.addOverrideOption('Bars', 'bars', [true, false]);
    $scope.addOverrideOption('Lines', 'lines', [true, false]);
    $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);
    $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());
    $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);
    $scope.addOverrideOption('Dashes', 'dashes', [true, false]);
    $scope.addOverrideOption('Dash Length', 'dashLength', [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
    ]);
    $scope.addOverrideOption('Dash Space', 'spaceLength', [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
    ]);
    $scope.addOverrideOption('Points', 'points', [true, false]);
    $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);
    $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);
    $scope.addOverrideOption('Color', 'color', ['change']);
    $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);
    $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);
    $scope.addOverrideOption('Transform', 'transform', ['negative-Y']);
    $scope.addOverrideOption('Legend', 'legend', [true, false]);
    $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);
    $scope.updateCurrentOverrides();
}
angular__WEBPACK_IMPORTED_MODULE_1___default.a.module('grafana.controllers').controller('SeriesOverridesCtrl', SeriesOverridesCtrl);


/***/ }),

/***/ "./public/app/plugins/panel/graph/template.ts":
/*!****************************************************!*\
  !*** ./public/app/plugins/panel/graph/template.ts ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var template = "\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n</div>\n";
/* harmony default export */ __webpack_exports__["default"] = (template);


/***/ }),

/***/ "./public/app/plugins/panel/graph/threshold_manager.ts":
/*!*************************************************************!*\
  !*** ./public/app/plugins/panel/graph/threshold_manager.ts ***!
  \*************************************************************/
/*! exports provided: ThresholdManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThresholdManager", function() { return ThresholdManager; });
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vendor/flot/jquery.flot */ "./public/vendor/flot/jquery.flot.js");
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);



var ThresholdManager = /** @class */ (function () {
    function ThresholdManager(panelCtrl) {
        this.panelCtrl = panelCtrl;
    }
    ThresholdManager.prototype.getHandleHtml = function (handleIndex, model, valueStr) {
        var stateClass = model.colorMode;
        if (model.colorMode === 'custom') {
            stateClass = 'critical';
        }
        return "\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T" + handleIndex + "\">\n      <div class=\"alert-handle-line alert-handle-line--" + stateClass + "\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"" + handleIndex + "\">\n        <i class=\"icon-gf icon-gf-" + stateClass + " alert-state-" + stateClass + "\"></i>\n        <span class=\"alert-handle-value\">" + valueStr + "<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>";
    };
    ThresholdManager.prototype.initDragging = function (evt) {
        var handleElem = jquery__WEBPACK_IMPORTED_MODULE_1___default()(evt.currentTarget).parents('.alert-handle-wrapper');
        var handleIndex = jquery__WEBPACK_IMPORTED_MODULE_1___default()(evt.currentTarget).data('handleIndex');
        var lastY = null;
        var posTop;
        var plot = this.plot;
        var panelCtrl = this.panelCtrl;
        var model = this.thresholds[handleIndex];
        function dragging(evt) {
            if (lastY === null) {
                lastY = evt.clientY;
            }
            else {
                var diff = evt.clientY - lastY;
                posTop = posTop + diff;
                lastY = evt.clientY;
                handleElem.css({ top: posTop + diff });
            }
        }
        function stopped() {
            // calculate graph level
            var graphValue = plot.c2p({ left: 0, top: posTop }).y;
            graphValue = parseInt(graphValue.toFixed(0), 10);
            model.value = graphValue;
            handleElem.off('mousemove', dragging);
            handleElem.off('mouseup', dragging);
            handleElem.off('mouseleave', dragging);
            // trigger digest and render
            panelCtrl.$scope.$apply(function () {
                panelCtrl.render();
                panelCtrl.events.emit('threshold-changed', {
                    threshold: model,
                    handleIndex: handleIndex,
                });
            });
        }
        lastY = null;
        posTop = handleElem.position().top;
        handleElem.on('mousemove', dragging);
        handleElem.on('mouseup', stopped);
        handleElem.on('mouseleave', stopped);
    };
    ThresholdManager.prototype.cleanUp = function () {
        this.placeholder.find('.alert-handle-wrapper').remove();
        this.needsCleanup = false;
    };
    ThresholdManager.prototype.renderHandle = function (handleIndex, defaultHandleTopPos) {
        var model = this.thresholds[handleIndex];
        var value = model.value;
        var valueStr = value;
        var handleTopPos = 0;
        // handle no value
        if (!lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isNumber(value)) {
            valueStr = '';
            handleTopPos = defaultHandleTopPos;
        }
        else {
            var valueCanvasPos = this.plot.p2c({ x: 0, y: value });
            handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);
        }
        var handleElem = jquery__WEBPACK_IMPORTED_MODULE_1___default()(this.getHandleHtml(handleIndex, model, valueStr));
        this.placeholder.append(handleElem);
        handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');
        handleElem.css({ top: handleTopPos });
    };
    ThresholdManager.prototype.shouldDrawHandles = function () {
        return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;
    };
    ThresholdManager.prototype.prepare = function (elem, data) {
        this.hasSecondYAxis = false;
        for (var i = 0; i < data.length; i++) {
            if (data[i].yaxis > 1) {
                this.hasSecondYAxis = true;
                break;
            }
        }
        if (this.shouldDrawHandles()) {
            var thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';
            elem.css('margin-right', thresholdMargin);
        }
        else if (this.needsCleanup) {
            elem.css('margin-right', '0');
        }
    };
    ThresholdManager.prototype.draw = function (plot) {
        this.thresholds = this.panelCtrl.panel.thresholds;
        this.plot = plot;
        this.placeholder = plot.getPlaceholder();
        if (this.needsCleanup) {
            this.cleanUp();
        }
        if (!this.shouldDrawHandles()) {
            return;
        }
        this.height = plot.height();
        if (this.thresholds.length > 0) {
            this.renderHandle(0, 10);
        }
        if (this.thresholds.length > 1) {
            this.renderHandle(1, this.height - 30);
        }
        this.placeholder.off('mousedown', '.alert-handle');
        this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));
        this.needsCleanup = true;
    };
    ThresholdManager.prototype.addFlotOptions = function (options, panel) {
        if (!panel.thresholds || panel.thresholds.length === 0) {
            return;
        }
        var gtLimit = Infinity;
        var ltLimit = -Infinity;
        var i, threshold, other;
        for (i = 0; i < panel.thresholds.length; i++) {
            threshold = panel.thresholds[i];
            if (!lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isNumber(threshold.value)) {
                continue;
            }
            var limit = void 0;
            switch (threshold.op) {
                case 'gt': {
                    limit = gtLimit;
                    // if next threshold is less then op and greater value, then use that as limit
                    if (panel.thresholds.length > i + 1) {
                        other = panel.thresholds[i + 1];
                        if (other.value > threshold.value) {
                            limit = other.value;
                            ltLimit = limit;
                        }
                    }
                    break;
                }
                case 'lt': {
                    limit = ltLimit;
                    // if next threshold is less then op and greater value, then use that as limit
                    if (panel.thresholds.length > i + 1) {
                        other = panel.thresholds[i + 1];
                        if (other.value < threshold.value) {
                            limit = other.value;
                            gtLimit = limit;
                        }
                    }
                    break;
                }
            }
            var fillColor = void 0, lineColor = void 0;
            switch (threshold.colorMode) {
                case 'critical': {
                    fillColor = 'rgba(234, 112, 112, 0.12)';
                    lineColor = 'rgba(237, 46, 24, 0.60)';
                    break;
                }
                case 'warning': {
                    fillColor = 'rgba(235, 138, 14, 0.12)';
                    lineColor = 'rgba(247, 149, 32, 0.60)';
                    break;
                }
                case 'ok': {
                    fillColor = 'rgba(11, 237, 50, 0.090)';
                    lineColor = 'rgba(6,163,69, 0.60)';
                    break;
                }
                case 'custom': {
                    fillColor = threshold.fillColor;
                    lineColor = threshold.lineColor;
                    break;
                }
            }
            // fill
            if (threshold.fill) {
                if (threshold.yaxis === 'right' && this.hasSecondYAxis) {
                    options.grid.markings.push({
                        y2axis: { from: threshold.value, to: limit },
                        color: fillColor,
                    });
                }
                else {
                    options.grid.markings.push({
                        yaxis: { from: threshold.value, to: limit },
                        color: fillColor,
                    });
                }
            }
            if (threshold.line) {
                if (threshold.yaxis === 'right' && this.hasSecondYAxis) {
                    options.grid.markings.push({
                        y2axis: { from: threshold.value, to: threshold.value },
                        color: lineColor,
                    });
                }
                else {
                    options.grid.markings.push({
                        yaxis: { from: threshold.value, to: threshold.value },
                        color: lineColor,
                    });
                }
            }
        }
    };
    return ThresholdManager;
}());



/***/ }),

/***/ "./public/app/plugins/panel/graph/thresholds_form.ts":
/*!***********************************************************!*\
  !*** ./public/app/plugins/panel/graph/thresholds_form.ts ***!
  \***********************************************************/
/*! exports provided: ThresholdFormCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThresholdFormCtrl", function() { return ThresholdFormCtrl; });
/* harmony import */ var app_core_core_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/core_module */ "./public/app/core/core_module.ts");

var ThresholdFormCtrl = /** @class */ (function () {
    /** @ngInject */
    function ThresholdFormCtrl($scope) {
        var _this = this;
        this.panel = this.panelCtrl.panel;
        if (this.panel.alert) {
            this.disabled = true;
        }
        var unbindDestroy = $scope.$on('$destroy', function () {
            _this.panelCtrl.editingThresholds = false;
            _this.panelCtrl.render();
            unbindDestroy();
        });
        this.panelCtrl.editingThresholds = true;
    }
    ThresholdFormCtrl.prototype.addThreshold = function () {
        this.panel.thresholds.push({
            value: undefined,
            colorMode: 'critical',
            op: 'gt',
            fill: true,
            line: true,
            yaxis: 'left',
        });
        this.panelCtrl.render();
    };
    ThresholdFormCtrl.prototype.removeThreshold = function (index) {
        this.panel.thresholds.splice(index, 1);
        this.panelCtrl.render();
    };
    ThresholdFormCtrl.prototype.render = function () {
        this.panelCtrl.render();
    };
    ThresholdFormCtrl.prototype.onFillColorChange = function (index) {
        var _this = this;
        return function (newColor) {
            _this.panel.thresholds[index].fillColor = newColor;
            _this.render();
        };
    };
    ThresholdFormCtrl.prototype.onLineColorChange = function (index) {
        var _this = this;
        return function (newColor) {
            _this.panel.thresholds[index].lineColor = newColor;
            _this.render();
        };
    };
    return ThresholdFormCtrl;
}());

var template = "\n<div class=\"gf-form-group\">\n  <h5>Thresholds</h5>\n  <p class=\"muted\" ng-show=\"ctrl.disabled\">\n    Visual thresholds options <strong>disabled.</strong>\n    Visit the Alert tab update your thresholds. <br>\n    To re-enable thresholds, the alert rule must be deleted from this panel.\n  </p>\n  <div ng-class=\"{'thresholds-form-disabled': ctrl.disabled}\">\n    <div class=\"gf-form-inline\" ng-repeat=\"threshold in ctrl.panel.thresholds\">\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">T{{$index+1}}</label>\n      </div>\n\n      <div class=\"gf-form\">\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.op\"\n                  ng-options=\"f for f in ['gt', 'lt']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></select>\n        </div>\n        <input type=\"number\" ng-model=\"threshold.value\" class=\"gf-form-input width-8\"\n               ng-change=\"ctrl.render()\" placeholder=\"value\" ng-disabled=\"ctrl.disabled\">\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Color</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.colorMode\"\n                  ng-options=\"f for f in ['custom', 'critical', 'warning', 'ok']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Fill\" checked=\"threshold.fill\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.fill && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">Fill color</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.fillColor\" onChange=\"ctrl.onFillColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Line\" checked=\"threshold.line\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.line && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">Line color</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.lineColor\" onChange=\"ctrl.onLineColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Y-Axis</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.yaxis\"\n                  ng-init=\"threshold.yaxis = threshold.yaxis === 'left' || threshold.yaxis === 'right' ? threshold.yaxis : 'left'\"\n                  ng-options=\"f for f in ['left', 'right']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">\n          <a class=\"pointer\" ng-click=\"ctrl.removeThreshold($index)\" ng-disabled=\"ctrl.disabled\">\n            <i class=\"fa fa-trash\"></i>\n          </a>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row\">\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.addThreshold()\" ng-disabled=\"ctrl.disabled\">\n        <i class=\"fa fa-plus\"></i>&nbsp;Add Threshold\n      </button>\n    </div>\n  </div>\n</div>\n";
app_core_core_module__WEBPACK_IMPORTED_MODULE_0__["default"].directive('graphThresholdForm', function () {
    return {
        restrict: 'E',
        template: template,
        controller: ThresholdFormCtrl,
        bindToController: true,
        controllerAs: 'ctrl',
        scope: {
            panelCtrl: '=',
        },
    };
});


/***/ }),

/***/ "./public/app/plugins/panel/heatmap/axes_editor.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/axes_editor.ts ***!
  \*********************************************************/
/*! exports provided: AxesEditorCtrl, axesEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxesEditorCtrl", function() { return AxesEditorCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "axesEditor", function() { return axesEditor; });
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");

var AxesEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function AxesEditorCtrl($scope, uiSegmentSrv) {
        $scope.editor = this;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.unitFormats = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_0__["default"].getUnitFormats();
        this.logScales = {
            linear: 1,
            'log (base 2)': 2,
            'log (base 10)': 10,
            'log (base 32)': 32,
            'log (base 1024)': 1024,
        };
        this.dataFormats = {
            'Time series': 'timeseries',
            'Time series buckets': 'tsbuckets',
        };
        this.yBucketBoundModes = {
            Auto: 'auto',
            Upper: 'upper',
            Lower: 'lower',
        };
    }
    AxesEditorCtrl.prototype.setUnitFormat = function (subItem) {
        this.panel.yAxis.format = subItem.value;
        this.panelCtrl.render();
    };
    return AxesEditorCtrl;
}());

/** @ngInject */
function axesEditor() {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/plugins/panel/heatmap/partials/axes_editor.html',
        controller: AxesEditorCtrl,
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/heatmap/color_legend.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/color_legend.ts ***!
  \**********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! angular */ "./node_modules/angular/index.js");
/* harmony import */ var angular__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(angular__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/utils/ticks */ "./public/app/core/utils/ticks.ts");
/* harmony import */ var _color_scale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./color_scale */ "./public/app/plugins/panel/heatmap/color_scale.ts");







var module = angular__WEBPACK_IMPORTED_MODULE_0___default.a.module('grafana.directives');
var LEGEND_HEIGHT_PX = 6;
var LEGEND_WIDTH_PX = 100;
var LEGEND_TICK_SIZE = 0;
var LEGEND_VALUE_MARGIN = 0;
/**
 * Color legend for heatmap editor.
 */
module.directive('colorLegend', function () {
    return {
        restrict: 'E',
        template: '<div class="heatmap-color-legend"><svg width="16.5rem" height="24px"></svg></div>',
        link: function (scope, elem, attrs) {
            var ctrl = scope.ctrl;
            var panel = scope.ctrl.panel;
            render();
            ctrl.events.on('render', function () {
                render();
            });
            function render() {
                var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
                var legendWidth = Math.floor(legendElem.outerWidth());
                if (panel.color.mode === 'spectrum') {
                    var colorScheme = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(ctrl.colorSchemes, {
                        value: panel.color.colorScheme,
                    });
                    var colorScale = Object(_color_scale__WEBPACK_IMPORTED_MODULE_6__["getColorScale"])(colorScheme, app_core_core__WEBPACK_IMPORTED_MODULE_4__["contextSrv"].user.lightTheme, legendWidth);
                    drawSimpleColorLegend(elem, colorScale);
                }
                else if (panel.color.mode === 'opacity') {
                    var colorOptions = panel.color;
                    drawSimpleOpacityLegend(elem, colorOptions);
                }
            }
        },
    };
});
/**
 * Heatmap legend with scale values.
 */
module.directive('heatmapLegend', function () {
    return {
        restrict: 'E',
        template: "<div class=\"heatmap-color-legend\"><svg width=\"" + LEGEND_WIDTH_PX + "px\" height=\"" + LEGEND_HEIGHT_PX + "px\"></svg></div>",
        link: function (scope, elem, attrs) {
            var ctrl = scope.ctrl;
            var panel = scope.ctrl.panel;
            render();
            ctrl.events.on('render', function () {
                render();
            });
            function render() {
                clearLegend(elem);
                if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(ctrl.data) && !lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(ctrl.data.cards)) {
                    var rangeFrom = 0;
                    var rangeTo = ctrl.data.cardStats.max;
                    var maxValue = panel.color.max || rangeTo;
                    var minValue = panel.color.min || 0;
                    if (panel.color.mode === 'spectrum') {
                        var colorScheme = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(ctrl.colorSchemes, {
                            value: panel.color.colorScheme,
                        });
                        drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);
                    }
                    else if (panel.color.mode === 'opacity') {
                        var colorOptions = panel.color;
                        drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);
                    }
                }
            }
        },
    };
});
function drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    var legend = d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0));
    clearLegend(elem);
    var legendWidth = Math.floor(legendElem.outerWidth()) - 30;
    var legendHeight = legendElem.attr('height');
    var rangeStep = 1;
    if (rangeTo - rangeFrom > legendWidth) {
        rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);
    }
    var widthFactor = legendWidth / (rangeTo - rangeFrom);
    var valuesRange = d3__WEBPACK_IMPORTED_MODULE_3__["range"](rangeFrom, rangeTo, rangeStep);
    var colorScale = Object(_color_scale__WEBPACK_IMPORTED_MODULE_6__["getColorScale"])(colorScheme, app_core_core__WEBPACK_IMPORTED_MODULE_4__["contextSrv"].user.lightTheme, maxValue, minValue);
    legend
        .selectAll('.heatmap-color-legend-rect')
        .data(valuesRange)
        .enter()
        .append('rect')
        .attr('x', function (d) { return d * widthFactor; })
        .attr('y', 0)
        .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps
        .attr('height', legendHeight)
        .attr('stroke-width', 0)
        .attr('fill', function (d) { return colorScale(d); });
    drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);
}
function drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    var legend = d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0));
    clearLegend(elem);
    var legendWidth = Math.floor(legendElem.outerWidth()) - 30;
    var legendHeight = legendElem.attr('height');
    var rangeStep = 1;
    if (rangeTo - rangeFrom > legendWidth) {
        rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);
    }
    var widthFactor = legendWidth / (rangeTo - rangeFrom);
    var valuesRange = d3__WEBPACK_IMPORTED_MODULE_3__["range"](rangeFrom, rangeTo, rangeStep);
    var opacityScale = Object(_color_scale__WEBPACK_IMPORTED_MODULE_6__["getOpacityScale"])(options, maxValue, minValue);
    legend
        .selectAll('.heatmap-opacity-legend-rect')
        .data(valuesRange)
        .enter()
        .append('rect')
        .attr('x', function (d) { return d * widthFactor; })
        .attr('y', 0)
        .attr('width', rangeStep * widthFactor)
        .attr('height', legendHeight)
        .attr('stroke-width', 0)
        .attr('fill', options.cardColor)
        .style('opacity', function (d) { return opacityScale(d); });
    drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);
}
function drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    var legend = d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0));
    if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {
        return;
    }
    var legendValueScale = d3__WEBPACK_IMPORTED_MODULE_3__["scaleLinear"]()
        .domain([0, rangeTo])
        .range([0, legendWidth]);
    var ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);
    var xAxis = d3__WEBPACK_IMPORTED_MODULE_3__["axisBottom"](legendValueScale)
        .tickValues(ticks)
        .tickSize(LEGEND_TICK_SIZE);
    var colorRect = legendElem.find(':first-child');
    var posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;
    var posX = getSvgElemX(colorRect);
    d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0))
        .append('g')
        .attr('class', 'axis')
        .attr('transform', 'translate(' + posX + ',' + posY + ')')
        .call(xAxis);
    legend
        .select('.axis')
        .select('.domain')
        .remove();
}
function drawSimpleColorLegend(elem, colorScale) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    clearLegend(elem);
    var legendWidth = Math.floor(legendElem.outerWidth());
    var legendHeight = legendElem.attr('height');
    if (legendWidth) {
        var valuesNumber = Math.floor(legendWidth / 2);
        var rangeStep = Math.floor(legendWidth / valuesNumber);
        var valuesRange = d3__WEBPACK_IMPORTED_MODULE_3__["range"](0, legendWidth, rangeStep);
        var legend = d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0));
        var legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);
        legendRects
            .enter()
            .append('rect')
            .attr('x', function (d) { return d; })
            .attr('y', 0)
            .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps
            .attr('height', legendHeight)
            .attr('stroke-width', 0)
            .attr('fill', function (d) { return colorScale(d); });
    }
}
function drawSimpleOpacityLegend(elem, options) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    clearLegend(elem);
    var legend = d3__WEBPACK_IMPORTED_MODULE_3__["select"](legendElem.get(0));
    var legendWidth = Math.floor(legendElem.outerWidth());
    var legendHeight = legendElem.attr('height');
    if (legendWidth) {
        var legendOpacityScale_1;
        if (options.colorScale === 'linear') {
            legendOpacityScale_1 = d3__WEBPACK_IMPORTED_MODULE_3__["scaleLinear"]()
                .domain([0, legendWidth])
                .range([0, 1]);
        }
        else if (options.colorScale === 'sqrt') {
            legendOpacityScale_1 = d3__WEBPACK_IMPORTED_MODULE_3__["scalePow"]()
                .exponent(options.exponent)
                .domain([0, legendWidth])
                .range([0, 1]);
        }
        var rangeStep = 10;
        var valuesRange = d3__WEBPACK_IMPORTED_MODULE_3__["range"](0, legendWidth, rangeStep);
        var legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);
        legendRects
            .enter()
            .append('rect')
            .attr('x', function (d) { return d; })
            .attr('y', 0)
            .attr('width', rangeStep)
            .attr('height', legendHeight)
            .attr('stroke-width', 0)
            .attr('fill', options.cardColor)
            .style('opacity', function (d) { return legendOpacityScale_1(d); });
    }
}
function clearLegend(elem) {
    var legendElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()(elem).find('svg');
    legendElem.empty();
}
function getSvgElemX(elem) {
    var svgElem = elem.get(0);
    if (svgElem && svgElem.x && svgElem.x.baseVal) {
        return svgElem.x.baseVal.value;
    }
    else {
        return 0;
    }
}
function getSvgElemHeight(elem) {
    var svgElem = elem.get(0);
    if (svgElem && svgElem.height && svgElem.height.baseVal) {
        return svgElem.height.baseVal.value;
    }
    else {
        return 0;
    }
}
function buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {
    var range = rangeTo - rangeFrom;
    var tickStepSize = Object(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_5__["tickStep"])(rangeFrom, rangeTo, 3);
    var ticksNum = Math.round(range / tickStepSize);
    var ticks = [];
    for (var i = 0; i < ticksNum; i++) {
        var current = tickStepSize * i;
        // Add user-defined min and max if it had been set
        if (isValueCloseTo(minValue, current, tickStepSize)) {
            ticks.push(minValue);
            continue;
        }
        else if (minValue < current) {
            ticks.push(minValue);
        }
        if (isValueCloseTo(maxValue, current, tickStepSize)) {
            ticks.push(maxValue);
            continue;
        }
        else if (maxValue < current) {
            ticks.push(maxValue);
        }
        ticks.push(tickStepSize * i);
    }
    if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {
        ticks.push(maxValue);
    }
    ticks.push(rangeTo);
    ticks = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.sortBy(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.uniq(ticks));
    return ticks;
}
function isValueCloseTo(val, valueTo, step) {
    var diff = Math.abs(val - valueTo);
    return diff < step * 0.3;
}


/***/ }),

/***/ "./public/app/plugins/panel/heatmap/color_scale.ts":
/*!*********************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/color_scale.ts ***!
  \*********************************************************/
/*! exports provided: getColorScale, getOpacityScale */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getColorScale", function() { return getColorScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOpacityScale", function() { return getOpacityScale; });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-scale-chromatic */ "./node_modules/d3-scale-chromatic/src/index.js");


function getColorScale(colorScheme, lightTheme, maxValue, minValue) {
    if (minValue === void 0) { minValue = 0; }
    var colorInterpolator = d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__[colorScheme.value];
    var colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');
    var start = colorScaleInverted ? maxValue : minValue;
    var end = colorScaleInverted ? minValue : maxValue;
    return d3__WEBPACK_IMPORTED_MODULE_0__["scaleSequential"](colorInterpolator).domain([start, end]);
}
function getOpacityScale(options, maxValue, minValue) {
    if (minValue === void 0) { minValue = 0; }
    var legendOpacityScale;
    if (options.colorScale === 'linear') {
        legendOpacityScale = d3__WEBPACK_IMPORTED_MODULE_0__["scaleLinear"]()
            .domain([minValue, maxValue])
            .range([0, 1]);
    }
    else if (options.colorScale === 'sqrt') {
        legendOpacityScale = d3__WEBPACK_IMPORTED_MODULE_0__["scalePow"]()
            .exponent(options.exponent)
            .domain([minValue, maxValue])
            .range([0, 1]);
    }
    return legendOpacityScale;
}


/***/ }),

/***/ "./public/app/plugins/panel/heatmap/display_editor.ts":
/*!************************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/display_editor.ts ***!
  \************************************************************/
/*! exports provided: HeatmapDisplayEditorCtrl, heatmapDisplayEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeatmapDisplayEditorCtrl", function() { return HeatmapDisplayEditorCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "heatmapDisplayEditor", function() { return heatmapDisplayEditor; });
var HeatmapDisplayEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function HeatmapDisplayEditorCtrl($scope) {
        $scope.editor = this;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.panelCtrl.render();
    }
    return HeatmapDisplayEditorCtrl;
}());

/** @ngInject */
function heatmapDisplayEditor() {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/plugins/panel/heatmap/partials/display_editor.html',
        controller: HeatmapDisplayEditorCtrl,
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/heatmap/heatmap_ctrl.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/heatmap_ctrl.ts ***!
  \**********************************************************/
/*! exports provided: HeatmapCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeatmapCtrl", function() { return HeatmapCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_time_series2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/time_series2 */ "./public/app/core/time_series2.ts");
/* harmony import */ var _axes_editor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axes_editor */ "./public/app/plugins/panel/heatmap/axes_editor.ts");
/* harmony import */ var _display_editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./display_editor */ "./public/app/plugins/panel/heatmap/display_editor.ts");
/* harmony import */ var _rendering__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rendering */ "./public/app/plugins/panel/heatmap/rendering.ts");
/* harmony import */ var _heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./heatmap_data_converter */ "./public/app/plugins/panel/heatmap/heatmap_data_converter.ts");









var X_BUCKET_NUMBER_DEFAULT = 30;
var Y_BUCKET_NUMBER_DEFAULT = 10;
var panelDefaults = {
    heatmap: {},
    cards: {
        cardPadding: null,
        cardRound: null,
    },
    color: {
        mode: 'spectrum',
        cardColor: '#b4ff00',
        colorScale: 'sqrt',
        exponent: 0.5,
        colorScheme: 'interpolateOranges',
    },
    legend: {
        show: false,
    },
    dataFormat: 'timeseries',
    yBucketBound: 'auto',
    xAxis: {
        show: true,
    },
    yAxis: {
        show: true,
        format: 'short',
        decimals: null,
        logBase: 1,
        splitFactor: null,
        min: null,
        max: null,
    },
    xBucketSize: null,
    xBucketNumber: null,
    yBucketSize: null,
    yBucketNumber: null,
    tooltip: {
        show: true,
        showHistogram: false,
    },
    highlightCards: true,
};
var colorModes = ['opacity', 'spectrum'];
var opacityScales = ['linear', 'sqrt'];
// Schemes from d3-scale-chromatic
// https://github.com/d3/d3-scale-chromatic
var colorSchemes = [
    // Diverging
    { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },
    { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },
    // Sequential (Single Hue)
    { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },
    { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },
    { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },
    { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },
    { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },
    { name: 'Reds', value: 'interpolateReds', invert: 'dark' },
    // Sequential (Multi-Hue)
    { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },
    { name: 'Magma', value: 'interpolateMagma', invert: 'light' },
    { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },
    { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },
    { name: 'Warm', value: 'interpolateWarm', invert: 'light' },
    { name: 'Cool', value: 'interpolateCool', invert: 'light' },
    { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },
    { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },
    { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },
    { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },
    { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },
    { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },
    { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },
    { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },
    { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },
    { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },
    { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },
    { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },
    { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },
];
var dsSupportHistogramSort = ['prometheus', 'elasticsearch'];
var HeatmapCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](HeatmapCtrl, _super);
    /** @ngInject */
    function HeatmapCtrl($scope, $injector, timeSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.opacityScales = [];
        _this.colorModes = [];
        _this.colorSchemes = [];
        _this.timeSrv = timeSrv;
        _this.selectionActivated = false;
        lodash__WEBPACK_IMPORTED_MODULE_2___default.a.defaultsDeep(_this.panel, panelDefaults);
        _this.opacityScales = opacityScales;
        _this.colorModes = colorModes;
        _this.colorSchemes = colorSchemes;
        // Bind grafana panel events
        _this.events.on('render', _this.onRender.bind(_this));
        _this.events.on('data-received', _this.onDataReceived.bind(_this));
        _this.events.on('data-error', _this.onDataError.bind(_this));
        _this.events.on('data-snapshot-load', _this.onDataReceived.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.onCardColorChange = _this.onCardColorChange.bind(_this);
        return _this;
    }
    HeatmapCtrl.prototype.onInitEditMode = function () {
        this.addEditorTab('Axes', _axes_editor__WEBPACK_IMPORTED_MODULE_5__["axesEditor"], 2);
        this.addEditorTab('Display', _display_editor__WEBPACK_IMPORTED_MODULE_6__["heatmapDisplayEditor"], 3);
        this.unitFormats = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].getUnitFormats();
    };
    HeatmapCtrl.prototype.zoomOut = function (evt) {
        this.publishAppEvent('zoom-out', 2);
    };
    HeatmapCtrl.prototype.onRender = function () {
        if (!this.range) {
            return;
        }
        if (this.panel.dataFormat === 'tsbuckets') {
            this.convertHistogramToHeatmapData();
        }
        else {
            this.convertTimeSeriesToHeatmapData();
        }
    };
    HeatmapCtrl.prototype.convertTimeSeriesToHeatmapData = function () {
        var xBucketSize, yBucketSize, bucketsData, heatmapStats;
        var logBase = this.panel.yAxis.logBase;
        var xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;
        var xBucketSizeByNumber = Math.floor((this.range.to - this.range.from) / xBucketNumber);
        // Parse X bucket size (number or interval)
        var isIntervalString = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_regex.test(this.panel.xBucketSize);
        if (isIntervalString) {
            xBucketSize = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].interval_to_ms(this.panel.xBucketSize);
        }
        else if (isNaN(Number(this.panel.xBucketSize)) ||
            this.panel.xBucketSize === '' ||
            this.panel.xBucketSize === null) {
            xBucketSize = xBucketSizeByNumber;
        }
        else {
            xBucketSize = Number(this.panel.xBucketSize);
        }
        // Calculate Y bucket size
        heatmapStats = this.parseSeries(this.series);
        var yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;
        if (logBase !== 1) {
            yBucketSize = this.panel.yAxis.splitFactor;
        }
        else {
            if (heatmapStats.max === heatmapStats.min) {
                if (heatmapStats.max) {
                    yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;
                }
                else {
                    yBucketSize = 1;
                }
            }
            else {
                yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;
            }
            yBucketSize = this.panel.yBucketSize || yBucketSize;
        }
        bucketsData = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["convertToHeatMap"])(this.series, yBucketSize, xBucketSize, logBase);
        // Set default Y range if no data
        if (!heatmapStats.min && !heatmapStats.max) {
            heatmapStats = { min: -1, max: 1, minLog: 1 };
            yBucketSize = 1;
        }
        var _a = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["convertToCards"])(bucketsData), cards = _a.cards, cardStats = _a.cardStats;
        this.data = {
            buckets: bucketsData,
            heatmapStats: heatmapStats,
            xBucketSize: xBucketSize,
            yBucketSize: yBucketSize,
            cards: cards,
            cardStats: cardStats,
        };
    };
    HeatmapCtrl.prototype.convertHistogramToHeatmapData = function () {
        var panelDatasource = this.getPanelDataSourceType();
        var xBucketSize, yBucketSize, bucketsData, tsBuckets;
        // Try to sort series by bucket bound, if datasource doesn't do it.
        if (!lodash__WEBPACK_IMPORTED_MODULE_2___default.a.includes(dsSupportHistogramSort, panelDatasource)) {
            this.series.sort(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["sortSeriesByLabel"]);
        }
        // Convert histogram to heatmap. Each histogram bucket represented by the series which name is
        // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as X axis labels.
        bucketsData = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["histogramToHeatmap"])(this.series);
        tsBuckets = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(this.series, 'label');
        var yBucketBound = this.panel.yBucketBound;
        if ((panelDatasource === 'prometheus' && yBucketBound !== 'lower') || yBucketBound === 'upper') {
            // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.
            tsBuckets = [''].concat(tsBuckets);
        }
        else {
            // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.
            // Use this as a default mode as well.
            tsBuckets.push('');
        }
        // Calculate bucket size based on heatmap data
        var xBucketBoundSet = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.keys(bucketsData), function (key) { return Number(key); });
        xBucketSize = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["calculateBucketSize"])(xBucketBoundSet);
        // Always let yBucketSize=1 in 'tsbuckets' mode
        yBucketSize = 1;
        var _a = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["convertToCards"])(bucketsData), cards = _a.cards, cardStats = _a.cardStats;
        this.data = {
            buckets: bucketsData,
            xBucketSize: xBucketSize,
            yBucketSize: yBucketSize,
            tsBuckets: tsBuckets,
            cards: cards,
            cardStats: cardStats,
        };
    };
    HeatmapCtrl.prototype.getPanelDataSourceType = function () {
        if (this.datasource.meta && this.datasource.meta.id) {
            return this.datasource.meta.id;
        }
        else {
            return 'unknown';
        }
    };
    HeatmapCtrl.prototype.onDataReceived = function (dataList) {
        this.series = dataList.map(this.seriesHandler.bind(this));
        this.dataWarning = null;
        var datapointsCount = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.reduce(this.series, function (sum, series) {
            return sum + series.datapoints.length;
        }, 0);
        if (datapointsCount === 0) {
            this.dataWarning = {
                title: 'No data points',
                tip: 'No datapoints returned from data query',
            };
        }
        else {
            for (var _i = 0, _a = this.series; _i < _a.length; _i++) {
                var series = _a[_i];
                if (series.isOutsideRange) {
                    this.dataWarning = {
                        title: 'Data points outside time range',
                        tip: 'Can be caused by timezone mismatch or missing time filter in query',
                    };
                    break;
                }
            }
        }
        this.render();
    };
    HeatmapCtrl.prototype.onDataError = function () {
        this.series = [];
        this.render();
    };
    HeatmapCtrl.prototype.onCardColorChange = function (newColor) {
        this.panel.color.cardColor = newColor;
        this.render();
    };
    HeatmapCtrl.prototype.seriesHandler = function (seriesData) {
        if (seriesData.datapoints === undefined) {
            throw new Error('Heatmap error: data should be a time series');
        }
        var series = new app_core_time_series2__WEBPACK_IMPORTED_MODULE_4__["default"]({
            datapoints: seriesData.datapoints,
            alias: seriesData.target,
        });
        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);
        var datapoints = seriesData.datapoints || [];
        if (datapoints && datapoints.length > 0) {
            var last = datapoints[datapoints.length - 1][1];
            var from = this.range.from;
            if (last - from < -10000) {
                series.isOutsideRange = true;
            }
        }
        return series;
    };
    HeatmapCtrl.prototype.parseSeries = function (series) {
        var min = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.min(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(series, function (s) { return s.stats.min; }));
        var minLog = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.min(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(series, function (s) { return s.stats.logmin; }));
        var max = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.max(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(series, function (s) { return s.stats.max; }));
        return {
            max: max,
            min: min,
            minLog: minLog,
        };
    };
    HeatmapCtrl.prototype.parseHistogramSeries = function (series) {
        var bounds = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(series, function (s) { return Number(s.alias); });
        var min = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.min(bounds);
        var minLog = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.min(bounds);
        var max = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.max(bounds);
        return {
            max: max,
            min: min,
            minLog: minLog,
        };
    };
    HeatmapCtrl.prototype.link = function (scope, elem, attrs, ctrl) {
        Object(_rendering__WEBPACK_IMPORTED_MODULE_7__["default"])(scope, elem, attrs, ctrl);
    };
    HeatmapCtrl.templateUrl = 'module.html';
    return HeatmapCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__["MetricsPanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/heatmap/heatmap_data_converter.ts":
/*!********************************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/heatmap_data_converter.ts ***!
  \********************************************************************/
/*! exports provided: convertToHeatMap, histogramToHeatmap, convertToCards, mergeZeroBuckets, getValueBucketBound, isHeatmapDataEqual, calculateBucketSize, sortSeriesByLabel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToHeatMap", function() { return convertToHeatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "histogramToHeatmap", function() { return histogramToHeatmap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToCards", function() { return convertToCards; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeZeroBuckets", function() { return mergeZeroBuckets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValueBucketBound", function() { return getValueBucketBound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeatmapDataEqual", function() { return isHeatmapDataEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateBucketSize", function() { return calculateBucketSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortSeriesByLabel", function() { return sortSeriesByLabel; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

var VALUE_INDEX = 0;
var TIME_INDEX = 1;
/**
 * Convert histogram represented by the list of series to heatmap object.
 * @param seriesList List of time series
 */
function histogramToHeatmap(seriesList) {
    var heatmap = {};
    for (var i = 0; i < seriesList.length; i++) {
        var series = seriesList[i];
        var bound = i;
        if (isNaN(bound)) {
            return heatmap;
        }
        for (var _i = 0, _a = series.datapoints; _i < _a.length; _i++) {
            var point = _a[_i];
            var count = point[VALUE_INDEX];
            var time = point[TIME_INDEX];
            if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(count)) {
                continue;
            }
            var bucket = heatmap[time];
            if (!bucket) {
                bucket = heatmap[time] = { x: time, buckets: {} };
            }
            bucket.buckets[bound] = {
                y: bound,
                count: count,
                bounds: {
                    top: null,
                    bottom: bound,
                },
                values: [],
                points: [],
            };
        }
    }
    return heatmap;
}
/**
 * Sort series representing histogram by label value.
 */
function sortSeriesByLabel(s1, s2) {
    var label1, label2;
    try {
        // fail if not integer. might happen with bad queries
        label1 = parseHistogramLabel(s1.label);
        label2 = parseHistogramLabel(s2.label);
    }
    catch (err) {
        console.log(err.message || err);
        return 0;
    }
    if (label1 > label2) {
        return 1;
    }
    if (label1 < label2) {
        return -1;
    }
    return 0;
}
function parseHistogramLabel(label) {
    if (label === '+Inf' || label === 'inf') {
        return +Infinity;
    }
    var value = Number(label);
    if (isNaN(value)) {
        throw new Error("Error parsing histogram label: " + label + " is not a number");
    }
    return value;
}
/**
 * Convert buckets into linear array of "cards" - objects, represented heatmap elements.
 * @param  {Object} buckets
 * @return {Array}          Array of "card" objects
 */
function convertToCards(buckets) {
    var min = 0, max = 0;
    var cards = [];
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(buckets, function (xBucket) {
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(xBucket.buckets, function (yBucket) {
            var card = {
                x: xBucket.x,
                y: yBucket.y,
                yBounds: yBucket.bounds,
                values: yBucket.values,
                count: yBucket.count,
            };
            cards.push(card);
            if (cards.length === 1) {
                min = yBucket.count;
                max = yBucket.count;
            }
            min = yBucket.count < min ? yBucket.count : min;
            max = yBucket.count > max ? yBucket.count : max;
        });
    });
    var cardStats = { min: min, max: max };
    return { cards: cards, cardStats: cardStats };
}
/**
 * Special method for log scales. When series converted into buckets with log scale,
 * for simplification, 0 values are converted into 0, not into -Infinity. On the other hand, we mean
 * that all values less than series minimum, is 0 values, and we create special "minimum" bucket for
 * that values (actually, there're no values less than minimum, so this bucket is empty).
 *  8-16|    | ** |    |  * |  **|
 *   4-8|  * |*  *|*   |** *| *  |
 *   2-4| * *|    | ***|    |*   |
 *   1-2|*   |    |    |    |    | This bucket contains minimum series value
 * 0.5-1|____|____|____|____|____| This bucket should be displayed as 0 on graph
 *     0|____|____|____|____|____| This bucket is for 0 values (should actually be -Infinity)
 * So we should merge two bottom buckets into one (0-value bucket).
 *
 * @param  {Object} buckets  Heatmap buckets
 * @param  {Number} minValue Minimum series value
 * @return {Object}          Transformed buckets
 */
function mergeZeroBuckets(buckets, minValue) {
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(buckets, function (xBucket) {
        var yBuckets = xBucket.buckets;
        var emptyBucket = {
            bounds: { bottom: 0, top: 0 },
            values: [],
            points: [],
            count: 0,
        };
        var nullBucket = yBuckets[0] || emptyBucket;
        var minBucket = yBuckets[minValue] || emptyBucket;
        var newBucket = {
            y: 0,
            bounds: { bottom: minValue, top: minBucket.bounds.top || minValue },
            values: [],
            points: [],
            count: 0,
        };
        newBucket.points = nullBucket.points.concat(minBucket.points);
        newBucket.values = nullBucket.values.concat(minBucket.values);
        newBucket.count = newBucket.values.length;
        if (newBucket.count === 0) {
            return;
        }
        delete yBuckets[minValue];
        yBuckets[0] = newBucket;
    });
    return buckets;
}
/**
 * Convert set of time series into heatmap buckets
 * @return {Object}    Heatmap object:
 * {
 *   xBucketBound_1: {
 *     x: xBucketBound_1,
 *     buckets: {
 *       yBucketBound_1: {
 *         y: yBucketBound_1,
 *         bounds: {bottom, top}
 *         values: [val_1, val_2, ..., val_K],
 *         points: [[val_Y, val_X, series_name], ..., [...]],
 *         seriesStat: {seriesName_1: val_1, seriesName_2: val_2}
 *       },
 *       ...
 *       yBucketBound_M: {}
 *     },
 *     values: [val_1, val_2, ..., val_K],
 *     points: [
 *       [val_Y, val_X, series_name], (point_1)
 *       ...
 *       [...] (point_K)
 *     ]
 *   },
 *   xBucketBound_2: {},
 *   ...
 *   xBucketBound_N: {}
 * }
 */
function convertToHeatMap(seriesList, yBucketSize, xBucketSize, logBase) {
    if (logBase === void 0) { logBase = 1; }
    var heatmap = {};
    var _loop_1 = function (series) {
        var datapoints = series.datapoints;
        var seriesName = series.label;
        // Slice series into X axis buckets
        // |    | ** |    |  * |  **|
        // |  * |*  *|*   |** *| *  |
        // |** *|    | ***|    |*   |
        // |____|____|____|____|____|_
        //
        lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(datapoints, function (point) {
            var bucketBound = getBucketBound(point[TIME_INDEX], xBucketSize);
            pushToXBuckets(heatmap, point, bucketBound, seriesName);
        });
    };
    for (var _i = 0, seriesList_1 = seriesList; _i < seriesList_1.length; _i++) {
        var series = seriesList_1[_i];
        _loop_1(series);
    }
    // Slice X axis buckets into Y (value) buckets
    // |  **|     |2|,
    // | *  | --\ |1|,
    // |*   | --/ |1|,
    // |____|     |0|
    //
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(heatmap, function (xBucket) {
        if (logBase !== 1) {
            xBucket.buckets = convertToLogScaleValueBuckets(xBucket, yBucketSize, logBase);
        }
        else {
            xBucket.buckets = convertToValueBuckets(xBucket, yBucketSize);
        }
    });
    return heatmap;
}
function pushToXBuckets(buckets, point, bucketNum, seriesName) {
    var value = point[VALUE_INDEX];
    if (value === null || value === undefined || isNaN(value)) {
        return;
    }
    // Add series name to point for future identification
    var pointExt = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.concat(point, seriesName);
    if (buckets[bucketNum] && buckets[bucketNum].values) {
        buckets[bucketNum].values.push(value);
        buckets[bucketNum].points.push(pointExt);
    }
    else {
        buckets[bucketNum] = {
            x: bucketNum,
            values: [value],
            points: [pointExt],
        };
    }
}
function pushToYBuckets(buckets, bucketNum, value, point, bounds) {
    var count = 1;
    // Use the 3rd argument as scale/count
    if (point.length > 3) {
        count = parseInt(point[2], 10);
    }
    if (buckets[bucketNum]) {
        buckets[bucketNum].values.push(value);
        buckets[bucketNum].points.push(point);
        buckets[bucketNum].count += count;
    }
    else {
        buckets[bucketNum] = {
            y: bucketNum,
            bounds: bounds,
            values: [value],
            points: [point],
            count: count,
        };
    }
}
function getValueBucketBound(value, yBucketSize, logBase) {
    if (logBase === 1) {
        return getBucketBound(value, yBucketSize);
    }
    else {
        return getLogScaleBucketBound(value, yBucketSize, logBase);
    }
}
/**
 * Find bucket for given value (for linear scale)
 */
function getBucketBounds(value, bucketSize) {
    var bottom, top;
    bottom = Math.floor(value / bucketSize) * bucketSize;
    top = (Math.floor(value / bucketSize) + 1) * bucketSize;
    return { bottom: bottom, top: top };
}
function getBucketBound(value, bucketSize) {
    var bounds = getBucketBounds(value, bucketSize);
    return bounds.bottom;
}
function convertToValueBuckets(xBucket, bucketSize) {
    var values = xBucket.values;
    var points = xBucket.points;
    var buckets = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(values, function (val, index) {
        var bounds = getBucketBounds(val, bucketSize);
        var bucketNum = bounds.bottom;
        pushToYBuckets(buckets, bucketNum, val, points[index], bounds);
    });
    return buckets;
}
/**
 * Find bucket for given value (for log scales)
 */
function getLogScaleBucketBounds(value, yBucketSplitFactor, logBase) {
    var top, bottom;
    if (value === 0) {
        return { bottom: 0, top: 0 };
    }
    var valueLog = logp(value, logBase);
    var pow, powTop;
    if (yBucketSplitFactor === 1 || !yBucketSplitFactor) {
        pow = Math.floor(valueLog);
        powTop = pow + 1;
    }
    else {
        var additionalBucketSize = 1 / yBucketSplitFactor;
        var additionalLog = valueLog - Math.floor(valueLog);
        additionalLog = Math.floor(additionalLog / additionalBucketSize) * additionalBucketSize;
        pow = Math.floor(valueLog) + additionalLog;
        powTop = pow + additionalBucketSize;
    }
    bottom = Math.pow(logBase, pow);
    top = Math.pow(logBase, powTop);
    return { bottom: bottom, top: top };
}
function getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {
    var bounds = getLogScaleBucketBounds(value, yBucketSplitFactor, logBase);
    return bounds.bottom;
}
function convertToLogScaleValueBuckets(xBucket, yBucketSplitFactor, logBase) {
    var values = xBucket.values;
    var points = xBucket.points;
    var buckets = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(values, function (val, index) {
        var bounds = getLogScaleBucketBounds(val, yBucketSplitFactor, logBase);
        var bucketNum = bounds.bottom;
        pushToYBuckets(buckets, bucketNum, val, points[index], bounds);
    });
    return buckets;
}
/**
 * Logarithm for custom base
 * @param value
 * @param base logarithm base
 */
function logp(value, base) {
    return Math.log(value) / Math.log(base);
}
/**
 * Calculate size of Y bucket from given buckets bounds.
 * @param bounds Array of Y buckets bounds
 * @param logBase Logarithm base
 */
function calculateBucketSize(bounds, logBase) {
    if (logBase === void 0) { logBase = 1; }
    var bucketSize = Infinity;
    if (bounds.length === 0) {
        return 0;
    }
    else if (bounds.length === 1) {
        return bounds[0];
    }
    else {
        bounds = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(bounds);
        for (var i = 1; i < bounds.length; i++) {
            var distance = getDistance(bounds[i], bounds[i - 1], logBase);
            bucketSize = distance < bucketSize ? distance : bucketSize;
        }
    }
    return bucketSize;
}
/**
 * Calculate distance between two numbers in given scale (linear or logarithmic).
 * @param a
 * @param b
 * @param logBase
 */
function getDistance(a, b, logBase) {
    if (logBase === void 0) { logBase = 1; }
    if (logBase === 1) {
        // Linear distance
        return Math.abs(b - a);
    }
    else {
        // logarithmic distance
        var ratio = Math.max(a, b) / Math.min(a, b);
        return logp(ratio, logBase);
    }
}
/**
 * Compare two heatmap data objects
 * @param objA
 * @param objB
 */
function isHeatmapDataEqual(objA, objB) {
    var isEql = !emptyXOR(objA, objB);
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(objA, function (xBucket, x) {
        if (objB[x]) {
            if (emptyXOR(xBucket.buckets, objB[x].buckets)) {
                isEql = false;
                return false;
            }
            lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(xBucket.buckets, function (yBucket, y) {
                if (objB[x].buckets && objB[x].buckets[y]) {
                    if (objB[x].buckets[y].values) {
                        isEql = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEqual(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(yBucket.values), lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(objB[x].buckets[y].values));
                        if (!isEql) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        isEql = false;
                        return false;
                    }
                }
                else {
                    isEql = false;
                    return false;
                }
            });
            if (!isEql) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            isEql = false;
            return false;
        }
    });
    return isEql;
}
function emptyXOR(foo, bar) {
    return (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(foo) || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(bar)) && !(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(foo) && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(bar));
}



/***/ }),

/***/ "./public/app/plugins/panel/heatmap/heatmap_tooltip.ts":
/*!*************************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/heatmap_tooltip.ts ***!
  \*************************************************************/
/*! exports provided: HeatmapTooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeatmapTooltip", function() { return HeatmapTooltip; });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var _heatmap_data_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./heatmap_data_converter */ "./public/app/plugins/panel/heatmap/heatmap_data_converter.ts");





var TOOLTIP_PADDING_X = 30;
var TOOLTIP_PADDING_Y = 5;
var HISTOGRAM_WIDTH = 160;
var HISTOGRAM_HEIGHT = 40;
var HeatmapTooltip = /** @class */ (function () {
    function HeatmapTooltip(elem, scope) {
        this.scope = scope;
        this.dashboard = scope.ctrl.dashboard;
        this.panelCtrl = scope.ctrl;
        this.panel = scope.ctrl.panel;
        this.heatmapPanel = elem;
        this.mouseOverBucket = false;
        this.originalFillColor = null;
        elem.on('mouseleave', this.onMouseLeave.bind(this));
    }
    HeatmapTooltip.prototype.onMouseLeave = function () {
        this.destroy();
    };
    HeatmapTooltip.prototype.onMouseMove = function (e) {
        if (!this.panel.tooltip.show) {
            return;
        }
        this.move(e);
    };
    HeatmapTooltip.prototype.add = function () {
        this.tooltip = d3__WEBPACK_IMPORTED_MODULE_0__["select"]('body')
            .append('div')
            .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');
    };
    HeatmapTooltip.prototype.destroy = function () {
        if (this.tooltip) {
            this.tooltip.remove();
        }
        this.tooltip = null;
    };
    HeatmapTooltip.prototype.show = function (pos, data) {
        if (!this.panel.tooltip.show || !data) {
            return;
        }
        // shared tooltip mode
        if (pos.panelRelY) {
            return;
        }
        var _a = this.getBucketIndexes(pos, data), xBucketIndex = _a.xBucketIndex, yBucketIndex = _a.yBucketIndex;
        if (!data.buckets[xBucketIndex]) {
            this.destroy();
            return;
        }
        if (!this.tooltip) {
            this.add();
        }
        var boundBottom, boundTop, valuesNumber;
        var xData = data.buckets[xBucketIndex];
        // Search in special 'zero' bucket also
        var yData = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(xData.buckets, function (bucket, bucketIndex) {
            return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();
        });
        var tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';
        var time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);
        // Decimals override. Code from panel/graph/graph.ts
        var countValueFormatter, bucketBoundFormatter;
        if (lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isNumber(this.panel.tooltipDecimals)) {
            countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);
            bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);
        }
        else {
            // auto decimals
            // legend and tooltip gets one more decimal precision
            // than graph legend ticks
            var decimals = (this.panelCtrl.decimals || -1) + 1;
            countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);
            bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);
        }
        var tooltipHtml = "<div class=\"graph-tooltip-time\">" + time + "</div>\n      <div class=\"heatmap-histogram\"></div>";
        if (yData) {
            if (yData.bounds) {
                if (data.tsBuckets) {
                    // Use Y-axis labels
                    var tickFormatter = function (valIndex) {
                        return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];
                    };
                    boundBottom = tickFormatter(yBucketIndex);
                    boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';
                }
                else {
                    // Display 0 if bucket is a special 'zero' bucket
                    var bottom = yData.y ? yData.bounds.bottom : 0;
                    boundBottom = bucketBoundFormatter(bottom);
                    boundTop = bucketBoundFormatter(yData.bounds.top);
                }
                valuesNumber = countValueFormatter(yData.count);
                tooltipHtml += "<div>\n          bucket: <b>" + boundBottom + " - " + boundTop + "</b> <br>\n          count: <b>" + valuesNumber + "</b> <br>\n        </div>";
            }
            else {
                // currently no bounds for pre bucketed data
                tooltipHtml += "<div>count: <b>" + yData.count + "</b><br></div>";
            }
        }
        else {
            if (!this.panel.tooltip.showHistogram) {
                this.destroy();
                return;
            }
            boundBottom = yBucketIndex;
            boundTop = '';
            valuesNumber = 0;
        }
        this.tooltip.html(tooltipHtml);
        if (this.panel.tooltip.showHistogram) {
            this.addHistogram(xData);
        }
        this.move(pos);
    };
    HeatmapTooltip.prototype.getBucketIndexes = function (pos, data) {
        var xBucketIndex = this.getXBucketIndex(pos.x, data);
        var yBucketIndex = this.getYBucketIndex(pos.y, data);
        return { xBucketIndex: xBucketIndex, yBucketIndex: yBucketIndex };
    };
    HeatmapTooltip.prototype.getXBucketIndex = function (x, data) {
        // First try to find X bucket by checking x pos is in the
        // [bucket.x, bucket.x + xBucketSize] interval
        var xBucket = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.find(data.buckets, function (bucket) {
            return x > bucket.x && x - bucket.x <= data.xBucketSize;
        });
        return xBucket ? xBucket.x : Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_4__["getValueBucketBound"])(x, data.xBucketSize, 1);
    };
    HeatmapTooltip.prototype.getYBucketIndex = function (y, data) {
        if (data.tsBuckets) {
            return Math.floor(y);
        }
        var yBucketIndex = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_4__["getValueBucketBound"])(y, data.yBucketSize, this.panel.yAxis.logBase);
        return yBucketIndex;
    };
    HeatmapTooltip.prototype.getSharedTooltipPos = function (pos) {
        // get pageX from position on x axis and pageY from relative position in original panel
        pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);
        pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;
        return pos;
    };
    HeatmapTooltip.prototype.addHistogram = function (data) {
        var xBucket = this.scope.ctrl.data.buckets[data.x];
        var yBucketSize = this.scope.ctrl.data.yBucketSize;
        var min, max, ticks;
        if (this.scope.ctrl.data.tsBuckets) {
            min = 0;
            max = this.scope.ctrl.data.tsBuckets.length - 1;
            ticks = this.scope.ctrl.data.tsBuckets.length;
        }
        else {
            min = this.scope.ctrl.data.yAxis.min;
            max = this.scope.ctrl.data.yAxis.max;
            ticks = this.scope.ctrl.data.yAxis.ticks;
        }
        var histogramData = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(xBucket.buckets, function (bucket) {
            var count = bucket.count !== undefined ? bucket.count : bucket.values.length;
            return [bucket.bounds.bottom, count];
        });
        histogramData = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.filter(histogramData, function (d) {
            return d[0] >= min && d[0] <= max;
        });
        var scale = this.scope.yScale.copy();
        var histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);
        var barWidth;
        if (this.panel.yAxis.logBase === 1) {
            barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);
        }
        else {
            var barNumberFactor = yBucketSize ? yBucketSize : 1;
            barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);
        }
        barWidth = Math.max(barWidth, 1);
        // Normalize histogram Y axis
        var histogramDomain = lodash__WEBPACK_IMPORTED_MODULE_2___default.a.reduce(lodash__WEBPACK_IMPORTED_MODULE_2___default.a.map(histogramData, function (d) { return d[1]; }), function (sum, val) { return sum + val; }, 0);
        var histYScale = d3__WEBPACK_IMPORTED_MODULE_0__["scaleLinear"]()
            .domain([0, histogramDomain])
            .range([0, HISTOGRAM_HEIGHT]);
        var histogram = this.tooltip
            .select('.heatmap-histogram')
            .append('svg')
            .attr('width', HISTOGRAM_WIDTH)
            .attr('height', HISTOGRAM_HEIGHT);
        histogram
            .selectAll('.bar')
            .data(histogramData)
            .enter()
            .append('rect')
            .attr('x', function (d) {
            return histXScale(d[0]);
        })
            .attr('width', barWidth)
            .attr('y', function (d) {
            return HISTOGRAM_HEIGHT - histYScale(d[1]);
        })
            .attr('height', function (d) {
            return histYScale(d[1]);
        });
    };
    HeatmapTooltip.prototype.move = function (pos) {
        if (!this.tooltip) {
            return;
        }
        var elem = jquery__WEBPACK_IMPORTED_MODULE_1___default()(this.tooltip.node())[0];
        var tooltipWidth = elem.clientWidth;
        var tooltipHeight = elem.clientHeight;
        var left = pos.pageX + TOOLTIP_PADDING_X;
        var top = pos.pageY + TOOLTIP_PADDING_Y;
        if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {
            left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;
        }
        if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {
            top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;
        }
        return this.tooltip.style('left', left + 'px').style('top', top + 'px');
    };
    HeatmapTooltip.prototype.countValueFormatter = function (decimals, scaledDecimals) {
        if (scaledDecimals === void 0) { scaledDecimals = null; }
        var format = 'short';
        return function (value) {
            return app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_3__["default"].valueFormats[format](value, decimals, scaledDecimals);
        };
    };
    return HeatmapTooltip;
}());



/***/ }),

/***/ "./public/app/plugins/panel/heatmap/module.ts":
/*!****************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/module.ts ***!
  \****************************************************/
/*! exports provided: PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _color_legend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color_legend */ "./public/app/plugins/panel/heatmap/color_legend.ts");
/* harmony import */ var _heatmap_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./heatmap_ctrl */ "./public/app/plugins/panel/heatmap/heatmap_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return _heatmap_ctrl__WEBPACK_IMPORTED_MODULE_1__["HeatmapCtrl"]; });






/***/ }),

/***/ "./public/app/plugins/panel/heatmap/rendering.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/panel/heatmap/rendering.ts ***!
  \*******************************************************/
/*! exports provided: default, HeatmapRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeatmapRenderer", function() { return HeatmapRenderer; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3 */ "./node_modules/d3/index.js");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/core/core */ "./public/app/core/core.ts");
/* harmony import */ var app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/utils/ticks */ "./public/app/core/utils/ticks.ts");
/* harmony import */ var _heatmap_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./heatmap_tooltip */ "./public/app/plugins/panel/heatmap/heatmap_tooltip.ts");
/* harmony import */ var _heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./heatmap_data_converter */ "./public/app/plugins/panel/heatmap/heatmap_data_converter.ts");
/* harmony import */ var _color_scale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./color_scale */ "./public/app/plugins/panel/heatmap/color_scale.ts");










var MIN_CARD_SIZE = 1, CARD_PADDING = 1, CARD_ROUND = 0, DATA_RANGE_WIDING_FACTOR = 1.2, DEFAULT_X_TICK_SIZE_PX = 100, DEFAULT_Y_TICK_SIZE_PX = 50, X_AXIS_TICK_PADDING = 10, Y_AXIS_TICK_PADDING = 5, MIN_SELECTION_WIDTH = 2;
function rendering(scope, elem, attrs, ctrl) {
    return new HeatmapRenderer(scope, elem, attrs, ctrl);
}
var HeatmapRenderer = /** @class */ (function () {
    function HeatmapRenderer(scope, elem, attrs, ctrl) {
        this.scope = scope;
        this.elem = elem;
        this.ctrl = ctrl;
        // $heatmap is JQuery object, but heatmap is D3
        this.$heatmap = this.elem.find('.heatmap-panel');
        this.tooltip = new _heatmap_tooltip__WEBPACK_IMPORTED_MODULE_7__["HeatmapTooltip"](this.$heatmap, this.scope);
        this.selection = {
            active: false,
            x1: -1,
            x2: -1,
        };
        this.padding = { left: 0, right: 0, top: 0, bottom: 0 };
        this.margin = { left: 25, right: 15, top: 10, bottom: 20 };
        this.dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;
        this.ctrl.events.on('render', this.onRender.bind(this));
        this.ctrl.tickValueFormatter = this.tickValueFormatter.bind(this);
        /////////////////////////////
        // Selection and crosshair //
        /////////////////////////////
        // Shared crosshair and tooltip
        app_core_core__WEBPACK_IMPORTED_MODULE_5__["appEvents"].on('graph-hover', this.onGraphHover.bind(this), this.scope);
        app_core_core__WEBPACK_IMPORTED_MODULE_5__["appEvents"].on('graph-hover-clear', this.onGraphHoverClear.bind(this), this.scope);
        // Register selection listeners
        this.$heatmap.on('mousedown', this.onMouseDown.bind(this));
        this.$heatmap.on('mousemove', this.onMouseMove.bind(this));
        this.$heatmap.on('mouseleave', this.onMouseLeave.bind(this));
    }
    HeatmapRenderer.prototype.onGraphHoverClear = function () {
        this.clearCrosshair();
    };
    HeatmapRenderer.prototype.onGraphHover = function (event) {
        this.drawSharedCrosshair(event.pos);
    };
    HeatmapRenderer.prototype.onRender = function () {
        this.render();
        this.ctrl.renderingCompleted();
    };
    HeatmapRenderer.prototype.setElementHeight = function () {
        try {
            var height = this.ctrl.height || this.panel.height || this.ctrl.row.height;
            if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(height)) {
                height = parseInt(height.replace('px', ''), 10);
            }
            height -= this.panel.legend.show ? 28 : 11; // bottom padding and space for legend
            this.$heatmap.css('height', height + 'px');
            return true;
        }
        catch (e) {
            // IE throws errors sometimes
            return false;
        }
    };
    HeatmapRenderer.prototype.getYAxisWidth = function (elem) {
        var axisText = elem.selectAll('.axis-y text').nodes();
        var maxTextWidth = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.max(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(axisText, function (text) {
            // Use SVG getBBox method
            return text.getBBox().width;
        }));
        return maxTextWidth;
    };
    HeatmapRenderer.prototype.getXAxisHeight = function (elem) {
        var axisLine = elem.select('.axis-x line');
        if (!axisLine.empty()) {
            var axisLinePosition = parseFloat(elem.select('.axis-x line').attr('y2'));
            var canvasWidth = parseFloat(elem.attr('height'));
            return canvasWidth - axisLinePosition;
        }
        else {
            // Default height
            return 30;
        }
    };
    HeatmapRenderer.prototype.addXAxis = function () {
        this.scope.xScale = this.xScale = d3__WEBPACK_IMPORTED_MODULE_3__["scaleTime"]()
            .domain([this.timeRange.from, this.timeRange.to])
            .range([0, this.chartWidth]);
        var ticks = this.chartWidth / DEFAULT_X_TICK_SIZE_PX;
        var grafanaTimeFormatter = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["grafanaTimeFormat"](ticks, this.timeRange.from, this.timeRange.to);
        var timeFormat;
        var dashboardTimeZone = this.ctrl.dashboard.getTimezone();
        if (dashboardTimeZone === 'utc') {
            timeFormat = d3__WEBPACK_IMPORTED_MODULE_3__["utcFormat"](grafanaTimeFormatter);
        }
        else {
            timeFormat = d3__WEBPACK_IMPORTED_MODULE_3__["timeFormat"](grafanaTimeFormatter);
        }
        var xAxis = d3__WEBPACK_IMPORTED_MODULE_3__["axisBottom"](this.xScale)
            .ticks(ticks)
            .tickFormat(timeFormat)
            .tickPadding(X_AXIS_TICK_PADDING)
            .tickSize(this.chartHeight);
        var posY = this.margin.top;
        var posX = this.yAxisWidth;
        this.heatmap
            .append('g')
            .attr('class', 'axis axis-x')
            .attr('transform', 'translate(' + posX + ',' + posY + ')')
            .call(xAxis);
        // Remove horizontal line in the top of axis labels (called domain in d3)
        this.heatmap
            .select('.axis-x')
            .select('.domain')
            .remove();
    };
    HeatmapRenderer.prototype.addYAxis = function () {
        var ticks = Math.ceil(this.chartHeight / DEFAULT_Y_TICK_SIZE_PX);
        var tickInterval = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["tickStep"](this.data.heatmapStats.min, this.data.heatmapStats.max, ticks);
        var _a = this.wideYAxisRange(this.data.heatmapStats.min, this.data.heatmapStats.max, tickInterval), yMin = _a.yMin, yMax = _a.yMax;
        // Rewrite min and max if it have been set explicitly
        yMin = this.panel.yAxis.min !== null ? this.panel.yAxis.min : yMin;
        yMax = this.panel.yAxis.max !== null ? this.panel.yAxis.max : yMax;
        // Adjust ticks after Y range widening
        tickInterval = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["tickStep"](yMin, yMax, ticks);
        ticks = Math.ceil((yMax - yMin) / tickInterval);
        var decimalsAuto = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getPrecision"](tickInterval);
        var decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;
        // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)
        var flotTickSize = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getFlotTickSize"](yMin, yMax, ticks, decimalsAuto);
        var scaledDecimals = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getScaledDecimals"](decimals, flotTickSize);
        this.ctrl.decimals = decimals;
        this.ctrl.scaledDecimals = scaledDecimals;
        // Set default Y min and max if no data
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(this.data.buckets)) {
            yMax = 1;
            yMin = -1;
            ticks = 3;
            decimals = 1;
        }
        this.data.yAxis = {
            min: yMin,
            max: yMax,
            ticks: ticks,
        };
        this.scope.yScale = this.yScale = d3__WEBPACK_IMPORTED_MODULE_3__["scaleLinear"]()
            .domain([yMin, yMax])
            .range([this.chartHeight, 0]);
        var yAxis = d3__WEBPACK_IMPORTED_MODULE_3__["axisLeft"](this.yScale)
            .ticks(ticks)
            .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))
            .tickSizeInner(0 - this.width)
            .tickSizeOuter(0)
            .tickPadding(Y_AXIS_TICK_PADDING);
        this.heatmap
            .append('g')
            .attr('class', 'axis axis-y')
            .call(yAxis);
        // Calculate Y axis width first, then move axis into visible area
        var posY = this.margin.top;
        var posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;
        this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');
        // Remove vertical line in the right of axis labels (called domain in d3)
        this.heatmap
            .select('.axis-y')
            .select('.domain')
            .remove();
    };
    // Wide Y values range and anjust to bucket size
    HeatmapRenderer.prototype.wideYAxisRange = function (min, max, tickInterval) {
        var yWiding = (max * (this.dataRangeWidingFactor - 1) - min * (this.dataRangeWidingFactor - 1)) / 2;
        var yMin, yMax;
        if (tickInterval === 0) {
            yMax = max * this.dataRangeWidingFactor;
            yMin = min - min * (this.dataRangeWidingFactor - 1);
            tickInterval = (yMax - yMin) / 2;
        }
        else {
            yMax = Math.ceil((max + yWiding) / tickInterval) * tickInterval;
            yMin = Math.floor((min - yWiding) / tickInterval) * tickInterval;
        }
        // Don't wide axis below 0 if all values are positive
        if (min >= 0 && yMin < 0) {
            yMin = 0;
        }
        return { yMin: yMin, yMax: yMax };
    };
    HeatmapRenderer.prototype.addLogYAxis = function () {
        var logBase = this.panel.yAxis.logBase;
        var _a = this.adjustLogRange(this.data.heatmapStats.minLog, this.data.heatmapStats.max, logBase), yMin = _a.yMin, yMax = _a.yMax;
        yMin =
            this.panel.yAxis.min && this.panel.yAxis.min !== '0' ? this.adjustLogMin(this.panel.yAxis.min, logBase) : yMin;
        yMax = this.panel.yAxis.max !== null ? this.adjustLogMax(this.panel.yAxis.max, logBase) : yMax;
        // Set default Y min and max if no data
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(this.data.buckets)) {
            yMax = Math.pow(logBase, 2);
            yMin = 1;
        }
        this.scope.yScale = this.yScale = d3__WEBPACK_IMPORTED_MODULE_3__["scaleLog"]()
            .base(this.panel.yAxis.logBase)
            .domain([yMin, yMax])
            .range([this.chartHeight, 0]);
        var domain = this.yScale.domain();
        var tickValues = this.logScaleTickValues(domain, logBase);
        var decimalsAuto = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getPrecision"](yMin);
        var decimals = this.panel.yAxis.decimals || decimalsAuto;
        // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)
        var flotTickSize = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getFlotTickSize"](yMin, yMax, tickValues.length, decimalsAuto);
        var scaledDecimals = app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getScaledDecimals"](decimals, flotTickSize);
        this.ctrl.decimals = decimals;
        this.ctrl.scaledDecimals = scaledDecimals;
        this.data.yAxis = {
            min: yMin,
            max: yMax,
            ticks: tickValues.length,
        };
        var yAxis = d3__WEBPACK_IMPORTED_MODULE_3__["axisLeft"](this.yScale)
            .tickValues(tickValues)
            .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))
            .tickSizeInner(0 - this.width)
            .tickSizeOuter(0)
            .tickPadding(Y_AXIS_TICK_PADDING);
        this.heatmap
            .append('g')
            .attr('class', 'axis axis-y')
            .call(yAxis);
        // Calculate Y axis width first, then move axis into visible area
        var posY = this.margin.top;
        var posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;
        this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');
        // Set first tick as pseudo 0
        if (yMin < 1) {
            this.heatmap
                .select('.axis-y')
                .select('.tick text')
                .text('0');
        }
        // Remove vertical line in the right of axis labels (called domain in d3)
        this.heatmap
            .select('.axis-y')
            .select('.domain')
            .remove();
    };
    HeatmapRenderer.prototype.addYAxisFromBuckets = function () {
        var tsBuckets = this.data.tsBuckets;
        this.scope.yScale = this.yScale = d3__WEBPACK_IMPORTED_MODULE_3__["scaleLinear"]()
            .domain([0, tsBuckets.length - 1])
            .range([this.chartHeight, 0]);
        var tickValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(tsBuckets, function (b, i) { return i; });
        var decimalsAuto = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.max(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(tsBuckets, app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["getStringPrecision"]));
        var decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;
        this.ctrl.decimals = decimals;
        var tickValueFormatter = this.tickValueFormatter.bind(this);
        function tickFormatter(valIndex) {
            var valueFormatted = tsBuckets[valIndex];
            if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNaN(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toNumber(valueFormatted)) && valueFormatted !== '') {
                // Try to format numeric tick labels
                valueFormatted = tickValueFormatter(decimals)(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.toNumber(valueFormatted));
            }
            return valueFormatted;
        }
        var tsBucketsFormatted = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(tsBuckets, function (v, i) { return tickFormatter(i); });
        this.data.tsBucketsFormatted = tsBucketsFormatted;
        var yAxis = d3__WEBPACK_IMPORTED_MODULE_3__["axisLeft"](this.yScale)
            .tickValues(tickValues)
            .tickFormat(tickFormatter)
            .tickSizeInner(0 - this.width)
            .tickSizeOuter(0)
            .tickPadding(Y_AXIS_TICK_PADDING);
        this.heatmap
            .append('g')
            .attr('class', 'axis axis-y')
            .call(yAxis);
        // Calculate Y axis width first, then move axis into visible area
        var posY = this.margin.top;
        var posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;
        this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');
        // Remove vertical line in the right of axis labels (called domain in d3)
        this.heatmap
            .select('.axis-y')
            .select('.domain')
            .remove();
    };
    // Adjust data range to log base
    HeatmapRenderer.prototype.adjustLogRange = function (min, max, logBase) {
        var yMin, yMax;
        yMin = this.data.heatmapStats.minLog;
        if (this.data.heatmapStats.minLog > 1 || !this.data.heatmapStats.minLog) {
            yMin = 1;
        }
        else {
            yMin = this.adjustLogMin(this.data.heatmapStats.minLog, logBase);
        }
        // Adjust max Y value to log base
        yMax = this.adjustLogMax(this.data.heatmapStats.max, logBase);
        return { yMin: yMin, yMax: yMax };
    };
    HeatmapRenderer.prototype.adjustLogMax = function (max, base) {
        return Math.pow(base, Math.ceil(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["logp"](max, base)));
    };
    HeatmapRenderer.prototype.adjustLogMin = function (min, base) {
        return Math.pow(base, Math.floor(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["logp"](min, base)));
    };
    HeatmapRenderer.prototype.logScaleTickValues = function (domain, base) {
        var domainMin = domain[0];
        var domainMax = domain[1];
        var tickValues = [];
        if (domainMin < 1) {
            var underOneTicks = Math.floor(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["logp"](domainMin, base));
            for (var i = underOneTicks; i < 0; i++) {
                var tickValue = Math.pow(base, i);
                tickValues.push(tickValue);
            }
        }
        var ticks = Math.ceil(app_core_utils_ticks__WEBPACK_IMPORTED_MODULE_6__["logp"](domainMax, base));
        for (var i = 0; i <= ticks; i++) {
            var tickValue = Math.pow(base, i);
            tickValues.push(tickValue);
        }
        return tickValues;
    };
    HeatmapRenderer.prototype.tickValueFormatter = function (decimals, scaledDecimals) {
        if (scaledDecimals === void 0) { scaledDecimals = null; }
        var format = this.panel.yAxis.format;
        return function (value) {
            try {
                return format !== 'none' ? app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_4__["default"].valueFormats[format](value, decimals, scaledDecimals) : value;
            }
            catch (err) {
                console.error(err.message || err);
                return value;
            }
        };
    };
    HeatmapRenderer.prototype.fixYAxisTickSize = function () {
        this.heatmap
            .select('.axis-y')
            .selectAll('.tick line')
            .attr('x2', this.chartWidth);
    };
    HeatmapRenderer.prototype.addAxes = function () {
        this.chartHeight = this.height - this.margin.top - this.margin.bottom;
        this.chartTop = this.margin.top;
        this.chartBottom = this.chartTop + this.chartHeight;
        if (this.panel.dataFormat === 'tsbuckets') {
            this.addYAxisFromBuckets();
        }
        else {
            if (this.panel.yAxis.logBase === 1) {
                this.addYAxis();
            }
            else {
                this.addLogYAxis();
            }
        }
        this.yAxisWidth = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;
        this.chartWidth = this.width - this.yAxisWidth - this.margin.right;
        this.fixYAxisTickSize();
        this.addXAxis();
        this.xAxisHeight = this.getXAxisHeight(this.heatmap);
        if (!this.panel.yAxis.show) {
            this.heatmap
                .select('.axis-y')
                .selectAll('line')
                .style('opacity', 0);
        }
        if (!this.panel.xAxis.show) {
            this.heatmap
                .select('.axis-x')
                .selectAll('line')
                .style('opacity', 0);
        }
    };
    HeatmapRenderer.prototype.addHeatmapCanvas = function () {
        var heatmapElem = this.$heatmap[0];
        this.width = Math.floor(this.$heatmap.width()) - this.padding.right;
        this.height = Math.floor(this.$heatmap.height()) - this.padding.bottom;
        this.cardPadding = this.panel.cards.cardPadding !== null ? this.panel.cards.cardPadding : CARD_PADDING;
        this.cardRound = this.panel.cards.cardRound !== null ? this.panel.cards.cardRound : CARD_ROUND;
        if (this.heatmap) {
            this.heatmap.remove();
        }
        this.heatmap = d3__WEBPACK_IMPORTED_MODULE_3__["select"](heatmapElem)
            .append('svg')
            .attr('width', this.width)
            .attr('height', this.height);
    };
    HeatmapRenderer.prototype.addHeatmap = function () {
        var _this = this;
        this.addHeatmapCanvas();
        this.addAxes();
        if (this.panel.yAxis.logBase !== 1 && this.panel.dataFormat !== 'tsbuckets') {
            var logBase = this.panel.yAxis.logBase;
            var domain = this.yScale.domain();
            var tickValues = this.logScaleTickValues(domain, logBase);
            this.data.buckets = Object(_heatmap_data_converter__WEBPACK_IMPORTED_MODULE_8__["mergeZeroBuckets"])(this.data.buckets, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.min(tickValues));
        }
        var cardsData = this.data.cards;
        var maxValueAuto = this.data.cardStats.max;
        var maxValue = this.panel.color.max || maxValueAuto;
        var minValue = this.panel.color.min || 0;
        var colorScheme = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(this.ctrl.colorSchemes, {
            value: this.panel.color.colorScheme,
        });
        this.colorScale = Object(_color_scale__WEBPACK_IMPORTED_MODULE_9__["getColorScale"])(colorScheme, app_core_core__WEBPACK_IMPORTED_MODULE_5__["contextSrv"].user.lightTheme, maxValue, minValue);
        this.opacityScale = Object(_color_scale__WEBPACK_IMPORTED_MODULE_9__["getOpacityScale"])(this.panel.color, maxValue);
        this.setCardSize();
        var cards = this.heatmap.selectAll('.heatmap-card').data(cardsData);
        cards.append('title');
        cards = cards
            .enter()
            .append('rect')
            .attr('x', this.getCardX.bind(this))
            .attr('width', this.getCardWidth.bind(this))
            .attr('y', this.getCardY.bind(this))
            .attr('height', this.getCardHeight.bind(this))
            .attr('rx', this.cardRound)
            .attr('ry', this.cardRound)
            .attr('class', 'bordered heatmap-card')
            .style('fill', this.getCardColor.bind(this))
            .style('stroke', this.getCardColor.bind(this))
            .style('stroke-width', 0)
            .style('opacity', this.getCardOpacity.bind(this));
        var $cards = this.$heatmap.find('.heatmap-card');
        $cards
            .on('mouseenter', function (event) {
            _this.tooltip.mouseOverBucket = true;
            _this.highlightCard(event);
        })
            .on('mouseleave', function (event) {
            _this.tooltip.mouseOverBucket = false;
            _this.resetCardHighLight(event);
        });
    };
    HeatmapRenderer.prototype.highlightCard = function (event) {
        var color = d3__WEBPACK_IMPORTED_MODULE_3__["select"](event.target).style('fill');
        var highlightColor = d3__WEBPACK_IMPORTED_MODULE_3__["color"](color).darker(2);
        var strokeColor = d3__WEBPACK_IMPORTED_MODULE_3__["color"](color).brighter(4);
        var currentCard = d3__WEBPACK_IMPORTED_MODULE_3__["select"](event.target);
        this.tooltip.originalFillColor = color;
        currentCard
            .style('fill', highlightColor.toString())
            .style('stroke', strokeColor.toString())
            .style('stroke-width', 1);
    };
    HeatmapRenderer.prototype.resetCardHighLight = function (event) {
        d3__WEBPACK_IMPORTED_MODULE_3__["select"](event.target)
            .style('fill', this.tooltip.originalFillColor)
            .style('stroke', this.tooltip.originalFillColor)
            .style('stroke-width', 0);
    };
    HeatmapRenderer.prototype.setCardSize = function () {
        var xGridSize = Math.floor(this.xScale(this.data.xBucketSize) - this.xScale(0));
        var yGridSize = Math.floor(this.yScale(this.yScale.invert(0) - this.data.yBucketSize));
        if (this.panel.yAxis.logBase !== 1) {
            var base = this.panel.yAxis.logBase;
            var splitFactor = this.data.yBucketSize || 1;
            yGridSize = Math.floor((this.yScale(1) - this.yScale(base)) / splitFactor);
        }
        this.cardWidth = xGridSize - this.cardPadding * 2;
        this.cardHeight = yGridSize ? yGridSize - this.cardPadding * 2 : 0;
    };
    HeatmapRenderer.prototype.getCardX = function (d) {
        var x;
        if (this.xScale(d.x) < 0) {
            // Cut card left to prevent overlay
            x = this.yAxisWidth + this.cardPadding;
        }
        else {
            x = this.xScale(d.x) + this.yAxisWidth + this.cardPadding;
        }
        return x;
    };
    HeatmapRenderer.prototype.getCardWidth = function (d) {
        var w;
        if (this.xScale(d.x) < 0) {
            // Cut card left to prevent overlay
            var cuttedWidth = this.xScale(d.x) + this.cardWidth;
            w = cuttedWidth > 0 ? cuttedWidth : 0;
        }
        else if (this.xScale(d.x) + this.cardWidth > this.chartWidth) {
            // Cut card right to prevent overlay
            w = this.chartWidth - this.xScale(d.x) - this.cardPadding;
        }
        else {
            w = this.cardWidth;
        }
        // Card width should be MIN_CARD_SIZE at least
        w = Math.max(w, MIN_CARD_SIZE);
        return w;
    };
    HeatmapRenderer.prototype.getCardY = function (d) {
        var y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;
        if (this.panel.yAxis.logBase !== 1 && d.y === 0) {
            y = this.chartBottom - this.cardHeight - this.cardPadding;
        }
        else {
            if (y < this.chartTop) {
                y = this.chartTop;
            }
        }
        return y;
    };
    HeatmapRenderer.prototype.getCardHeight = function (d) {
        var y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;
        var h = this.cardHeight;
        if (this.panel.yAxis.logBase !== 1 && d.y === 0) {
            return this.cardHeight;
        }
        // Cut card height to prevent overlay
        if (y < this.chartTop) {
            h = this.yScale(d.y) - this.cardPadding;
        }
        else if (this.yScale(d.y) > this.chartBottom) {
            h = this.chartBottom - y;
        }
        else if (y + this.cardHeight > this.chartBottom) {
            h = this.chartBottom - y;
        }
        // Height can't be more than chart height
        h = Math.min(h, this.chartHeight);
        // Card height should be MIN_CARD_SIZE at least
        h = Math.max(h, MIN_CARD_SIZE);
        return h;
    };
    HeatmapRenderer.prototype.getCardColor = function (d) {
        if (this.panel.color.mode === 'opacity') {
            return this.panel.color.cardColor;
        }
        else {
            return this.colorScale(d.count);
        }
    };
    HeatmapRenderer.prototype.getCardOpacity = function (d) {
        if (this.panel.color.mode === 'opacity') {
            return this.opacityScale(d.count);
        }
        else {
            return 1;
        }
    };
    HeatmapRenderer.prototype.getEventOffset = function (event) {
        var elemOffset = this.$heatmap.offset();
        var x = Math.floor(event.clientX - elemOffset.left);
        var y = Math.floor(event.clientY - elemOffset.top);
        return { x: x, y: y };
    };
    HeatmapRenderer.prototype.onMouseDown = function (event) {
        var _this = this;
        var offset = this.getEventOffset(event);
        this.selection.active = true;
        this.selection.x1 = offset.x;
        this.mouseUpHandler = function () {
            _this.onMouseUp();
        };
        jquery__WEBPACK_IMPORTED_MODULE_1___default()(document).one('mouseup', this.mouseUpHandler.bind(this));
    };
    HeatmapRenderer.prototype.onMouseUp = function () {
        jquery__WEBPACK_IMPORTED_MODULE_1___default()(document).unbind('mouseup', this.mouseUpHandler.bind(this));
        this.mouseUpHandler = null;
        this.selection.active = false;
        var selectionRange = Math.abs(this.selection.x2 - this.selection.x1);
        if (this.selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {
            var timeFrom = this.xScale.invert(Math.min(this.selection.x1, this.selection.x2) - this.yAxisWidth);
            var timeTo = this.xScale.invert(Math.max(this.selection.x1, this.selection.x2) - this.yAxisWidth);
            this.ctrl.timeSrv.setTime({
                from: moment__WEBPACK_IMPORTED_MODULE_2___default.a.utc(timeFrom),
                to: moment__WEBPACK_IMPORTED_MODULE_2___default.a.utc(timeTo),
            });
        }
        this.clearSelection();
    };
    HeatmapRenderer.prototype.onMouseLeave = function () {
        app_core_core__WEBPACK_IMPORTED_MODULE_5__["appEvents"].emit('graph-hover-clear');
        this.clearCrosshair();
    };
    HeatmapRenderer.prototype.onMouseMove = function (event) {
        if (!this.heatmap) {
            return;
        }
        var offset = this.getEventOffset(event);
        if (this.selection.active) {
            // Clear crosshair and tooltip
            this.clearCrosshair();
            this.tooltip.destroy();
            this.selection.x2 = this.limitSelection(offset.x);
            this.drawSelection(this.selection.x1, this.selection.x2);
        }
        else {
            var pos = this.getEventPos(event, offset);
            this.drawCrosshair(offset.x);
            this.tooltip.show(pos, this.data);
            this.emitGraphHoverEvent(pos);
        }
    };
    HeatmapRenderer.prototype.getEventPos = function (event, offset) {
        var x = this.xScale.invert(offset.x - this.yAxisWidth).valueOf();
        var y = this.yScale.invert(offset.y - this.chartTop);
        var pos = {
            pageX: event.pageX,
            pageY: event.pageY,
            x: x,
            x1: x,
            y: y,
            y1: y,
            panelRelY: null,
            offset: offset,
        };
        return pos;
    };
    HeatmapRenderer.prototype.emitGraphHoverEvent = function (pos) {
        // Set minimum offset to prevent showing legend from another panel
        pos.panelRelY = Math.max(pos.offset.y / this.height, 0.001);
        // broadcast to other graph panels that we are hovering
        app_core_core__WEBPACK_IMPORTED_MODULE_5__["appEvents"].emit('graph-hover', { pos: pos, panel: this.panel });
    };
    HeatmapRenderer.prototype.limitSelection = function (x2) {
        x2 = Math.max(x2, this.yAxisWidth);
        x2 = Math.min(x2, this.chartWidth + this.yAxisWidth);
        return x2;
    };
    HeatmapRenderer.prototype.drawSelection = function (posX1, posX2) {
        if (this.heatmap) {
            this.heatmap.selectAll('.heatmap-selection').remove();
            var selectionX = Math.min(posX1, posX2);
            var selectionWidth = Math.abs(posX1 - posX2);
            if (selectionWidth > MIN_SELECTION_WIDTH) {
                this.heatmap
                    .append('rect')
                    .attr('class', 'heatmap-selection')
                    .attr('x', selectionX)
                    .attr('width', selectionWidth)
                    .attr('y', this.chartTop)
                    .attr('height', this.chartHeight);
            }
        }
    };
    HeatmapRenderer.prototype.clearSelection = function () {
        this.selection.x1 = -1;
        this.selection.x2 = -1;
        if (this.heatmap) {
            this.heatmap.selectAll('.heatmap-selection').remove();
        }
    };
    HeatmapRenderer.prototype.drawCrosshair = function (position) {
        if (this.heatmap) {
            this.heatmap.selectAll('.heatmap-crosshair').remove();
            var posX = position;
            posX = Math.max(posX, this.yAxisWidth);
            posX = Math.min(posX, this.chartWidth + this.yAxisWidth);
            this.heatmap
                .append('g')
                .attr('class', 'heatmap-crosshair')
                .attr('transform', 'translate(' + posX + ',0)')
                .append('line')
                .attr('x1', 1)
                .attr('y1', this.chartTop)
                .attr('x2', 1)
                .attr('y2', this.chartBottom)
                .attr('stroke-width', 1);
        }
    };
    HeatmapRenderer.prototype.drawSharedCrosshair = function (pos) {
        if (this.heatmap && this.ctrl.dashboard.graphTooltip !== 0) {
            var posX = this.xScale(pos.x) + this.yAxisWidth;
            this.drawCrosshair(posX);
        }
    };
    HeatmapRenderer.prototype.clearCrosshair = function () {
        if (this.heatmap) {
            this.heatmap.selectAll('.heatmap-crosshair').remove();
        }
    };
    HeatmapRenderer.prototype.render = function () {
        this.data = this.ctrl.data;
        this.panel = this.ctrl.panel;
        this.timeRange = this.ctrl.range;
        if (!this.setElementHeight() || !this.data) {
            return;
        }
        // Draw default axes and return if no data
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isEmpty(this.data.buckets)) {
            this.addHeatmapCanvas();
            this.addAxes();
            return;
        }
        this.addHeatmap();
        this.scope.yAxisWidth = this.yAxisWidth;
        this.scope.xAxisHeight = this.xAxisHeight;
        this.scope.chartHeight = this.chartHeight;
        this.scope.chartWidth = this.chartWidth;
        this.scope.chartTop = this.chartTop;
    };
    return HeatmapRenderer;
}());



/***/ }),

/***/ "./public/app/plugins/panel/pluginlist/module.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/panel/pluginlist/module.ts ***!
  \*******************************************************/
/*! exports provided: PluginListCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PluginListCtrl", function() { return PluginListCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return PluginListCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../features/panel/panel_ctrl */ "./public/app/features/panel/panel_ctrl.ts");



var PluginListCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PluginListCtrl, _super);
    /** @ngInject */
    function PluginListCtrl($scope, $injector, backendSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.backendSrv = backendSrv;
        // Set and populate defaults
        _this.panelDefaults = {};
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.pluginList = [];
        _this.viewModel = [
            { header: 'Installed Apps', list: [], type: 'app' },
            { header: 'Installed Panels', list: [], type: 'panel' },
            { header: 'Installed Datasources', list: [], type: 'datasource' },
        ];
        _this.update();
        return _this;
    }
    PluginListCtrl.prototype.onInitEditMode = function () {
        this.editorTabIndex = 1;
        this.addEditorTab('Options', 'public/app/plugins/panel/pluginlist/editor.html');
    };
    PluginListCtrl.prototype.gotoPlugin = function (plugin, evt) {
        if (evt) {
            evt.stopPropagation();
        }
        this.$location.url("plugins/" + plugin.id + "/edit");
    };
    PluginListCtrl.prototype.updateAvailable = function (plugin, $event) {
        $event.stopPropagation();
        $event.preventDefault();
        var modalScope = this.$scope.$new(true);
        modalScope.plugin = plugin;
        this.publishAppEvent('show-modal', {
            src: 'public/app/features/plugins/partials/update_instructions.html',
            scope: modalScope,
        });
    };
    PluginListCtrl.prototype.update = function () {
        var _this = this;
        this.backendSrv.get('api/plugins', { embedded: 0, core: 0 }).then(function (plugins) {
            _this.pluginList = plugins;
            _this.viewModel[0].list = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(plugins, { type: 'app' });
            _this.viewModel[1].list = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(plugins, { type: 'panel' });
            _this.viewModel[2].list = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.filter(plugins, { type: 'datasource' });
            for (var _i = 0, _a = _this.pluginList; _i < _a.length; _i++) {
                var plugin = _a[_i];
                if (plugin.hasUpdate) {
                    plugin.state = 'has-update';
                }
                else if (!plugin.enabled) {
                    plugin.state = 'not-enabled';
                }
            }
        });
    };
    PluginListCtrl.templateUrl = 'module.html';
    PluginListCtrl.scrollable = true;
    return PluginListCtrl;
}(_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_2__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/singlestat/module.ts":
/*!*******************************************************!*\
  !*** ./public/app/plugins/panel/singlestat/module.ts ***!
  \*******************************************************/
/*! exports provided: SingleStatCtrl, PanelCtrl, getColorForValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleStatCtrl", function() { return SingleStatCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return SingleStatCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getColorForValue", function() { return getColorForValue; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vendor/flot/jquery.flot */ "./public/vendor/flot/jquery.flot.js");
/* harmony import */ var vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vendor/flot/jquery.flot.gauge */ "./public/vendor/flot/jquery.flot.gauge.js");
/* harmony import */ var vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(vendor_flot_jquery_flot_gauge__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var app_features_dashboard_panellinks_link_srv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! app/features/dashboard/panellinks/link_srv */ "./public/app/features/dashboard/panellinks/link_srv.ts");
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");
/* harmony import */ var app_core_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! app/core/config */ "./public/app/core/config.ts");
/* harmony import */ var app_core_time_series2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! app/core/time_series2 */ "./public/app/core/time_series2.ts");
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");










var SingleStatCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](SingleStatCtrl, _super);
    /** @ngInject */
    function SingleStatCtrl($scope, $injector, linkSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.linkSrv = linkSrv;
        _this.dataType = 'timeseries';
        _this.valueNameOptions = [
            { value: 'min', text: 'Min' },
            { value: 'max', text: 'Max' },
            { value: 'avg', text: 'Average' },
            { value: 'current', text: 'Current' },
            { value: 'total', text: 'Total' },
            { value: 'name', text: 'Name' },
            { value: 'first', text: 'First' },
            { value: 'delta', text: 'Delta' },
            { value: 'diff', text: 'Difference' },
            { value: 'range', text: 'Range' },
            { value: 'last_time', text: 'Time of last point' },
        ];
        // Set and populate defaults
        _this.panelDefaults = {
            links: [],
            datasource: null,
            maxDataPoints: 100,
            interval: null,
            targets: [{}],
            cacheTimeout: null,
            format: 'none',
            prefix: '',
            postfix: '',
            nullText: null,
            valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],
            mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],
            rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],
            mappingType: 1,
            nullPointMode: 'connected',
            valueName: 'avg',
            prefixFontSize: '50%',
            valueFontSize: '80%',
            postfixFontSize: '50%',
            thresholds: '',
            colorBackground: false,
            colorValue: false,
            colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],
            sparkline: {
                show: false,
                full: false,
                lineColor: 'rgb(31, 120, 193)',
                fillColor: 'rgba(31, 118, 189, 0.18)',
            },
            gauge: {
                show: false,
                minValue: 0,
                maxValue: 100,
                thresholdMarkers: true,
                thresholdLabels: false,
            },
            tableColumn: '',
        };
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        _this.events.on('data-received', _this.onDataReceived.bind(_this));
        _this.events.on('data-error', _this.onDataError.bind(_this));
        _this.events.on('data-snapshot-load', _this.onDataReceived.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.onSparklineColorChange = _this.onSparklineColorChange.bind(_this);
        _this.onSparklineFillChange = _this.onSparklineFillChange.bind(_this);
        return _this;
    }
    SingleStatCtrl.prototype.onInitEditMode = function () {
        this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];
        this.addEditorTab('Options', 'public/app/plugins/panel/singlestat/editor.html', 2);
        this.addEditorTab('Value Mappings', 'public/app/plugins/panel/singlestat/mappings.html', 3);
        this.unitFormats = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].getUnitFormats();
    };
    SingleStatCtrl.prototype.setUnitFormat = function (subItem) {
        this.panel.format = subItem.value;
        this.refresh();
    };
    SingleStatCtrl.prototype.onDataError = function (err) {
        this.onDataReceived([]);
    };
    SingleStatCtrl.prototype.onDataReceived = function (dataList) {
        var data = {};
        if (dataList.length > 0 && dataList[0].type === 'table') {
            this.dataType = 'table';
            var tableData = dataList.map(this.tableHandler.bind(this));
            this.setTableValues(tableData, data);
        }
        else {
            this.dataType = 'timeseries';
            this.series = dataList.map(this.seriesHandler.bind(this));
            this.setValues(data);
        }
        this.data = data;
        this.render();
    };
    SingleStatCtrl.prototype.seriesHandler = function (seriesData) {
        var series = new app_core_time_series2__WEBPACK_IMPORTED_MODULE_8__["default"]({
            datapoints: seriesData.datapoints || [],
            alias: seriesData.target,
        });
        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);
        return series;
    };
    SingleStatCtrl.prototype.tableHandler = function (tableData) {
        var datapoints = [];
        var columnNames = {};
        tableData.columns.forEach(function (column, columnIndex) {
            columnNames[columnIndex] = column.text;
        });
        this.tableColumnOptions = columnNames;
        if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(tableData.columns, ['text', this.panel.tableColumn])) {
            this.setTableColumnToSensibleDefault(tableData);
        }
        tableData.rows.forEach(function (row) {
            var datapoint = {};
            row.forEach(function (value, columnIndex) {
                var key = columnNames[columnIndex];
                datapoint[key] = value;
            });
            datapoints.push(datapoint);
        });
        return datapoints;
    };
    SingleStatCtrl.prototype.setTableColumnToSensibleDefault = function (tableData) {
        if (tableData.columns.length === 1) {
            this.panel.tableColumn = tableData.columns[0].text;
        }
        else {
            this.panel.tableColumn = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.find(tableData.columns, function (col) {
                return col.type !== 'time';
            }).text;
        }
    };
    SingleStatCtrl.prototype.setTableValues = function (tableData, data) {
        if (!tableData || tableData.length === 0) {
            return;
        }
        if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {
            return;
        }
        var datapoint = tableData[0][0];
        data.value = datapoint[this.panel.tableColumn];
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(data.value)) {
            data.valueFormatted = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.escape(data.value);
            data.value = 0;
            data.valueRounded = 0;
        }
        else {
            var decimalInfo = this.getDecimalsForValue(data.value);
            var formatFunc = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].valueFormats[this.panel.format];
            data.valueFormatted = formatFunc(datapoint[this.panel.tableColumn], decimalInfo.decimals, decimalInfo.scaledDecimals);
            data.valueRounded = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].roundValue(data.value, this.panel.decimals || 0);
        }
        this.setValueMapping(data);
    };
    SingleStatCtrl.prototype.canModifyText = function () {
        return !this.panel.gauge.show;
    };
    SingleStatCtrl.prototype.setColoring = function (options) {
        if (options.background) {
            this.panel.colorValue = false;
            this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];
        }
        else {
            this.panel.colorBackground = false;
            this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];
        }
        this.render();
    };
    SingleStatCtrl.prototype.invertColorOrder = function () {
        var tmp = this.panel.colors[0];
        this.panel.colors[0] = this.panel.colors[2];
        this.panel.colors[2] = tmp;
        this.render();
    };
    SingleStatCtrl.prototype.onColorChange = function (panelColorIndex) {
        var _this = this;
        return function (color) {
            _this.panel.colors[panelColorIndex] = color;
            _this.render();
        };
    };
    SingleStatCtrl.prototype.onSparklineColorChange = function (newColor) {
        this.panel.sparkline.lineColor = newColor;
        this.render();
    };
    SingleStatCtrl.prototype.onSparklineFillChange = function (newColor) {
        this.panel.sparkline.fillColor = newColor;
        this.render();
    };
    SingleStatCtrl.prototype.getDecimalsForValue = function (value) {
        if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isNumber(this.panel.decimals)) {
            return { decimals: this.panel.decimals, scaledDecimals: null };
        }
        var delta = value / 2;
        var dec = -Math.floor(Math.log(delta) / Math.LN10);
        var magn = Math.pow(10, -dec);
        var norm = delta / magn; // norm is between 1.0 and 10.0
        var size;
        if (norm < 1.5) {
            size = 1;
        }
        else if (norm < 3) {
            size = 2;
            // special case for 2.5, requires an extra decimal
            if (norm > 2.25) {
                size = 2.5;
                ++dec;
            }
        }
        else if (norm < 7.5) {
            size = 5;
        }
        else {
            size = 10;
        }
        size *= magn;
        // reduce starting decimals if not needed
        if (Math.floor(value) === value) {
            dec = 0;
        }
        var result = {};
        result.decimals = Math.max(0, dec);
        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;
        return result;
    };
    SingleStatCtrl.prototype.setValues = function (data) {
        data.flotpairs = [];
        if (this.series.length > 1) {
            var error = new Error();
            error.message = 'Multiple Series Error';
            error.data =
                'Metric query returns ' +
                    this.series.length +
                    ' series. Single Stat Panel expects a single series.\n\nResponse:\n' +
                    JSON.stringify(this.series);
            throw error;
        }
        if (this.series && this.series.length > 0) {
            var lastPoint = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.last(this.series[0].datapoints);
            var lastValue = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(lastPoint) ? lastPoint[0] : null;
            if (this.panel.valueName === 'name') {
                data.value = 0;
                data.valueRounded = 0;
                data.valueFormatted = this.series[0].alias;
            }
            else if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isString(lastValue)) {
                data.value = 0;
                data.valueFormatted = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.escape(lastValue);
                data.valueRounded = 0;
            }
            else if (this.panel.valueName === 'last_time') {
                var formatFunc = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].valueFormats[this.panel.format];
                data.value = lastPoint[1];
                data.valueRounded = data.value;
                data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());
            }
            else {
                data.value = this.series[0].stats[this.panel.valueName];
                data.flotpairs = this.series[0].flotpairs;
                var decimalInfo = this.getDecimalsForValue(data.value);
                var formatFunc = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].valueFormats[this.panel.format];
                data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);
                data.valueRounded = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_6__["default"].roundValue(data.value, decimalInfo.decimals);
            }
            // Add $__name variable for using in prefix or postfix
            data.scopedVars = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.extend({}, this.panel.scopedVars);
            data.scopedVars['__name'] = { value: this.series[0].label };
        }
        this.setValueMapping(data);
    };
    SingleStatCtrl.prototype.setValueMapping = function (data) {
        // check value to text mappings if its enabled
        if (this.panel.mappingType === 1) {
            for (var i = 0; i < this.panel.valueMaps.length; i++) {
                var map = this.panel.valueMaps[i];
                // special null case
                if (map.value === 'null') {
                    if (data.value === null || data.value === void 0) {
                        data.valueFormatted = map.text;
                        return;
                    }
                    continue;
                }
                // value/number to text mapping
                var value = parseFloat(map.value);
                if (value === data.valueRounded) {
                    data.valueFormatted = map.text;
                    return;
                }
            }
        }
        else if (this.panel.mappingType === 2) {
            for (var i = 0; i < this.panel.rangeMaps.length; i++) {
                var map = this.panel.rangeMaps[i];
                // special null case
                if (map.from === 'null' && map.to === 'null') {
                    if (data.value === null || data.value === void 0) {
                        data.valueFormatted = map.text;
                        return;
                    }
                    continue;
                }
                // value/number to range mapping
                var from = parseFloat(map.from);
                var to = parseFloat(map.to);
                if (to >= data.valueRounded && from <= data.valueRounded) {
                    data.valueFormatted = map.text;
                    return;
                }
            }
        }
        if (data.value === null || data.value === void 0) {
            data.valueFormatted = 'no value';
        }
    };
    SingleStatCtrl.prototype.removeValueMap = function (map) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(this.panel.valueMaps, map);
        this.panel.valueMaps.splice(index, 1);
        this.render();
    };
    SingleStatCtrl.prototype.addValueMap = function () {
        this.panel.valueMaps.push({ value: '', op: '=', text: '' });
    };
    SingleStatCtrl.prototype.removeRangeMap = function (rangeMap) {
        var index = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.indexOf(this.panel.rangeMaps, rangeMap);
        this.panel.rangeMaps.splice(index, 1);
        this.render();
    };
    SingleStatCtrl.prototype.addRangeMap = function () {
        this.panel.rangeMaps.push({ from: '', to: '', text: '' });
    };
    SingleStatCtrl.prototype.link = function (scope, elem, attrs, ctrl) {
        var $location = this.$location;
        var linkSrv = this.linkSrv;
        var $timeout = this.$timeout;
        var panel = ctrl.panel;
        var templateSrv = this.templateSrv;
        var data, linkInfo;
        var $panelContainer = elem.find('.panel-container');
        elem = elem.find('.singlestat-panel');
        function applyColoringThresholds(value, valueString) {
            var color = getColorForValue(data, value);
            if (color) {
                return '<span style="color:' + color + '">' + valueString + '</span>';
            }
            return valueString;
        }
        function getSpan(className, fontSize, value) {
            value = templateSrv.replace(value, data.scopedVars);
            return '<span class="' + className + '" style="font-size:' + fontSize + '">' + value + '</span>';
        }
        function getBigValueHtml() {
            var body = '<div class="singlestat-panel-value-container">';
            if (panel.prefix) {
                var prefix = panel.prefix;
                if (panel.colorPrefix) {
                    prefix = applyColoringThresholds(data.value, panel.prefix);
                }
                body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);
            }
            var value = data.valueFormatted;
            if (panel.colorValue) {
                value = applyColoringThresholds(data.value, value);
            }
            body += getSpan('singlestat-panel-value', panel.valueFontSize, value);
            if (panel.postfix) {
                var postfix = panel.postfix;
                if (panel.colorPostfix) {
                    postfix = applyColoringThresholds(data.value, panel.postfix);
                }
                body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);
            }
            body += '</div>';
            return body;
        }
        function getValueText() {
            var result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';
            result += data.valueFormatted;
            result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';
            return result;
        }
        function addGauge() {
            var width = elem.width();
            var height = elem.height();
            // Allow to use a bit more space for wide gauges
            var dimension = Math.min(width, height * 1.3);
            ctrl.invalidGaugeRange = false;
            if (panel.gauge.minValue > panel.gauge.maxValue) {
                ctrl.invalidGaugeRange = true;
                return;
            }
            var plotCanvas = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<div></div>');
            var plotCss = {
                top: '10px',
                margin: 'auto',
                position: 'relative',
                height: height * 0.9 + 'px',
                width: dimension + 'px',
            };
            plotCanvas.css(plotCss);
            var thresholds = [];
            for (var i = 0; i < data.thresholds.length; i++) {
                thresholds.push({
                    value: data.thresholds[i],
                    color: data.colorMap[i],
                });
            }
            thresholds.push({
                value: panel.gauge.maxValue,
                color: data.colorMap[data.colorMap.length - 1],
            });
            var bgColor = app_core_config__WEBPACK_IMPORTED_MODULE_7__["default"].bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';
            var fontScale = parseInt(panel.valueFontSize, 10) / 100;
            var fontSize = Math.min(dimension / 5, 100) * fontScale;
            // Reduce gauge width if threshold labels enabled
            var gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;
            var gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;
            var thresholdMarkersWidth = gaugeWidth / 5;
            var thresholdLabelFontSize = fontSize / 2.5;
            var options = {
                series: {
                    gauges: {
                        gauge: {
                            min: panel.gauge.minValue,
                            max: panel.gauge.maxValue,
                            background: { color: bgColor },
                            border: { color: null },
                            shadow: { show: false },
                            width: gaugeWidth,
                        },
                        frame: { show: false },
                        label: { show: false },
                        layout: { margin: 0, thresholdWidth: 0 },
                        cell: { border: { width: 0 } },
                        threshold: {
                            values: thresholds,
                            label: {
                                show: panel.gauge.thresholdLabels,
                                margin: thresholdMarkersWidth + 1,
                                font: { size: thresholdLabelFontSize },
                            },
                            show: panel.gauge.thresholdMarkers,
                            width: thresholdMarkersWidth,
                        },
                        value: {
                            color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,
                            formatter: function () {
                                return getValueText();
                            },
                            font: {
                                size: fontSize,
                                family: '"Helvetica Neue", Helvetica, Arial, sans-serif',
                            },
                        },
                        show: true,
                    },
                },
            };
            elem.append(plotCanvas);
            var plotSeries = {
                data: [[0, data.value]],
            };
            jquery__WEBPACK_IMPORTED_MODULE_2___default.a.plot(plotCanvas, [plotSeries], options);
        }
        function addSparkline() {
            var width = elem.width() + 20;
            if (width < 30) {
                // element has not gotten it's width yet
                // delay sparkline render
                setTimeout(addSparkline, 30);
                return;
            }
            var height = ctrl.height;
            var plotCanvas = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<div></div>');
            var plotCss = {};
            plotCss.position = 'absolute';
            if (panel.sparkline.full) {
                plotCss.bottom = '5px';
                plotCss.left = '-5px';
                plotCss.width = width - 10 + 'px';
                var dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;
                plotCss.height = height - dynamicHeightMargin + 'px';
            }
            else {
                plotCss.bottom = '0px';
                plotCss.left = '-5px';
                plotCss.width = width - 10 + 'px';
                plotCss.height = Math.floor(height * 0.25) + 'px';
            }
            plotCanvas.css(plotCss);
            var options = {
                legend: { show: false },
                series: {
                    lines: {
                        show: true,
                        fill: 1,
                        zero: false,
                        lineWidth: 1,
                        fillColor: panel.sparkline.fillColor,
                    },
                },
                yaxes: { show: false },
                xaxis: {
                    show: false,
                    mode: 'time',
                    min: ctrl.range.from.valueOf(),
                    max: ctrl.range.to.valueOf(),
                },
                grid: { hoverable: false, show: false },
            };
            elem.append(plotCanvas);
            var plotSeries = {
                data: data.flotpairs,
                color: panel.sparkline.lineColor,
            };
            jquery__WEBPACK_IMPORTED_MODULE_2___default.a.plot(plotCanvas, [plotSeries], options);
        }
        function render() {
            if (!ctrl.data) {
                return;
            }
            data = ctrl.data;
            // get thresholds
            data.thresholds = panel.thresholds.split(',').map(function (strVale) {
                return Number(strVale.trim());
            });
            data.colorMap = panel.colors;
            var body = panel.gauge.show ? '' : getBigValueHtml();
            if (panel.colorBackground) {
                var color = getColorForValue(data, data.value);
                if (color) {
                    $panelContainer.css('background-color', color);
                    if (scope.fullscreen) {
                        elem.css('background-color', color);
                    }
                    else {
                        elem.css('background-color', '');
                    }
                }
            }
            else {
                $panelContainer.css('background-color', '');
                elem.css('background-color', '');
            }
            elem.html(body);
            if (panel.sparkline.show) {
                addSparkline();
            }
            if (panel.gauge.show) {
                addGauge();
            }
            elem.toggleClass('pointer', panel.links.length > 0);
            if (panel.links.length > 0) {
                linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);
            }
            else {
                linkInfo = null;
            }
        }
        function hookupDrilldownLinkTooltip() {
            // drilldown link tooltip
            var drilldownTooltip = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<div id="tooltip" class="">hello</div>"');
            elem.mouseleave(function () {
                if (panel.links.length === 0) {
                    return;
                }
                $timeout(function () {
                    drilldownTooltip.detach();
                });
            });
            elem.click(function (evt) {
                if (!linkInfo) {
                    return;
                }
                // ignore title clicks in title
                if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(evt).parents('.panel-header').length > 0) {
                    return;
                }
                if (linkInfo.target === '_blank') {
                    window.open(linkInfo.href, '_blank');
                    return;
                }
                if (linkInfo.href.indexOf('http') === 0) {
                    window.location.href = linkInfo.href;
                }
                else {
                    $timeout(function () {
                        $location.url(linkInfo.href);
                    });
                }
                drilldownTooltip.detach();
            });
            elem.mousemove(function (e) {
                if (!linkInfo) {
                    return;
                }
                drilldownTooltip.text('click to go to: ' + linkInfo.title);
                drilldownTooltip.place_tt(e.pageX, e.pageY - 50);
            });
        }
        hookupDrilldownLinkTooltip();
        this.events.on('render', function () {
            render();
            ctrl.renderingCompleted();
        });
    };
    SingleStatCtrl.templateUrl = 'module.html';
    return SingleStatCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_9__["MetricsPanelCtrl"]));
function getColorForValue(data, value) {
    if (!lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isFinite(value)) {
        return null;
    }
    for (var i = data.thresholds.length; i > 0; i--) {
        if (value >= data.thresholds[i - 1]) {
            return data.colorMap[i];
        }
    }
    return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.first(data.colorMap);
}



/***/ }),

/***/ "./public/app/plugins/panel/table/column_options.ts":
/*!**********************************************************!*\
  !*** ./public/app/plugins/panel/table/column_options.ts ***!
  \**********************************************************/
/*! exports provided: ColumnOptionsCtrl, columnOptionsTab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnOptionsCtrl", function() { return ColumnOptionsCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnOptionsTab", function() { return columnOptionsTab; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");


var ColumnOptionsCtrl = /** @class */ (function () {
    /** @ngInject */
    function ColumnOptionsCtrl($scope) {
        var _this = this;
        $scope.editor = this;
        this.activeStyleIndex = 0;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.unitFormats = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_1__["default"].getUnitFormats();
        this.colorModes = [
            { text: 'Disabled', value: null },
            { text: 'Cell', value: 'cell' },
            { text: 'Value', value: 'value' },
            { text: 'Row', value: 'row' },
        ];
        this.columnTypes = [
            { text: 'Number', value: 'number' },
            { text: 'String', value: 'string' },
            { text: 'Date', value: 'date' },
            { text: 'Hidden', value: 'hidden' },
        ];
        this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];
        this.dateFormats = [
            { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },
            { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },
            { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },
            { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },
        ];
        this.mappingTypes = [{ text: 'Value to text', value: 1 }, { text: 'Range to text', value: 2 }];
        this.getColumnNames = function () {
            if (!_this.panelCtrl.table) {
                return [];
            }
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(_this.panelCtrl.table.columns, function (col) {
                return col.text;
            });
        };
        this.onColorChange = this.onColorChange.bind(this);
    }
    ColumnOptionsCtrl.prototype.render = function () {
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.setUnitFormat = function (column, subItem) {
        column.unit = subItem.value;
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.addColumnStyle = function () {
        var newStyleRule = {
            unit: 'short',
            type: 'number',
            alias: '',
            decimals: 2,
            colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],
            colorMode: null,
            pattern: '',
            dateFormat: 'YYYY-MM-DD HH:mm:ss',
            thresholds: [],
            mappingType: 1,
        };
        var styles = this.panel.styles;
        var stylesCount = styles.length;
        var indexToInsert = stylesCount;
        // check if last is a catch all rule, then add it before that one
        if (stylesCount > 0) {
            var last = styles[stylesCount - 1];
            if (last.pattern === '/.*/') {
                indexToInsert = stylesCount - 1;
            }
        }
        styles.splice(indexToInsert, 0, newStyleRule);
        this.activeStyleIndex = indexToInsert;
    };
    ColumnOptionsCtrl.prototype.removeColumnStyle = function (style) {
        this.panel.styles = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.without(this.panel.styles, style);
    };
    ColumnOptionsCtrl.prototype.invertColorOrder = function (index) {
        var ref = this.panel.styles[index].colors;
        var copy = ref[0];
        ref[0] = ref[2];
        ref[2] = copy;
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.onColorChange = function (styleIndex, colorIndex) {
        var _this = this;
        return function (newColor) {
            _this.panel.styles[styleIndex].colors[colorIndex] = newColor;
            _this.render();
        };
    };
    ColumnOptionsCtrl.prototype.addValueMap = function (style) {
        if (!style.valueMaps) {
            style.valueMaps = [];
        }
        style.valueMaps.push({ value: '', text: '' });
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.removeValueMap = function (style, index) {
        style.valueMaps.splice(index, 1);
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.addRangeMap = function (style) {
        if (!style.rangeMaps) {
            style.rangeMaps = [];
        }
        style.rangeMaps.push({ from: '', to: '', text: '' });
        this.panelCtrl.render();
    };
    ColumnOptionsCtrl.prototype.removeRangeMap = function (style, index) {
        style.rangeMaps.splice(index, 1);
        this.panelCtrl.render();
    };
    return ColumnOptionsCtrl;
}());

/** @ngInject */
function columnOptionsTab($q, uiSegmentSrv) {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/plugins/panel/table/column_options.html',
        controller: ColumnOptionsCtrl,
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/table/editor.ts":
/*!**************************************************!*\
  !*** ./public/app/plugins/panel/table/editor.ts ***!
  \**************************************************/
/*! exports provided: TablePanelEditorCtrl, tablePanelEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TablePanelEditorCtrl", function() { return TablePanelEditorCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tablePanelEditor", function() { return tablePanelEditor; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _transformers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformers */ "./public/app/plugins/panel/table/transformers.ts");


var TablePanelEditorCtrl = /** @class */ (function () {
    /** @ngInject */
    function TablePanelEditorCtrl($scope, $q, uiSegmentSrv) {
        this.$q = $q;
        this.uiSegmentSrv = uiSegmentSrv;
        $scope.editor = this;
        this.panelCtrl = $scope.ctrl;
        this.panel = this.panelCtrl.panel;
        this.transformers = _transformers__WEBPACK_IMPORTED_MODULE_1__["transformers"];
        this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];
        this.addColumnSegment = uiSegmentSrv.newPlusButton();
        this.updateTransformHints();
    }
    TablePanelEditorCtrl.prototype.updateTransformHints = function () {
        this.canSetColumns = false;
        this.columnsHelpMessage = '';
        switch (this.panel.transform) {
            case 'timeseries_aggregations': {
                this.canSetColumns = true;
                break;
            }
            case 'json': {
                this.canSetColumns = true;
                break;
            }
            case 'table': {
                this.columnsHelpMessage = 'Columns and their order are determined by the data query';
            }
        }
    };
    TablePanelEditorCtrl.prototype.getColumnOptions = function () {
        var _this = this;
        if (!this.panelCtrl.dataRaw) {
            return this.$q.when([]);
        }
        var columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);
        var segments = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(columns, function (c) { return _this.uiSegmentSrv.newSegment({ value: c.text }); });
        return this.$q.when(segments);
    };
    TablePanelEditorCtrl.prototype.addColumn = function () {
        var columns = _transformers__WEBPACK_IMPORTED_MODULE_1__["transformers"][this.panel.transform].getColumns(this.panelCtrl.dataRaw);
        var column = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.find(columns, { text: this.addColumnSegment.value });
        if (column) {
            this.panel.columns.push(column);
            this.render();
        }
        var plusButton = this.uiSegmentSrv.newPlusButton();
        this.addColumnSegment.html = plusButton.html;
        this.addColumnSegment.value = plusButton.value;
    };
    TablePanelEditorCtrl.prototype.transformChanged = function () {
        this.panel.columns = [];
        if (this.panel.transform === 'timeseries_aggregations') {
            this.panel.columns.push({ text: 'Avg', value: 'avg' });
        }
        this.updateTransformHints();
        this.render();
    };
    TablePanelEditorCtrl.prototype.render = function () {
        this.panelCtrl.render();
    };
    TablePanelEditorCtrl.prototype.removeColumn = function (column) {
        this.panel.columns = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.without(this.panel.columns, column);
        this.panelCtrl.render();
    };
    return TablePanelEditorCtrl;
}());

/** @ngInject */
function tablePanelEditor($q, uiSegmentSrv) {
    'use strict';
    return {
        restrict: 'E',
        scope: true,
        templateUrl: 'public/app/plugins/panel/table/editor.html',
        controller: TablePanelEditorCtrl,
    };
}


/***/ }),

/***/ "./public/app/plugins/panel/table/module.ts":
/*!**************************************************!*\
  !*** ./public/app/plugins/panel/table/module.ts ***!
  \**************************************************/
/*! exports provided: TablePanelCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TablePanelCtrl", function() { return TablePanelCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return TablePanelCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js-exposed");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var _transformers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transformers */ "./public/app/plugins/panel/table/transformers.ts");
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./editor */ "./public/app/plugins/panel/table/editor.ts");
/* harmony import */ var _column_options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./column_options */ "./public/app/plugins/panel/table/column_options.ts");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./renderer */ "./public/app/plugins/panel/table/renderer.ts");








var TablePanelCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TablePanelCtrl, _super);
    /** @ngInject */
    function TablePanelCtrl($scope, $injector, templateSrv, annotationsSrv, $sanitize, variableSrv) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.annotationsSrv = annotationsSrv;
        _this.$sanitize = $sanitize;
        _this.variableSrv = variableSrv;
        _this.panelDefaults = {
            targets: [{}],
            transform: 'timeseries_to_columns',
            pageSize: null,
            showHeader: true,
            styles: [
                {
                    type: 'date',
                    pattern: 'Time',
                    alias: 'Time',
                    dateFormat: 'YYYY-MM-DD HH:mm:ss',
                },
                {
                    unit: 'short',
                    type: 'number',
                    alias: '',
                    decimals: 2,
                    colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],
                    colorMode: null,
                    pattern: '/.*/',
                    thresholds: [],
                },
            ],
            columns: [],
            scroll: true,
            fontSize: '100%',
            sort: { col: 0, desc: true },
        };
        _this.pageIndex = 0;
        if (_this.panel.styles === void 0) {
            _this.panel.styles = _this.panel.columns;
            _this.panel.columns = _this.panel.fields;
            delete _this.panel.columns;
            delete _this.panel.fields;
        }
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        _this.events.on('data-received', _this.onDataReceived.bind(_this));
        _this.events.on('data-error', _this.onDataError.bind(_this));
        _this.events.on('data-snapshot-load', _this.onDataReceived.bind(_this));
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.events.on('init-panel-actions', _this.onInitPanelActions.bind(_this));
        return _this;
    }
    TablePanelCtrl.prototype.onInitEditMode = function () {
        this.addEditorTab('Options', _editor__WEBPACK_IMPORTED_MODULE_5__["tablePanelEditor"], 2);
        this.addEditorTab('Column Styles', _column_options__WEBPACK_IMPORTED_MODULE_6__["columnOptionsTab"], 3);
    };
    TablePanelCtrl.prototype.onInitPanelActions = function (actions) {
        actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });
    };
    TablePanelCtrl.prototype.issueQueries = function (datasource) {
        this.pageIndex = 0;
        if (this.panel.transform === 'annotations') {
            this.setTimeQueryStart();
            return this.annotationsSrv
                .getAnnotations({
                dashboard: this.dashboard,
                panel: this.panel,
                range: this.range,
            })
                .then(function (annotations) {
                return { data: annotations };
            });
        }
        return _super.prototype.issueQueries.call(this, datasource);
    };
    TablePanelCtrl.prototype.onDataError = function (err) {
        this.dataRaw = [];
        this.render();
    };
    TablePanelCtrl.prototype.onDataReceived = function (dataList) {
        this.dataRaw = dataList;
        this.pageIndex = 0;
        // automatically correct transform mode based on data
        if (this.dataRaw && this.dataRaw.length) {
            if (this.dataRaw[0].type === 'table') {
                this.panel.transform = 'table';
            }
            else {
                if (this.dataRaw[0].type === 'docs') {
                    this.panel.transform = 'json';
                }
                else {
                    if (this.panel.transform === 'table' || this.panel.transform === 'json') {
                        this.panel.transform = 'timeseries_to_rows';
                    }
                }
            }
        }
        this.render();
    };
    TablePanelCtrl.prototype.render = function () {
        this.table = Object(_transformers__WEBPACK_IMPORTED_MODULE_4__["transformDataToTable"])(this.dataRaw, this.panel);
        this.table.sort(this.panel.sort);
        this.renderer = new _renderer__WEBPACK_IMPORTED_MODULE_7__["TableRenderer"](this.panel, this.table, this.dashboard.isTimezoneUtc(), this.$sanitize, this.templateSrv);
        return _super.prototype.render.call(this, this.table);
    };
    TablePanelCtrl.prototype.toggleColumnSort = function (col, colIndex) {
        // remove sort flag from current column
        if (this.table.columns[this.panel.sort.col]) {
            this.table.columns[this.panel.sort.col].sort = false;
        }
        if (this.panel.sort.col === colIndex) {
            if (this.panel.sort.desc) {
                this.panel.sort.desc = false;
            }
            else {
                this.panel.sort.col = null;
            }
        }
        else {
            this.panel.sort.col = colIndex;
            this.panel.sort.desc = true;
        }
        this.render();
    };
    TablePanelCtrl.prototype.moveQuery = function (target, direction) {
        _super.prototype.moveQuery.call(this, target, direction);
        _super.prototype.refresh.call(this);
    };
    TablePanelCtrl.prototype.exportCsv = function () {
        var scope = this.$scope.$new(true);
        scope.tableData = this.renderer.render_values();
        scope.panel = 'table';
        this.publishAppEvent('show-modal', {
            templateHtml: '<export-data-modal panel="panel" data="tableData"></export-data-modal>',
            scope: scope,
            modalClass: 'modal--narrow',
        });
    };
    TablePanelCtrl.prototype.link = function (scope, elem, attrs, ctrl) {
        var data;
        var panel = ctrl.panel;
        var pageCount = 0;
        function getTableHeight() {
            var panelHeight = ctrl.height;
            if (pageCount > 1) {
                panelHeight -= 26;
            }
            return panelHeight - 31 + 'px';
        }
        function appendTableRows(tbodyElem) {
            ctrl.renderer.setTable(data);
            tbodyElem.empty();
            tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));
        }
        function switchPage(e) {
            var el = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.currentTarget);
            ctrl.pageIndex = parseInt(el.text(), 10) - 1;
            renderPanel();
        }
        function appendPaginationControls(footerElem) {
            footerElem.empty();
            var pageSize = panel.pageSize || 100;
            pageCount = Math.ceil(data.rows.length / pageSize);
            if (pageCount === 1) {
                return;
            }
            var startPage = Math.max(ctrl.pageIndex - 3, 0);
            var endPage = Math.min(pageCount, startPage + 9);
            var paginationList = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<ul></ul>');
            for (var i = startPage; i < endPage; i++) {
                var activeClass = i === ctrl.pageIndex ? 'active' : '';
                var pageLinkElem = jquery__WEBPACK_IMPORTED_MODULE_2___default()('<li><a class="table-panel-page-link pointer ' + activeClass + '">' + (i + 1) + '</a></li>');
                paginationList.append(pageLinkElem);
            }
            footerElem.append(paginationList);
        }
        function renderPanel() {
            var panelElem = elem.parents('.panel-content');
            var rootElem = elem.find('.table-panel-scroll');
            var tbodyElem = elem.find('tbody');
            var footerElem = elem.find('.table-panel-footer');
            elem.css({ 'font-size': panel.fontSize });
            panelElem.addClass('table-panel-content');
            appendTableRows(tbodyElem);
            appendPaginationControls(footerElem);
            rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });
        }
        // hook up link tooltips
        elem.tooltip({
            selector: '[data-link-tooltip]',
        });
        function addFilterClicked(e) {
            var filterData = jquery__WEBPACK_IMPORTED_MODULE_2___default()(e.currentTarget).data();
            var options = {
                datasource: panel.datasource,
                key: data.columns[filterData.column].text,
                value: data.rows[filterData.row][filterData.column],
                operator: filterData.operator,
            };
            ctrl.variableSrv.setAdhocFilter(options);
        }
        elem.on('click', '.table-panel-page-link', switchPage);
        elem.on('click', '.table-panel-filter-link', addFilterClicked);
        var unbindDestroy = scope.$on('$destroy', function () {
            elem.off('click', '.table-panel-page-link');
            elem.off('click', '.table-panel-filter-link');
            unbindDestroy();
        });
        ctrl.events.on('render', function (renderData) {
            data = renderData || data;
            if (data) {
                renderPanel();
            }
            ctrl.renderingCompleted();
        });
    };
    TablePanelCtrl.templateUrl = 'module.html';
    return TablePanelCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_3__["MetricsPanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/panel/table/renderer.ts":
/*!****************************************************!*\
  !*** ./public/app/plugins/panel/table/renderer.ts ***!
  \****************************************************/
/*! exports provided: TableRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableRenderer", function() { return TableRenderer; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/core/utils/kbn */ "./public/app/core/utils/kbn.ts");



var TableRenderer = /** @class */ (function () {
    function TableRenderer(panel, table, isUtc, sanitize, templateSrv) {
        this.panel = panel;
        this.table = table;
        this.isUtc = isUtc;
        this.sanitize = sanitize;
        this.templateSrv = templateSrv;
        this.initColumns();
    }
    TableRenderer.prototype.setTable = function (table) {
        this.table = table;
        this.initColumns();
    };
    TableRenderer.prototype.initColumns = function () {
        this.formatters = [];
        this.colorState = {};
        for (var colIndex = 0; colIndex < this.table.columns.length; colIndex++) {
            var column = this.table.columns[colIndex];
            column.title = column.text;
            for (var i = 0; i < this.panel.styles.length; i++) {
                var style = this.panel.styles[i];
                var regex = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].stringToJsRegex(style.pattern);
                if (column.text.match(regex)) {
                    column.style = style;
                    if (style.alias) {
                        column.title = column.text.replace(regex, style.alias);
                    }
                    break;
                }
            }
            this.formatters[colIndex] = this.createColumnFormatter(column);
        }
    };
    TableRenderer.prototype.getColorForValue = function (value, style) {
        if (!style.thresholds) {
            return null;
        }
        for (var i = style.thresholds.length; i > 0; i--) {
            if (value >= style.thresholds[i - 1]) {
                return style.colors[i];
            }
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.first(style.colors);
    };
    TableRenderer.prototype.defaultCellFormatter = function (v, style) {
        if (v === null || v === void 0 || v === undefined) {
            return '';
        }
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(v)) {
            v = v.join(', ');
        }
        if (style && style.sanitize) {
            return this.sanitize(v);
        }
        else {
            return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.escape(v);
        }
    };
    TableRenderer.prototype.createColumnFormatter = function (column) {
        var _this = this;
        if (!column.style) {
            return this.defaultCellFormatter;
        }
        if (column.style.type === 'hidden') {
            return function (v) {
                return undefined;
            };
        }
        if (column.style.type === 'date') {
            return function (v) {
                if (v === undefined || v === null) {
                    return '-';
                }
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(v)) {
                    v = v[0];
                }
                var date = moment__WEBPACK_IMPORTED_MODULE_1___default()(v);
                if (_this.isUtc) {
                    date = date.utc();
                }
                return date.format(column.style.dateFormat);
            };
        }
        if (column.style.type === 'string') {
            return function (v) {
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(v)) {
                    v = v.join(', ');
                }
                var mappingType = column.style.mappingType || 0;
                if (mappingType === 1 && column.style.valueMaps) {
                    for (var i = 0; i < column.style.valueMaps.length; i++) {
                        var map = column.style.valueMaps[i];
                        if (v === null) {
                            if (map.value === 'null') {
                                return map.text;
                            }
                            continue;
                        }
                        // Allow both numeric and string values to be mapped
                        if ((!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(v) && Number(map.value) === Number(v)) || map.value === v) {
                            _this.setColorState(v, column.style);
                            return _this.defaultCellFormatter(map.text, column.style);
                        }
                    }
                }
                if (mappingType === 2 && column.style.rangeMaps) {
                    for (var i = 0; i < column.style.rangeMaps.length; i++) {
                        var map = column.style.rangeMaps[i];
                        if (v === null) {
                            if (map.from === 'null' && map.to === 'null') {
                                return map.text;
                            }
                            continue;
                        }
                        if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {
                            _this.setColorState(v, column.style);
                            return _this.defaultCellFormatter(map.text, column.style);
                        }
                    }
                }
                if (v === null || v === void 0) {
                    return '-';
                }
                _this.setColorState(v, column.style);
                return _this.defaultCellFormatter(v, column.style);
            };
        }
        if (column.style.type === 'number') {
            var valueFormatter_1 = app_core_utils_kbn__WEBPACK_IMPORTED_MODULE_2__["default"].valueFormats[column.unit || column.style.unit];
            return function (v) {
                if (v === null || v === void 0) {
                    return '-';
                }
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(v) || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(v)) {
                    return _this.defaultCellFormatter(v, column.style);
                }
                _this.setColorState(v, column.style);
                return valueFormatter_1(v, column.style.decimals, null);
            };
        }
        return function (value) {
            return _this.defaultCellFormatter(value, column.style);
        };
    };
    TableRenderer.prototype.setColorState = function (value, style) {
        if (!style.colorMode) {
            return;
        }
        if (value === null || value === void 0 || lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(value)) {
            return;
        }
        var numericValue = Number(value);
        if (isNaN(numericValue)) {
            return;
        }
        this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);
    };
    TableRenderer.prototype.renderRowVariables = function (rowIndex) {
        var scopedVars = {};
        var cellVariable;
        var row = this.table.rows[rowIndex];
        for (var i = 0; i < row.length; i++) {
            cellVariable = "__cell_" + i;
            scopedVars[cellVariable] = { value: row[i] };
        }
        return scopedVars;
    };
    TableRenderer.prototype.formatColumnValue = function (colIndex, value) {
        return this.formatters[colIndex] ? this.formatters[colIndex](value) : value;
    };
    TableRenderer.prototype.renderCell = function (columnIndex, rowIndex, value, addWidthHack) {
        if (addWidthHack === void 0) { addWidthHack = false; }
        value = this.formatColumnValue(columnIndex, value);
        var column = this.table.columns[columnIndex];
        var style = '';
        var cellClasses = [];
        var cellClass = '';
        if (this.colorState.cell) {
            style = ' style="background-color:' + this.colorState.cell + '"';
            cellClasses.push('table-panel-color-cell');
            this.colorState.cell = null;
        }
        else if (this.colorState.value) {
            style = ' style="color:' + this.colorState.value + '"';
            this.colorState.value = null;
        }
        // because of the fixed table headers css only solution
        // there is an issue if header cell is wider the cell
        // this hack adds header content to cell (not visible)
        var columnHtml = '';
        if (addWidthHack) {
            columnHtml = '<div class="table-panel-width-hack">' + this.table.columns[columnIndex].title + '</div>';
        }
        if (value === undefined) {
            style = ' style="display:none;"';
            column.hidden = true;
        }
        else {
            column.hidden = false;
        }
        if (column.hidden === true) {
            return '';
        }
        if (column.style && column.style.preserveFormat) {
            cellClasses.push('table-panel-cell-pre');
        }
        if (column.style && column.style.link) {
            // Render cell as link
            var scopedVars = this.renderRowVariables(rowIndex);
            scopedVars['__cell'] = { value: value };
            var cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);
            var cellLinkTooltip = this.templateSrv.replace(column.style.linkTooltip, scopedVars);
            var cellTarget = column.style.linkTargetBlank ? '_blank' : '';
            cellClasses.push('table-panel-cell-link');
            columnHtml += "\n        <a href=\"" + cellLink + "\" target=\"" + cellTarget + "\" data-link-tooltip data-original-title=\"" + cellLinkTooltip + "\" data-placement=\"right\"" + style + ">\n          " + value + "\n        </a>\n      ";
        }
        else {
            columnHtml += value;
        }
        if (column.filterable) {
            cellClasses.push('table-panel-cell-filterable');
            columnHtml += "\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\n           data-row=\"" + rowIndex + "\" data-column=\"" + columnIndex + "\" data-operator=\"!=\">\n          <i class=\"fa fa-search-minus\"></i>\n        </a>\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\n           data-row=\"" + rowIndex + "\" data-column=\"" + columnIndex + "\" data-operator=\"=\">\n          <i class=\"fa fa-search-plus\"></i>\n        </a>";
        }
        if (cellClasses.length) {
            cellClass = ' class="' + cellClasses.join(' ') + '"';
        }
        columnHtml = '<td' + cellClass + style + '>' + columnHtml + '</td>';
        return columnHtml;
    };
    TableRenderer.prototype.render = function (page) {
        var pageSize = this.panel.pageSize || 100;
        var startPos = page * pageSize;
        var endPos = Math.min(startPos + pageSize, this.table.rows.length);
        var html = '';
        var rowClasses = [];
        var rowClass = '';
        for (var y = startPos; y < endPos; y++) {
            var row = this.table.rows[y];
            var cellHtml = '';
            var rowStyle = '';
            for (var i = 0; i < this.table.columns.length; i++) {
                cellHtml += this.renderCell(i, y, row[i], y === startPos);
            }
            if (this.colorState.row) {
                rowStyle = ' style="background-color:' + this.colorState.row + '"';
                rowClasses.push('table-panel-color-row');
                this.colorState.row = null;
            }
            if (rowClasses.length) {
                rowClass = ' class="' + rowClasses.join(' ') + '"';
            }
            html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';
        }
        return html;
    };
    TableRenderer.prototype.render_values = function () {
        var rows = [];
        for (var y = 0; y < this.table.rows.length; y++) {
            var row = this.table.rows[y];
            var newRow = [];
            for (var i = 0; i < this.table.columns.length; i++) {
                newRow.push(this.formatColumnValue(i, row[i]));
            }
            rows.push(newRow);
        }
        return {
            columns: this.table.columns,
            rows: rows,
        };
    };
    return TableRenderer;
}());



/***/ }),

/***/ "./public/app/plugins/panel/table/transformers.ts":
/*!********************************************************!*\
  !*** ./public/app/plugins/panel/table/transformers.ts ***!
  \********************************************************/
/*! exports provided: transformers, transformDataToTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformers", function() { return transformers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformDataToTable", function() { return transformDataToTable; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core_utils_flatten__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/flatten */ "./public/app/core/utils/flatten.ts");
/* harmony import */ var _core_time_series2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/time_series2 */ "./public/app/core/time_series2.ts");
/* harmony import */ var _core_table_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/table_model */ "./public/app/core/table_model.ts");




var transformers = {};
transformers['timeseries_to_rows'] = {
    description: 'Time series to rows',
    getColumns: function () {
        return [];
    },
    transform: function (data, panel, model) {
        model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];
        for (var i = 0; i < data.length; i++) {
            var series = data[i];
            for (var y = 0; y < series.datapoints.length; y++) {
                var dp = series.datapoints[y];
                model.rows.push([dp[1], series.target, dp[0]]);
            }
        }
    },
};
transformers['timeseries_to_columns'] = {
    description: 'Time series to columns',
    getColumns: function () {
        return [];
    },
    transform: function (data, panel, model) {
        model.columns.push({ text: 'Time', type: 'date' });
        // group by time
        var points = {};
        for (var i = 0; i < data.length; i++) {
            var series = data[i];
            model.columns.push({ text: series.target });
            for (var y = 0; y < series.datapoints.length; y++) {
                var dp = series.datapoints[y];
                var timeKey = dp[1].toString();
                if (!points[timeKey]) {
                    points[timeKey] = { time: dp[1] };
                    points[timeKey][i] = dp[0];
                }
                else {
                    points[timeKey][i] = dp[0];
                }
            }
        }
        for (var time in points) {
            var point = points[time];
            var values = [point.time];
            for (var i = 0; i < data.length; i++) {
                var value = point[i];
                values.push(value);
            }
            model.rows.push(values);
        }
    },
};
transformers['timeseries_aggregations'] = {
    description: 'Time series aggregations',
    getColumns: function () {
        return [
            { text: 'Avg', value: 'avg' },
            { text: 'Min', value: 'min' },
            { text: 'Max', value: 'max' },
            { text: 'Total', value: 'total' },
            { text: 'Current', value: 'current' },
            { text: 'Count', value: 'count' },
        ];
    },
    transform: function (data, panel, model) {
        var i, y;
        model.columns.push({ text: 'Metric' });
        for (i = 0; i < panel.columns.length; i++) {
            model.columns.push({ text: panel.columns[i].text });
        }
        for (i = 0; i < data.length; i++) {
            var series = new _core_time_series2__WEBPACK_IMPORTED_MODULE_2__["default"]({
                datapoints: data[i].datapoints,
                alias: data[i].target,
            });
            series.getFlotPairs('connected');
            var cells = [series.alias];
            for (y = 0; y < panel.columns.length; y++) {
                cells.push(series.stats[panel.columns[y].value]);
            }
            model.rows.push(cells);
        }
    },
};
transformers['annotations'] = {
    description: 'Annotations',
    getColumns: function () {
        return [];
    },
    transform: function (data, panel, model) {
        model.columns.push({ text: 'Time', type: 'date' });
        model.columns.push({ text: 'Title' });
        model.columns.push({ text: 'Text' });
        model.columns.push({ text: 'Tags' });
        if (!data || !data.annotations || data.annotations.length === 0) {
            return;
        }
        for (var i = 0; i < data.annotations.length; i++) {
            var evt = data.annotations[i];
            model.rows.push([evt.time, evt.title, evt.text, evt.tags]);
        }
    },
};
transformers['table'] = {
    description: 'Table',
    getColumns: function (data) {
        if (!data || data.length === 0) {
            return [];
        }
        // Single query returns data columns as is
        if (data.length === 1) {
            return data[0].columns.slice();
        }
        // Track column indexes: name -> index
        var columnNames = {};
        // Union of all columns
        var columns = data.reduce(function (acc, series) {
            series.columns.forEach(function (col) {
                var text = col.text;
                if (columnNames[text] === undefined) {
                    columnNames[text] = acc.length;
                    acc.push(col);
                }
            });
            return acc;
        }, []);
        return columns;
    },
    transform: function (data, panel, model) {
        if (!data || data.length === 0) {
            return;
        }
        var noTableIndex = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.findIndex(data, function (d) { return d.type !== 'table'; });
        if (noTableIndex > -1) {
            throw {
                message: "Result of query #" + String.fromCharCode(65 + noTableIndex) + " is not in table format, try using another transform.",
            };
        }
        // Single query returns data columns and rows as is
        if (data.length === 1) {
            model.columns = data[0].columns.slice();
            model.rows = data[0].rows.slice();
            return;
        }
        // Track column indexes of union: name -> index
        var columnNames = {};
        // Union of all non-value columns
        var columnsUnion = data.reduce(function (acc, series) {
            series.columns.forEach(function (col) {
                var text = col.text;
                if (columnNames[text] === undefined) {
                    columnNames[text] = acc.length;
                    acc.push(col);
                }
            });
            return acc;
        }, []);
        // Map old column index to union index per series, e.g.,
        // given columnNames {A: 0, B: 1} and
        // data [{columns: [{ text: 'A' }]}, {columns: [{ text: 'B' }]}] => [[0], [1]]
        var columnIndexMapper = data.map(function (series) { return series.columns.map(function (col) { return columnNames[col.text]; }); });
        // Flatten rows of all series and adjust new column indexes
        var flattenedRows = data.reduce(function (acc, series, seriesIndex) {
            var mapper = columnIndexMapper[seriesIndex];
            series.rows.forEach(function (row) {
                var alteredRow = [];
                // Shifting entries according to index mapper
                mapper.forEach(function (to, from) {
                    alteredRow[to] = row[from];
                });
                acc.push(alteredRow);
            });
            return acc;
        }, []);
        // Returns true if both rows have matching non-empty fields as well as matching
        // indexes where one field is empty and the other is not
        function areRowsMatching(columns, row, otherRow) {
            var foundFieldToMatch = false;
            for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
                if (row[columnIndex] !== undefined && otherRow[columnIndex] !== undefined) {
                    if (row[columnIndex] !== otherRow[columnIndex]) {
                        return false;
                    }
                }
                else if (row[columnIndex] === undefined || otherRow[columnIndex] === undefined) {
                    foundFieldToMatch = true;
                }
            }
            return foundFieldToMatch;
        }
        // Merge rows that have same values for columns
        var mergedRows = {};
        var compactedRows = flattenedRows.reduce(function (acc, row, rowIndex) {
            if (!mergedRows[rowIndex]) {
                // Look from current row onwards
                var offset = rowIndex + 1;
                // More than one row can be merged into current row
                while (offset < flattenedRows.length) {
                    // Find next row that could be merged
                    var match = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.findIndex(flattenedRows, function (otherRow) { return areRowsMatching(columnsUnion, row, otherRow); }, offset);
                    if (match > -1) {
                        var matchedRow = flattenedRows[match];
                        // Merge values from match into current row if there is a gap in the current row
                        for (var columnIndex = 0; columnIndex < columnsUnion.length; columnIndex++) {
                            if (row[columnIndex] === undefined && matchedRow[columnIndex] !== undefined) {
                                row[columnIndex] = matchedRow[columnIndex];
                            }
                        }
                        // Don't visit this row again
                        mergedRows[match] = matchedRow;
                        // Keep looking for more rows to merge
                        offset = match + 1;
                    }
                    else {
                        // No match found, stop looking
                        break;
                    }
                }
                acc.push(row);
            }
            return acc;
        }, []);
        model.columns = columnsUnion;
        model.rows = compactedRows;
    },
};
transformers['json'] = {
    description: 'JSON Data',
    getColumns: function (data) {
        if (!data || data.length === 0) {
            return [];
        }
        var names = {};
        for (var i = 0; i < data.length; i++) {
            var series = data[i];
            if (series.type !== 'docs') {
                continue;
            }
            // only look at 100 docs
            var maxDocs = Math.min(series.datapoints.length, 100);
            for (var y = 0; y < maxDocs; y++) {
                var doc = series.datapoints[y];
                var flattened = Object(_core_utils_flatten__WEBPACK_IMPORTED_MODULE_1__["default"])(doc, null);
                for (var propName in flattened) {
                    names[propName] = true;
                }
            }
        }
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.map(names, function (value, key) {
            return { text: key, value: key };
        });
    },
    transform: function (data, panel, model) {
        var i, y, z;
        for (var _i = 0, _a = panel.columns; _i < _a.length; _i++) {
            var column = _a[_i];
            var tableCol = { text: column.text };
            // if filterable data then set columns to filterable
            if (data.length > 0 && data[0].filterable) {
                tableCol.filterable = true;
            }
            model.columns.push(tableCol);
        }
        if (model.columns.length === 0) {
            model.columns.push({ text: 'JSON' });
        }
        for (i = 0; i < data.length; i++) {
            var series = data[i];
            for (y = 0; y < series.datapoints.length; y++) {
                var dp = series.datapoints[y];
                var values = [];
                if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(dp) && panel.columns.length > 0) {
                    var flattened = Object(_core_utils_flatten__WEBPACK_IMPORTED_MODULE_1__["default"])(dp, null);
                    for (z = 0; z < panel.columns.length; z++) {
                        values.push(flattened[panel.columns[z].value]);
                    }
                }
                else {
                    values.push(JSON.stringify(dp));
                }
                model.rows.push(values);
            }
        }
    },
};
function transformDataToTable(data, panel) {
    var model = new _core_table_model__WEBPACK_IMPORTED_MODULE_3__["default"]();
    if (!data || data.length === 0) {
        return model;
    }
    var transformer = transformers[panel.transform];
    if (!transformer) {
        throw { message: 'Transformer ' + panel.transform + ' not found' };
    }
    transformer.transform(data, panel, model);
    return model;
}



/***/ }),

/***/ "./public/app/plugins/panel/text/module.ts":
/*!*************************************************!*\
  !*** ./public/app/plugins/panel/text/module.ts ***!
  \*************************************************/
/*! exports provided: TextPanelCtrl, PanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextPanelCtrl", function() { return TextPanelCtrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return TextPanelCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/plugins/sdk */ "./public/app/plugins/sdk.ts");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remarkable */ "./node_modules/remarkable/index.js");
/* harmony import */ var remarkable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(remarkable__WEBPACK_IMPORTED_MODULE_3__);




var TextPanelCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TextPanelCtrl, _super);
    /** @ngInject */
    function TextPanelCtrl($scope, $injector, templateSrv, $sce) {
        var _this = _super.call(this, $scope, $injector) || this;
        _this.templateSrv = templateSrv;
        _this.$sce = $sce;
        // Set and populate defaults
        _this.panelDefaults = {
            mode: 'markdown',
            content: '# title',
        };
        lodash__WEBPACK_IMPORTED_MODULE_1___default.a.defaults(_this.panel, _this.panelDefaults);
        _this.events.on('init-edit-mode', _this.onInitEditMode.bind(_this));
        _this.events.on('refresh', _this.onRefresh.bind(_this));
        _this.events.on('render', _this.onRender.bind(_this));
        $scope.$watch('ctrl.panel.content', lodash__WEBPACK_IMPORTED_MODULE_1___default.a.throttle(function () {
            _this.render();
        }, 1000));
        return _this;
    }
    TextPanelCtrl.prototype.onInitEditMode = function () {
        this.addEditorTab('Options', 'public/app/plugins/panel/text/editor.html');
        this.editorTabIndex = 1;
        if (this.panel.mode === 'text') {
            this.panel.mode = 'markdown';
        }
    };
    TextPanelCtrl.prototype.onRefresh = function () {
        this.render();
    };
    TextPanelCtrl.prototype.onRender = function () {
        if (this.panel.mode === 'markdown') {
            this.renderMarkdown(this.panel.content);
        }
        else if (this.panel.mode === 'html') {
            this.updateContent(this.panel.content);
        }
        this.renderingCompleted();
    };
    TextPanelCtrl.prototype.renderText = function (content) {
        content = content
            .replace(/&/g, '&amp;')
            .replace(/>/g, '&gt;')
            .replace(/</g, '&lt;')
            .replace(/\n/g, '<br/>');
        this.updateContent(content);
    };
    TextPanelCtrl.prototype.renderMarkdown = function (content) {
        var _this = this;
        if (!this.remarkable) {
            this.remarkable = new remarkable__WEBPACK_IMPORTED_MODULE_3___default.a();
        }
        this.$scope.$applyAsync(function () {
            _this.updateContent(_this.remarkable.render(content));
        });
    };
    TextPanelCtrl.prototype.updateContent = function (html) {
        try {
            this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));
        }
        catch (e) {
            console.log('Text panel error: ', e);
            this.content = this.$sce.trustAsHtml(html);
        }
    };
    TextPanelCtrl.templateUrl = "public/app/plugins/panel/text/module.html";
    TextPanelCtrl.scrollable = true;
    return TextPanelCtrl;
}(app_plugins_sdk__WEBPACK_IMPORTED_MODULE_2__["PanelCtrl"]));




/***/ }),

/***/ "./public/app/plugins/panel/unknown/module.ts":
/*!****************************************************!*\
  !*** ./public/app/plugins/panel/unknown/module.ts ***!
  \****************************************************/
/*! exports provided: UnknownPanelCtrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownPanelCtrl", function() { return UnknownPanelCtrl; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/features/panel/panel_ctrl */ "./public/app/features/panel/panel_ctrl.ts");


var UnknownPanelCtrl = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](UnknownPanelCtrl, _super);
    /** @ngInject */
    function UnknownPanelCtrl($scope, $injector) {
        return _super.call(this, $scope, $injector) || this;
    }
    UnknownPanelCtrl.templateUrl = 'public/app/plugins/panel/unknown/module.html';
    return UnknownPanelCtrl;
}(app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_1__["PanelCtrl"]));



/***/ }),

/***/ "./public/app/plugins/sdk.ts":
/*!***********************************!*\
  !*** ./public/app/plugins/sdk.ts ***!
  \***********************************/
/*! exports provided: PanelCtrl, MetricsPanelCtrl, QueryCtrl, alertTab, loadPluginCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! app/features/panel/panel_ctrl */ "./public/app/features/panel/panel_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelCtrl", function() { return app_features_panel_panel_ctrl__WEBPACK_IMPORTED_MODULE_0__["PanelCtrl"]; });

/* harmony import */ var app_features_panel_metrics_panel_ctrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! app/features/panel/metrics_panel_ctrl */ "./public/app/features/panel/metrics_panel_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MetricsPanelCtrl", function() { return app_features_panel_metrics_panel_ctrl__WEBPACK_IMPORTED_MODULE_1__["MetricsPanelCtrl"]; });

/* harmony import */ var app_features_panel_query_ctrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! app/features/panel/query_ctrl */ "./public/app/features/panel/query_ctrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCtrl", function() { return app_features_panel_query_ctrl__WEBPACK_IMPORTED_MODULE_2__["QueryCtrl"]; });

/* harmony import */ var app_features_alerting_AlertTabCtrl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! app/features/alerting/AlertTabCtrl */ "./public/app/features/alerting/AlertTabCtrl.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "alertTab", function() { return app_features_alerting_AlertTabCtrl__WEBPACK_IMPORTED_MODULE_3__["alertTab"]; });

/* harmony import */ var app_features_plugins_plugin_loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! app/features/plugins/plugin_loader */ "./public/app/features/plugins/plugin_loader.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadPluginCss", function() { return app_features_plugins_plugin_loader__WEBPACK_IMPORTED_MODULE_4__["loadPluginCss"]; });









/***/ }),

/***/ "./public/vendor/flot/jquery.flot.crosshair.js":
/*!*****************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.crosshair.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Flot plugin for showing crosshairs when the mouse hovers over the plot.

Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.

The plugin supports these options:

	crosshair: {
		mode: null or "x" or "y" or "xy"
		color: color
		lineWidth: number
	}

Set the mode to one of "x", "y" or "xy". The "x" mode enables a vertical
crosshair that lets you trace the values on the x axis, "y" enables a
horizontal crosshair and "xy" enables them both. "color" is the color of the
crosshair (default is "rgba(170, 0, 0, 0.80)"), "lineWidth" is the width of
the drawn lines (default is 1).

The plugin also adds four public methods:

  - setCrosshair( pos )

    Set the position of the crosshair. Note that this is cleared if the user
    moves the mouse. "pos" is in coordinates of the plot and should be on the
    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple
    axes), which is coincidentally the same format as what you get from a
    "plothover" event. If "pos" is null, the crosshair is cleared.

  - clearCrosshair()

    Clear the crosshair.

  - lockCrosshair(pos)

    Cause the crosshair to lock to the current location, no longer updating if
    the user moves the mouse. Optionally supply a position (passed on to
    setCrosshair()) to move it to.

    Example usage:

	var myFlot = $.plot( $("#graph"), ..., { crosshair: { mode: "x" } } };
	$("#graph").bind( "plothover", function ( evt, position, item ) {
		if ( item ) {
			// Lock the crosshair to the data point being hovered
			myFlot.lockCrosshair({
				x: item.datapoint[ 0 ],
				y: item.datapoint[ 1 ]
			});
		} else {
			// Return normal crosshair operation
			myFlot.unlockCrosshair();
		}
	});

  - unlockCrosshair()

    Free the crosshair to move again after locking it.
*/

(function ($) {
    var options = {
        crosshair: {
            mode: null, // one of null, "x", "y" or "xy",
            color: "rgba(170, 0, 0, 0.80)",
            lineWidth: 1
        }
    };
    
    function init(plot) {
        // position of crosshair in pixels
        var crosshair = { x: -1, y: -1, locked: false };

        plot.setCrosshair = function setCrosshair(pos) {
            if (!pos)
                crosshair.x = -1;
            else {
                var o = plot.p2c(pos);
                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));
                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));
            }
            
            plot.triggerRedrawOverlay();
        };
        
        plot.clearCrosshair = plot.setCrosshair; // passes null for pos
        
        plot.lockCrosshair = function lockCrosshair(pos) {
            if (pos)
                plot.setCrosshair(pos);
            crosshair.locked = true;
        };

        plot.unlockCrosshair = function unlockCrosshair() {
            crosshair.locked = false;
        };

        function onMouseOut(e) {
            if (crosshair.locked)
                return;

            if (crosshair.x != -1) {
                crosshair.x = -1;
                plot.triggerRedrawOverlay();
            }
        }

        function onMouseMove(e) {
            if (crosshair.locked)
                return;
                
            if (plot.getSelection && plot.getSelection()) {
                crosshair.x = -1; // hide the crosshair while selecting
                return;
            }
                
            var offset = plot.offset();
            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));
            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));
            plot.triggerRedrawOverlay();
        }
        
        plot.hooks.bindEvents.push(function (plot, eventHolder) {
            if (!plot.getOptions().crosshair.mode)
                return;

            eventHolder.mouseout(onMouseOut);
            eventHolder.mousemove(onMouseMove);
        });

        plot.hooks.drawOverlay.push(function (plot, ctx) {
            var c = plot.getOptions().crosshair;
            if (!c.mode)
                return;

            var plotOffset = plot.getPlotOffset();
            
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            if (crosshair.x != -1) {
                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;

                ctx.strokeStyle = c.color;
                ctx.lineWidth = c.lineWidth;
                ctx.lineJoin = "round";

                ctx.beginPath();
                if (c.mode.indexOf("x") != -1) {
                    var drawX = Math.floor(crosshair.x) + adj;
                    ctx.moveTo(drawX, 0);
                    ctx.lineTo(drawX, plot.height());
                }
                if (c.mode.indexOf("y") != -1) {
                    var drawY = Math.floor(crosshair.y) + adj;
                    ctx.moveTo(0, drawY);
                    ctx.lineTo(plot.width(), drawY);
                }
                ctx.stroke();
            }
            ctx.restore();
        });

        plot.hooks.shutdown.push(function (plot, eventHolder) {
            eventHolder.unbind("mouseout", onMouseOut);
            eventHolder.unbind("mousemove", onMouseMove);
        });
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'crosshair',
        version: '1.0'
    });
})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.dashes.js":
/*!**************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.dashes.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * jQuery.flot.dashes
 *
 * options = {
 *   series: {
 *     dashes: {
 *
 *       // show
 *       // default: false
 *       // Whether to show dashes for the series.
 *       show: <boolean>,
 *
 *       // lineWidth
 *       // default: 2
 *       // The width of the dashed line in pixels.
 *       lineWidth: <number>,
 *
 *       // dashLength
 *       // default: 10
 *       // Controls the length of the individual dashes and the amount of
 *       // space between them.
 *       // If this is a number, the dashes and spaces will have that length.
 *       // If this is an array, it is read as [ dashLength, spaceLength ]
 *       dashLength: <number> or <array[2]>
 *     }
 *   }
 * }
 */
(function($){

  function init(plot) {

    plot.hooks.processDatapoints.push(function(plot, series, datapoints) {

      if (!series.dashes.show) return;

      plot.hooks.draw.push(function(plot, ctx) {

        var plotOffset = plot.getPlotOffset(),
          axisx = series.xaxis,
          axisy = series.yaxis;

        function plotDashes(xoffset, yoffset) {

          var points = datapoints.points,
            ps = datapoints.pointsize,
            prevx = null,
            prevy = null,
            dashRemainder = 0,
            dashOn = true,
            dashOnLength,
            dashOffLength;

          if (series.dashes.dashLength[0]) {
            dashOnLength = series.dashes.dashLength[0];
            if (series.dashes.dashLength[1]) {
              dashOffLength = series.dashes.dashLength[1];
            } else {
              dashOffLength = dashOnLength;
            }
          } else {
            dashOffLength = dashOnLength = series.dashes.dashLength;
          }

          ctx.beginPath();

          for (var i = ps; i < points.length; i += ps) {

            var x1 = points[i - ps],
              y1 = points[i - ps + 1],
              x2 = points[i],
              y2 = points[i + 1];

            if (x1 == null || x2 == null) continue;

            // clip with ymin
            if (y1 <= y2 && y1 < axisy.min) {
              if (y2 < axisy.min) continue;   // line segment is outside
              // compute new intersection point
              x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
              y1 = axisy.min;
            } else if (y2 <= y1 && y2 < axisy.min) {
              if (y1 < axisy.min) continue;
              x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
              y2 = axisy.min;
            }

            // clip with ymax
            if (y1 >= y2 && y1 > axisy.max) {
              if (y2 > axisy.max) continue;
              x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
              y1 = axisy.max;
            } else if (y2 >= y1 && y2 > axisy.max) {
              if (y1 > axisy.max) continue;
              x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
              y2 = axisy.max;
            }

            // clip with xmin
            if (x1 <= x2 && x1 < axisx.min) {
              if (x2 < axisx.min) continue;
              y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
              x1 = axisx.min;
            } else if (x2 <= x1 && x2 < axisx.min) {
              if (x1 < axisx.min) continue;
              y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
              x2 = axisx.min;
            }

            // clip with xmax
            if (x1 >= x2 && x1 > axisx.max) {
              if (x2 > axisx.max) continue;
              y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
              x1 = axisx.max;
            } else if (x2 >= x1 && x2 > axisx.max) {
              if (x1 > axisx.max) continue;
              y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
              x2 = axisx.max;
            }

            if (x1 != prevx || y1 != prevy) {
              ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);
            }

            var ax1 = axisx.p2c(x1) + xoffset,
              ay1 = axisy.p2c(y1) + yoffset,
              ax2 = axisx.p2c(x2) + xoffset,
              ay2 = axisy.p2c(y2) + yoffset,
              dashOffset;

            function lineSegmentOffset(segmentLength) {

              var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));

              if (c <= segmentLength) {
                return {
                  deltaX: ax2 - ax1,
                  deltaY: ay2 - ay1,
                  distance: c,
                  remainder: segmentLength - c
                }
              } else {
                var xsign = ax2 > ax1 ? 1 : -1,
                  ysign = ay2 > ay1 ? 1 : -1;
                return {
                  deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),
                  deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),
                  distance: segmentLength,
                  remainder: 0
                };
              }
            }
            //-end lineSegmentOffset

            do {

              dashOffset = lineSegmentOffset(
                dashRemainder > 0 ? dashRemainder :
                  dashOn ? dashOnLength : dashOffLength);

              if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {
                if (dashOn) {
                  ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);
                } else {
                  ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);
                }
              }

              dashOn = !dashOn;
              dashRemainder = dashOffset.remainder;
              ax1 += dashOffset.deltaX;
              ay1 += dashOffset.deltaY;

            } while (dashOffset.distance > 0);

            prevx = x2;
            prevy = y2;
          }

          ctx.stroke();
        }
        //-end plotDashes

        ctx.save();
        ctx.translate(plotOffset.left, plotOffset.top);
        ctx.lineJoin = 'round';

        var lw = series.dashes.lineWidth,
          sw = series.shadowSize;

        // FIXME: consider another form of shadow when filling is turned on
        if (lw > 0 && sw > 0) {
          // draw shadow as a thick and thin line with transparency
          ctx.lineWidth = sw;
          ctx.strokeStyle = "rgba(0,0,0,0.1)";
          // position shadow at angle from the mid of line
          var angle = Math.PI/18;
          plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));
          ctx.lineWidth = sw/2;
          plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));
        }

        ctx.lineWidth = lw;
        ctx.strokeStyle = series.color;

        if (lw > 0) {
          plotDashes(0, 0);
        }

        ctx.restore();

      });
      //-end draw hook

    });
    //-end processDatapoints hook

  }
  //-end init

  $.plot.plugins.push({
    init: init,
    options: {
      series: {
        dashes: {
          show: false,
          lineWidth: 2,
          dashLength: 10
        }
      }
    },
    name: 'dashes',
    version: '0.1'
  });

})(jQuery)


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.fillbelow.js":
/*!*****************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.fillbelow.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function($) {
    "use strict";

    var options = {
        series: {
            fillBelowTo: null
        }
    };

    function init(plot) {
        function findBelowSeries( series, allseries ) {

            var i;

            for ( i = 0; i < allseries.length; ++i ) {
                if ( allseries[ i ].id === series.fillBelowTo ) {
                    return allseries[ i ];
                }
            }

            return null;
        }

        /* top and bottom doesn't actually matter for this, we're just using it to help make this easier to think about */
        /* this is a vector cross product operation */
        function segmentIntersection(top_left_x, top_left_y, top_right_x, top_right_y, bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y) {
            var top_delta_x, top_delta_y, bottom_delta_x, bottom_delta_y,
                s, t;

            top_delta_x = top_right_x - top_left_x;
            top_delta_y = top_right_y - top_left_y;
            bottom_delta_x = bottom_right_x - bottom_left_x;
            bottom_delta_y = bottom_right_y - bottom_left_y;

            s = (
                (-top_delta_y * (top_left_x - bottom_left_x)) + (top_delta_x * (top_left_y - bottom_left_y))
            ) / (
                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y
            );

            t = (
                (bottom_delta_x * (top_left_y - bottom_left_y)) - (bottom_delta_y * (top_left_x - bottom_left_x))
            ) / (
                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y
            );

            // Collision detected
            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
                return [
                    top_left_x + (t * top_delta_x), // X
                    top_left_y + (t * top_delta_y) // Y
                ];
            }

            // No collision
            return null;
        }

        function plotDifferenceArea(plot, ctx, series) {
            if ( series.fillBelowTo === null ) {
                return;
            }

            var otherseries,

                ps,
                points,

                otherps,
                otherpoints,

                plotOffset,
                fillStyle;

            function openPolygon(x, y) {
                ctx.beginPath();
                ctx.moveTo(
                    series.xaxis.p2c(x) + plotOffset.left,
                    series.yaxis.p2c(y) + plotOffset.top
                );

            }

            function closePolygon() {
                ctx.closePath();
                ctx.fill();
            }

            function validateInput() {
                if (points.length/ps !== otherpoints.length/otherps) {
                    console.error("Refusing to graph inconsistent number of points");
                    return false;
                }

                var i;
                for (i = 0; i < (points.length / ps); i++) {
                    if (
                        points[i * ps] !== null &&
                        otherpoints[i * otherps] !== null &&
                        points[i * ps] !== otherpoints[i * otherps]
                    ) {
                        console.error("Refusing to graph points without matching value");
                        return false;
                    }
                }

                return true;
            }

            function findNextStart(start_i, end_i) {
                console.assert(end_i > start_i, "expects the end index to be greater than the start index");

                var start = (
                        start_i === 0 ||
                        points[start_i - 1] === null ||
                        otherpoints[start_i - 1] === null
                    ),
                    equal = false,
                    i,
                    intersect;

                for (i = start_i; i < end_i; i++) {
                    // Take note of null points
                    if (
                        points[(i * ps) + 1] === null ||
                        otherpoints[(i * ps) + 1] === null
                    ) {
                        equal = false;
                        start = true;
                    }

                    // Take note of equal points
                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {
                        equal = true;
                        start = false;
                    }


                    else if (points[(i * ps) + 1] > otherpoints[(i * otherps) + 1]) {
                        // If we begin above the desired point
                        if (start) {
                            openPolygon(points[i * ps], points[(i * ps) + 1]);
                        }

                        // If an equal point preceeds this, start the polygon at that equal point
                        else if (equal) {
                            openPolygon(points[(i - 1) * ps], points[((i - 1) * ps) + 1]);
                        }

                        // Otherwise, find the intersection point, and start it there
                        else {
                            intersect = intersectionPoint(i);
                            openPolygon(intersect[0], intersect[1]);
                        }

                        topTraversal(i, end_i);
                        return;
                    }

                    // If we go below equal, equal at any preceeding point is irrelevant
                    else {
                        start = false;
                        equal = false;
                    }
                }
            }

            function intersectionPoint(right_i) {
                console.assert(right_i > 0, "expects the second point in the series line segment");

                var i, intersect;

                for (i = 1; i < (otherpoints.length/otherps); i++) {
                    intersect = segmentIntersection(
                        points[(right_i - 1) * ps], points[((right_i - 1) * ps) + 1],
                        points[right_i * ps], points[(right_i * ps) + 1],

                        otherpoints[(i - 1) * otherps], otherpoints[((i - 1) * otherps) + 1],
                        otherpoints[i * otherps], otherpoints[(i * otherps) + 1]
                    );

                    if (intersect !== null) {
                        return intersect;
                    }
                }

                console.error("intersectionPoint() should only be called when an intersection happens");
            }

            function bottomTraversal(start_i, end_i) {
                console.assert(start_i >= end_i, "the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)");

                var i;

                for (i = start_i; i >= end_i; i--) {
                    ctx.lineTo(
                        otherseries.xaxis.p2c(otherpoints[i * otherps]) + plotOffset.left,
                        otherseries.yaxis.p2c(otherpoints[(i * otherps) + 1]) + plotOffset.top
                    );
                }

                closePolygon();
            }

            function topTraversal(start_i, end_i) {
                console.assert(start_i <= end_i, "the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)");

                var i,
                    intersect;

                for (i = start_i; i < end_i; i++) {
                    if (points[(i * ps) + 1] === null && i > start_i) {
                        bottomTraversal(i - 1, start_i);
                        findNextStart(i, end_i);
                        return;
                    }

                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {
                        bottomTraversal(i, start_i);
                        findNextStart(i, end_i);
                        return;
                    }

                    else if (points[(i * ps) + 1] < otherpoints[(i * otherps) + 1]) {
                        intersect = intersectionPoint(i);
                        ctx.lineTo(
                            series.xaxis.p2c(intersect[0]) + plotOffset.left,
                            series.yaxis.p2c(intersect[1]) + plotOffset.top
                        );
                        bottomTraversal(i, start_i);
                        findNextStart(i, end_i);
                        return;

                    }

                    else {
                        ctx.lineTo(
                            series.xaxis.p2c(points[i * ps]) + plotOffset.left,
                            series.yaxis.p2c(points[(i * ps) + 1]) + plotOffset.top
                        );
                    }
                }

                bottomTraversal(end_i, start_i);
            }


            // Begin processing

            otherseries = findBelowSeries( series, plot.getData() );

            if ( !otherseries ) {
                return;
            }

            ps = series.datapoints.pointsize;
            points = series.datapoints.points;
            otherps = otherseries.datapoints.pointsize;
            otherpoints = otherseries.datapoints.points;
            plotOffset = plot.getPlotOffset();

            if (!validateInput()) {
                return;
            }


            // Flot's getFillStyle() should probably be exposed somewhere
            fillStyle = $.color.parse(series.color);
            fillStyle.a = 0.4;
            fillStyle.normalize();
            ctx.fillStyle = fillStyle.toString();


            // Begin recursive bi-directional traversal
            findNextStart(0, points.length/ps);
        }

        plot.hooks.drawSeries.push(plotDifferenceArea);
    }

    $.plot.plugins.push({
        init: init,
        options: options,
        name: "fillbelow",
        version: "0.1.0"
    });

})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.gauge.js":
/*!*************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.gauge.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * jquery.flot.gauge v1.1.0 *
 *
 * Flot plugin for rendering gauge charts.
 *
 * Copyright (c) 2015 @toyoty99.
 * Licensed under the MIT license.
 */

/**
 * @module flot.gauge
 */
(function($) {


    /**
     * Gauge class
     *
     * @class Gauge
     */
    var Gauge = (function() {
        /**
         * context of canvas
         *
         * @property context
         * @type Object
         */
        var context;
        /**
         * placeholder of canvas
         *
         * @property placeholder
         * @type Object
         */
        var placeholder;
        /**
         * options of plot
         *
         * @property options
         * @type Object
         */
        var options;
        /**
         * options of gauge
         *
         * @property gaugeOptions
         * @type Object
         */
        var gaugeOptions;
        /**
         * data series
         *
         * @property series
         * @type Array
         */
        var series;
        /**
         * logger
         *
         * @property logger
         * @type Object
         */
        var logger;

        /**
         * constructor
         *
         * @class Gauge
         * @constructor
         * @param  {Object} gaugeOptions gauge options
         */
        var Gauge = function(plot, ctx) {
            context = ctx;
            placeholder = plot.getPlaceholder();
            options = plot.getOptions();
            gaugeOptions = options.series.gauges;
            series = plot.getData();
            logger = getLogger(gaugeOptions.debug);
        }

        /**
         * calculate layout
         *
         * @method calculateLayout
         * @return the calculated layout properties
         */
        Gauge.prototype.calculateLayout = function() {

            var canvasWidth = placeholder.width();
            var canvasHeight = placeholder.height();



            // calculate cell size
            var columns = Math.min(series.length, gaugeOptions.layout.columns);
            var rows = Math.ceil(series.length / columns);



            var margin = gaugeOptions.layout.margin;
            var hMargin = gaugeOptions.layout.hMargin;
            var vMargin = gaugeOptions.layout.vMargin;
            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;
            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;
            if (gaugeOptions.layout.square) {
                var cell = Math.min(cellWidth, cellHeight);
                cellWidth = cell;
                cellHeight = cell;
            }



            // calculate 'auto' values
            calculateAutoValues(gaugeOptions, cellWidth);

            // calculate maximum radius
            var cellMargin = gaugeOptions.cell.margin;
            var labelMargin = 0;
            var labelFontSize = 0;
            if (gaugeOptions.label.show) {
                labelMargin = gaugeOptions.label.margin;
                labelFontSize = gaugeOptions.label.font.size;
            }
            var valueMargin = 0;
            var valueFontSize = 0;
            if (gaugeOptions.value.show) {
                valueMargin = gaugeOptions.value.margin;
                valueFontSize = gaugeOptions.value.font.size;
            }
            var thresholdWidth = 0;
            if (gaugeOptions.threshold.show) {
                thresholdWidth = gaugeOptions.threshold.width;
            }
            var thresholdLabelMargin = 0;
            var thresholdLabelFontSize = 0;
            if (gaugeOptions.threshold.label.show) {
                thresholdLabelMargin = gaugeOptions.threshold.label.margin;
                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;
            }

            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;

            var startAngle = gaugeOptions.gauge.startAngle;
            var endAngle = gaugeOptions.gauge.endAngle;
            var dAngle = (endAngle - startAngle) / 100;
            var heightRatioV = -1;
            for (var a = startAngle; a < endAngle; a += dAngle) {
                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));
            }
            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));
            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);
            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {
                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);
            }
            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;

            var radius = Math.min(maxRadiusH, maxRadiusV);


            var width = gaugeOptions.gauge.width;
            if (width >= radius) {
                width = Math.max(3, radius / 3);
            }


            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;
            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));

            return {
                canvasWidth: canvasWidth,
                canvasHeight: canvasHeight,
                margin: margin,
                hMargin: hMargin,
                vMargin: vMargin,
                columns: columns,
                rows: rows,
                cellWidth: cellWidth,
                cellHeight: cellHeight,
                cellMargin: cellMargin,
                labelMargin: labelMargin,
                labelFontSize: labelFontSize,
                valueMargin: valueMargin,
                valueFontSize: valueFontSize,
                width: width,
                radius: radius,
                thresholdWidth: thresholdWidth,
                thresholdLabelMargin: thresholdLabelMargin,
                thresholdLabelFontSize: thresholdLabelFontSize,
                gaugeOuterHeight: gaugeOuterHeight
            };
        }

        /**
         * calculate the values which are set as 'auto'
         *
         * @method calculateAutoValues
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Number} cellWidth the width of cell
         */
        function calculateAutoValues(gaugeOptionsi, cellWidth) {

            if (gaugeOptionsi.gauge.width === "auto") {
                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);
            }
            if (gaugeOptionsi.label.margin === "auto") {
                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);
            }
            if (gaugeOptionsi.label.font.size === "auto") {
                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);
            }
            if (gaugeOptionsi.value.margin === "auto") {
                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);
            }
            if (gaugeOptionsi.value.font.size === "auto") {
                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);
            }
            if (gaugeOptionsi.threshold.width === "auto") {
                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);
            }
            if (gaugeOptionsi.threshold.label.margin === "auto") {
                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);
            }
            if (gaugeOptionsi.threshold.label.font.size === "auto") {
                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);
            }

        }
        Gauge.prototype.calculateAutoValues = calculateAutoValues;

        /**
         * calculate the layout of the cell inside
         *
         * @method calculateCellLayout
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Number} cellWidth the width of cell
         * @param  {Number} i the index of the series
         * @return the calculated cell layout properties
         */
        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {

            // calculate top, left and center
            var c = col(layout.columns, i);
            var r = row(layout.columns, i);
            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;
            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;
            var cx = x + (layout.cellWidth / 2);
            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth
                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;
            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;
            var offsetY = 0;
            if (gaugeOptionsi.cell.vAlign === "middle") {
                offsetY = (blank / 2);
            } else if (gaugeOptionsi.cell.vAlign === "bottom") {
                offsetY = blank;
            }
            cy += offsetY;

            return {
                col: c,
                row: r,
                x: x,
                y: y,
                offsetY: offsetY,
                cellWidth: layout.cellWidth,
                cellHeight: layout.cellHeight,
                cellMargin: layout.cellMargin,
                cx: cx,
                cy: cy
            }
        }

        /**
         * draw the background of chart
         *
         * @method drawBackground
         * @param  {Object} layout the layout properties
         */
        Gauge.prototype.drawBackground = function(layout) {

            if (!gaugeOptions.frame.show) {
                return;
            }
            context.save();
            context.strokeStyle = options.grid.borderColor;
            context.lineWidth = options.grid.borderWidth;
            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);
            if (options.grid.backgroundColor) {
                context.fillStyle = options.grid.backgroundColor;
                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);
            }
            context.restore();
        }

        /**
         * draw the background of cell
         *
         * @method drawCellBackground
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} cellLayout the cell layout properties
         */
        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {

            context.save();
            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.show && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {
                context.strokeStyle = gaugeOptionsi.cell.border.color;
                context.lineWidth = gaugeOptionsi.cell.border.width;
                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);
            }
            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {
                context.fillStyle = gaugeOptionsi.cell.background.color;
                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);
            }
            context.restore();
        }

        /**
         * draw the gauge
         *
         * @method drawGauge
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         * @param  {String} label the label of data
         * @param  {Number} data the value of the gauge
         */
        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {


            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;


            // draw gauge frame
            drawArcWithShadow(
                cellLayout.cx, // center x
                cellLayout.cy, // center y
                layout.radius,
                layout.width,
                toRad(gaugeOptionsi.gauge.startAngle),
                toRad(gaugeOptionsi.gauge.endAngle),
                gaugeOptionsi.gauge.border.color,      // line color
                gaugeOptionsi.gauge.border.width,      // line width
                gaugeOptionsi.gauge.background.color,  // fill color
                blur);

            // draw gauge
            var c1 = getColor(gaugeOptionsi, data);
            var a2 = calculateAngle(gaugeOptionsi, layout, data);
            drawArcWithShadow(
                cellLayout.cx, // center x
                cellLayout.cy, // center y
                layout.radius - 1,
                layout.width - 2,
                toRad(gaugeOptionsi.gauge.startAngle),
                toRad(a2),
                c1,           // line color
                1,            // line width
                c1,           // fill color
                blur);
        }

        /**
         * decide the color of the data from the threshold options
         *
         * @method getColor
         * @private
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Number} data the value of the gauge
         */
        function getColor(gaugeOptionsi, data) {
            var color;
            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {
                var threshold = gaugeOptionsi.threshold.values[i];
                color = threshold.color;
                if (data < threshold.value) {
                    break;
                }
            }
            return color;
        }

        /**
         * calculate the angle of the data
         *
         * @method calculateAngle
         * @private
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Number} data the value of the gauge
         */
        function calculateAngle(gaugeOptionsi, layout, data) {
            var a =
                gaugeOptionsi.gauge.startAngle
                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)
                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));

            if (a < gaugeOptionsi.gauge.startAngle) {
                a = gaugeOptionsi.gauge.startAngle;
            } else if (a > gaugeOptionsi.gauge.endAngle) {
                a = gaugeOptionsi.gauge.endAngle;
            }
            return a;
        }

        /**
         * draw the arc of the threshold
         *
         * @method drawThreshold
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         */
        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {

            var a1 = gaugeOptionsi.gauge.startAngle;
            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {
                var threshold = gaugeOptionsi.threshold.values[i];
                c1 = threshold.color;
                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);
                drawArc(
                    context,
                    cellLayout.cx, // center x
                    cellLayout.cy, // center y
                    layout.radius + layout.thresholdWidth,
                    layout.thresholdWidth - 2,
                    toRad(a1),
                    toRad(a2),
                    c1,           // line color
                    1,            // line width
                    c1);          // fill color
                a1 = a2;
            }
        }

        /**
         * draw an arc with a shadow
         *
         * @method drawArcWithShadow
         * @private
         * @param  {Number} cx the x position of the center
         * @param  {Number} cy the y position of the center
         * @param  {Number} r the radius of an arc
         * @param  {Number} w the width of an arc
         * @param  {Number} rd1 the start angle of an arc in radians
         * @param  {Number} rd2 the end angle of an arc in radians
         * @param  {String} lc the color of a line
         * @param  {Number} lw the widht of a line
         * @param  {String} fc the fill color  of an arc
         * @param  {Number} blur the shdow blur
         */
        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {
            if (rd1 === rd2) {
                return;
            }
            context.save();

            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);

            if (blur) {
                drawArc(context, cx, cy, r, w, rd1, rd2);
                context.clip();
                context.shadowOffsetX = 0;
                context.shadowOffsetY = 0;
                context.shadowBlur = 10;
                context.shadowColor = "gray";
                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);
            }
            context.restore();
        }

        /**
         * draw the label of the gauge
         *
         * @method drawLable
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         * @param  {Number} i the index of the series
         * @param  {Object} item the item of the series
         */
        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {

            drawText(
                cellLayout.cx,
                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,
                "flotGagueLabel" + i,
                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,
                gaugeOptionsi.label);
        }

        /**
         * draw the value of the gauge
         *
         * @method drawValue
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         * @param  {Number} i the index of the series
         * @param  {Object} item the item of the series
         */
        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {

            drawText(
                cellLayout.cx,
                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),
                "flotGagueValue" + i,
                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,
                gaugeOptionsi.value);
        }

        /**
         * draw the values of the threshold
         *
         * @method drawThresholdValues
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         * @param  {Number} i the index of the series
         */
        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {

            // min, max
            drawThresholdValue(gaugeOptionsi, layout, cellLayout, "Min" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);
            drawThresholdValue(gaugeOptionsi, layout, cellLayout, "Max" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);
            // threshold values
            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {
                var threshold = gaugeOptionsi.threshold.values[j];
                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {
                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);
                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + "_" + j, threshold.value, a);
                }
            }
        }

        /**
         * draw the value of the threshold
         *
         * @method drawThresholdValue
         * @param  {Object} gaugeOptionsi the options of the gauge
         * @param  {Object} layout the layout properties
         * @param  {Object} cellLayout the cell layout properties
         * @param  {Number} i the index of the series
         * @param  {Number} value the value of the threshold
         * @param  {Number} a the angle of the value drawn
         */
        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {
            drawText(
                cellLayout.cx
                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)
                        * Math.cos(toRad(a))),
                cellLayout.cy
                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)
                        * Math.sin(toRad(a))),
                "flotGagueThresholdValue" + i,
                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,
                gaugeOptionsi.threshold.label,
                a);
        }

        /**
         * draw a text
         *
         * the textOptions is assumed as follows:
         *
         *   textOptions: {
         *       background: {
         *           color: null,
         *           opacity: 0
         *       },
         *       font: {
         *           size: "auto"
         *           family: "\"ＭＳ ゴシック\",sans-serif"
         *       },
         *       color: null
         *   }
         *
         * @method drawText
         * @private
         * @param  {Number} x the x position of the text drawn (left top)
         * @param  {Number} y the y position of the text drawn (left top)
         * @param  {String} id the id of the dom element
         * @param  {String} text the text drawn
         * @param  {Object} textOptions the option of the text
         * @param  {Number} [a] the angle of the value drawn
         */
        function drawText(x, y, id, text, textOptions, a) {
            var span = $("." + id, placeholder);
            var exists = span.length;
            if (!exists) {
                span = $("<span></span>")
                span.attr("id", id);
                span.css("position", "absolute");
                span.css("top", y + "px");
                if (textOptions.font.size) {
                    span.css("font-size", textOptions.font.size + "px");
                }
                if (textOptions.font.family) {
                    span.css("font-family", textOptions.font.family);
                }
                if (textOptions.color) {
                    span.css("color", textOptions.color);
                }
                if (textOptions.background.color) {
                    span.css("background-color", textOptions.background.color);
                }
                if (textOptions.background.opacity) {
                    span.css("opacity", textOptions.background.opacity);
                }
                placeholder.append(span);
            }
            span.text(text);
            // after append, readjust the left position
            span.css("left", x + "px"); // for redraw, resetting the left position is needed here
            span.css("left", (parseInt(span.css("left")) - (span.width()/ 2)) + "px");

            // at last, set angle
            if (!exists && a) {
                span.css("top", (parseInt(span.css("top")) - (span.height()/ 2)) + "px");
                span.css("transform", "rotate(" + ((180 * a) + 90) + "deg)"); // not supported for ie8
            }
        }

        return Gauge;
    })();
    /**
     * get a instance of Logger
     *
     * @method  getLogger
     * @for flot.gauge
     * @private
     * @param  {Object} debugOptions the options of debug
     */
    function getLogger(debugOptions) {
        return typeof Logger !== "undefined" ? new Logger(debugOptions) : null;
    }

    /**
     * calculate the index of columns for the specified data
     *
     * @method col
     * @for flot.gauge
     * @param  {Number} columns the number of columns
     * @param  {Number} i       the index of the series
     * @return the index of columns
     */
    function col(columns, i) {
        return i % columns;
    }

    /**
     * calculate the index of rows for the specified data
     *
     * @method row
     * @for flot.gauge
     * @param  {Number} columns the number of rows
     * @param  {Number} i       the index of the series
     * @return the index of rows
     */
    function row(columns, i) {
        return Math.floor(i / columns);
    }

    /**
     * calculate the angle in radians
     *
     * internally, use a number without PI (0 - 2).
     * so, in this function, multiply PI
     *
     * @method toRad
     * @for flot.gauge
     * @param  {Number} a the number of angle without PI
     * @return the angle in radians
     */
    function toRad(a) {
        return a * Math.PI;
    }

    /**
     * draw an arc
     *
     * @method drawArc
     * @for flot.gauge
     * @param  {Object} context the context of canvas
     * @param  {Number} cx the x position of the center
     * @param  {Number} cy the y position of the center
     * @param  {Number} r the radius of an arc
     * @param  {Number} w the width of an arc
     * @param  {Number} rd1 the start angle of an arc in radians
     * @param  {Number} rd2 the end angle of an arc in radians
     * @param  {String} lc the color of a line
     * @param  {Number} lw the widht of a line
     * @param  {String} fc the fill color  of an arc
     */
    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {
        if (rd1 === rd2) {
            return;
        }
        var counterClockwise = false;
        context.save();
        context.beginPath();
        context.arc(cx, cy, r, rd1, rd2, counterClockwise);
        context.lineTo(cx + (r - w) * Math.cos(rd2),
                       cy + (r - w) * Math.sin(rd2));
        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);
        context.closePath();
        if (lw) {
            context.lineWidth = lw;
        }
        if (lc) {
            context.strokeStyle = lc;
            context.stroke();
        }
        if (fc) {
            context.fillStyle = fc;
            context.fill();
        }
        context.restore();
    }

    /**
     * initialize plugin
     *
     * @method init
     * @for flot.gauge
     * @private
     * @param  {Object} plot a instance of plot
     */
    function init (plot) {
        // add processOptions hook
        plot.hooks.processOptions.push(function(plot, options) {
            var logger = getLogger(options.series.gauges.debug);




            // turn 'grid' and 'legend' off
            if (options.series.gauges.show) {
                options.grid.show = false;
                options.legend.show = false;
            }

            // sort threshold
            var thresholds = options.series.gauges.threshold.values;

            thresholds.sort(function(a, b) {
                if (a.value < b.value) {
                    return -1;
                } else if (a.value > b.value) {
                    return 1;
                } else {
                    return 0;
                }
            });



        });

        // add draw hook
        plot.hooks.draw.push(function(plot, context) {
            var options = plot.getOptions();
            var gaugeOptions = options.series.gauges;

            var logger = getLogger(gaugeOptions.debug);


            if (!gaugeOptions.show) {
                return;
            }

            var series = plot.getData();

            if (!series || !series.length) {
                return; // if no series were passed
            }

            var gauge = new Gauge(plot, context);

            // calculate layout
            var layout = gauge.calculateLayout();

            // debug layout
            if (gaugeOptions.debug.layout) {

            }

            // draw background
            gauge.drawBackground(layout)

            // draw cells (label, gauge, value, threshold)
            for (var i = 0; i < series.length; i++) {
                var item = series[i];

                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);
                if (item.gauges) {
                    // re-calculate 'auto' values
                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);
                }

                // calculate cell layout
                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);

                // draw cell background
                gauge.drawCellBackground(gaugeOptionsi, cellLayout)
                // debug layout
                if (gaugeOptionsi.debug.layout) {

                }
                // draw label
                if (gaugeOptionsi.label.show) {
                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);
                }
                // draw gauge
                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);
                // draw threshold
                if (gaugeOptionsi.threshold.show) {
                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);
                }
                if (gaugeOptionsi.threshold.label.show) {
                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)
                }
                // draw value
                if (gaugeOptionsi.value.show) {
                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);
                }
            }
        });
    }

    /**
     * [defaults description]
     *
     * @property defaults
     * @type {Object}
     */
    var defaults = {
        series: {
            gauges: {
                debug: {
                    log: false,
                    layout: false,
                    alert: false
                },
                show: false,
                layout: {
                    margin: 5,
                    columns: 3,
                    hMargin: 5,
                    vMargin: 5,
                    square: false
                },
                frame: {
                    show: true
                },
                cell: {
                    background: {
                        color: null
                    },
                    border: {
                        show: true,
                        color: "black",
                        width: 1
                    },
                    margin: 5,
                    vAlign: "middle" // 'top' or 'middle' or 'bottom'
                },
                gauge: {
                    width: "auto", // a specified number, or 'auto'
                    startAngle: 0.9, // 0 - 2 factor of the radians
                    endAngle: 2.1, // 0 - 2 factor of the radians
                    min: 0,
                    max: 100,
                    background: {
                        color: "white"
                    },
                    border: {
                        color: "lightgray",
                        width: 2
                    },
                    shadow: {
                        show: true,
                        blur: 5
                    }
                },
                label: {
                    show: true,
                    margin: "auto", // a specified number, or 'auto'
                    background: {
                        color: null,
                        opacity: 0
                    },
                    font: {
                        size: "auto", // a specified number, or 'auto'
                        family: "sans-serif"
                    },
                    color: null,
                    formatter: function(label, value) {
                        return label;
                    }
                },
                value: {
                    show: true,
                    margin: "auto", // a specified number, or 'auto'
                    background: {
                        color: null,
                        opacity: 0
                    },
                    font: {
                        size: "auto", // a specified number, or 'auto'
                        family: "sans-serif"
                    },
                    color: null,
                    formatter: function(label, value) {
                        return parseInt(value);
                    }
                },
                threshold: {
                    show: true,
                    width: "auto", // a specified number, or 'auto'
                    label: {
                        show: true,
                        margin: "auto", // a specified number, or 'auto'
                        background: {
                            color: null,
                            opacity: 0
                        },
                        font: {
                            size: "auto", // a specified number, or 'auto'
                            family: ",sans-serif"
                        },
                        color: null,
                        formatter: function(value) {
                            return value;
                        }
                    },
                    values: [
                        {
                            value: 50,
                            color: "lightgreen"
                        }, {
                            value: 80,
                            color: "yellow"
                        }, {
                            value: 100,
                            color: "red"
                        }
                    ]
                }
            }
        }
    };

    // register the gauge plugin
    $.plot.plugins.push({
        init: init,
        options: defaults,
        name: "gauge",
        version: "1.1.0"
    });

})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.pie.js":
/*!***********************************************!*\
  !*** ./public/vendor/flot/jquery.flot.pie.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Flot plugin for rendering pie charts.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

The plugin assumes that each series has a single data value, and that each
value is a positive integer or zero.  Negative numbers don't make sense for a
pie chart, and have unpredictable results.  The values do NOT need to be
passed in as percentages; the plugin will calculate the total and per-slice
percentages internally.

* Created by Brian Medendorp

* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars

The plugin supports these options:

	series: {
		pie: {
			show: true/false
			radius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'
			innerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect
			startAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result
			tilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)
			offset: {
				top: integer value to move the pie up or down
				left: integer value to move the pie left or right, or 'auto'
			},
			stroke: {
				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')
				width: integer pixel width of the stroke
			},
			label: {
				show: true/false, or 'auto'
				formatter:  a user-defined function that modifies the text/style of the label text
				radius: 0-1 for percentage of fullsize, or a specified pixel length
				background: {
					color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')
					opacity: 0-1
				},
				threshold: 0-1 for the percentage value at which to hide labels (if they're too small)
			},
			combine: {
				threshold: 0-1 for the percentage value at which to combine slices (if they're too small)
				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined
				label: any text value of what the combined slice should be labeled
			}
			highlight: {
				opacity: 0-1
			}
		}
	}

More detail and specific examples can be found in the included HTML file.

*/

(function($) {

	// Maximum redraw attempts when fitting labels within the plot

	var REDRAW_ATTEMPTS = 10;

	// Factor by which to shrink the pie when fitting labels within the plot

	var REDRAW_SHRINK = 0.95;

	function init(plot) {

		var canvas = null,
			target = null,
			maxRadius = null,
			centerLeft = null,
			centerTop = null,
			processed = false,
			ctx = null;

		// interactive variables

		var highlights = [];

		// add hook to determine if pie plugin in enabled, and then perform necessary operations

		plot.hooks.processOptions.push(function(plot, options) {
			if (options.series.pie.show) {

				options.grid.show = false;

				// set labels.show

				if (options.series.pie.label.show == "auto") {
					if (options.legend.show) {
						options.series.pie.label.show = false;
					} else {
						options.series.pie.label.show = true;
					}
				}

				// set radius

				if (options.series.pie.radius == "auto") {
					if (options.series.pie.label.show) {
						options.series.pie.radius = 3/4;
					} else {
						options.series.pie.radius = 1;
					}
				}

				// ensure sane tilt

				if (options.series.pie.tilt > 1) {
					options.series.pie.tilt = 1;
				} else if (options.series.pie.tilt < 0) {
					options.series.pie.tilt = 0;
				}
			}
		});

		plot.hooks.bindEvents.push(function(plot, eventHolder) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				if (options.grid.hoverable) {
					eventHolder.unbind("mousemove").mousemove(onMouseMove);
				}
				if (options.grid.clickable) {
					eventHolder.unbind("click").click(onClick);
				}
			}
		});

		plot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				processDatapoints(plot, series, data, datapoints);
			}
		});

		plot.hooks.drawOverlay.push(function(plot, octx) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				drawOverlay(plot, octx);
			}
		});

		plot.hooks.draw.push(function(plot, newCtx) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				draw(plot, newCtx);
			}
		});

		function processDatapoints(plot, series, datapoints) {
			if (!processed)	{
				processed = true;
				canvas = plot.getCanvas();
				target = $(canvas).parent();
				options = plot.getOptions();
				plot.setData(combine(plot.getData()));
			}
		}

		function combine(data) {

			var total = 0,
				combined = 0,
				numCombined = 0,
				color = options.series.pie.combine.color,
				newdata = [];

			// Fix up the raw data from Flot, ensuring the data is numeric

			for (var i = 0; i < data.length; ++i) {

				var value = data[i].data;

				// If the data is an array, we'll assume that it's a standard
				// Flot x-y pair, and are concerned only with the second value.

				// Note how we use the original array, rather than creating a
				// new one; this is more efficient and preserves any extra data
				// that the user may have stored in higher indexes.

				if ($.isArray(value) && value.length == 1) {
    				value = value[0];
				}

				if ($.isArray(value)) {
					// Equivalent to $.isNumeric() but compatible with jQuery < 1.7
					if (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {
						value[1] = +value[1];
					} else {
						value[1] = 0;
					}
				} else if (!isNaN(parseFloat(value)) && isFinite(value)) {
					value = [1, +value];
				} else {
					value = [1, 0];
				}

				data[i].data = [value];
			}

			// Sum up all the slices, so we can calculate percentages for each

			for (var i = 0; i < data.length; ++i) {
				total += data[i].data[0][1];
			}

			// Count the number of slices with percentages below the combine
			// threshold; if it turns out to be just one, we won't combine.

			for (var i = 0; i < data.length; ++i) {
				var value = data[i].data[0][1];
				if (value / total <= options.series.pie.combine.threshold) {
					combined += value;
					numCombined++;
					if (!color) {
						color = data[i].color;
					}
				}
			}

			for (var i = 0; i < data.length; ++i) {
				var value = data[i].data[0][1];
				if (numCombined < 2 || value / total > options.series.pie.combine.threshold) {
					newdata.push({
						data: [[1, value]],
						color: data[i].color,
						label: data[i].label,
						angle: value * Math.PI * 2 / total,
						percent: value / (total / 100)
					});
				}
			}

			if (numCombined > 1) {
				newdata.push({
					data: [[1, combined]],
					color: color,
					label: options.series.pie.combine.label,
					angle: combined * Math.PI * 2 / total,
					percent: combined / (total / 100)
				});
			}

			return newdata;
		}

		function draw(plot, newCtx) {

			if (!target) {
				return; // if no series were passed
			}

			var canvasWidth = plot.getPlaceholder().width(),
				canvasHeight = plot.getPlaceholder().height(),
				legendWidth = target.children().filter(".legend").children().width() || 0;

			ctx = newCtx;

			// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!

			// When combining smaller slices into an 'other' slice, we need to
			// add a new series.  Since Flot gives plugins no way to modify the
			// list of series, the pie plugin uses a hack where the first call
			// to processDatapoints results in a call to setData with the new
			// list of series, then subsequent processDatapoints do nothing.

			// The plugin-global 'processed' flag is used to control this hack;
			// it starts out false, and is set to true after the first call to
			// processDatapoints.

			// Unfortunately this turns future setData calls into no-ops; they
			// call processDatapoints, the flag is true, and nothing happens.

			// To fix this we'll set the flag back to false here in draw, when
			// all series have been processed, so the next sequence of calls to
			// processDatapoints once again starts out with a slice-combine.
			// This is really a hack; in 0.9 we need to give plugins a proper
			// way to modify series before any processing begins.

			processed = false;

			// calculate maximum radius and center point

			maxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;
			centerTop = canvasHeight / 2 + options.series.pie.offset.top;
			centerLeft = canvasWidth / 2;

			if (options.series.pie.offset.left == "auto") {
				if (options.legend.position.match("w")) {
					centerLeft += legendWidth / 2;
				} else {
					centerLeft -= legendWidth / 2;
				}
			} else {
				centerLeft += options.series.pie.offset.left;
			}

			if (centerLeft < maxRadius) {
				centerLeft = maxRadius;
			} else if (centerLeft > canvasWidth - maxRadius) {
				centerLeft = canvasWidth - maxRadius;
			}

			var slices = plot.getData(),
				attempts = 0;

			// Keep shrinking the pie's radius until drawPie returns true,
			// indicating that all the labels fit, or we try too many times.

			do {
				if (attempts > 0) {
					maxRadius *= REDRAW_SHRINK;
				}
				attempts += 1;
				clear();
				if (options.series.pie.tilt <= 0.8) {
					drawShadow();
				}
			} while (!drawPie() && attempts < REDRAW_ATTEMPTS)

			if (attempts >= REDRAW_ATTEMPTS) {
				clear();
				target.prepend("<div class='error'>Could not draw pie with labels contained inside canvas</div>");
			}

			if (plot.setSeries && plot.insertLegend) {
				plot.setSeries(slices);
				plot.insertLegend();
			}

			// we're actually done at this point, just defining internal functions at this point

			function clear() {
				ctx.clearRect(0, 0, canvasWidth, canvasHeight);
				target.children().filter(".pieLabel, .pieLabelBackground").remove();
			}

			function drawShadow() {

				var shadowLeft = options.series.pie.shadow.left;
				var shadowTop = options.series.pie.shadow.top;
				var edge = 10;
				var alpha = options.series.pie.shadow.alpha;
				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

				if (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {
					return;	// shadow would be outside canvas, so don't draw it
				}

				ctx.save();
				ctx.translate(shadowLeft,shadowTop);
				ctx.globalAlpha = alpha;
				ctx.fillStyle = "#000";

				// center and rotate to starting position

				ctx.translate(centerLeft,centerTop);
				ctx.scale(1, options.series.pie.tilt);

				//radius -= edge;

				for (var i = 1; i <= edge; i++) {
					ctx.beginPath();
					ctx.arc(0, 0, radius, 0, Math.PI * 2, false);
					ctx.fill();
					radius -= i;
				}

				ctx.restore();
			}

			function drawPie() {

				var startAngle = Math.PI * options.series.pie.startAngle;
				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

				// center and rotate to starting position

				ctx.save();
				ctx.translate(centerLeft,centerTop);
				ctx.scale(1, options.series.pie.tilt);
				//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera

				// draw slices

				ctx.save();
				var currentAngle = startAngle;
				for (var i = 0; i < slices.length; ++i) {
					slices[i].startAngle = currentAngle;
					drawSlice(slices[i].angle, slices[i].color, true);
				}
				ctx.restore();

				// draw slice outlines

				if (options.series.pie.stroke.width > 0) {
					ctx.save();
					ctx.lineWidth = options.series.pie.stroke.width;
					currentAngle = startAngle;
					for (var i = 0; i < slices.length; ++i) {
						drawSlice(slices[i].angle, options.series.pie.stroke.color, false);
					}
					ctx.restore();
				}

				// draw donut hole

				drawDonutHole(ctx);

				ctx.restore();

				// Draw the labels, returning true if they fit within the plot

				if (options.series.pie.label.show) {
					return drawLabels();
				} else return true;

				function drawSlice(angle, color, fill) {

					if (angle <= 0 || isNaN(angle)) {
						return;
					}

					if (fill) {
						ctx.fillStyle = color;
					} else {
						ctx.strokeStyle = color;
						ctx.lineJoin = "round";
					}

					ctx.beginPath();
					if (Math.abs(angle - Math.PI * 2) > 0.000000001) {
						ctx.moveTo(0, 0); // Center of the pie
					}

					//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera
					ctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);
					ctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);
					ctx.closePath();
					//ctx.rotate(angle); // This doesn't work properly in Opera
					currentAngle += angle;

					if (fill) {
						ctx.fill();
					} else {
						ctx.stroke();
					}
				}

				function drawLabels() {

					var currentAngle = startAngle;
					var radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;

					for (var i = 0; i < slices.length; ++i) {
						if (slices[i].percent >= options.series.pie.label.threshold * 100) {
							if (!drawLabel(slices[i], currentAngle, i)) {
								return false;
							}
						}
						currentAngle += slices[i].angle;
					}

					return true;

					function drawLabel(slice, startAngle, index) {

						if (slice.data[0][1] == 0) {
							return true;
						}

						// format label text

						var lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;

						if (lf) {
							text = lf(slice.label, slice);
						} else {
							text = slice.label;
						}

						if (plf) {
							text = plf(text, slice);
						}

						var halfAngle = ((startAngle + slice.angle) + startAngle) / 2;
						var x = centerLeft + Math.round(Math.cos(halfAngle) * radius);
						var y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;

						var html = "<span class='pieLabel' id='pieLabel" + index + "' style='position:absolute;top:" + y + "px;left:" + x + "px;'>" + text + "</span>";
						target.append(html);

						var label = target.children("#pieLabel" + index);
						var labelTop = (y - label.height() / 2);
						var labelLeft = (x - label.width() / 2);

						label.css("top", labelTop);
						label.css("left", labelLeft);

						// check to make sure that the label is not outside the canvas

						if (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {
							return false;
						}

						if (options.series.pie.label.background.opacity != 0) {

							// put in the transparent background separately to avoid blended labels and label boxes

							var c = options.series.pie.label.background.color;

							if (c == null) {
								c = slice.color;
							}

							var pos = "top:" + labelTop + "px;left:" + labelLeft + "px;";
							$("<div class='pieLabelBackground' style='position:absolute;width:" + label.width() + "px;height:" + label.height() + "px;" + pos + "background-color:" + c + ";'></div>")
								.css("opacity", options.series.pie.label.background.opacity)
								.insertBefore(label);
						}

						return true;
					} // end individual label function
				} // end drawLabels function
			} // end drawPie function
		} // end draw function

		// Placed here because it needs to be accessed from multiple locations

		function drawDonutHole(layer) {
			if (options.series.pie.innerRadius > 0) {

				// subtract the center

				layer.save();
				var innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;
				layer.globalCompositeOperation = "destination-out"; // this does not work with excanvas, but it will fall back to using the stroke color
				layer.beginPath();
				layer.fillStyle = options.series.pie.stroke.color;
				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);
				layer.fill();
				layer.closePath();
				layer.restore();

				// add inner stroke

				layer.save();
				layer.beginPath();
				layer.strokeStyle = options.series.pie.stroke.color;
				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);
				layer.stroke();
				layer.closePath();
				layer.restore();

				// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.
			}
		}

		//-- Additional Interactive related functions --

		function isPointInPoly(poly, pt) {
			for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)
				((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))
				&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])
				&& (c = !c);
			return c;
		}

		function findNearbySlice(mouseX, mouseY) {

			var slices = plot.getData(),
				options = plot.getOptions(),
				radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,
				x, y;

			for (var i = 0; i < slices.length; ++i) {

				var s = slices[i];

				if (s.pie.show) {

					ctx.save();
					ctx.beginPath();
					ctx.moveTo(0, 0); // Center of the pie
					//ctx.scale(1, options.series.pie.tilt);	// this actually seems to break everything when here.
					ctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);
					ctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);
					ctx.closePath();
					x = mouseX - centerLeft;
					y = mouseY - centerTop;

					if (ctx.isPointInPath) {
						if (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {
							ctx.restore();
							return {
								datapoint: [s.percent, s.data],
								dataIndex: 0,
								series: s,
								seriesIndex: i
							};
						}
					} else {

						// excanvas for IE doesn;t support isPointInPath, this is a workaround.

						var p1X = radius * Math.cos(s.startAngle),
							p1Y = radius * Math.sin(s.startAngle),
							p2X = radius * Math.cos(s.startAngle + s.angle / 4),
							p2Y = radius * Math.sin(s.startAngle + s.angle / 4),
							p3X = radius * Math.cos(s.startAngle + s.angle / 2),
							p3Y = radius * Math.sin(s.startAngle + s.angle / 2),
							p4X = radius * Math.cos(s.startAngle + s.angle / 1.5),
							p4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),
							p5X = radius * Math.cos(s.startAngle + s.angle),
							p5Y = radius * Math.sin(s.startAngle + s.angle),
							arrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],
							arrPoint = [x, y];

						// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?

						if (isPointInPoly(arrPoly, arrPoint)) {
							ctx.restore();
							return {
								datapoint: [s.percent, s.data],
								dataIndex: 0,
								series: s,
								seriesIndex: i
							};
						}
					}

					ctx.restore();
				}
			}

			return null;
		}

		function onMouseMove(e) {
			triggerClickHoverEvent("plothover", e);
		}

		function onClick(e) {
			triggerClickHoverEvent("plotclick", e);
		}

		// trigger click or hover event (they send the same parameters so we share their code)

		function triggerClickHoverEvent(eventname, e) {

			var offset = plot.offset();
			var canvasX = parseInt(e.pageX - offset.left);
			var canvasY =  parseInt(e.pageY - offset.top);
			var item = findNearbySlice(canvasX, canvasY);

			if (options.grid.autoHighlight) {

				// clear auto-highlights

				for (var i = 0; i < highlights.length; ++i) {
					var h = highlights[i];
					if (h.auto == eventname && !(item && h.series == item.series)) {
						unhighlight(h.series);
					}
				}
			}

			// highlight the slice

			if (item) {
				highlight(item.series, eventname);
			}

			// trigger any hover bind events

			var pos = { pageX: e.pageX, pageY: e.pageY };
			target.trigger(eventname, [pos, item]);
		}

		function highlight(s, auto) {
			//if (typeof s == "number") {
			//	s = series[s];
			//}

			var i = indexOfHighlight(s);

			if (i == -1) {
				highlights.push({ series: s, auto: auto });
				plot.triggerRedrawOverlay();
			} else if (!auto) {
				highlights[i].auto = false;
			}
		}

		function unhighlight(s) {
			if (s == null) {
				highlights = [];
				plot.triggerRedrawOverlay();
			}

			//if (typeof s == "number") {
			//	s = series[s];
			//}

			var i = indexOfHighlight(s);

			if (i != -1) {
				highlights.splice(i, 1);
				plot.triggerRedrawOverlay();
			}
		}

		function indexOfHighlight(s) {
			for (var i = 0; i < highlights.length; ++i) {
				var h = highlights[i];
				if (h.series == s)
					return i;
			}
			return -1;
		}

		function drawOverlay(plot, octx) {

			var options = plot.getOptions();

			var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

			octx.save();
			octx.translate(centerLeft, centerTop);
			octx.scale(1, options.series.pie.tilt);

			for (var i = 0; i < highlights.length; ++i) {
				drawHighlight(highlights[i].series);
			}

			drawDonutHole(octx);

			octx.restore();

			function drawHighlight(series) {

				if (series.angle <= 0 || isNaN(series.angle)) {
					return;
				}

				//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();
				octx.fillStyle = "rgba(255, 255, 255, " + options.series.pie.highlight.opacity + ")"; // this is temporary until we have access to parseColor
				octx.beginPath();
				if (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {
					octx.moveTo(0, 0); // Center of the pie
				}
				octx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);
				octx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);
				octx.closePath();
				octx.fill();
			}
		}
	} // end init (plugin body)

	// define pie specific options and their default values

	var options = {
		series: {
			pie: {
				show: false,
				radius: "auto",	// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)
				innerRadius: 0, /* for donut */
				startAngle: 3/2,
				tilt: 1,
				shadow: {
					left: 5,	// shadow left offset
					top: 15,	// shadow top offset
					alpha: 0.02	// shadow alpha
				},
				offset: {
					top: 0,
					left: "auto"
				},
				stroke: {
					color: "#fff",
					width: 1
				},
				label: {
					show: "auto",
					formatter: function(label, slice) {
						return "<div style='font-size:x-small;text-align:center;padding:2px;color:" + slice.color + ";'>" + label + "<br/>" + Math.round(slice.percent) + "%</div>";
					},	// formatter function
					radius: 1,	// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)
					background: {
						color: null,
						opacity: 0
					},
					threshold: 0	// percentage at which to hide the label (i.e. the slice is too narrow)
				},
				combine: {
					threshold: -1,	// percentage at which to combine little slices into one larger slice
					color: null,	// color to give the new slice (auto-generated if null)
					label: "Other"	// label to give the new slice
				},
				highlight: {
					//color: "#fff",		// will add this functionality once parseColor is available
					opacity: 0.5
				}
			}
		}
	};

	$.plot.plugins.push({
		init: init,
		options: options,
		name: "pie",
		version: "1.1"
	});

})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.selection.js":
/*!*****************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.selection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Flot plugin for selecting regions of a plot.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

The plugin supports these options:

selection: {
	mode: null or "x" or "y" or "xy",
	color: color,
	shape: "round" or "miter" or "bevel",
	minSize: number of pixels
}

Selection support is enabled by setting the mode to one of "x", "y" or "xy".
In "x" mode, the user will only be able to specify the x range, similarly for
"y" mode. For "xy", the selection becomes a rectangle where both ranges can be
specified. "color" is color of the selection (if you need to change the color
later on, you can get to it with plot.getOptions().selection.color). "shape"
is the shape of the corners of the selection.

"minSize" is the minimum size a selection can be in pixels. This value can
be customized to determine the smallest size a selection can be and still
have the selection rectangle be displayed. When customizing this value, the
fact that it refers to pixels, not axis units must be taken into account.
Thus, for example, if there is a bar graph in time mode with BarWidth set to 1
minute, setting "minSize" to 1 will not make the minimum selection size 1
minute, but rather 1 pixel. Note also that setting "minSize" to 0 will prevent
"plotunselected" events from being fired when the user clicks the mouse without
dragging.

When selection support is enabled, a "plotselected" event will be emitted on
the DOM element you passed into the plot function. The event handler gets a
parameter with the ranges selected on the axes, like this:

	placeholder.bind( "plotselected", function( event, ranges ) {
		alert("You selected " + ranges.xaxis.from + " to " + ranges.xaxis.to)
		// similar for yaxis - with multiple axes, the extra ones are in
		// x2axis, x3axis, ...
	});

The "plotselected" event is only fired when the user has finished making the
selection. A "plotselecting" event is fired during the process with the same
parameters as the "plotselected" event, in case you want to know what's
happening while it's happening,

A "plotunselected" event with no arguments is emitted when the user clicks the
mouse to remove the selection. As stated above, setting "minSize" to 0 will
destroy this behavior.

The plugin allso adds the following methods to the plot object:

- setSelection( ranges, preventEvent )

  Set the selection rectangle. The passed in ranges is on the same form as
  returned in the "plotselected" event. If the selection mode is "x", you
  should put in either an xaxis range, if the mode is "y" you need to put in
  an yaxis range and both xaxis and yaxis if the selection mode is "xy", like
  this:

	setSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });

  setSelection will trigger the "plotselected" event when called. If you don't
  want that to happen, e.g. if you're inside a "plotselected" handler, pass
  true as the second parameter. If you are using multiple axes, you can
  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of
  xaxis, the plugin picks the first one it sees.

- clearSelection( preventEvent )

  Clear the selection rectangle. Pass in true to avoid getting a
  "plotunselected" event.

- getSelection()

  Returns the current selection in the same format as the "plotselected"
  event. If there's currently no selection, the function returns null.

*/

(function ($) {
    function init(plot) {
        var selection = {
                first: { x: -1, y: -1}, second: { x: -1, y: -1},
                show: false,
                active: false
            };

        // FIXME: The drag handling implemented here should be
        // abstracted out, there's some similar code from a library in
        // the navigation plugin, this should be massaged a bit to fit
        // the Flot cases here better and reused. Doing this would
        // make this plugin much slimmer.
        var savedhandlers = {};

        var mouseUpHandler = null;

        function onMouseMove(e) {
            if (selection.active) {
                updateSelection(e);

                plot.getPlaceholder().trigger("plotselecting", [ getSelection() ]);
            }
        }

        function onMouseDown(e) {
            if (e.which != 1)  // only accept left-click
                return;

            // cancel out any text selections
            document.body.focus();

            // prevent text selection and drag in old-school browsers
            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {
                savedhandlers.onselectstart = document.onselectstart;
                document.onselectstart = function () { return false; };
            }
            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {
                savedhandlers.ondrag = document.ondrag;
                document.ondrag = function () { return false; };
            }

            setSelectionPos(selection.first, e);

            selection.active = true;

            // this is a bit silly, but we have to use a closure to be
            // able to whack the same handler again
            mouseUpHandler = function (e) { onMouseUp(e); };

            $(document).one("mouseup", mouseUpHandler);
        }

        function onMouseUp(e) {
            mouseUpHandler = null;

            // revert drag stuff for old-school browsers
            if (document.onselectstart !== undefined)
                document.onselectstart = savedhandlers.onselectstart;
            if (document.ondrag !== undefined)
                document.ondrag = savedhandlers.ondrag;

            // no more dragging
            selection.active = false;
            updateSelection(e);

            if (selectionIsSane())
                triggerSelectedEvent(e);
            else {
                // this counts as a clear
                plot.getPlaceholder().trigger("plotunselected", [ ]);
                plot.getPlaceholder().trigger("plotselecting", [ null ]);
            }

            setTimeout(function() {
              plot.isSelecting = false;
            }, 10);

            return false;
        }

        function getSelection() {
            if (!selectionIsSane())
                return null;

            if (!selection.show) return null;

            var r = {}, c1 = selection.first, c2 = selection.second;
            var axes = plot.getAxes();
            // look if no axis is used
            var noAxisInUse = true;
            $.each(axes, function (name, axis) {
              if (axis.used) {
                anyUsed = false;
              }
            })

            $.each(axes, function (name, axis) {
                if (axis.used || noAxisInUse) {
                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]);
                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };
                }
            });
            return r;
        }

        function triggerSelectedEvent(event) {
            var r = getSelection();

            // Add ctrlKey and metaKey to event
            r.ctrlKey = event.ctrlKey;
            r.metaKey = event.metaKey;

            plot.getPlaceholder().trigger("plotselected", [ r ]);

            // backwards-compat stuff, to be removed in future
            if (r.xaxis && r.yaxis)
                plot.getPlaceholder().trigger("selected", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);
        }

        function clamp(min, value, max) {
            return value < min ? min: (value > max ? max: value);
        }

        function setSelectionPos(pos, e) {
            var o = plot.getOptions();
            var offset = plot.getPlaceholder().offset();
            var plotOffset = plot.getPlotOffset();
            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());
            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());

            if (o.selection.mode == "y")
                pos.x = pos == selection.first ? 0 : plot.width();

            if (o.selection.mode == "x")
                pos.y = pos == selection.first ? 0 : plot.height();
        }

        function updateSelection(pos) {
            if (pos.pageX == null)
                return;

            setSelectionPos(selection.second, pos);
            if (selectionIsSane()) {
                plot.isSelecting = true;
                selection.show = true;
                plot.triggerRedrawOverlay();
            }
            else
                clearSelection(true);
        }

        function clearSelection(preventEvent) {
            if (selection.show) {
                selection.show = false;
                plot.triggerRedrawOverlay();
                if (!preventEvent)
                    plot.getPlaceholder().trigger("plotunselected", [ ]);
            }
        }

        // function taken from markings support in Flot
        function extractRange(ranges, coord) {
            var axis, from, to, key, axes = plot.getAxes();

            for (var k in axes) {
                axis = axes[k];
                if (axis.direction == coord) {
                    key = coord + axis.n + "axis";
                    if (!ranges[key] && axis.n == 1)
                        key = coord + "axis"; // support x1axis as xaxis
                    if (ranges[key]) {
                        from = ranges[key].from;
                        to = ranges[key].to;
                        break;
                    }
                }
            }

            // backwards-compat stuff - to be removed in future
            if (!ranges[key]) {
                axis = coord == "x" ? plot.getXAxes()[0] : plot.getYAxes()[0];
                from = ranges[coord + "1"];
                to = ranges[coord + "2"];
            }

            // auto-reverse as an added bonus
            if (from != null && to != null && from > to) {
                var tmp = from;
                from = to;
                to = tmp;
            }

            return { from: from, to: to, axis: axis };
        }

        function setSelection(ranges, preventEvent) {
            var axis, range, o = plot.getOptions();

            if (o.selection.mode == "y") {
                selection.first.x = 0;
                selection.second.x = plot.width();
            }
            else {
                range = extractRange(ranges, "x");

                selection.first.x = range.axis.p2c(range.from);
                selection.second.x = range.axis.p2c(range.to);
            }

            if (o.selection.mode == "x") {
                selection.first.y = 0;
                selection.second.y = plot.height();
            }
            else {
                range = extractRange(ranges, "y");

                selection.first.y = range.axis.p2c(range.from);
                selection.second.y = range.axis.p2c(range.to);
            }

            selection.show = true;
            plot.triggerRedrawOverlay();
            if (!preventEvent && selectionIsSane())
                triggerSelectedEvent();
        }

        function selectionIsSane() {
            var minSize = plot.getOptions().selection.minSize;
            return Math.abs(selection.second.x - selection.first.x) >= minSize &&
                Math.abs(selection.second.y - selection.first.y) >= minSize;
        }

        plot.clearSelection = clearSelection;
        plot.setSelection = setSelection;
        plot.getSelection = getSelection;

        plot.hooks.bindEvents.push(function(plot, eventHolder) {
            var o = plot.getOptions();
            if (o.selection.mode != null) {
                eventHolder.mousemove(onMouseMove);
                eventHolder.mousedown(onMouseDown);
            }
        });


        plot.hooks.drawOverlay.push(function (plot, ctx) {
            // draw selection
            if (selection.show && selectionIsSane()) {
                var plotOffset = plot.getPlotOffset();
                var o = plot.getOptions();

                ctx.save();
                ctx.translate(plotOffset.left, plotOffset.top);

                var c = $.color.parse(o.selection.color);

                ctx.strokeStyle = c.scale('a', 0.8).toString();
                ctx.lineWidth = 1;
                ctx.lineJoin = o.selection.shape;
                ctx.fillStyle = c.scale('a', 0.4).toString();

                var x = Math.min(selection.first.x, selection.second.x) + 0.5,
                    y = Math.min(selection.first.y, selection.second.y) + 0.5,
                    w = Math.abs(selection.second.x - selection.first.x) - 1,
                    h = Math.abs(selection.second.y - selection.first.y) - 1;

                ctx.fillRect(x, y, w, h);
                ctx.strokeRect(x, y, w, h);

                ctx.restore();
            }
        });

        plot.hooks.shutdown.push(function (plot, eventHolder) {
            eventHolder.unbind("mousemove", onMouseMove);
            eventHolder.unbind("mousedown", onMouseDown);

            if (mouseUpHandler)
                $(document).unbind("mouseup", mouseUpHandler);
        });

    }

    $.plot.plugins.push({
        init: init,
        options: {
            selection: {
                mode: null, // one of null, "x", "y" or "xy"
                color: "#e8cfac",
                shape: "round", // one of "round", "miter", or "bevel"
                minSize: 5 // minimum number of pixels
            }
        },
        name: 'selection',
        version: '1.1'
    });
})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.stack.js":
/*!*************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.stack.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Flot plugin for stacking data sets rather than overlyaing them.

Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.

The plugin assumes the data is sorted on x (or y if stacking horizontally).
For line charts, it is assumed that if a line has an undefined gap (from a
null point), then the line above it should have the same gap - insert zeros
instead of "null" if you want another behaviour. This also holds for the start
and end of the chart. Note that stacking a mix of positive and negative values
in most instances doesn't make sense (so it looks weird).

Two or more series are stacked when their "stack" attribute is set to the same
key (which can be any number or string or just "true"). To specify the default
stack, you can set the stack option like this:

    series: {
        stack: null/false, true, or a key (number/string)
    }

You can also specify it for a single series, like this:

    $.plot( $("#placeholder"), [{
        data: [ ... ],
        stack: true
    }])

The stacking order is determined by the order of the data series in the array
(later series end up on top of the previous).

Internally, the plugin modifies the datapoints in each series, adding an
offset to the y value. For line series, extra data points are inserted through
interpolation. If there's a second y value, it's also adjusted (e.g for bar
charts or filled areas).

*/

(function ($) {
    var options = {
        series: { stack: null } // or number/string
    };

    function init(plot) {
        function findMatchingSeries(s, allseries) {
            var res = null;
            for (var i = 0; i < allseries.length; ++i) {
                if (s == allseries[i])
                    break;

                if (allseries[i].stack == s.stack)
                    res = allseries[i];
            }

            return res;
        }

        function stackData(plot, s, datapoints) {
            if (s.stack == null || s.stack === false)
                return;

            var other = findMatchingSeries(s, plot.getData());
            if (!other)
                return;

            var ps = datapoints.pointsize,
                points = datapoints.points,
                otherps = other.datapoints.pointsize,
                otherpoints = other.datapoints.points,
                newpoints = [],
                px, py, intery, qx, qy, bottom,
                withlines = s.lines.show,
                horizontal = s.bars.horizontal,
                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),
                withsteps = withlines && s.lines.steps,
                keyOffset = horizontal ? 1 : 0,
                accumulateOffset = horizontal ? 0 : 1,
                i = 0, j = 0, l, m;

            while (true) {
                if (i >= points.length && j >= otherpoints.length)
                    break;

                l = newpoints.length;

                if (i < points.length && points[i] == null) {
                    // copy gaps
                    for (m = 0; m < ps; ++m)
                        newpoints.push(points[i + m]);
                    i += ps;
                }
                else if (i >= points.length) {
                    // take the remaining points from the previous series
                    for (m = 0; m < ps; ++m)
                        newpoints.push(otherpoints[j + m]);
                    if (withbottom)
                        newpoints[l + 2] = otherpoints[j + accumulateOffset];
                    j += otherps;
                }
                else if (j >= otherpoints.length) {
                    // take the remaining points from the current series
                    for (m = 0; m < ps; ++m)
                        newpoints.push(points[i + m]);
                    i += ps;
                }
                else if (j < otherpoints.length && otherpoints[j] == null) {
                    // ignore point
                    j += otherps;
                }
                else {
                    // cases where we actually got two points
                    px = points[i + keyOffset];
                    py = points[i + accumulateOffset];
                    qx = otherpoints[j + keyOffset];
                    qy = otherpoints[j + accumulateOffset];
                    bottom = 0;

                    if (px == qx) {
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);

                        newpoints[l + accumulateOffset] += qy;
                        bottom = qy;

                        i += ps;
                        j += otherps;
                    }
                    else if (px > qx) {
                        // take the point from the previous series so that next series will correctly stack
                        if (i == 0) {
                            for (m = 0; m < ps; ++m)
                                newpoints.push(otherpoints[j + m]);
                            bottom = qy;
                        }
                        // we got past point below, might need to
                        // insert interpolated extra point
                        if (i > 0 && points[i - ps] != null) {
                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);
                            newpoints.push(qx);
                            newpoints.push(intery + qy);
                            for (m = 2; m < ps; ++m)
                                newpoints.push(points[i + m]);
                            bottom = qy;
                        }

                        j += otherps;
                    }
                    else { // px < qx
                        for (m = 0; m < ps; ++m)
                            newpoints.push(points[i + m]);

                        // we might be able to interpolate a point below,
                        // this can give us a better y
                        if (j > 0 && otherpoints[j - otherps] != null)
                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);

                        newpoints[l + accumulateOffset] += bottom;

                        i += ps;
                    }

                    fromgap = false;

                    if (l != newpoints.length && withbottom)
                        newpoints[l + 2] = bottom;
                }

                // maintain the line steps invariant
                if (withsteps && l != newpoints.length && l > 0
                    && newpoints[l] != null
                    && newpoints[l] != newpoints[l - ps]
                    && newpoints[l + 1] != newpoints[l - ps + 1]) {
                    for (m = 0; m < ps; ++m)
                        newpoints[l + ps + m] = newpoints[l + m];
                    newpoints[l + 1] = newpoints[l - ps + 1];
                }
            }

            datapoints.points = newpoints;
        }

        plot.hooks.processDatapoints.push(stackData);
    }

    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'stack',
        version: '1.2'
    });
})(jQuery);


/***/ }),

/***/ "./public/vendor/flot/jquery.flot.stackpercent.js":
/*!********************************************************!*\
  !*** ./public/vendor/flot/jquery.flot.stackpercent.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
    var options = {
        series: {
            stackpercent: null
        } // or number/string
    };

    function init(plot) {

        // will be built up dynamically as a hash from x-value, or y-value if horizontal
        var stackBases = {};
        var processed = false;
        var stackSums = {};

        //set percentage for stacked chart
        function processRawData(plot, series, data, datapoints) {
            if (!processed) {
                processed = true;
                stackSums = getStackSums(plot.getData());
            }
			if (series.stackpercent == true) {
				var num = data.length;
				series.percents = [];
				var key_idx = 0;
				var value_idx = 1;
				if (series.bars && series.bars.horizontal && series.bars.horizontal === true) {
					key_idx = 1;
					value_idx = 0;
				}
				for (var j = 0; j < num; j++) {
					var sum = stackSums[data[j][key_idx] + ""];
					if (sum > 0) {
						series.percents.push(data[j][value_idx] * 100 / sum);
					} else {
						series.percents.push(0);
					}
				}
			}
        }

        //calculate summary
        function getStackSums(_data) {
            var data_len = _data.length;
            var sums = {};
            if (data_len > 0) {
                //caculate summary
                for (var i = 0; i < data_len; i++) {
                    if (_data[i].stackpercent) {
						var key_idx = 0;
						var value_idx = 1;
						if (_data[i].bars && _data[i].bars.horizontal && _data[i].bars.horizontal === true) {
							key_idx = 1;
							value_idx = 0;
						}
                        var num = _data[i].data.length;
                        for (var j = 0; j < num; j++) {
                            var value = 0;
                            if (_data[i].data[j][1] != null) {
                                value = _data[i].data[j][value_idx];
                            }
                            if (sums[_data[i].data[j][key_idx] + ""]) {
                                sums[_data[i].data[j][key_idx] + ""] += value;
                            } else {
                                sums[_data[i].data[j][key_idx] + ""] = value;
                            }

                        }
                    }
                }
            }
            return sums;
        }

        function stackData(plot, s, datapoints) {
            if (!s.stackpercent) return;
            if (!processed) {
                stackSums = getStackSums(plot.getData());
            }
            var newPoints = [];


			var key_idx = 0;
			var value_idx = 1;
			if (s.bars && s.bars.horizontal && s.bars.horizontal === true) {
				key_idx = 1;
				value_idx = 0;
			}

			for (var i = 0; i < datapoints.points.length; i += 3) {
				// note that the values need to be turned into absolute y-values.
				// in other words, if you were to stack (x, y1), (x, y2), and (x, y3),
				// (each from different series, which is where stackBases comes in),
				// you'd want the new points to be (x, y1, 0), (x, y1+y2, y1), (x, y1+y2+y3, y1+y2)
				// generally, (x, thisValue + (base up to this point), + (base up to this point))
				if (!stackBases[datapoints.points[i + key_idx]]) {
					stackBases[datapoints.points[i + key_idx]] = 0;
				}
				newPoints[i + key_idx] = datapoints.points[i + key_idx];
				newPoints[i + value_idx] = datapoints.points[i + value_idx] + stackBases[datapoints.points[i + key_idx]];
				newPoints[i + 2] = stackBases[datapoints.points[i + key_idx]];
				stackBases[datapoints.points[i + key_idx]] += datapoints.points[i + value_idx];
				// change points to percentage values
				// you may need to set yaxis:{ max = 100 }
				if ( stackSums[newPoints[i+key_idx]+""] > 0 ){
					newPoints[i + value_idx] = newPoints[i + value_idx] * 100 / stackSums[newPoints[i + key_idx] + ""];
					newPoints[i + 2] = newPoints[i + 2] * 100 / stackSums[newPoints[i + key_idx] + ""];
				} else {
					newPoints[i + value_idx] = 0;
					newPoints[i + 2] = 0;
				}
			}

            datapoints.points = newPoints;
        }

		plot.hooks.processRawData.push(processRawData);
        plot.hooks.processDatapoints.push(stackData);
    }

    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'stackpercent',
        version: '0.1'
    });
})(jQuery);


/***/ })

}]);
//# sourceMappingURL=2.b5fb99797e8a5be392ce.js.map